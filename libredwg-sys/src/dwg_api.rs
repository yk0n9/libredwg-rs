/* automatically generated by rust-bindgen 0.69.4 */
#![allow(warnings)]

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _CRT_HAS_C11: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const _CRT_INTERNAL_STDIO_SYMBOL_PREFIX: &[u8; 1] = b"\0";
pub const _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION: u32 = 1;
pub const _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR: u32 = 2;
pub const _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS: u32 = 4;
pub const _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 8;
pub const _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS: u32 = 16;
pub const _CRT_INTERNAL_PRINTF_STANDARD_ROUNDING: u32 = 32;
pub const _CRT_INTERNAL_SCANF_SECURECRT: u32 = 1;
pub const _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS: u32 = 2;
pub const _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 4;
pub const BUFSIZ: u32 = 512;
pub const _NSTREAM_: u32 = 512;
pub const _IOB_ENTRIES: u32 = 3;
pub const EOF: i32 = -1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 64;
pub const _IONBF: u32 = 4;
pub const L_tmpnam: u32 = 260;
pub const L_tmpnam_s: u32 = 260;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_SET: u32 = 0;
pub const FILENAME_MAX: u32 = 260;
pub const FOPEN_MAX: u32 = 20;
pub const _SYS_OPEN: u32 = 20;
pub const TMP_MAX: u32 = 2147483647;
pub const TMP_MAX_S: u32 = 2147483647;
pub const _TMP_MAX_S: u32 = 2147483647;
pub const SYS_OPEN: u32 = 20;
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const LIBREDWG_VERSION_MAJOR: u32 = 0;
pub const LIBREDWG_VERSION_MINOR: u32 = 10;
pub const LIBREDWG_VERSION: u32 = 10;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const PRId8: &[u8; 4] = b"hhd\0";
pub const PRId16: &[u8; 3] = b"hd\0";
pub const PRId32: &[u8; 2] = b"d\0";
pub const PRId64: &[u8; 4] = b"lld\0";
pub const PRIdLEAST8: &[u8; 4] = b"hhd\0";
pub const PRIdLEAST16: &[u8; 3] = b"hd\0";
pub const PRIdLEAST32: &[u8; 2] = b"d\0";
pub const PRIdLEAST64: &[u8; 4] = b"lld\0";
pub const PRIdFAST8: &[u8; 4] = b"hhd\0";
pub const PRIdFAST16: &[u8; 2] = b"d\0";
pub const PRIdFAST32: &[u8; 2] = b"d\0";
pub const PRIdFAST64: &[u8; 4] = b"lld\0";
pub const PRIdMAX: &[u8; 4] = b"lld\0";
pub const PRIdPTR: &[u8; 4] = b"lld\0";
pub const PRIi8: &[u8; 4] = b"hhi\0";
pub const PRIi16: &[u8; 3] = b"hi\0";
pub const PRIi32: &[u8; 2] = b"i\0";
pub const PRIi64: &[u8; 4] = b"lli\0";
pub const PRIiLEAST8: &[u8; 4] = b"hhi\0";
pub const PRIiLEAST16: &[u8; 3] = b"hi\0";
pub const PRIiLEAST32: &[u8; 2] = b"i\0";
pub const PRIiLEAST64: &[u8; 4] = b"lli\0";
pub const PRIiFAST8: &[u8; 4] = b"hhi\0";
pub const PRIiFAST16: &[u8; 2] = b"i\0";
pub const PRIiFAST32: &[u8; 2] = b"i\0";
pub const PRIiFAST64: &[u8; 4] = b"lli\0";
pub const PRIiMAX: &[u8; 4] = b"lli\0";
pub const PRIiPTR: &[u8; 4] = b"lli\0";
pub const PRIo8: &[u8; 4] = b"hho\0";
pub const PRIo16: &[u8; 3] = b"ho\0";
pub const PRIo32: &[u8; 2] = b"o\0";
pub const PRIo64: &[u8; 4] = b"llo\0";
pub const PRIoLEAST8: &[u8; 4] = b"hho\0";
pub const PRIoLEAST16: &[u8; 3] = b"ho\0";
pub const PRIoLEAST32: &[u8; 2] = b"o\0";
pub const PRIoLEAST64: &[u8; 4] = b"llo\0";
pub const PRIoFAST8: &[u8; 4] = b"hho\0";
pub const PRIoFAST16: &[u8; 2] = b"o\0";
pub const PRIoFAST32: &[u8; 2] = b"o\0";
pub const PRIoFAST64: &[u8; 4] = b"llo\0";
pub const PRIoMAX: &[u8; 4] = b"llo\0";
pub const PRIoPTR: &[u8; 4] = b"llo\0";
pub const PRIu8: &[u8; 4] = b"hhu\0";
pub const PRIu16: &[u8; 3] = b"hu\0";
pub const PRIu32: &[u8; 2] = b"u\0";
pub const PRIu64: &[u8; 4] = b"llu\0";
pub const PRIuLEAST8: &[u8; 4] = b"hhu\0";
pub const PRIuLEAST16: &[u8; 3] = b"hu\0";
pub const PRIuLEAST32: &[u8; 2] = b"u\0";
pub const PRIuLEAST64: &[u8; 4] = b"llu\0";
pub const PRIuFAST8: &[u8; 4] = b"hhu\0";
pub const PRIuFAST16: &[u8; 2] = b"u\0";
pub const PRIuFAST32: &[u8; 2] = b"u\0";
pub const PRIuFAST64: &[u8; 4] = b"llu\0";
pub const PRIuMAX: &[u8; 4] = b"llu\0";
pub const PRIuPTR: &[u8; 4] = b"llu\0";
pub const PRIx8: &[u8; 4] = b"hhx\0";
pub const PRIx16: &[u8; 3] = b"hx\0";
pub const PRIx32: &[u8; 2] = b"x\0";
pub const PRIx64: &[u8; 4] = b"llx\0";
pub const PRIxLEAST8: &[u8; 4] = b"hhx\0";
pub const PRIxLEAST16: &[u8; 3] = b"hx\0";
pub const PRIxLEAST32: &[u8; 2] = b"x\0";
pub const PRIxLEAST64: &[u8; 4] = b"llx\0";
pub const PRIxFAST8: &[u8; 4] = b"hhx\0";
pub const PRIxFAST16: &[u8; 2] = b"x\0";
pub const PRIxFAST32: &[u8; 2] = b"x\0";
pub const PRIxFAST64: &[u8; 4] = b"llx\0";
pub const PRIxMAX: &[u8; 4] = b"llx\0";
pub const PRIxPTR: &[u8; 4] = b"llx\0";
pub const PRIX8: &[u8; 4] = b"hhX\0";
pub const PRIX16: &[u8; 3] = b"hX\0";
pub const PRIX32: &[u8; 2] = b"X\0";
pub const PRIX64: &[u8; 4] = b"llX\0";
pub const PRIXLEAST8: &[u8; 4] = b"hhX\0";
pub const PRIXLEAST16: &[u8; 3] = b"hX\0";
pub const PRIXLEAST32: &[u8; 2] = b"X\0";
pub const PRIXLEAST64: &[u8; 4] = b"llX\0";
pub const PRIXFAST8: &[u8; 4] = b"hhX\0";
pub const PRIXFAST16: &[u8; 2] = b"X\0";
pub const PRIXFAST32: &[u8; 2] = b"X\0";
pub const PRIXFAST64: &[u8; 4] = b"llX\0";
pub const PRIXMAX: &[u8; 4] = b"llX\0";
pub const PRIXPTR: &[u8; 4] = b"llX\0";
pub const SCNd8: &[u8; 4] = b"hhd\0";
pub const SCNd16: &[u8; 3] = b"hd\0";
pub const SCNd32: &[u8; 2] = b"d\0";
pub const SCNd64: &[u8; 4] = b"lld\0";
pub const SCNdLEAST8: &[u8; 4] = b"hhd\0";
pub const SCNdLEAST16: &[u8; 3] = b"hd\0";
pub const SCNdLEAST32: &[u8; 2] = b"d\0";
pub const SCNdLEAST64: &[u8; 4] = b"lld\0";
pub const SCNdFAST8: &[u8; 4] = b"hhd\0";
pub const SCNdFAST16: &[u8; 2] = b"d\0";
pub const SCNdFAST32: &[u8; 2] = b"d\0";
pub const SCNdFAST64: &[u8; 4] = b"lld\0";
pub const SCNdMAX: &[u8; 4] = b"lld\0";
pub const SCNdPTR: &[u8; 4] = b"lld\0";
pub const SCNi8: &[u8; 4] = b"hhi\0";
pub const SCNi16: &[u8; 3] = b"hi\0";
pub const SCNi32: &[u8; 2] = b"i\0";
pub const SCNi64: &[u8; 4] = b"lli\0";
pub const SCNiLEAST8: &[u8; 4] = b"hhi\0";
pub const SCNiLEAST16: &[u8; 3] = b"hi\0";
pub const SCNiLEAST32: &[u8; 2] = b"i\0";
pub const SCNiLEAST64: &[u8; 4] = b"lli\0";
pub const SCNiFAST8: &[u8; 4] = b"hhi\0";
pub const SCNiFAST16: &[u8; 2] = b"i\0";
pub const SCNiFAST32: &[u8; 2] = b"i\0";
pub const SCNiFAST64: &[u8; 4] = b"lli\0";
pub const SCNiMAX: &[u8; 4] = b"lli\0";
pub const SCNiPTR: &[u8; 4] = b"lli\0";
pub const SCNo8: &[u8; 4] = b"hho\0";
pub const SCNo16: &[u8; 3] = b"ho\0";
pub const SCNo32: &[u8; 2] = b"o\0";
pub const SCNo64: &[u8; 4] = b"llo\0";
pub const SCNoLEAST8: &[u8; 4] = b"hho\0";
pub const SCNoLEAST16: &[u8; 3] = b"ho\0";
pub const SCNoLEAST32: &[u8; 2] = b"o\0";
pub const SCNoLEAST64: &[u8; 4] = b"llo\0";
pub const SCNoFAST8: &[u8; 4] = b"hho\0";
pub const SCNoFAST16: &[u8; 2] = b"o\0";
pub const SCNoFAST32: &[u8; 2] = b"o\0";
pub const SCNoFAST64: &[u8; 4] = b"llo\0";
pub const SCNoMAX: &[u8; 4] = b"llo\0";
pub const SCNoPTR: &[u8; 4] = b"llo\0";
pub const SCNu8: &[u8; 4] = b"hhu\0";
pub const SCNu16: &[u8; 3] = b"hu\0";
pub const SCNu32: &[u8; 2] = b"u\0";
pub const SCNu64: &[u8; 4] = b"llu\0";
pub const SCNuLEAST8: &[u8; 4] = b"hhu\0";
pub const SCNuLEAST16: &[u8; 3] = b"hu\0";
pub const SCNuLEAST32: &[u8; 2] = b"u\0";
pub const SCNuLEAST64: &[u8; 4] = b"llu\0";
pub const SCNuFAST8: &[u8; 4] = b"hhu\0";
pub const SCNuFAST16: &[u8; 2] = b"u\0";
pub const SCNuFAST32: &[u8; 2] = b"u\0";
pub const SCNuFAST64: &[u8; 4] = b"llu\0";
pub const SCNuMAX: &[u8; 4] = b"llu\0";
pub const SCNuPTR: &[u8; 4] = b"llu\0";
pub const SCNx8: &[u8; 4] = b"hhx\0";
pub const SCNx16: &[u8; 3] = b"hx\0";
pub const SCNx32: &[u8; 2] = b"x\0";
pub const SCNx64: &[u8; 4] = b"llx\0";
pub const SCNxLEAST8: &[u8; 4] = b"hhx\0";
pub const SCNxLEAST16: &[u8; 3] = b"hx\0";
pub const SCNxLEAST32: &[u8; 2] = b"x\0";
pub const SCNxLEAST64: &[u8; 4] = b"llx\0";
pub const SCNxFAST8: &[u8; 4] = b"hhx\0";
pub const SCNxFAST16: &[u8; 2] = b"x\0";
pub const SCNxFAST32: &[u8; 2] = b"x\0";
pub const SCNxFAST64: &[u8; 4] = b"llx\0";
pub const SCNxMAX: &[u8; 4] = b"llx\0";
pub const SCNxPTR: &[u8; 4] = b"llx\0";
pub const FORMAT_RC: &[u8; 7] = b"0x%hhx\0";
pub const SCANF_2X: &[u8; 6] = b"%2hhX\0";
pub const FORMAT_RCd: &[u8; 3] = b"%d\0";
pub const FORMAT_RCu: &[u8; 3] = b"%u\0";
pub const FORMAT_RCx: &[u8; 5] = b"0x%x\0";
pub const FORMAT_B: &[u8; 3] = b"%d\0";
pub const FORMAT_BB: &[u8; 3] = b"%u\0";
pub const FORMAT_3B: &[u8; 3] = b"%u\0";
pub const FORMAT_BS: &[u8; 4] = b"%hu\0";
pub const FORMAT_BSd: &[u8; 4] = b"%hd\0";
pub const FORMAT_BSx: &[u8; 6] = b"0x%hx\0";
pub const FORMAT_RS: &[u8; 4] = b"%hu\0";
pub const FORMAT_RSd: &[u8; 4] = b"%hd\0";
pub const FORMAT_RSx: &[u8; 6] = b"0x%hx\0";
pub const FORMAT_BL: &[u8; 3] = b"%u\0";
pub const FORMAT_RL: &[u8; 3] = b"%u\0";
pub const FORMAT_BLd: &[u8; 3] = b"%d\0";
pub const FORMAT_RLd: &[u8; 3] = b"%d\0";
pub const FORMAT_RLx: &[u8; 5] = b"0x%x\0";
pub const FORMAT_BLX: &[u8; 3] = b"%X\0";
pub const FORMAT_BLx: &[u8; 5] = b"0x%x\0";
pub const FORMAT_RD: &[u8; 3] = b"%g\0";
pub const FORMAT_RLLx: &[u8; 5] = b"%llX\0";
pub const FORMAT_RLL: &[u8; 7] = b"0x%llX\0";
pub const FORMAT_RLLd: &[u8; 5] = b"%lld\0";
pub const FORMAT_BLL: &[u8; 5] = b"%llu\0";
pub const FORMAT_MC: &[u8; 3] = b"%d\0";
pub const FORMAT_UMC: &[u8; 7] = b"0x%llX\0";
pub const FORMAT_MS: &[u8; 3] = b"%u\0";
pub const FORMAT_TF: &[u8; 5] = b"\"%s\"\0";
pub const FORMAT_TV: &[u8; 5] = b"\"%s\"\0";
pub const FORMAT_T16: &[u8; 5] = b"\"%s\"\0";
pub const FORMAT_T32: &[u8; 5] = b"\"%s\"\0";
pub const FORMAT_TU32: &[u8; 5] = b"\"%s\"\0";
pub const FORMAT_BT: &[u8; 3] = b"%g\0";
pub const FORMAT_DD: &[u8; 3] = b"%g\0";
pub const FORMAT_BD: &[u8; 3] = b"%g\0";
pub const FORMAT_4BITS: &[u8; 4] = b"%1x\0";
pub const FORMAT_D2T: &[u8; 3] = b"%s\0";
pub const FORMAT_TU: &[u8; 6] = b"\"%hn\"\0";
pub const FORMAT_H: &[u8; 11] = b"%u.%u.%llX\0";
pub const FORMAT_REF: &[u8; 22] = b"(%u.%u.%llX) abs:%llu\0";
pub const FORMAT_REF11: &[u8; 16] = b"(%d, %hd, %llu)\0";
pub const DWG_OPTS_LOGLEVEL: u32 = 15;
pub const DWG_OPTS_MINIMAL: u32 = 16;
pub const DWG_OPTS_DXFB: u32 = 32;
pub const DWG_OPTS_JSONFIRST: u32 = 32;
pub const DWG_OPTS_INDXF: u32 = 64;
pub const DWG_OPTS_INJSON: u32 = 128;
pub const DWG_OPTS_IN: u32 = 192;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize) -> !;
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type __crt_bool = bool;
extern "C" {
    pub fn _invalid_parameter_noinfo();
}
extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn() -> !;
}
extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    ) -> !;
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___crt_locale_data_public() {
    const UNINIT: ::std::mem::MaybeUninit<__crt_locale_data_public> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_data_public>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_data_public>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._locale_pctype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_pctype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._locale_mb_cur_max) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_mb_cur_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._locale_lc_codepage) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_lc_codepage)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[test]
fn bindgen_test_layout___crt_locale_pointers() {
    const UNINIT: ::std::mem::MaybeUninit<__crt_locale_pointers> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_pointers>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_pointers>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).locinfo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(locinfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mbcinfo) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(mbcinfo)
        )
    );
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__Mbstatet() {
    const UNINIT: ::std::mem::MaybeUninit<_Mbstatet> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_Mbstatet>(),
        8usize,
        concat!("Size of: ", stringify!(_Mbstatet))
    );
    assert_eq!(
        ::std::mem::align_of::<_Mbstatet>(),
        4usize,
        concat!("Alignment of ", stringify!(_Mbstatet))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Wchar) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Wchar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Byte) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Byte)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._State) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_State)
        )
    );
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = usize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _iobuf {
    pub _Placeholder: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__iobuf() {
    const UNINIT: ::std::mem::MaybeUninit<_iobuf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_iobuf>(),
        8usize,
        concat!("Size of: ", stringify!(_iobuf))
    );
    assert_eq!(
        ::std::mem::align_of::<_iobuf>(),
        8usize,
        concat!("Alignment of ", stringify!(_iobuf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Placeholder) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_iobuf),
            "::",
            stringify!(_Placeholder)
        )
    );
}
pub type FILE = _iobuf;
extern "C" {
    pub fn __acrt_iob_func(_Ix: ::std::os::raw::c_uint) -> *mut FILE;
}
extern "C" {
    pub fn fgetwc(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fgetwchar() -> wint_t;
}
extern "C" {
    pub fn fputwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fputwchar(_Character: wchar_t) -> wint_t;
}
extern "C" {
    pub fn getwc(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar() -> wint_t;
}
extern "C" {
    pub fn fgetws(
        _Buffer: *mut wchar_t,
        _BufferCount: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn fputws(_Buffer: *const wchar_t, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getws_s(_Buffer: *mut wchar_t, _BufferCount: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn putwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar(_Character: wchar_t) -> wint_t;
}
extern "C" {
    pub fn _putws(_Buffer: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetwc(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _wfdopen(_FileHandle: ::std::os::raw::c_int, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wfopen(_FileName: *const wchar_t, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wfopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wfreopen(
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _OldStream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _wfreopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
extern "C" {
    pub fn _wfsopen(
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _wperror(_ErrorMessage: *const wchar_t);
}
extern "C" {
    pub fn _wpopen(_Command: *const wchar_t, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wremove(_FileName: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtempnam(_Directory: *const wchar_t, _FilePrefix: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wtmpnam_s(_Buffer: *mut wchar_t, _BufferCount: usize) -> errno_t;
}
extern "C" {
    pub fn _wtmpnam(_Buffer: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _fgetwc_nolock(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fputwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _getwc_nolock(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _putwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _ungetwc_nolock(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn __stdio_common_vfwprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsnwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _MaxCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *const wchar_t,
        _BufferCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = ::std::os::raw::c_longlong;
extern "C" {
    pub fn _get_stream_buffer_pointers(
        _Stream: *mut FILE,
        _Base: *mut *mut *mut ::std::os::raw::c_char,
        _Pointer: *mut *mut *mut ::std::os::raw::c_char,
        _Count: *mut *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn clearerr_s(_Stream: *mut FILE) -> errno_t;
}
extern "C" {
    pub fn fopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn fread_s(
        _Buffer: *mut ::std::os::raw::c_void,
        _BufferSize: usize,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn freopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
extern "C" {
    pub fn gets_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _Size: rsize_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpfile_s(_Stream: *mut *mut FILE) -> errno_t;
}
extern "C" {
    pub fn tmpnam_s(_Buffer: *mut ::std::os::raw::c_char, _Size: rsize_t) -> errno_t;
}
extern "C" {
    pub fn clearerr(_Stream: *mut FILE);
}
extern "C" {
    pub fn fclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn feof(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fgetchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpos(_Stream: *mut FILE, _Position: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        _Buffer: *mut ::std::os::raw::c_char,
        _MaxCount: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _flushall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fputc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fputchar(_Character: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(
        _Buffer: *const ::std::os::raw::c_char,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        _Buffer: *mut ::std::os::raw::c_void,
        _ElementSize: ::std::os::raw::c_ulonglong,
        _ElementCount: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn freopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _Stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _fsopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fsetpos(_Stream: *mut FILE, _Position: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseek(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fseeki64(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _ftelli64(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fwrite(
        _Buffer: *const ::std::os::raw::c_void,
        _ElementSize: ::std::os::raw::c_ulonglong,
        _ElementCount: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn getc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getmaxstdio() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(_ErrorMessage: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn _pclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _popen(
        _Command: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn putc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(_Character: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(_Buffer: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putw(_Word: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        _OldFileName: *const ::std::os::raw::c_char,
        _NewFileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _unlink(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlink(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind(_Stream: *mut FILE);
}
extern "C" {
    pub fn _rmtmp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(_Stream: *mut FILE, _Buffer: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn _setmaxstdio(_Maximum: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setvbuf(
        _Stream: *mut FILE,
        _Buffer: *mut ::std::os::raw::c_char,
        _Mode: ::std::os::raw::c_int,
        _Size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tempnam(
        _DirectoryName: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(_Buffer: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ungetc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _lock_file(_Stream: *mut FILE);
}
extern "C" {
    pub fn _unlock_file(_Stream: *mut FILE);
}
extern "C" {
    pub fn _fclose_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fflush_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fgetc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fputc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fread_nolock(
        _Buffer: *mut ::std::os::raw::c_void,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn _fread_nolock_s(
        _Buffer: *mut ::std::os::raw::c_void,
        _BufferSize: usize,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn _fseek_nolock(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fseeki64_nolock(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ftell_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _ftelli64_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _fwrite_nolock(
        _Buffer: *const ::std::os::raw::c_void,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn _getc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ungetc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __p__commode() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_printf_count_output(_Value: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _get_printf_count_output() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _Arglist: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsnprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _MaxCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *const ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tempnam(
        _Directory: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Format: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fgetchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flushall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputchar(_Ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(_Ch: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmtmp() -> ::std::os::raw::c_int;
}
pub type max_align_t = f64;
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Lldiv_t {
    pub quot: intmax_t,
    pub rem: intmax_t,
}
#[test]
fn bindgen_test_layout__Lldiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<_Lldiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_Lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(_Lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_Lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_Lldiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_Lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type imaxdiv_t = _Lldiv_t;
extern "C" {
    pub fn imaxabs(_Number: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(_Numerator: intmax_t, _Denominator: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn _strtoimax_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn _strtoumax_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn _wcstoimax_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn _wcstoumax_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> uintmax_t;
}
pub type BITCODE_RC = ::std::os::raw::c_uchar;
pub type BITCODE_RCd = ::std::os::raw::c_schar;
pub type BITCODE_RCu = ::std::os::raw::c_uchar;
pub type BITCODE_RCx = ::std::os::raw::c_uchar;
pub type BITCODE_B = ::std::os::raw::c_uchar;
pub type BITCODE_BB = ::std::os::raw::c_uchar;
pub type BITCODE_3B = ::std::os::raw::c_uchar;
pub type BITCODE_BS = u16;
pub type BITCODE_BSd = i16;
pub type BITCODE_BSx = u16;
pub type BITCODE_RS = u16;
pub type BITCODE_RSd = i16;
pub type BITCODE_RSx = u16;
pub type BITCODE_BL = u32;
pub type BITCODE_BLx = u32;
pub type BITCODE_BLd = i32;
pub type BITCODE_RL = u32;
pub type BITCODE_RLx = u32;
pub type BITCODE_RLd = i32;
pub type BITCODE_RD = f64;
pub type BITCODE_RLL = u64;
pub type BITCODE_RLLd = i64;
pub type BITCODE_BLL = u64;
pub type BITCODE_MC = i32;
pub type BITCODE_UMC = u64;
pub type BITCODE_MS = BITCODE_BL;
pub type dwg_wchar_t = BITCODE_RS;
pub type BITCODE_TF = *mut ::std::os::raw::c_uchar;
pub type BITCODE_TV = *mut ::std::os::raw::c_char;
pub type BITCODE_BT = f64;
pub type BITCODE_DD = f64;
pub type BITCODE_BD = f64;
pub type BITCODE_4BITS = BITCODE_RC;
pub type BITCODE_D2T = BITCODE_TV;
pub type BITCODE_TU = *mut BITCODE_RS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_time_bll {
    pub days: BITCODE_BL,
    pub ms: BITCODE_BL,
    pub value: BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_time_bll() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_time_bll> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_time_bll>(),
        16usize,
        concat!("Size of: ", stringify!(_dwg_time_bll))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_time_bll>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_time_bll))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).days) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_time_bll),
            "::",
            stringify!(days)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ms) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_time_bll),
            "::",
            stringify!(ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_time_bll),
            "::",
            stringify!(value)
        )
    );
}
pub type Dwg_Bitcode_TimeBLL = _dwg_time_bll;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_bitcode_2rd {
    pub x: BITCODE_RD,
    pub y: BITCODE_RD,
}
#[test]
fn bindgen_test_layout__dwg_bitcode_2rd() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_bitcode_2rd> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_bitcode_2rd>(),
        16usize,
        concat!("Size of: ", stringify!(_dwg_bitcode_2rd))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_bitcode_2rd>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_bitcode_2rd))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_bitcode_2rd),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_bitcode_2rd),
            "::",
            stringify!(y)
        )
    );
}
pub type Dwg_Bitcode_2RD = _dwg_bitcode_2rd;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_bitcode_2bd {
    pub x: BITCODE_BD,
    pub y: BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_bitcode_2bd() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_bitcode_2bd> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_bitcode_2bd>(),
        16usize,
        concat!("Size of: ", stringify!(_dwg_bitcode_2bd))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_bitcode_2bd>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_bitcode_2bd))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_bitcode_2bd),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_bitcode_2bd),
            "::",
            stringify!(y)
        )
    );
}
pub type Dwg_Bitcode_2BD = _dwg_bitcode_2bd;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_bitcode_3rd {
    pub x: BITCODE_RD,
    pub y: BITCODE_RD,
    pub z: BITCODE_RD,
}
#[test]
fn bindgen_test_layout__dwg_bitcode_3rd() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_bitcode_3rd> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_bitcode_3rd>(),
        24usize,
        concat!("Size of: ", stringify!(_dwg_bitcode_3rd))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_bitcode_3rd>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_bitcode_3rd))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_bitcode_3rd),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_bitcode_3rd),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_bitcode_3rd),
            "::",
            stringify!(z)
        )
    );
}
pub type Dwg_Bitcode_3RD = _dwg_bitcode_3rd;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_bitcode_3bd {
    pub x: BITCODE_BD,
    pub y: BITCODE_BD,
    pub z: BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_bitcode_3bd() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_bitcode_3bd> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_bitcode_3bd>(),
        24usize,
        concat!("Size of: ", stringify!(_dwg_bitcode_3bd))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_bitcode_3bd>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_bitcode_3bd))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_bitcode_3bd),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_bitcode_3bd),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_bitcode_3bd),
            "::",
            stringify!(z)
        )
    );
}
pub type Dwg_Bitcode_3BD = _dwg_bitcode_3bd;
pub type BITCODE_TIMEBLL = Dwg_Bitcode_TimeBLL;
pub type BITCODE_TIMERLL = Dwg_Bitcode_TimeBLL;
pub type BITCODE_2RD = Dwg_Bitcode_2RD;
pub type BITCODE_2BD = Dwg_Bitcode_2BD;
pub type BITCODE_2DPOINT = Dwg_Bitcode_2BD;
pub type BITCODE_2BD_1 = Dwg_Bitcode_2BD;
pub type BITCODE_3RD = Dwg_Bitcode_3RD;
pub type BITCODE_3BD = Dwg_Bitcode_3BD;
pub type BITCODE_3DPOINT = Dwg_Bitcode_3BD;
pub type BITCODE_3BD_1 = Dwg_Bitcode_3BD;
pub type BITCODE_BE = Dwg_Bitcode_3BD;
pub const DWG_VERSION_TYPE_R_INVALID: DWG_VERSION_TYPE = 0;
pub const DWG_VERSION_TYPE_R_1_1: DWG_VERSION_TYPE = 1;
pub const DWG_VERSION_TYPE_R_1_2: DWG_VERSION_TYPE = 2;
pub const DWG_VERSION_TYPE_R_1_3: DWG_VERSION_TYPE = 3;
pub const DWG_VERSION_TYPE_R_1_4: DWG_VERSION_TYPE = 4;
pub const DWG_VERSION_TYPE_R_2_0b: DWG_VERSION_TYPE = 5;
pub const DWG_VERSION_TYPE_R_2_0: DWG_VERSION_TYPE = 6;
pub const DWG_VERSION_TYPE_R_2_10: DWG_VERSION_TYPE = 7;
pub const DWG_VERSION_TYPE_R_2_21: DWG_VERSION_TYPE = 8;
pub const DWG_VERSION_TYPE_R_2_22: DWG_VERSION_TYPE = 9;
pub const DWG_VERSION_TYPE_R_2_4: DWG_VERSION_TYPE = 10;
pub const DWG_VERSION_TYPE_R_2_5: DWG_VERSION_TYPE = 11;
pub const DWG_VERSION_TYPE_R_2_6: DWG_VERSION_TYPE = 12;
pub const DWG_VERSION_TYPE_R_9: DWG_VERSION_TYPE = 13;
pub const DWG_VERSION_TYPE_R_9c1: DWG_VERSION_TYPE = 14;
pub const DWG_VERSION_TYPE_R_10: DWG_VERSION_TYPE = 15;
pub const DWG_VERSION_TYPE_R_11b1: DWG_VERSION_TYPE = 16;
pub const DWG_VERSION_TYPE_R_11b2: DWG_VERSION_TYPE = 17;
pub const DWG_VERSION_TYPE_R_11: DWG_VERSION_TYPE = 18;
pub const DWG_VERSION_TYPE_R_12: DWG_VERSION_TYPE = 18;
pub const DWG_VERSION_TYPE_R_13b1: DWG_VERSION_TYPE = 19;
pub const DWG_VERSION_TYPE_R_13b2: DWG_VERSION_TYPE = 20;
pub const DWG_VERSION_TYPE_R_13: DWG_VERSION_TYPE = 21;
pub const DWG_VERSION_TYPE_R_13c3: DWG_VERSION_TYPE = 22;
pub const DWG_VERSION_TYPE_R_14: DWG_VERSION_TYPE = 23;
pub const DWG_VERSION_TYPE_R_2000b: DWG_VERSION_TYPE = 24;
pub const DWG_VERSION_TYPE_R_2000: DWG_VERSION_TYPE = 25;
pub const DWG_VERSION_TYPE_R_2000i: DWG_VERSION_TYPE = 26;
pub const DWG_VERSION_TYPE_R_2002: DWG_VERSION_TYPE = 27;
pub const DWG_VERSION_TYPE_R_2004a: DWG_VERSION_TYPE = 28;
pub const DWG_VERSION_TYPE_R_2004b: DWG_VERSION_TYPE = 29;
pub const DWG_VERSION_TYPE_R_2004c: DWG_VERSION_TYPE = 30;
pub const DWG_VERSION_TYPE_R_2004: DWG_VERSION_TYPE = 31;
pub const DWG_VERSION_TYPE_R_2007a: DWG_VERSION_TYPE = 32;
pub const DWG_VERSION_TYPE_R_2007b: DWG_VERSION_TYPE = 33;
pub const DWG_VERSION_TYPE_R_2007: DWG_VERSION_TYPE = 34;
pub const DWG_VERSION_TYPE_R_2010b: DWG_VERSION_TYPE = 35;
pub const DWG_VERSION_TYPE_R_2010: DWG_VERSION_TYPE = 36;
pub const DWG_VERSION_TYPE_R_2013b: DWG_VERSION_TYPE = 37;
pub const DWG_VERSION_TYPE_R_2013: DWG_VERSION_TYPE = 38;
pub const DWG_VERSION_TYPE_R_2018b: DWG_VERSION_TYPE = 39;
pub const DWG_VERSION_TYPE_R_2018: DWG_VERSION_TYPE = 40;
pub const DWG_VERSION_TYPE_R_2022b: DWG_VERSION_TYPE = 41;
pub const DWG_VERSION_TYPE_R_AFTER: DWG_VERSION_TYPE = 42;
pub type DWG_VERSION_TYPE = ::std::os::raw::c_int;
pub use self::DWG_VERSION_TYPE as Dwg_Version_Type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dwg_versions {
    pub r: Dwg_Version_Type,
    pub type_: *const ::std::os::raw::c_char,
    pub hdr: *const ::std::os::raw::c_char,
    pub desc: *const ::std::os::raw::c_char,
    pub dwg_version: u8,
}
#[test]
fn bindgen_test_layout_dwg_versions() {
    const UNINIT: ::std::mem::MaybeUninit<dwg_versions> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dwg_versions>(),
        40usize,
        concat!("Size of: ", stringify!(dwg_versions))
    );
    assert_eq!(
        ::std::mem::align_of::<dwg_versions>(),
        8usize,
        concat!("Alignment of ", stringify!(dwg_versions))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dwg_versions),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dwg_versions),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dwg_versions),
            "::",
            stringify!(hdr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).desc) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(dwg_versions),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dwg_version) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(dwg_versions),
            "::",
            stringify!(dwg_version)
        )
    );
}
pub type Dwg_Versions = dwg_versions;
pub const DWG_CLASS_STABILITY_DWG_CLASS_STABLE: DWG_CLASS_STABILITY = 0;
pub const DWG_CLASS_STABILITY_DWG_CLASS_UNSTABLE: DWG_CLASS_STABILITY = 1;
pub const DWG_CLASS_STABILITY_DWG_CLASS_DEBUGGING: DWG_CLASS_STABILITY = 2;
pub const DWG_CLASS_STABILITY_DWG_CLASS_UNHANDLED: DWG_CLASS_STABILITY = 3;
pub type DWG_CLASS_STABILITY = ::std::os::raw::c_int;
pub use self::DWG_CLASS_STABILITY as Dwg_Class_Stability;
pub const DWG_ENTITY_SECTIONS_DWG_ENTITY_SECTION: DWG_ENTITY_SECTIONS = 0;
pub const DWG_ENTITY_SECTIONS_DWG_BLOCKS_SECTION: DWG_ENTITY_SECTIONS = 64;
pub const DWG_ENTITY_SECTIONS_DWG_EXTRA_SECTION: DWG_ENTITY_SECTIONS = 128;
pub type DWG_ENTITY_SECTIONS = ::std::os::raw::c_int;
pub use self::DWG_ENTITY_SECTIONS as Dwg_Entity_Sections;
pub const DWG_OBJECT_SUPERTYPE_DWG_SUPERTYPE_ENTITY: DWG_OBJECT_SUPERTYPE = 0;
pub const DWG_OBJECT_SUPERTYPE_DWG_SUPERTYPE_OBJECT: DWG_OBJECT_SUPERTYPE = 1;
#[doc = "Object supertypes that exist in dwg-files."]
pub type DWG_OBJECT_SUPERTYPE = ::std::os::raw::c_int;
#[doc = "Object supertypes that exist in dwg-files."]
pub use self::DWG_OBJECT_SUPERTYPE as Dwg_Object_Supertype;
pub const DWG_OBJECT_TYPE_DWG_TYPE_UNUSED: DWG_OBJECT_TYPE = 0;
pub const DWG_OBJECT_TYPE_DWG_TYPE_TEXT: DWG_OBJECT_TYPE = 1;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ATTRIB: DWG_OBJECT_TYPE = 2;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ATTDEF: DWG_OBJECT_TYPE = 3;
pub const DWG_OBJECT_TYPE_DWG_TYPE_BLOCK: DWG_OBJECT_TYPE = 4;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ENDBLK: DWG_OBJECT_TYPE = 5;
pub const DWG_OBJECT_TYPE_DWG_TYPE_SEQEND: DWG_OBJECT_TYPE = 6;
pub const DWG_OBJECT_TYPE_DWG_TYPE_INSERT: DWG_OBJECT_TYPE = 7;
pub const DWG_OBJECT_TYPE_DWG_TYPE_MINSERT: DWG_OBJECT_TYPE = 8;
pub const DWG_OBJECT_TYPE_DWG_TYPE_VERTEX_2D: DWG_OBJECT_TYPE = 10;
pub const DWG_OBJECT_TYPE_DWG_TYPE_VERTEX_3D: DWG_OBJECT_TYPE = 11;
pub const DWG_OBJECT_TYPE_DWG_TYPE_VERTEX_MESH: DWG_OBJECT_TYPE = 12;
pub const DWG_OBJECT_TYPE_DWG_TYPE_VERTEX_PFACE: DWG_OBJECT_TYPE = 13;
pub const DWG_OBJECT_TYPE_DWG_TYPE_VERTEX_PFACE_FACE: DWG_OBJECT_TYPE = 14;
pub const DWG_OBJECT_TYPE_DWG_TYPE_POLYLINE_2D: DWG_OBJECT_TYPE = 15;
pub const DWG_OBJECT_TYPE_DWG_TYPE_POLYLINE_3D: DWG_OBJECT_TYPE = 16;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ARC: DWG_OBJECT_TYPE = 17;
pub const DWG_OBJECT_TYPE_DWG_TYPE_CIRCLE: DWG_OBJECT_TYPE = 18;
pub const DWG_OBJECT_TYPE_DWG_TYPE_LINE: DWG_OBJECT_TYPE = 19;
pub const DWG_OBJECT_TYPE_DWG_TYPE_DIMENSION_ORDINATE: DWG_OBJECT_TYPE = 20;
pub const DWG_OBJECT_TYPE_DWG_TYPE_DIMENSION_LINEAR: DWG_OBJECT_TYPE = 21;
pub const DWG_OBJECT_TYPE_DWG_TYPE_DIMENSION_ALIGNED: DWG_OBJECT_TYPE = 22;
pub const DWG_OBJECT_TYPE_DWG_TYPE_DIMENSION_ANG3PT: DWG_OBJECT_TYPE = 23;
pub const DWG_OBJECT_TYPE_DWG_TYPE_DIMENSION_ANG2LN: DWG_OBJECT_TYPE = 24;
pub const DWG_OBJECT_TYPE_DWG_TYPE_DIMENSION_RADIUS: DWG_OBJECT_TYPE = 25;
pub const DWG_OBJECT_TYPE_DWG_TYPE_DIMENSION_DIAMETER: DWG_OBJECT_TYPE = 26;
pub const DWG_OBJECT_TYPE_DWG_TYPE_POINT: DWG_OBJECT_TYPE = 27;
pub const DWG_OBJECT_TYPE_DWG_TYPE__3DFACE: DWG_OBJECT_TYPE = 28;
pub const DWG_OBJECT_TYPE_DWG_TYPE_POLYLINE_PFACE: DWG_OBJECT_TYPE = 29;
pub const DWG_OBJECT_TYPE_DWG_TYPE_POLYLINE_MESH: DWG_OBJECT_TYPE = 30;
pub const DWG_OBJECT_TYPE_DWG_TYPE_SOLID: DWG_OBJECT_TYPE = 31;
pub const DWG_OBJECT_TYPE_DWG_TYPE_TRACE: DWG_OBJECT_TYPE = 32;
pub const DWG_OBJECT_TYPE_DWG_TYPE_SHAPE: DWG_OBJECT_TYPE = 33;
pub const DWG_OBJECT_TYPE_DWG_TYPE_VIEWPORT: DWG_OBJECT_TYPE = 34;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ELLIPSE: DWG_OBJECT_TYPE = 35;
pub const DWG_OBJECT_TYPE_DWG_TYPE_SPLINE: DWG_OBJECT_TYPE = 36;
pub const DWG_OBJECT_TYPE_DWG_TYPE_REGION: DWG_OBJECT_TYPE = 37;
pub const DWG_OBJECT_TYPE_DWG_TYPE__3DSOLID: DWG_OBJECT_TYPE = 38;
pub const DWG_OBJECT_TYPE_DWG_TYPE_BODY: DWG_OBJECT_TYPE = 39;
pub const DWG_OBJECT_TYPE_DWG_TYPE_RAY: DWG_OBJECT_TYPE = 40;
pub const DWG_OBJECT_TYPE_DWG_TYPE_XLINE: DWG_OBJECT_TYPE = 41;
pub const DWG_OBJECT_TYPE_DWG_TYPE_DICTIONARY: DWG_OBJECT_TYPE = 42;
pub const DWG_OBJECT_TYPE_DWG_TYPE_OLEFRAME: DWG_OBJECT_TYPE = 43;
pub const DWG_OBJECT_TYPE_DWG_TYPE_MTEXT: DWG_OBJECT_TYPE = 44;
pub const DWG_OBJECT_TYPE_DWG_TYPE_LEADER: DWG_OBJECT_TYPE = 45;
pub const DWG_OBJECT_TYPE_DWG_TYPE_TOLERANCE: DWG_OBJECT_TYPE = 46;
pub const DWG_OBJECT_TYPE_DWG_TYPE_MLINE: DWG_OBJECT_TYPE = 47;
pub const DWG_OBJECT_TYPE_DWG_TYPE_BLOCK_CONTROL: DWG_OBJECT_TYPE = 48;
pub const DWG_OBJECT_TYPE_DWG_TYPE_BLOCK_HEADER: DWG_OBJECT_TYPE = 49;
pub const DWG_OBJECT_TYPE_DWG_TYPE_LAYER_CONTROL: DWG_OBJECT_TYPE = 50;
pub const DWG_OBJECT_TYPE_DWG_TYPE_LAYER: DWG_OBJECT_TYPE = 51;
pub const DWG_OBJECT_TYPE_DWG_TYPE_STYLE_CONTROL: DWG_OBJECT_TYPE = 52;
pub const DWG_OBJECT_TYPE_DWG_TYPE_STYLE: DWG_OBJECT_TYPE = 53;
pub const DWG_OBJECT_TYPE_DWG_TYPE_LTYPE_CONTROL: DWG_OBJECT_TYPE = 56;
pub const DWG_OBJECT_TYPE_DWG_TYPE_LTYPE: DWG_OBJECT_TYPE = 57;
pub const DWG_OBJECT_TYPE_DWG_TYPE_VIEW_CONTROL: DWG_OBJECT_TYPE = 60;
pub const DWG_OBJECT_TYPE_DWG_TYPE_VIEW: DWG_OBJECT_TYPE = 61;
pub const DWG_OBJECT_TYPE_DWG_TYPE_UCS_CONTROL: DWG_OBJECT_TYPE = 62;
pub const DWG_OBJECT_TYPE_DWG_TYPE_UCS: DWG_OBJECT_TYPE = 63;
pub const DWG_OBJECT_TYPE_DWG_TYPE_VPORT_CONTROL: DWG_OBJECT_TYPE = 64;
pub const DWG_OBJECT_TYPE_DWG_TYPE_VPORT: DWG_OBJECT_TYPE = 65;
pub const DWG_OBJECT_TYPE_DWG_TYPE_APPID_CONTROL: DWG_OBJECT_TYPE = 66;
pub const DWG_OBJECT_TYPE_DWG_TYPE_APPID: DWG_OBJECT_TYPE = 67;
pub const DWG_OBJECT_TYPE_DWG_TYPE_DIMSTYLE_CONTROL: DWG_OBJECT_TYPE = 68;
pub const DWG_OBJECT_TYPE_DWG_TYPE_DIMSTYLE: DWG_OBJECT_TYPE = 69;
pub const DWG_OBJECT_TYPE_DWG_TYPE_VX_CONTROL: DWG_OBJECT_TYPE = 70;
pub const DWG_OBJECT_TYPE_DWG_TYPE_VX_TABLE_RECORD: DWG_OBJECT_TYPE = 71;
pub const DWG_OBJECT_TYPE_DWG_TYPE_GROUP: DWG_OBJECT_TYPE = 72;
pub const DWG_OBJECT_TYPE_DWG_TYPE_MLINESTYLE: DWG_OBJECT_TYPE = 73;
pub const DWG_OBJECT_TYPE_DWG_TYPE_OLE2FRAME: DWG_OBJECT_TYPE = 74;
pub const DWG_OBJECT_TYPE_DWG_TYPE_DUMMY: DWG_OBJECT_TYPE = 75;
pub const DWG_OBJECT_TYPE_DWG_TYPE_LONG_TRANSACTION: DWG_OBJECT_TYPE = 76;
pub const DWG_OBJECT_TYPE_DWG_TYPE_LWPOLYLINE: DWG_OBJECT_TYPE = 77;
pub const DWG_OBJECT_TYPE_DWG_TYPE_HATCH: DWG_OBJECT_TYPE = 78;
pub const DWG_OBJECT_TYPE_DWG_TYPE_XRECORD: DWG_OBJECT_TYPE = 79;
pub const DWG_OBJECT_TYPE_DWG_TYPE_PLACEHOLDER: DWG_OBJECT_TYPE = 80;
pub const DWG_OBJECT_TYPE_DWG_TYPE_VBA_PROJECT: DWG_OBJECT_TYPE = 81;
pub const DWG_OBJECT_TYPE_DWG_TYPE_LAYOUT: DWG_OBJECT_TYPE = 82;
pub const DWG_OBJECT_TYPE_DWG_TYPE_PROXY_ENTITY: DWG_OBJECT_TYPE = 498;
pub const DWG_OBJECT_TYPE_DWG_TYPE_PROXY_OBJECT: DWG_OBJECT_TYPE = 499;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ACDSRECORD: DWG_OBJECT_TYPE = 500;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ACDSSCHEMA: DWG_OBJECT_TYPE = 501;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ACMECOMMANDHISTORY: DWG_OBJECT_TYPE = 502;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ACMESCOPE: DWG_OBJECT_TYPE = 503;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ACMESTATEMGR: DWG_OBJECT_TYPE = 504;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ACSH_BOOLEAN_CLASS: DWG_OBJECT_TYPE = 505;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ACSH_BOX_CLASS: DWG_OBJECT_TYPE = 506;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ACSH_BREP_CLASS: DWG_OBJECT_TYPE = 507;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ACSH_CHAMFER_CLASS: DWG_OBJECT_TYPE = 508;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ACSH_CONE_CLASS: DWG_OBJECT_TYPE = 509;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ACSH_CYLINDER_CLASS: DWG_OBJECT_TYPE = 510;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ACSH_EXTRUSION_CLASS: DWG_OBJECT_TYPE = 511;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ACSH_FILLET_CLASS: DWG_OBJECT_TYPE = 512;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ACSH_HISTORY_CLASS: DWG_OBJECT_TYPE = 513;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ACSH_LOFT_CLASS: DWG_OBJECT_TYPE = 514;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ACSH_PYRAMID_CLASS: DWG_OBJECT_TYPE = 515;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ACSH_REVOLVE_CLASS: DWG_OBJECT_TYPE = 516;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ACSH_SPHERE_CLASS: DWG_OBJECT_TYPE = 517;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ACSH_SWEEP_CLASS: DWG_OBJECT_TYPE = 518;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ACSH_TORUS_CLASS: DWG_OBJECT_TYPE = 519;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ACSH_WEDGE_CLASS: DWG_OBJECT_TYPE = 520;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ALDIMOBJECTCONTEXTDATA: DWG_OBJECT_TYPE = 521;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ALIGNMENTPARAMETERENTITY: DWG_OBJECT_TYPE = 522;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ANGDIMOBJECTCONTEXTDATA: DWG_OBJECT_TYPE = 523;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ANNOTSCALEOBJECTCONTEXTDATA: DWG_OBJECT_TYPE = 524;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ARCALIGNEDTEXT: DWG_OBJECT_TYPE = 525;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ARC_DIMENSION: DWG_OBJECT_TYPE = 526;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ASSOC2DCONSTRAINTGROUP: DWG_OBJECT_TYPE = 527;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ASSOC3POINTANGULARDIMACTIONBODY: DWG_OBJECT_TYPE = 528;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ASSOCACTION: DWG_OBJECT_TYPE = 529;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ASSOCACTIONPARAM: DWG_OBJECT_TYPE = 530;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ASSOCALIGNEDDIMACTIONBODY: DWG_OBJECT_TYPE = 531;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ASSOCARRAYACTIONBODY: DWG_OBJECT_TYPE = 532;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ASSOCARRAYMODIFYACTIONBODY: DWG_OBJECT_TYPE = 533;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ASSOCARRAYMODIFYPARAMETERS: DWG_OBJECT_TYPE = 534;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ASSOCARRAYPATHPARAMETERS: DWG_OBJECT_TYPE = 535;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ASSOCARRAYPOLARPARAMETERS: DWG_OBJECT_TYPE = 536;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ASSOCARRAYRECTANGULARPARAMETERS: DWG_OBJECT_TYPE = 537;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ASSOCASMBODYACTIONPARAM: DWG_OBJECT_TYPE = 538;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ASSOCBLENDSURFACEACTIONBODY: DWG_OBJECT_TYPE = 539;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ASSOCCOMPOUNDACTIONPARAM: DWG_OBJECT_TYPE = 540;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ASSOCDEPENDENCY: DWG_OBJECT_TYPE = 541;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ASSOCDIMDEPENDENCYBODY: DWG_OBJECT_TYPE = 542;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ASSOCEDGEACTIONPARAM: DWG_OBJECT_TYPE = 543;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ASSOCEDGECHAMFERACTIONBODY: DWG_OBJECT_TYPE = 544;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ASSOCEDGEFILLETACTIONBODY: DWG_OBJECT_TYPE = 545;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ASSOCEXTENDSURFACEACTIONBODY: DWG_OBJECT_TYPE = 546;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ASSOCEXTRUDEDSURFACEACTIONBODY: DWG_OBJECT_TYPE = 547;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ASSOCFACEACTIONPARAM: DWG_OBJECT_TYPE = 548;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ASSOCFILLETSURFACEACTIONBODY: DWG_OBJECT_TYPE = 549;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ASSOCGEOMDEPENDENCY: DWG_OBJECT_TYPE = 550;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ASSOCLOFTEDSURFACEACTIONBODY: DWG_OBJECT_TYPE = 551;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ASSOCMLEADERACTIONBODY: DWG_OBJECT_TYPE = 552;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ASSOCNETWORK: DWG_OBJECT_TYPE = 553;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ASSOCNETWORKSURFACEACTIONBODY: DWG_OBJECT_TYPE = 554;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ASSOCOBJECTACTIONPARAM: DWG_OBJECT_TYPE = 555;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ASSOCOFFSETSURFACEACTIONBODY: DWG_OBJECT_TYPE = 556;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ASSOCORDINATEDIMACTIONBODY: DWG_OBJECT_TYPE = 557;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ASSOCOSNAPPOINTREFACTIONPARAM: DWG_OBJECT_TYPE = 558;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ASSOCPATCHSURFACEACTIONBODY: DWG_OBJECT_TYPE = 559;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ASSOCPATHACTIONPARAM: DWG_OBJECT_TYPE = 560;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ASSOCPERSSUBENTMANAGER: DWG_OBJECT_TYPE = 561;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ASSOCPLANESURFACEACTIONBODY: DWG_OBJECT_TYPE = 562;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ASSOCPOINTREFACTIONPARAM: DWG_OBJECT_TYPE = 563;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ASSOCRESTOREENTITYSTATEACTIONBODY: DWG_OBJECT_TYPE = 564;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ASSOCREVOLVEDSURFACEACTIONBODY: DWG_OBJECT_TYPE = 565;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ASSOCROTATEDDIMACTIONBODY: DWG_OBJECT_TYPE = 566;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ASSOCSWEPTSURFACEACTIONBODY: DWG_OBJECT_TYPE = 567;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ASSOCTRIMSURFACEACTIONBODY: DWG_OBJECT_TYPE = 568;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ASSOCVALUEDEPENDENCY: DWG_OBJECT_TYPE = 569;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ASSOCVARIABLE: DWG_OBJECT_TYPE = 570;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ASSOCVERTEXACTIONPARAM: DWG_OBJECT_TYPE = 571;
pub const DWG_OBJECT_TYPE_DWG_TYPE_BASEPOINTPARAMETERENTITY: DWG_OBJECT_TYPE = 572;
pub const DWG_OBJECT_TYPE_DWG_TYPE_BLKREFOBJECTCONTEXTDATA: DWG_OBJECT_TYPE = 573;
pub const DWG_OBJECT_TYPE_DWG_TYPE_BLOCKALIGNEDCONSTRAINTPARAMETER: DWG_OBJECT_TYPE = 574;
pub const DWG_OBJECT_TYPE_DWG_TYPE_BLOCKALIGNMENTGRIP: DWG_OBJECT_TYPE = 575;
pub const DWG_OBJECT_TYPE_DWG_TYPE_BLOCKALIGNMENTPARAMETER: DWG_OBJECT_TYPE = 576;
pub const DWG_OBJECT_TYPE_DWG_TYPE_BLOCKANGULARCONSTRAINTPARAMETER: DWG_OBJECT_TYPE = 577;
pub const DWG_OBJECT_TYPE_DWG_TYPE_BLOCKARRAYACTION: DWG_OBJECT_TYPE = 578;
pub const DWG_OBJECT_TYPE_DWG_TYPE_BLOCKBASEPOINTPARAMETER: DWG_OBJECT_TYPE = 579;
pub const DWG_OBJECT_TYPE_DWG_TYPE_BLOCKDIAMETRICCONSTRAINTPARAMETER: DWG_OBJECT_TYPE = 580;
pub const DWG_OBJECT_TYPE_DWG_TYPE_BLOCKFLIPACTION: DWG_OBJECT_TYPE = 581;
pub const DWG_OBJECT_TYPE_DWG_TYPE_BLOCKFLIPGRIP: DWG_OBJECT_TYPE = 582;
pub const DWG_OBJECT_TYPE_DWG_TYPE_BLOCKFLIPPARAMETER: DWG_OBJECT_TYPE = 583;
pub const DWG_OBJECT_TYPE_DWG_TYPE_BLOCKGRIPLOCATIONCOMPONENT: DWG_OBJECT_TYPE = 584;
pub const DWG_OBJECT_TYPE_DWG_TYPE_BLOCKHORIZONTALCONSTRAINTPARAMETER: DWG_OBJECT_TYPE = 585;
pub const DWG_OBJECT_TYPE_DWG_TYPE_BLOCKLINEARCONSTRAINTPARAMETER: DWG_OBJECT_TYPE = 586;
pub const DWG_OBJECT_TYPE_DWG_TYPE_BLOCKLINEARGRIP: DWG_OBJECT_TYPE = 587;
pub const DWG_OBJECT_TYPE_DWG_TYPE_BLOCKLINEARPARAMETER: DWG_OBJECT_TYPE = 588;
pub const DWG_OBJECT_TYPE_DWG_TYPE_BLOCKLOOKUPACTION: DWG_OBJECT_TYPE = 589;
pub const DWG_OBJECT_TYPE_DWG_TYPE_BLOCKLOOKUPGRIP: DWG_OBJECT_TYPE = 590;
pub const DWG_OBJECT_TYPE_DWG_TYPE_BLOCKLOOKUPPARAMETER: DWG_OBJECT_TYPE = 591;
pub const DWG_OBJECT_TYPE_DWG_TYPE_BLOCKMOVEACTION: DWG_OBJECT_TYPE = 592;
pub const DWG_OBJECT_TYPE_DWG_TYPE_BLOCKPARAMDEPENDENCYBODY: DWG_OBJECT_TYPE = 593;
pub const DWG_OBJECT_TYPE_DWG_TYPE_BLOCKPOINTPARAMETER: DWG_OBJECT_TYPE = 594;
pub const DWG_OBJECT_TYPE_DWG_TYPE_BLOCKPOLARGRIP: DWG_OBJECT_TYPE = 595;
pub const DWG_OBJECT_TYPE_DWG_TYPE_BLOCKPOLARPARAMETER: DWG_OBJECT_TYPE = 596;
pub const DWG_OBJECT_TYPE_DWG_TYPE_BLOCKPOLARSTRETCHACTION: DWG_OBJECT_TYPE = 597;
pub const DWG_OBJECT_TYPE_DWG_TYPE_BLOCKPROPERTIESTABLE: DWG_OBJECT_TYPE = 598;
pub const DWG_OBJECT_TYPE_DWG_TYPE_BLOCKPROPERTIESTABLEGRIP: DWG_OBJECT_TYPE = 599;
pub const DWG_OBJECT_TYPE_DWG_TYPE_BLOCKRADIALCONSTRAINTPARAMETER: DWG_OBJECT_TYPE = 600;
pub const DWG_OBJECT_TYPE_DWG_TYPE_BLOCKREPRESENTATION: DWG_OBJECT_TYPE = 601;
pub const DWG_OBJECT_TYPE_DWG_TYPE_BLOCKROTATEACTION: DWG_OBJECT_TYPE = 602;
pub const DWG_OBJECT_TYPE_DWG_TYPE_BLOCKROTATIONGRIP: DWG_OBJECT_TYPE = 603;
pub const DWG_OBJECT_TYPE_DWG_TYPE_BLOCKROTATIONPARAMETER: DWG_OBJECT_TYPE = 604;
pub const DWG_OBJECT_TYPE_DWG_TYPE_BLOCKSCALEACTION: DWG_OBJECT_TYPE = 605;
pub const DWG_OBJECT_TYPE_DWG_TYPE_BLOCKSTRETCHACTION: DWG_OBJECT_TYPE = 606;
pub const DWG_OBJECT_TYPE_DWG_TYPE_BLOCKUSERPARAMETER: DWG_OBJECT_TYPE = 607;
pub const DWG_OBJECT_TYPE_DWG_TYPE_BLOCKVERTICALCONSTRAINTPARAMETER: DWG_OBJECT_TYPE = 608;
pub const DWG_OBJECT_TYPE_DWG_TYPE_BLOCKVISIBILITYGRIP: DWG_OBJECT_TYPE = 609;
pub const DWG_OBJECT_TYPE_DWG_TYPE_BLOCKVISIBILITYPARAMETER: DWG_OBJECT_TYPE = 610;
pub const DWG_OBJECT_TYPE_DWG_TYPE_BLOCKXYGRIP: DWG_OBJECT_TYPE = 611;
pub const DWG_OBJECT_TYPE_DWG_TYPE_BLOCKXYPARAMETER: DWG_OBJECT_TYPE = 612;
pub const DWG_OBJECT_TYPE_DWG_TYPE_CAMERA: DWG_OBJECT_TYPE = 613;
pub const DWG_OBJECT_TYPE_DWG_TYPE_CELLSTYLEMAP: DWG_OBJECT_TYPE = 614;
pub const DWG_OBJECT_TYPE_DWG_TYPE_CONTEXTDATAMANAGER: DWG_OBJECT_TYPE = 615;
pub const DWG_OBJECT_TYPE_DWG_TYPE_CSACDOCUMENTOPTIONS: DWG_OBJECT_TYPE = 616;
pub const DWG_OBJECT_TYPE_DWG_TYPE_CURVEPATH: DWG_OBJECT_TYPE = 617;
pub const DWG_OBJECT_TYPE_DWG_TYPE_DATALINK: DWG_OBJECT_TYPE = 618;
pub const DWG_OBJECT_TYPE_DWG_TYPE_DATATABLE: DWG_OBJECT_TYPE = 619;
pub const DWG_OBJECT_TYPE_DWG_TYPE_DBCOLOR: DWG_OBJECT_TYPE = 620;
pub const DWG_OBJECT_TYPE_DWG_TYPE_DETAILVIEWSTYLE: DWG_OBJECT_TYPE = 621;
pub const DWG_OBJECT_TYPE_DWG_TYPE_DGNDEFINITION: DWG_OBJECT_TYPE = 622;
pub const DWG_OBJECT_TYPE_DWG_TYPE_DGNUNDERLAY: DWG_OBJECT_TYPE = 623;
pub const DWG_OBJECT_TYPE_DWG_TYPE_DICTIONARYVAR: DWG_OBJECT_TYPE = 624;
pub const DWG_OBJECT_TYPE_DWG_TYPE_DICTIONARYWDFLT: DWG_OBJECT_TYPE = 625;
pub const DWG_OBJECT_TYPE_DWG_TYPE_DIMASSOC: DWG_OBJECT_TYPE = 626;
pub const DWG_OBJECT_TYPE_DWG_TYPE_DMDIMOBJECTCONTEXTDATA: DWG_OBJECT_TYPE = 627;
pub const DWG_OBJECT_TYPE_DWG_TYPE_DWFDEFINITION: DWG_OBJECT_TYPE = 628;
pub const DWG_OBJECT_TYPE_DWG_TYPE_DWFUNDERLAY: DWG_OBJECT_TYPE = 629;
pub const DWG_OBJECT_TYPE_DWG_TYPE_DYNAMICBLOCKPROXYNODE: DWG_OBJECT_TYPE = 630;
pub const DWG_OBJECT_TYPE_DWG_TYPE_DYNAMICBLOCKPURGEPREVENTER: DWG_OBJECT_TYPE = 631;
pub const DWG_OBJECT_TYPE_DWG_TYPE_EVALUATION_GRAPH: DWG_OBJECT_TYPE = 632;
pub const DWG_OBJECT_TYPE_DWG_TYPE_EXTRUDEDSURFACE: DWG_OBJECT_TYPE = 633;
pub const DWG_OBJECT_TYPE_DWG_TYPE_FCFOBJECTCONTEXTDATA: DWG_OBJECT_TYPE = 634;
pub const DWG_OBJECT_TYPE_DWG_TYPE_FIELD: DWG_OBJECT_TYPE = 635;
pub const DWG_OBJECT_TYPE_DWG_TYPE_FIELDLIST: DWG_OBJECT_TYPE = 636;
pub const DWG_OBJECT_TYPE_DWG_TYPE_FLIPPARAMETERENTITY: DWG_OBJECT_TYPE = 637;
pub const DWG_OBJECT_TYPE_DWG_TYPE_GEODATA: DWG_OBJECT_TYPE = 638;
pub const DWG_OBJECT_TYPE_DWG_TYPE_GEOMAPIMAGE: DWG_OBJECT_TYPE = 639;
pub const DWG_OBJECT_TYPE_DWG_TYPE_GEOPOSITIONMARKER: DWG_OBJECT_TYPE = 640;
pub const DWG_OBJECT_TYPE_DWG_TYPE_GRADIENT_BACKGROUND: DWG_OBJECT_TYPE = 641;
pub const DWG_OBJECT_TYPE_DWG_TYPE_GROUND_PLANE_BACKGROUND: DWG_OBJECT_TYPE = 642;
pub const DWG_OBJECT_TYPE_DWG_TYPE_HELIX: DWG_OBJECT_TYPE = 643;
pub const DWG_OBJECT_TYPE_DWG_TYPE_IBL_BACKGROUND: DWG_OBJECT_TYPE = 644;
pub const DWG_OBJECT_TYPE_DWG_TYPE_IDBUFFER: DWG_OBJECT_TYPE = 645;
pub const DWG_OBJECT_TYPE_DWG_TYPE_IMAGE: DWG_OBJECT_TYPE = 646;
pub const DWG_OBJECT_TYPE_DWG_TYPE_IMAGEDEF: DWG_OBJECT_TYPE = 647;
pub const DWG_OBJECT_TYPE_DWG_TYPE_IMAGEDEF_REACTOR: DWG_OBJECT_TYPE = 648;
pub const DWG_OBJECT_TYPE_DWG_TYPE_IMAGE_BACKGROUND: DWG_OBJECT_TYPE = 649;
pub const DWG_OBJECT_TYPE_DWG_TYPE_INDEX: DWG_OBJECT_TYPE = 650;
pub const DWG_OBJECT_TYPE_DWG_TYPE_LARGE_RADIAL_DIMENSION: DWG_OBJECT_TYPE = 651;
pub const DWG_OBJECT_TYPE_DWG_TYPE_LAYERFILTER: DWG_OBJECT_TYPE = 652;
pub const DWG_OBJECT_TYPE_DWG_TYPE_LAYER_INDEX: DWG_OBJECT_TYPE = 653;
pub const DWG_OBJECT_TYPE_DWG_TYPE_LAYOUTPRINTCONFIG: DWG_OBJECT_TYPE = 654;
pub const DWG_OBJECT_TYPE_DWG_TYPE_LEADEROBJECTCONTEXTDATA: DWG_OBJECT_TYPE = 655;
pub const DWG_OBJECT_TYPE_DWG_TYPE_LIGHT: DWG_OBJECT_TYPE = 656;
pub const DWG_OBJECT_TYPE_DWG_TYPE_LIGHTLIST: DWG_OBJECT_TYPE = 657;
pub const DWG_OBJECT_TYPE_DWG_TYPE_LINEARPARAMETERENTITY: DWG_OBJECT_TYPE = 658;
pub const DWG_OBJECT_TYPE_DWG_TYPE_LOFTEDSURFACE: DWG_OBJECT_TYPE = 659;
pub const DWG_OBJECT_TYPE_DWG_TYPE_MATERIAL: DWG_OBJECT_TYPE = 660;
pub const DWG_OBJECT_TYPE_DWG_TYPE_MENTALRAYRENDERSETTINGS: DWG_OBJECT_TYPE = 661;
pub const DWG_OBJECT_TYPE_DWG_TYPE_MESH: DWG_OBJECT_TYPE = 662;
pub const DWG_OBJECT_TYPE_DWG_TYPE_MLEADEROBJECTCONTEXTDATA: DWG_OBJECT_TYPE = 663;
pub const DWG_OBJECT_TYPE_DWG_TYPE_MLEADERSTYLE: DWG_OBJECT_TYPE = 664;
pub const DWG_OBJECT_TYPE_DWG_TYPE_MOTIONPATH: DWG_OBJECT_TYPE = 665;
pub const DWG_OBJECT_TYPE_DWG_TYPE_MPOLYGON: DWG_OBJECT_TYPE = 666;
pub const DWG_OBJECT_TYPE_DWG_TYPE_MTEXTATTRIBUTEOBJECTCONTEXTDATA: DWG_OBJECT_TYPE = 667;
pub const DWG_OBJECT_TYPE_DWG_TYPE_MTEXTOBJECTCONTEXTDATA: DWG_OBJECT_TYPE = 668;
pub const DWG_OBJECT_TYPE_DWG_TYPE_MULTILEADER: DWG_OBJECT_TYPE = 669;
pub const DWG_OBJECT_TYPE_DWG_TYPE_NAVISWORKSMODEL: DWG_OBJECT_TYPE = 670;
pub const DWG_OBJECT_TYPE_DWG_TYPE_NAVISWORKSMODELDEF: DWG_OBJECT_TYPE = 671;
pub const DWG_OBJECT_TYPE_DWG_TYPE_NPOCOLLECTION: DWG_OBJECT_TYPE = 672;
pub const DWG_OBJECT_TYPE_DWG_TYPE_NURBSURFACE: DWG_OBJECT_TYPE = 673;
pub const DWG_OBJECT_TYPE_DWG_TYPE_OBJECT_PTR: DWG_OBJECT_TYPE = 674;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ORDDIMOBJECTCONTEXTDATA: DWG_OBJECT_TYPE = 675;
pub const DWG_OBJECT_TYPE_DWG_TYPE_PARTIAL_VIEWING_INDEX: DWG_OBJECT_TYPE = 676;
pub const DWG_OBJECT_TYPE_DWG_TYPE_PDFDEFINITION: DWG_OBJECT_TYPE = 677;
pub const DWG_OBJECT_TYPE_DWG_TYPE_PDFUNDERLAY: DWG_OBJECT_TYPE = 678;
pub const DWG_OBJECT_TYPE_DWG_TYPE_PERSUBENTMGR: DWG_OBJECT_TYPE = 679;
pub const DWG_OBJECT_TYPE_DWG_TYPE_PLANESURFACE: DWG_OBJECT_TYPE = 680;
pub const DWG_OBJECT_TYPE_DWG_TYPE_PLOTSETTINGS: DWG_OBJECT_TYPE = 681;
pub const DWG_OBJECT_TYPE_DWG_TYPE_POINTCLOUD: DWG_OBJECT_TYPE = 682;
pub const DWG_OBJECT_TYPE_DWG_TYPE_POINTCLOUDCOLORMAP: DWG_OBJECT_TYPE = 683;
pub const DWG_OBJECT_TYPE_DWG_TYPE_POINTCLOUDDEF: DWG_OBJECT_TYPE = 684;
pub const DWG_OBJECT_TYPE_DWG_TYPE_POINTCLOUDDEFEX: DWG_OBJECT_TYPE = 685;
pub const DWG_OBJECT_TYPE_DWG_TYPE_POINTCLOUDDEF_REACTOR: DWG_OBJECT_TYPE = 686;
pub const DWG_OBJECT_TYPE_DWG_TYPE_POINTCLOUDDEF_REACTOR_EX: DWG_OBJECT_TYPE = 687;
pub const DWG_OBJECT_TYPE_DWG_TYPE_POINTCLOUDEX: DWG_OBJECT_TYPE = 688;
pub const DWG_OBJECT_TYPE_DWG_TYPE_POINTPARAMETERENTITY: DWG_OBJECT_TYPE = 689;
pub const DWG_OBJECT_TYPE_DWG_TYPE_POINTPATH: DWG_OBJECT_TYPE = 690;
pub const DWG_OBJECT_TYPE_DWG_TYPE_POLARGRIPENTITY: DWG_OBJECT_TYPE = 691;
pub const DWG_OBJECT_TYPE_DWG_TYPE_RADIMLGOBJECTCONTEXTDATA: DWG_OBJECT_TYPE = 692;
pub const DWG_OBJECT_TYPE_DWG_TYPE_RADIMOBJECTCONTEXTDATA: DWG_OBJECT_TYPE = 693;
pub const DWG_OBJECT_TYPE_DWG_TYPE_RAPIDRTRENDERSETTINGS: DWG_OBJECT_TYPE = 694;
pub const DWG_OBJECT_TYPE_DWG_TYPE_RASTERVARIABLES: DWG_OBJECT_TYPE = 695;
pub const DWG_OBJECT_TYPE_DWG_TYPE_RENDERENTRY: DWG_OBJECT_TYPE = 696;
pub const DWG_OBJECT_TYPE_DWG_TYPE_RENDERENVIRONMENT: DWG_OBJECT_TYPE = 697;
pub const DWG_OBJECT_TYPE_DWG_TYPE_RENDERGLOBAL: DWG_OBJECT_TYPE = 698;
pub const DWG_OBJECT_TYPE_DWG_TYPE_RENDERSETTINGS: DWG_OBJECT_TYPE = 699;
pub const DWG_OBJECT_TYPE_DWG_TYPE_REVOLVEDSURFACE: DWG_OBJECT_TYPE = 700;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ROTATIONPARAMETERENTITY: DWG_OBJECT_TYPE = 701;
pub const DWG_OBJECT_TYPE_DWG_TYPE_RTEXT: DWG_OBJECT_TYPE = 702;
pub const DWG_OBJECT_TYPE_DWG_TYPE_SCALE: DWG_OBJECT_TYPE = 703;
pub const DWG_OBJECT_TYPE_DWG_TYPE_SECTIONOBJECT: DWG_OBJECT_TYPE = 704;
pub const DWG_OBJECT_TYPE_DWG_TYPE_SECTIONVIEWSTYLE: DWG_OBJECT_TYPE = 705;
pub const DWG_OBJECT_TYPE_DWG_TYPE_SECTION_MANAGER: DWG_OBJECT_TYPE = 706;
pub const DWG_OBJECT_TYPE_DWG_TYPE_SECTION_SETTINGS: DWG_OBJECT_TYPE = 707;
pub const DWG_OBJECT_TYPE_DWG_TYPE_SKYLIGHT_BACKGROUND: DWG_OBJECT_TYPE = 708;
pub const DWG_OBJECT_TYPE_DWG_TYPE_SOLID_BACKGROUND: DWG_OBJECT_TYPE = 709;
pub const DWG_OBJECT_TYPE_DWG_TYPE_SORTENTSTABLE: DWG_OBJECT_TYPE = 710;
pub const DWG_OBJECT_TYPE_DWG_TYPE_SPATIAL_FILTER: DWG_OBJECT_TYPE = 711;
pub const DWG_OBJECT_TYPE_DWG_TYPE_SPATIAL_INDEX: DWG_OBJECT_TYPE = 712;
pub const DWG_OBJECT_TYPE_DWG_TYPE_SUN: DWG_OBJECT_TYPE = 713;
pub const DWG_OBJECT_TYPE_DWG_TYPE_SUNSTUDY: DWG_OBJECT_TYPE = 714;
pub const DWG_OBJECT_TYPE_DWG_TYPE_SWEPTSURFACE: DWG_OBJECT_TYPE = 715;
pub const DWG_OBJECT_TYPE_DWG_TYPE_TABLE: DWG_OBJECT_TYPE = 716;
pub const DWG_OBJECT_TYPE_DWG_TYPE_TABLECONTENT: DWG_OBJECT_TYPE = 717;
pub const DWG_OBJECT_TYPE_DWG_TYPE_TABLEGEOMETRY: DWG_OBJECT_TYPE = 718;
pub const DWG_OBJECT_TYPE_DWG_TYPE_TABLESTYLE: DWG_OBJECT_TYPE = 719;
pub const DWG_OBJECT_TYPE_DWG_TYPE_TEXTOBJECTCONTEXTDATA: DWG_OBJECT_TYPE = 720;
pub const DWG_OBJECT_TYPE_DWG_TYPE_TVDEVICEPROPERTIES: DWG_OBJECT_TYPE = 721;
pub const DWG_OBJECT_TYPE_DWG_TYPE_VISIBILITYGRIPENTITY: DWG_OBJECT_TYPE = 722;
pub const DWG_OBJECT_TYPE_DWG_TYPE_VISIBILITYPARAMETERENTITY: DWG_OBJECT_TYPE = 723;
pub const DWG_OBJECT_TYPE_DWG_TYPE_VISUALSTYLE: DWG_OBJECT_TYPE = 724;
pub const DWG_OBJECT_TYPE_DWG_TYPE_WIPEOUT: DWG_OBJECT_TYPE = 725;
pub const DWG_OBJECT_TYPE_DWG_TYPE_WIPEOUTVARIABLES: DWG_OBJECT_TYPE = 726;
pub const DWG_OBJECT_TYPE_DWG_TYPE_XREFPANELOBJECT: DWG_OBJECT_TYPE = 727;
pub const DWG_OBJECT_TYPE_DWG_TYPE_XYPARAMETERENTITY: DWG_OBJECT_TYPE = 728;
pub const DWG_OBJECT_TYPE_DWG_TYPE_BREAKDATA: DWG_OBJECT_TYPE = 729;
pub const DWG_OBJECT_TYPE_DWG_TYPE_BREAKPOINTREF: DWG_OBJECT_TYPE = 730;
pub const DWG_OBJECT_TYPE_DWG_TYPE_FLIPGRIPENTITY: DWG_OBJECT_TYPE = 731;
pub const DWG_OBJECT_TYPE_DWG_TYPE_LINEARGRIPENTITY: DWG_OBJECT_TYPE = 732;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ROTATIONGRIPENTITY: DWG_OBJECT_TYPE = 733;
pub const DWG_OBJECT_TYPE_DWG_TYPE_XYGRIPENTITY: DWG_OBJECT_TYPE = 734;
pub const DWG_OBJECT_TYPE_DWG_TYPE__3DLINE: DWG_OBJECT_TYPE = 735;
pub const DWG_OBJECT_TYPE_DWG_TYPE_REPEAT: DWG_OBJECT_TYPE = 736;
pub const DWG_OBJECT_TYPE_DWG_TYPE_ENDREP: DWG_OBJECT_TYPE = 737;
pub const DWG_OBJECT_TYPE_DWG_TYPE_JUMP: DWG_OBJECT_TYPE = 738;
pub const DWG_OBJECT_TYPE_DWG_TYPE_LOAD: DWG_OBJECT_TYPE = 739;
pub const DWG_OBJECT_TYPE_DWG_TYPE_FREED: DWG_OBJECT_TYPE = 65533;
pub const DWG_OBJECT_TYPE_DWG_TYPE_UNKNOWN_ENT: DWG_OBJECT_TYPE = 65534;
pub const DWG_OBJECT_TYPE_DWG_TYPE_UNKNOWN_OBJ: DWG_OBJECT_TYPE = 65535;
#[doc = "Object and Entity types that exist in dwg-files."]
pub type DWG_OBJECT_TYPE = ::std::os::raw::c_int;
#[doc = "Object and Entity types that exist in dwg-files."]
pub use self::DWG_OBJECT_TYPE as Dwg_Object_Type;
pub const DWG_OBJECT_TYPE_R11_DWG_TYPE_UNUSED_r11: DWG_OBJECT_TYPE_R11 = 0;
pub const DWG_OBJECT_TYPE_R11_DWG_TYPE_LINE_r11: DWG_OBJECT_TYPE_R11 = 1;
pub const DWG_OBJECT_TYPE_R11_DWG_TYPE_POINT_r11: DWG_OBJECT_TYPE_R11 = 2;
pub const DWG_OBJECT_TYPE_R11_DWG_TYPE_CIRCLE_r11: DWG_OBJECT_TYPE_R11 = 3;
pub const DWG_OBJECT_TYPE_R11_DWG_TYPE_SHAPE_r11: DWG_OBJECT_TYPE_R11 = 4;
pub const DWG_OBJECT_TYPE_R11_DWG_TYPE_REPEAT_r11: DWG_OBJECT_TYPE_R11 = 5;
pub const DWG_OBJECT_TYPE_R11_DWG_TYPE_ENDREP_r11: DWG_OBJECT_TYPE_R11 = 6;
pub const DWG_OBJECT_TYPE_R11_DWG_TYPE_TEXT_r11: DWG_OBJECT_TYPE_R11 = 7;
pub const DWG_OBJECT_TYPE_R11_DWG_TYPE_ARC_r11: DWG_OBJECT_TYPE_R11 = 8;
pub const DWG_OBJECT_TYPE_R11_DWG_TYPE_TRACE_r11: DWG_OBJECT_TYPE_R11 = 9;
pub const DWG_OBJECT_TYPE_R11_DWG_TYPE_LOAD_r11: DWG_OBJECT_TYPE_R11 = 10;
pub const DWG_OBJECT_TYPE_R11_DWG_TYPE_SOLID_r11: DWG_OBJECT_TYPE_R11 = 11;
pub const DWG_OBJECT_TYPE_R11_DWG_TYPE_BLOCK_r11: DWG_OBJECT_TYPE_R11 = 12;
pub const DWG_OBJECT_TYPE_R11_DWG_TYPE_ENDBLK_r11: DWG_OBJECT_TYPE_R11 = 13;
pub const DWG_OBJECT_TYPE_R11_DWG_TYPE_INSERT_r11: DWG_OBJECT_TYPE_R11 = 14;
pub const DWG_OBJECT_TYPE_R11_DWG_TYPE_ATTDEF_r11: DWG_OBJECT_TYPE_R11 = 15;
pub const DWG_OBJECT_TYPE_R11_DWG_TYPE_ATTRIB_r11: DWG_OBJECT_TYPE_R11 = 16;
pub const DWG_OBJECT_TYPE_R11_DWG_TYPE_SEQEND_r11: DWG_OBJECT_TYPE_R11 = 17;
pub const DWG_OBJECT_TYPE_R11_DWG_TYPE_JUMP_r11: DWG_OBJECT_TYPE_R11 = 18;
pub const DWG_OBJECT_TYPE_R11_DWG_TYPE_POLYLINE_r11: DWG_OBJECT_TYPE_R11 = 19;
pub const DWG_OBJECT_TYPE_R11_DWG_TYPE_VERTEX_r11: DWG_OBJECT_TYPE_R11 = 20;
pub const DWG_OBJECT_TYPE_R11_DWG_TYPE_3DLINE_r11: DWG_OBJECT_TYPE_R11 = 21;
pub const DWG_OBJECT_TYPE_R11_DWG_TYPE_3DFACE_r11: DWG_OBJECT_TYPE_R11 = 22;
pub const DWG_OBJECT_TYPE_R11_DWG_TYPE_DIMENSION_r11: DWG_OBJECT_TYPE_R11 = 23;
pub const DWG_OBJECT_TYPE_R11_DWG_TYPE_VIEWPORT_r11: DWG_OBJECT_TYPE_R11 = 24;
pub const DWG_OBJECT_TYPE_R11_DWG_TYPE_UNKNOWN_r11: DWG_OBJECT_TYPE_R11 = 25;
pub type DWG_OBJECT_TYPE_R11 = ::std::os::raw::c_int;
pub use self::DWG_OBJECT_TYPE_R11 as Dwg_Object_Type_r11;
pub const DWG_ERROR_DWG_NOERR: DWG_ERROR = 0;
pub const DWG_ERROR_DWG_ERR_WRONGCRC: DWG_ERROR = 1;
pub const DWG_ERROR_DWG_ERR_NOTYETSUPPORTED: DWG_ERROR = 2;
pub const DWG_ERROR_DWG_ERR_UNHANDLEDCLASS: DWG_ERROR = 4;
pub const DWG_ERROR_DWG_ERR_INVALIDTYPE: DWG_ERROR = 8;
pub const DWG_ERROR_DWG_ERR_INVALIDHANDLE: DWG_ERROR = 16;
pub const DWG_ERROR_DWG_ERR_INVALIDEED: DWG_ERROR = 32;
pub const DWG_ERROR_DWG_ERR_VALUEOUTOFBOUNDS: DWG_ERROR = 64;
pub const DWG_ERROR_DWG_ERR_CLASSESNOTFOUND: DWG_ERROR = 128;
pub const DWG_ERROR_DWG_ERR_SECTIONNOTFOUND: DWG_ERROR = 256;
pub const DWG_ERROR_DWG_ERR_PAGENOTFOUND: DWG_ERROR = 512;
pub const DWG_ERROR_DWG_ERR_INTERNALERROR: DWG_ERROR = 1024;
pub const DWG_ERROR_DWG_ERR_INVALIDDWG: DWG_ERROR = 2048;
pub const DWG_ERROR_DWG_ERR_IOERROR: DWG_ERROR = 4096;
pub const DWG_ERROR_DWG_ERR_OUTOFMEM: DWG_ERROR = 8192;
#[doc = "Error codes returned."]
pub type DWG_ERROR = ::std::os::raw::c_int;
#[doc = "Error codes returned."]
pub use self::DWG_ERROR as Dwg_Error;
#[doc = "handles resolve absolute or relative indices to objects.\n\ncode 2-5: represents the type of the relation: hard/soft, owner/id.\n\ncode TYPEDOBJHANDLE:\n2 Soft owner,\n3 Hard owner,\n4 Soft pointer,\n5 Hard pointer\n\ncode > 6: the handle is stored as an offset from some other handle.\n\ncode OFFSETOBJHANDLE for soft owners or pointers:\n6 ref + 1,\n8 ref - 1,\na ref + offset,\nc ref - offset\n\nSee \\ref Dwg_Handle"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_handle {
    #[doc = "< OFFSETOBJHANDLE if > 6"]
    pub code: BITCODE_RC,
    pub size: BITCODE_RC,
    pub value: BITCODE_RLL,
    pub is_global: BITCODE_B,
}
#[test]
fn bindgen_test_layout__dwg_handle() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_handle> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_handle>(),
        24usize,
        concat!("Size of: ", stringify!(_dwg_handle))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_handle>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_handle))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_handle),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_handle),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_handle),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_global) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_handle),
            "::",
            stringify!(is_global)
        )
    );
}
#[doc = "handles resolve absolute or relative indices to objects.\n\ncode 2-5: represents the type of the relation: hard/soft, owner/id.\n\ncode TYPEDOBJHANDLE:\n2 Soft owner,\n3 Hard owner,\n4 Soft pointer,\n5 Hard pointer\n\ncode > 6: the handle is stored as an offset from some other handle.\n\ncode OFFSETOBJHANDLE for soft owners or pointers:\n6 ref + 1,\n8 ref - 1,\na ref + offset,\nc ref - offset\n\nSee \\ref Dwg_Handle"]
pub type Dwg_Handle = _dwg_handle;
#[doc = "object references: obj is resolved by handleref (e.g. via\ndwg_resolve_handleref) when reading a DWG to the respective \\ref\nDwg_Object, and absolute_ref is resolved to the global\n_dwg_struct::object_ref index. It is the same as the hex number in the\nDXF handles.\n\nUsed as \\ref Dwg_Object_Ref"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_ref {
    pub obj: *mut _dwg_object,
    pub handleref: Dwg_Handle,
    pub absolute_ref: BITCODE_RLL,
    pub r11_idx: BITCODE_RSd,
}
#[test]
fn bindgen_test_layout__dwg_object_ref() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ref> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ref>(),
        48usize,
        concat!("Size of: ", stringify!(_dwg_object_ref))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ref>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_ref))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).obj) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ref),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handleref) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ref),
            "::",
            stringify!(handleref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).absolute_ref) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ref),
            "::",
            stringify!(absolute_ref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r11_idx) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ref),
            "::",
            stringify!(r11_idx)
        )
    );
}
#[doc = "object references: obj is resolved by handleref (e.g. via\ndwg_resolve_handleref) when reading a DWG to the respective \\ref\nDwg_Object, and absolute_ref is resolved to the global\n_dwg_struct::object_ref index. It is the same as the hex number in the\nDXF handles.\n\nUsed as \\ref Dwg_Object_Ref"]
pub type Dwg_Object_Ref = _dwg_object_ref;
pub type BITCODE_H = *mut Dwg_Object_Ref;
pub const DWG_HDL_CODE_DWG_HDL_OWNER: DWG_HDL_CODE = 0;
pub const DWG_HDL_CODE_DWG_HDL_SOFTOWN: DWG_HDL_CODE = 2;
pub const DWG_HDL_CODE_DWG_HDL_HARDOWN: DWG_HDL_CODE = 3;
pub const DWG_HDL_CODE_DWG_HDL_SOFTPTR: DWG_HDL_CODE = 4;
pub const DWG_HDL_CODE_DWG_HDL_HARDPTR: DWG_HDL_CODE = 5;
pub type DWG_HDL_CODE = ::std::os::raw::c_int;
pub use self::DWG_HDL_CODE as Dwg_Hdl_Code;
#[doc = "CMC or ENC colors: color index or rgb value. layers are off when the index\nis negative.\nUsed as \\ref Dwg_Color"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_color {
    pub index: BITCODE_BSd,
    pub flag: BITCODE_BS,
    pub raw: BITCODE_BS,
    pub rgb: BITCODE_BL,
    pub method: ::std::os::raw::c_uint,
    pub name: BITCODE_TV,
    pub book_name: BITCODE_TV,
    pub handle: BITCODE_H,
    pub alpha_raw: BITCODE_BL,
    pub alpha_type: BITCODE_BB,
    pub alpha: BITCODE_RC,
}
#[test]
fn bindgen_test_layout__dwg_color() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_color> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_color>(),
        48usize,
        concat!("Size of: ", stringify!(_dwg_color))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_color>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_color))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_color),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_color),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_color),
            "::",
            stringify!(raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rgb) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_color),
            "::",
            stringify!(rgb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).method) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_color),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_color),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).book_name) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_color),
            "::",
            stringify!(book_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_color),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alpha_raw) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_color),
            "::",
            stringify!(alpha_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alpha_type) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_color),
            "::",
            stringify!(alpha_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alpha) as usize - ptr as usize },
        45usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_color),
            "::",
            stringify!(alpha)
        )
    );
}
#[doc = "CMC or ENC colors: color index or rgb value. layers are off when the index\nis negative.\nUsed as \\ref Dwg_Color"]
pub type Dwg_Color = _dwg_color;
#[doc = "CMC or ENC colors: color index or rgb value. layers are off when the index\nis negative.\nUsed as \\ref Dwg_Color"]
pub type BITCODE_CMC = Dwg_Color;
#[doc = "CMC or ENC colors: color index or rgb value. layers are off when the index\nis negative.\nUsed as \\ref Dwg_Color"]
pub type BITCODE_CMTC = Dwg_Color;
#[doc = "CMC or ENC colors: color index or rgb value. layers are off when the index\nis negative.\nUsed as \\ref Dwg_Color"]
pub type BITCODE_ENC = Dwg_Color;
extern "C" {
    pub fn dwg_color_method_name(method: ::std::os::raw::c_uint) -> *const ::std::os::raw::c_char;
}
#[doc = "ASCII or Unicode text in xdata \\ref Dwg_Resbuf"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_binary_chunk {
    pub size: ::std::os::raw::c_ushort,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub u: _dwg_binary_chunk__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _dwg_binary_chunk__bindgen_ty_1 {
    pub data: *mut ::std::os::raw::c_char,
    pub wdata: *mut dwg_wchar_t,
}
#[test]
fn bindgen_test_layout__dwg_binary_chunk__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_binary_chunk__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_binary_chunk__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_dwg_binary_chunk__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_binary_chunk__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_binary_chunk__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_binary_chunk__bindgen_ty_1),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wdata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_binary_chunk__bindgen_ty_1),
            "::",
            stringify!(wdata)
        )
    );
}
#[test]
fn bindgen_test_layout__dwg_binary_chunk() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_binary_chunk> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_binary_chunk>(),
        16usize,
        concat!("Size of: ", stringify!(_dwg_binary_chunk))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_binary_chunk>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_binary_chunk))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_binary_chunk),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_binary_chunk),
            "::",
            stringify!(u)
        )
    );
}
impl _dwg_binary_chunk {
    #[inline]
    pub fn codepage(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 15u8) as u32) }
    }
    #[inline]
    pub fn set_codepage(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 15u8, val as u64)
        }
    }
    #[inline]
    pub fn is_tu(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_tu(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        codepage: ::std::os::raw::c_uint,
        is_tu: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 15u8, {
            let codepage: u32 = unsafe { ::std::mem::transmute(codepage) };
            codepage as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let is_tu: u32 = unsafe { ::std::mem::transmute(is_tu) };
            is_tu as u64
        });
        __bindgen_bitfield_unit
    }
}
#[doc = "result buffers: xdata linked list of dxf group - value pairs.\nUsed as \\ref Dwg_Resbuf"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_resbuf {
    pub type_: ::std::os::raw::c_short,
    pub value: _dwg_resbuf__bindgen_ty_1,
    pub nextrb: *mut _dwg_resbuf,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _dwg_resbuf__bindgen_ty_1 {
    pub pt: [f64; 3usize],
    pub i8_: ::std::os::raw::c_char,
    pub i16_: ::std::os::raw::c_short,
    pub i32_: ::std::os::raw::c_int,
    pub i64_: BITCODE_BLL,
    pub absref: BITCODE_RLL,
    pub dbl: f64,
    pub str_: _dwg_binary_chunk,
}
#[test]
fn bindgen_test_layout__dwg_resbuf__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_resbuf__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_resbuf__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(_dwg_resbuf__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_resbuf__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_resbuf__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_resbuf__bindgen_ty_1),
            "::",
            stringify!(pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).i8_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_resbuf__bindgen_ty_1),
            "::",
            stringify!(i8_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).i16_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_resbuf__bindgen_ty_1),
            "::",
            stringify!(i16_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).i32_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_resbuf__bindgen_ty_1),
            "::",
            stringify!(i32_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).i64_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_resbuf__bindgen_ty_1),
            "::",
            stringify!(i64_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).absref) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_resbuf__bindgen_ty_1),
            "::",
            stringify!(absref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_resbuf__bindgen_ty_1),
            "::",
            stringify!(dbl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).str_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_resbuf__bindgen_ty_1),
            "::",
            stringify!(str_)
        )
    );
}
#[test]
fn bindgen_test_layout__dwg_resbuf() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_resbuf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_resbuf>(),
        40usize,
        concat!("Size of: ", stringify!(_dwg_resbuf))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_resbuf>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_resbuf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_resbuf),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_resbuf),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nextrb) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_resbuf),
            "::",
            stringify!(nextrb)
        )
    );
}
#[doc = "result buffers: xdata linked list of dxf group - value pairs.\nUsed as \\ref Dwg_Resbuf"]
pub type Dwg_Resbuf = _dwg_resbuf;
#[doc = "\\struct Dwg_Header_Variables\nDWG header variables for all versions.\nIf uppercase related to the DXF HEADER $ name.\n\n\\ref _dwg_header_variables"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_header_variables {
    pub size: BITCODE_RL,
    #[doc = "< r2010+"]
    pub bitsize_hi: BITCODE_RL,
    pub bitsize: BITCODE_RL,
    #[doc = "< r13+"]
    pub ACADMAINTVER: BITCODE_RC,
    #[doc = "< r2013+"]
    pub REQUIREDVERSIONS: BITCODE_BLL,
    #[doc = "< DXF 3, r11+"]
    pub DWGCODEPAGE: BITCODE_TV,
    #[doc = "< <r11"]
    pub codepage: BITCODE_RS,
    pub unit1_ratio: BITCODE_BD,
    pub unit2_ratio: BITCODE_BD,
    pub unit3_ratio: BITCODE_BD,
    pub unit4_ratio: BITCODE_BD,
    pub unit1_name: BITCODE_TV,
    pub unit2_name: BITCODE_TV,
    pub unit3_name: BITCODE_TV,
    pub unit4_name: BITCODE_TV,
    pub unknown_8: BITCODE_BL,
    pub unknown_9: BITCODE_BL,
    pub unknown_10: BITCODE_BS,
    #[doc = "< r11-r2000 code 5, no DXF"]
    pub VX_TABLE_RECORD: BITCODE_H,
    pub DIMASO: BITCODE_B,
    pub DIMSHO: BITCODE_B,
    pub DIMSAV: BITCODE_B,
    pub PLINEGEN: BITCODE_B,
    pub ORTHOMODE: BITCODE_B,
    pub REGENMODE: BITCODE_B,
    pub FILLMODE: BITCODE_B,
    pub QTEXTMODE: BITCODE_B,
    pub PSLTSCALE: BITCODE_B,
    pub LIMCHECK: BITCODE_B,
    pub MENUEXT: [BITCODE_RC; 46usize],
    pub BLIPMODE: BITCODE_B,
    pub unknown_11: BITCODE_B,
    pub USRTIMER: BITCODE_B,
    pub FASTZOOM: BITCODE_B,
    pub FLATLAND: BITCODE_B,
    pub VIEWMODE: BITCODE_B,
    pub SKPOLY: BITCODE_B,
    pub unknown_mon: BITCODE_RS,
    pub unknown_day: BITCODE_RS,
    pub unknown_year: BITCODE_RS,
    pub unknown_hour: BITCODE_RS,
    pub unknown_min: BITCODE_RS,
    pub unknown_sec: BITCODE_RS,
    pub unknown_ms: BITCODE_RS,
    pub ANGDIR: BITCODE_B,
    pub SPLFRAME: BITCODE_B,
    pub ATTREQ: BITCODE_B,
    pub ATTDIA: BITCODE_B,
    pub MIRRTEXT: BITCODE_B,
    pub WORLDVIEW: BITCODE_B,
    pub WIREFRAME: BITCODE_B,
    pub TILEMODE: BITCODE_B,
    pub PLIMCHECK: BITCODE_B,
    pub VISRETAIN: BITCODE_B,
    pub DELOBJ: BITCODE_B,
    pub DISPSILH: BITCODE_B,
    pub PELLIPSE: BITCODE_B,
    pub SAVEIMAGES: BITCODE_BS,
    pub PROXYGRAPHICS: BITCODE_BS,
    pub MEASUREMENT: BITCODE_BS,
    pub DRAGMODE: BITCODE_BS,
    pub TREEDEPTH: BITCODE_BSd,
    pub LUNITS: BITCODE_BS,
    pub LUPREC: BITCODE_BS,
    pub AUNITS: BITCODE_BS,
    pub AUPREC: BITCODE_BS,
    pub ATTMODE: BITCODE_BS,
    pub COORDS: BITCODE_BS,
    pub PDMODE: BITCODE_BS,
    pub PICKSTYLE: BITCODE_BS,
    pub OSMODE: BITCODE_BS,
    pub unknown_12: BITCODE_BL,
    pub unknown_13: BITCODE_BL,
    pub unknown_14: BITCODE_BL,
    pub USERI1: BITCODE_BSd,
    pub USERI2: BITCODE_BSd,
    pub USERI3: BITCODE_BSd,
    pub USERI4: BITCODE_BSd,
    pub USERI5: BITCODE_BSd,
    pub SPLINESEGS: BITCODE_BS,
    pub SURFU: BITCODE_BS,
    pub SURFV: BITCODE_BS,
    pub SURFTYPE: BITCODE_BS,
    pub SURFTAB1: BITCODE_BS,
    pub SURFTAB2: BITCODE_BS,
    pub SPLINETYPE: BITCODE_BS,
    pub SHADEDGE: BITCODE_BS,
    pub SHADEDIF: BITCODE_BS,
    pub UNITMODE: BITCODE_BS,
    pub MAXACTVP: BITCODE_BS,
    pub ISOLINES: BITCODE_BS,
    pub CMLJUST: BITCODE_BS,
    pub TEXTQLTY: BITCODE_BS,
    pub unknown_14b: BITCODE_BL,
    pub LTSCALE: BITCODE_BD,
    pub TEXTSIZE: BITCODE_BD,
    pub TRACEWID: BITCODE_BD,
    pub SKETCHINC: BITCODE_BD,
    pub FILLETRAD: BITCODE_BD,
    pub THICKNESS: BITCODE_BD,
    pub ANGBASE: BITCODE_BD,
    pub PDSIZE: BITCODE_BD,
    pub PLINEWID: BITCODE_BD,
    pub USERR1: BITCODE_BD,
    pub USERR2: BITCODE_BD,
    pub USERR3: BITCODE_BD,
    pub USERR4: BITCODE_BD,
    pub USERR5: BITCODE_BD,
    pub CHAMFERA: BITCODE_BD,
    pub CHAMFERB: BITCODE_BD,
    pub CHAMFERC: BITCODE_BD,
    pub CHAMFERD: BITCODE_BD,
    pub FACETRES: BITCODE_BD,
    pub CMLSCALE: BITCODE_BD,
    pub CELTSCALE: BITCODE_BD,
    pub VIEWTWIST: BITCODE_BD,
    pub MENU: BITCODE_TV,
    pub TDCREATE: BITCODE_TIMEBLL,
    pub TDUPDATE: BITCODE_TIMEBLL,
    pub TDUCREATE: BITCODE_TIMEBLL,
    pub TDUUPDATE: BITCODE_TIMEBLL,
    pub unknown_15: BITCODE_BL,
    pub unknown_16: BITCODE_BL,
    pub unknown_17: BITCODE_BL,
    pub TDINDWG: BITCODE_TIMEBLL,
    pub TDUSRTIMER: BITCODE_TIMEBLL,
    pub CECOLOR: BITCODE_CMC,
    pub HANDLING: BITCODE_BS,
    pub HANDSEED: BITCODE_H,
    pub unknown_4f2: BITCODE_RL,
    pub unknown_5: BITCODE_RS,
    pub unknown_6: BITCODE_RS,
    pub unknown_6a: BITCODE_RS,
    pub unknown_6b: BITCODE_RS,
    pub unknown_6c: BITCODE_RS,
    #[doc = "< code 5, DXF 8"]
    pub CLAYER: BITCODE_H,
    #[doc = "< code 5, DXF 7"]
    pub TEXTSTYLE: BITCODE_H,
    #[doc = "< code 5, DXF 6"]
    pub CELTYPE: BITCODE_H,
    #[doc = "< r2007+ code 5, no DXF"]
    pub CMATERIAL: BITCODE_H,
    #[doc = "< code 5, DXF 2"]
    pub DIMSTYLE: BITCODE_H,
    #[doc = "< code 5, DXF 2"]
    pub CMLSTYLE: BITCODE_H,
    pub PSVPSCALE: BITCODE_BD,
    #[doc = "< r13+ ..."]
    pub PINSBASE: BITCODE_3BD,
    pub PEXTMIN: BITCODE_3BD,
    pub PEXTMAX: BITCODE_3BD,
    pub PLIMMIN: BITCODE_2DPOINT,
    pub PLIMMAX: BITCODE_2DPOINT,
    pub PELEVATION: BITCODE_BD,
    pub PUCSORG: BITCODE_3BD,
    pub PUCSXDIR: BITCODE_3BD,
    pub PUCSYDIR: BITCODE_3BD,
    #[doc = "< r13+ code 5, DXF 2"]
    pub PUCSNAME: BITCODE_H,
    #[doc = "< r2000+ code 5, DXF 2"]
    pub PUCSBASE: BITCODE_H,
    #[doc = "< r2000+ code 5, DXF 2"]
    pub PUCSORTHOREF: BITCODE_H,
    pub PUCSORTHOVIEW: BITCODE_BS,
    pub PUCSORGTOP: BITCODE_3BD,
    pub PUCSORGBOTTOM: BITCODE_3BD,
    pub PUCSORGLEFT: BITCODE_3BD,
    pub PUCSORGRIGHT: BITCODE_3BD,
    pub PUCSORGFRONT: BITCODE_3BD,
    pub PUCSORGBACK: BITCODE_3BD,
    pub INSBASE: BITCODE_3BD,
    pub EXTMIN: BITCODE_3BD,
    pub EXTMAX: BITCODE_3BD,
    pub VIEWDIR: BITCODE_3BD,
    pub TARGET: BITCODE_3BD,
    pub LIMMIN: BITCODE_2DPOINT,
    pub LIMMAX: BITCODE_2DPOINT,
    pub VIEWCTR: BITCODE_3RD,
    pub ELEVATION: BITCODE_BD,
    pub VIEWSIZE: BITCODE_RD,
    pub SNAPMODE: BITCODE_RS,
    pub SNAPUNIT: BITCODE_2RD,
    pub SNAPBASE: BITCODE_2RD,
    pub SNAPANG: BITCODE_RD,
    pub SNAPSTYLE: BITCODE_RS,
    pub SNAPISOPAIR: BITCODE_RS,
    pub GRIDMODE: BITCODE_RS,
    pub GRIDUNIT: BITCODE_2RD,
    pub AXISMODE: BITCODE_BS,
    pub AXISUNIT: BITCODE_2RD,
    pub VPOINTX: BITCODE_3RD,
    pub VPOINTY: BITCODE_3RD,
    pub VPOINTZ: BITCODE_3RD,
    pub VPOINTXALT: BITCODE_3RD,
    pub VPOINTYALT: BITCODE_3RD,
    pub VPOINTZALT: BITCODE_3RD,
    pub flag_3d: BITCODE_RS,
    pub UCSORG: BITCODE_3BD,
    pub UCSXDIR: BITCODE_3BD,
    pub UCSYDIR: BITCODE_3BD,
    #[doc = "< code 5, DXF 2"]
    pub UCSNAME: BITCODE_H,
    #[doc = "< code 5, DXF 2"]
    pub UCSBASE: BITCODE_H,
    pub UCSORTHOVIEW: BITCODE_BS,
    #[doc = "< code 5, DXF 2"]
    pub UCSORTHOREF: BITCODE_H,
    pub UCSORGTOP: BITCODE_3BD,
    pub UCSORGBOTTOM: BITCODE_3BD,
    pub UCSORGLEFT: BITCODE_3BD,
    pub UCSORGRIGHT: BITCODE_3BD,
    pub UCSORGFRONT: BITCODE_3BD,
    pub UCSORGBACK: BITCODE_3BD,
    pub DIMPOST: BITCODE_TV,
    pub DIMAPOST: BITCODE_TV,
    pub DIMTOL: BITCODE_B,
    pub DIMLIM: BITCODE_B,
    pub DIMTIH: BITCODE_B,
    pub DIMTOH: BITCODE_B,
    pub DIMSE1: BITCODE_B,
    pub DIMSE2: BITCODE_B,
    pub DIMALT: BITCODE_B,
    pub DIMTOFL: BITCODE_B,
    pub DIMSAH: BITCODE_B,
    pub DIMTIX: BITCODE_B,
    pub DIMSOXD: BITCODE_B,
    #[doc = "< r13-r14 only RC"]
    pub DIMALTD: BITCODE_BS,
    #[doc = "< r13-r14 only RC"]
    pub DIMZIN: BITCODE_BS,
    pub DIMSD1: BITCODE_B,
    pub DIMSD2: BITCODE_B,
    #[doc = "< r13-r14 only RC"]
    pub DIMTOLJ: BITCODE_BS,
    #[doc = "< r13-r14 only RC"]
    pub DIMJUST: BITCODE_BS,
    #[doc = "< r13-r14 only RC"]
    pub DIMFIT: BITCODE_BS,
    pub DIMUPT: BITCODE_B,
    #[doc = "< r13-r14 only RC"]
    pub DIMTZIN: BITCODE_BS,
    #[doc = "< r13-r14 only RC"]
    pub DIMTAD: BITCODE_BS,
    pub DIMUNIT: BITCODE_BS,
    pub DIMAUNIT: BITCODE_BS,
    pub DIMDEC: BITCODE_BS,
    pub DIMTDEC: BITCODE_BS,
    pub DIMALTU: BITCODE_BS,
    pub DIMALTTD: BITCODE_BS,
    #[doc = "< code 5, DXF 7"]
    pub DIMTXSTY: BITCODE_H,
    pub DIMSCALE: BITCODE_BD,
    pub DIMARROW: BITCODE_BD,
    pub DIMASZ: BITCODE_BD,
    pub DIMEXO: BITCODE_BD,
    pub DIMDLI: BITCODE_BD,
    pub DIMEXE: BITCODE_BD,
    pub DIMRND: BITCODE_BD,
    pub DIMDLE: BITCODE_BD,
    pub DIMTP: BITCODE_BD,
    pub DIMTM: BITCODE_BD,
    pub DIMFXL: BITCODE_BD,
    pub DIMJOGANG: BITCODE_BD,
    pub DIMTFILL: BITCODE_BS,
    pub DIMTFILLCLR: BITCODE_CMC,
    pub DIMAZIN: BITCODE_BS,
    pub DIMARCSYM: BITCODE_BS,
    pub DIMTXT: BITCODE_BD,
    pub DIMCEN: BITCODE_BD,
    pub DIMTSZ: BITCODE_BD,
    pub DIMALTF: BITCODE_BD,
    pub DIMLFAC: BITCODE_BD,
    pub DIMTVP: BITCODE_BD,
    pub DIMTFAC: BITCODE_BD,
    pub DIMGAP: BITCODE_BD,
    pub DIMPOST_T: BITCODE_TV,
    pub DIMAPOST_T: BITCODE_TV,
    pub DIMBLK_T: BITCODE_TV,
    pub DIMBLK1_T: BITCODE_TV,
    pub DIMBLK2_T: BITCODE_TV,
    pub unknown_string: BITCODE_TV,
    pub DIMALTRND: BITCODE_BD,
    pub DIMCLRD_C: BITCODE_RS,
    pub DIMCLRE_C: BITCODE_RS,
    pub DIMCLRT_C: BITCODE_RS,
    pub DIMCLRD: BITCODE_CMC,
    pub DIMCLRE: BITCODE_CMC,
    pub DIMCLRT: BITCODE_CMC,
    #[doc = "< r2000+ ..."]
    pub DIMADEC: BITCODE_BS,
    pub DIMFRAC: BITCODE_BS,
    pub DIMLUNIT: BITCODE_BS,
    pub DIMDSEP: BITCODE_BS,
    pub DIMTMOVE: BITCODE_BS,
    #[doc = "< r13-r14 only RC"]
    pub DIMALTZ: BITCODE_BS,
    #[doc = "< r13-r14 only RC"]
    pub DIMALTTZ: BITCODE_BS,
    pub DIMATFIT: BITCODE_BS,
    #[doc = "< r2007+"]
    pub DIMFXLON: BITCODE_B,
    #[doc = "< r2010+"]
    pub DIMTXTDIRECTION: BITCODE_B,
    #[doc = "< r2010+"]
    pub DIMALTMZF: BITCODE_BD,
    #[doc = "< r2010+"]
    pub DIMALTMZS: BITCODE_TV,
    #[doc = "< r2010+"]
    pub DIMMZF: BITCODE_BD,
    #[doc = "< r2010+"]
    pub DIMMZS: BITCODE_TV,
    #[doc = "< r2000+ code 5, DXF 1"]
    pub DIMLDRBLK: BITCODE_H,
    #[doc = "< r2000+ code 5, DXF 1"]
    pub DIMBLK: BITCODE_H,
    #[doc = "< r2000+ code 5, DXF 1"]
    pub DIMBLK1: BITCODE_H,
    #[doc = "< r2000+ code 5, DXF 1"]
    pub DIMBLK2: BITCODE_H,
    #[doc = "< r2007+ code 5, DXF 6"]
    pub DIMLTYPE: BITCODE_H,
    #[doc = "< r2007+ code 5, DXF 6"]
    pub DIMLTEX1: BITCODE_H,
    #[doc = "< r2007+ code 5, DXF 6"]
    pub DIMLTEX2: BITCODE_H,
    #[doc = "< r2000+"]
    pub DIMLWD: BITCODE_BSd,
    #[doc = "< r2000+"]
    pub DIMLWE: BITCODE_BSd,
    #[doc = "< code 3"]
    pub BLOCK_CONTROL_OBJECT: BITCODE_H,
    #[doc = "< code 3"]
    pub LAYER_CONTROL_OBJECT: BITCODE_H,
    #[doc = "< code 3"]
    pub STYLE_CONTROL_OBJECT: BITCODE_H,
    #[doc = "< code 3"]
    pub LTYPE_CONTROL_OBJECT: BITCODE_H,
    #[doc = "< code 3"]
    pub VIEW_CONTROL_OBJECT: BITCODE_H,
    #[doc = "< code 3"]
    pub UCS_CONTROL_OBJECT: BITCODE_H,
    #[doc = "< code 3"]
    pub VPORT_CONTROL_OBJECT: BITCODE_H,
    #[doc = "< code 3"]
    pub APPID_CONTROL_OBJECT: BITCODE_H,
    #[doc = "< code 3"]
    pub DIMSTYLE_CONTROL_OBJECT: BITCODE_H,
    #[doc = "< r11-r2000 code 3"]
    pub VX_CONTROL_OBJECT: BITCODE_H,
    #[doc = "< code 5"]
    pub DICTIONARY_ACAD_GROUP: BITCODE_H,
    #[doc = "< code 5"]
    pub DICTIONARY_ACAD_MLINESTYLE: BITCODE_H,
    #[doc = "< code 5, the \"NOD\""]
    pub DICTIONARY_NAMED_OBJECT: BITCODE_H,
    #[doc = "< r2000+"]
    pub TSTACKALIGN: BITCODE_BS,
    #[doc = "< r2000+"]
    pub TSTACKSIZE: BITCODE_BS,
    #[doc = "< r2000+"]
    pub HYPERLINKBASE: BITCODE_TV,
    #[doc = "< r2000+"]
    pub STYLESHEET: BITCODE_TV,
    #[doc = "< r2000+ code 5"]
    pub DICTIONARY_LAYOUT: BITCODE_H,
    #[doc = "< r2000+ code 5"]
    pub DICTIONARY_PLOTSETTINGS: BITCODE_H,
    #[doc = "< r2000+ code 5"]
    pub DICTIONARY_PLOTSTYLENAME: BITCODE_H,
    #[doc = "< r2004+ code 5"]
    pub DICTIONARY_MATERIAL: BITCODE_H,
    #[doc = "< r2004+ code 5"]
    pub DICTIONARY_COLOR: BITCODE_H,
    #[doc = "< r2007+ code 5"]
    pub DICTIONARY_VISUALSTYLE: BITCODE_H,
    #[doc = "< r2010+ code 5 ??"]
    pub DICTIONARY_LIGHTLIST: BITCODE_H,
    #[doc = "< r2013+ code 5 LIGHTLIST?"]
    pub unknown_20: BITCODE_H,
    pub FLAGS: BITCODE_BL,
    #[doc = "< = FLAGS & 0x1f, see dxf_cvt_lweight() DXF 370 (int16)"]
    pub CELWEIGHT: BITCODE_BSd,
    #[doc = "< = FLAGS & 0x60"]
    pub ENDCAPS: BITCODE_B,
    #[doc = "< = FLAGS & 0x180"]
    pub JOINSTYLE: BITCODE_B,
    #[doc = "< = !(FLAGS & 0x200)"]
    pub LWDISPLAY: BITCODE_B,
    #[doc = "< = !(FLAGS & 0x400)"]
    pub XEDIT: BITCODE_B,
    #[doc = "< = FLAGS & 0x800"]
    pub EXTNAMES: BITCODE_B,
    #[doc = "< = FLAGS & 0x2000"]
    pub PSTYLEMODE: BITCODE_B,
    #[doc = "< = FLAGS & 0x4000"]
    pub OLESTARTUP: BITCODE_B,
    pub INSUNITS: BITCODE_BS,
    pub CEPSNTYPE: BITCODE_BS,
    #[doc = "< when CEPSNTYPE = 3, code 5"]
    pub CPSNID: BITCODE_H,
    pub FINGERPRINTGUID: BITCODE_TV,
    pub VERSIONGUID: BITCODE_TV,
    pub SORTENTS: BITCODE_RC,
    pub INDEXCTL: BITCODE_RC,
    pub HIDETEXT: BITCODE_RC,
    pub XCLIPFRAME: BITCODE_RC,
    pub DIMASSOC: BITCODE_RC,
    pub HALOGAP: BITCODE_RC,
    pub OBSCOLOR: BITCODE_BS,
    pub INTERSECTIONCOLOR: BITCODE_BS,
    pub OBSLTYPE: BITCODE_RC,
    pub INTERSECTIONDISPLAY: BITCODE_RC,
    pub PROJECTNAME: BITCODE_TV,
    #[doc = "< code 5"]
    pub BLOCK_RECORD_PSPACE: BITCODE_H,
    #[doc = "< code 5"]
    pub BLOCK_RECORD_MSPACE: BITCODE_H,
    #[doc = "< code 5"]
    pub LTYPE_BYLAYER: BITCODE_H,
    #[doc = "< code 5"]
    pub LTYPE_BYBLOCK: BITCODE_H,
    #[doc = "< code 5"]
    pub LTYPE_CONTINUOUS: BITCODE_H,
    #[doc = "< r2007+ ..."]
    pub CAMERADISPLAY: BITCODE_B,
    pub unknown_21: BITCODE_BL,
    pub unknown_22: BITCODE_BL,
    pub unknown_23: BITCODE_BD,
    pub STEPSPERSEC: BITCODE_BD,
    pub STEPSIZE: BITCODE_BD,
    pub _3DDWFPREC: BITCODE_BD,
    pub LENSLENGTH: BITCODE_BD,
    pub CAMERAHEIGHT: BITCODE_BD,
    pub SOLIDHIST: BITCODE_RC,
    pub SHOWHIST: BITCODE_RC,
    pub PSOLWIDTH: BITCODE_BD,
    pub PSOLHEIGHT: BITCODE_BD,
    pub LOFTANG1: BITCODE_BD,
    pub LOFTANG2: BITCODE_BD,
    pub LOFTMAG1: BITCODE_BD,
    pub LOFTMAG2: BITCODE_BD,
    pub LOFTPARAM: BITCODE_BS,
    pub LOFTNORMALS: BITCODE_RC,
    pub LATITUDE: BITCODE_BD,
    pub LONGITUDE: BITCODE_BD,
    pub NORTHDIRECTION: BITCODE_BD,
    pub TIMEZONE: BITCODE_BL,
    pub LIGHTGLYPHDISPLAY: BITCODE_RC,
    pub TILEMODELIGHTSYNCH: BITCODE_RC,
    pub DWFFRAME: BITCODE_RC,
    pub DGNFRAME: BITCODE_RC,
    pub REALWORLDSCALE: BITCODE_B,
    pub INTERFERECOLOR: BITCODE_CMC,
    #[doc = "< r2007+ code 5, DXF 345 VISUALSTYLE"]
    pub INTERFEREOBJVS: BITCODE_H,
    #[doc = "< r2007+ code 5, DXF 346 VISUALSTYLE"]
    pub INTERFEREVPVS: BITCODE_H,
    #[doc = "< r2007+ code 5, DXF 349 VISUALSTYLE"]
    pub DRAGVS: BITCODE_H,
    pub CSHADOW: BITCODE_RC,
    pub SHADOWPLANELOCATION: BITCODE_BD,
    #[doc = "< r14+ ... optional"]
    pub unknown_54: BITCODE_BS,
    pub unknown_55: BITCODE_BS,
    pub unknown_56: BITCODE_BS,
    pub unknown_57: BITCODE_BS,
    pub dwg_size: BITCODE_RL,
    pub numentities: BITCODE_RS,
    pub circle_zoom_percent: BITCODE_RS,
    pub FRONTZ: BITCODE_BD,
    pub BACKZ: BITCODE_BD,
    pub UCSICON: BITCODE_RC,
    pub oldCECOLOR_hi: BITCODE_RL,
    pub oldCECOLOR_lo: BITCODE_RL,
    pub layer_colors: [BITCODE_RS; 128usize],
    pub unknown_51e: BITCODE_RS,
    pub unknown_520: BITCODE_RS,
    pub unknown_52c: BITCODE_RSd,
    pub unknown_52e: BITCODE_RS,
    pub unknown_530: BITCODE_RC,
    pub unknown_59: BITCODE_RS,
    pub aspect_ratio: BITCODE_RD,
}
#[test]
fn bindgen_test_layout__dwg_header_variables() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_header_variables> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_header_variables>(),
        3288usize,
        concat!("Size of: ", stringify!(_dwg_header_variables))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_header_variables>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_header_variables))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bitsize_hi) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(bitsize_hi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bitsize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(bitsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ACADMAINTVER) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(ACADMAINTVER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).REQUIREDVERSIONS) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(REQUIREDVERSIONS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DWGCODEPAGE) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DWGCODEPAGE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).codepage) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(codepage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unit1_ratio) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(unit1_ratio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unit2_ratio) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(unit2_ratio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unit3_ratio) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(unit3_ratio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unit4_ratio) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(unit4_ratio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unit1_name) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(unit1_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unit2_name) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(unit2_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unit3_name) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(unit3_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unit4_name) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(unit4_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_8) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(unknown_8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_9) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(unknown_9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_10) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(unknown_10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VX_TABLE_RECORD) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(VX_TABLE_RECORD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMASO) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMASO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMSHO) as usize - ptr as usize },
        129usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMSHO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMSAV) as usize - ptr as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMSAV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PLINEGEN) as usize - ptr as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(PLINEGEN)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ORTHOMODE) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(ORTHOMODE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).REGENMODE) as usize - ptr as usize },
        133usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(REGENMODE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FILLMODE) as usize - ptr as usize },
        134usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(FILLMODE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QTEXTMODE) as usize - ptr as usize },
        135usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(QTEXTMODE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PSLTSCALE) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(PSLTSCALE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LIMCHECK) as usize - ptr as usize },
        137usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(LIMCHECK)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MENUEXT) as usize - ptr as usize },
        138usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(MENUEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BLIPMODE) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(BLIPMODE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_11) as usize - ptr as usize },
        185usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(unknown_11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USRTIMER) as usize - ptr as usize },
        186usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(USRTIMER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FASTZOOM) as usize - ptr as usize },
        187usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(FASTZOOM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FLATLAND) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(FLATLAND)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VIEWMODE) as usize - ptr as usize },
        189usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(VIEWMODE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SKPOLY) as usize - ptr as usize },
        190usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(SKPOLY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_mon) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(unknown_mon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_day) as usize - ptr as usize },
        194usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(unknown_day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_year) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(unknown_year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_hour) as usize - ptr as usize },
        198usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(unknown_hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_min) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(unknown_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_sec) as usize - ptr as usize },
        202usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(unknown_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_ms) as usize - ptr as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(unknown_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ANGDIR) as usize - ptr as usize },
        206usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(ANGDIR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SPLFRAME) as usize - ptr as usize },
        207usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(SPLFRAME)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ATTREQ) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(ATTREQ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ATTDIA) as usize - ptr as usize },
        209usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(ATTDIA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MIRRTEXT) as usize - ptr as usize },
        210usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(MIRRTEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WORLDVIEW) as usize - ptr as usize },
        211usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(WORLDVIEW)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WIREFRAME) as usize - ptr as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(WIREFRAME)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TILEMODE) as usize - ptr as usize },
        213usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(TILEMODE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PLIMCHECK) as usize - ptr as usize },
        214usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(PLIMCHECK)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VISRETAIN) as usize - ptr as usize },
        215usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(VISRETAIN)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DELOBJ) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DELOBJ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DISPSILH) as usize - ptr as usize },
        217usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DISPSILH)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PELLIPSE) as usize - ptr as usize },
        218usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(PELLIPSE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SAVEIMAGES) as usize - ptr as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(SAVEIMAGES)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PROXYGRAPHICS) as usize - ptr as usize },
        222usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(PROXYGRAPHICS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MEASUREMENT) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(MEASUREMENT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DRAGMODE) as usize - ptr as usize },
        226usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DRAGMODE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TREEDEPTH) as usize - ptr as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(TREEDEPTH)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LUNITS) as usize - ptr as usize },
        230usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(LUNITS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LUPREC) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(LUPREC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AUNITS) as usize - ptr as usize },
        234usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(AUNITS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AUPREC) as usize - ptr as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(AUPREC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ATTMODE) as usize - ptr as usize },
        238usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(ATTMODE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).COORDS) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(COORDS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PDMODE) as usize - ptr as usize },
        242usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(PDMODE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PICKSTYLE) as usize - ptr as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(PICKSTYLE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OSMODE) as usize - ptr as usize },
        246usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(OSMODE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_12) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(unknown_12)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_13) as usize - ptr as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(unknown_13)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_14) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(unknown_14)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USERI1) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(USERI1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USERI2) as usize - ptr as usize },
        262usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(USERI2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USERI3) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(USERI3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USERI4) as usize - ptr as usize },
        266usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(USERI4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USERI5) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(USERI5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SPLINESEGS) as usize - ptr as usize },
        270usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(SPLINESEGS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SURFU) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(SURFU)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SURFV) as usize - ptr as usize },
        274usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(SURFV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SURFTYPE) as usize - ptr as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(SURFTYPE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SURFTAB1) as usize - ptr as usize },
        278usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(SURFTAB1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SURFTAB2) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(SURFTAB2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SPLINETYPE) as usize - ptr as usize },
        282usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(SPLINETYPE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SHADEDGE) as usize - ptr as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(SHADEDGE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SHADEDIF) as usize - ptr as usize },
        286usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(SHADEDIF)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UNITMODE) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(UNITMODE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MAXACTVP) as usize - ptr as usize },
        290usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(MAXACTVP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ISOLINES) as usize - ptr as usize },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(ISOLINES)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CMLJUST) as usize - ptr as usize },
        294usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(CMLJUST)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TEXTQLTY) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(TEXTQLTY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_14b) as usize - ptr as usize },
        300usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(unknown_14b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LTSCALE) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(LTSCALE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TEXTSIZE) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(TEXTSIZE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TRACEWID) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(TRACEWID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SKETCHINC) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(SKETCHINC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FILLETRAD) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(FILLETRAD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).THICKNESS) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(THICKNESS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ANGBASE) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(ANGBASE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PDSIZE) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(PDSIZE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PLINEWID) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(PLINEWID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USERR1) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(USERR1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USERR2) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(USERR2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USERR3) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(USERR3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USERR4) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(USERR4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USERR5) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(USERR5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CHAMFERA) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(CHAMFERA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CHAMFERB) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(CHAMFERB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CHAMFERC) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(CHAMFERC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CHAMFERD) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(CHAMFERD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FACETRES) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(FACETRES)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CMLSCALE) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(CMLSCALE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CELTSCALE) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(CELTSCALE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VIEWTWIST) as usize - ptr as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(VIEWTWIST)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MENU) as usize - ptr as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(MENU)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TDCREATE) as usize - ptr as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(TDCREATE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TDUPDATE) as usize - ptr as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(TDUPDATE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TDUCREATE) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(TDUCREATE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TDUUPDATE) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(TDUUPDATE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_15) as usize - ptr as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(unknown_15)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_16) as usize - ptr as usize },
        556usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(unknown_16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_17) as usize - ptr as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(unknown_17)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TDINDWG) as usize - ptr as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(TDINDWG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TDUSRTIMER) as usize - ptr as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(TDUSRTIMER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CECOLOR) as usize - ptr as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(CECOLOR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HANDLING) as usize - ptr as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(HANDLING)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HANDSEED) as usize - ptr as usize },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(HANDSEED)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_4f2) as usize - ptr as usize },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(unknown_4f2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_5) as usize - ptr as usize },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(unknown_5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_6) as usize - ptr as usize },
        670usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(unknown_6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_6a) as usize - ptr as usize },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(unknown_6a)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_6b) as usize - ptr as usize },
        674usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(unknown_6b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_6c) as usize - ptr as usize },
        676usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(unknown_6c)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CLAYER) as usize - ptr as usize },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(CLAYER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TEXTSTYLE) as usize - ptr as usize },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(TEXTSTYLE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CELTYPE) as usize - ptr as usize },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(CELTYPE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CMATERIAL) as usize - ptr as usize },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(CMATERIAL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMSTYLE) as usize - ptr as usize },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMSTYLE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CMLSTYLE) as usize - ptr as usize },
        720usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(CMLSTYLE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PSVPSCALE) as usize - ptr as usize },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(PSVPSCALE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PINSBASE) as usize - ptr as usize },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(PINSBASE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PEXTMIN) as usize - ptr as usize },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(PEXTMIN)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PEXTMAX) as usize - ptr as usize },
        784usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(PEXTMAX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PLIMMIN) as usize - ptr as usize },
        808usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(PLIMMIN)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PLIMMAX) as usize - ptr as usize },
        824usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(PLIMMAX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PELEVATION) as usize - ptr as usize },
        840usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(PELEVATION)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PUCSORG) as usize - ptr as usize },
        848usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(PUCSORG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PUCSXDIR) as usize - ptr as usize },
        872usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(PUCSXDIR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PUCSYDIR) as usize - ptr as usize },
        896usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(PUCSYDIR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PUCSNAME) as usize - ptr as usize },
        920usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(PUCSNAME)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PUCSBASE) as usize - ptr as usize },
        928usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(PUCSBASE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PUCSORTHOREF) as usize - ptr as usize },
        936usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(PUCSORTHOREF)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PUCSORTHOVIEW) as usize - ptr as usize },
        944usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(PUCSORTHOVIEW)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PUCSORGTOP) as usize - ptr as usize },
        952usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(PUCSORGTOP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PUCSORGBOTTOM) as usize - ptr as usize },
        976usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(PUCSORGBOTTOM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PUCSORGLEFT) as usize - ptr as usize },
        1000usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(PUCSORGLEFT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PUCSORGRIGHT) as usize - ptr as usize },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(PUCSORGRIGHT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PUCSORGFRONT) as usize - ptr as usize },
        1048usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(PUCSORGFRONT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PUCSORGBACK) as usize - ptr as usize },
        1072usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(PUCSORGBACK)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).INSBASE) as usize - ptr as usize },
        1096usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(INSBASE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EXTMIN) as usize - ptr as usize },
        1120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(EXTMIN)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EXTMAX) as usize - ptr as usize },
        1144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(EXTMAX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VIEWDIR) as usize - ptr as usize },
        1168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(VIEWDIR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TARGET) as usize - ptr as usize },
        1192usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(TARGET)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LIMMIN) as usize - ptr as usize },
        1216usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(LIMMIN)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LIMMAX) as usize - ptr as usize },
        1232usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(LIMMAX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VIEWCTR) as usize - ptr as usize },
        1248usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(VIEWCTR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ELEVATION) as usize - ptr as usize },
        1272usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(ELEVATION)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VIEWSIZE) as usize - ptr as usize },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(VIEWSIZE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SNAPMODE) as usize - ptr as usize },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(SNAPMODE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SNAPUNIT) as usize - ptr as usize },
        1296usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(SNAPUNIT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SNAPBASE) as usize - ptr as usize },
        1312usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(SNAPBASE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SNAPANG) as usize - ptr as usize },
        1328usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(SNAPANG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SNAPSTYLE) as usize - ptr as usize },
        1336usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(SNAPSTYLE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SNAPISOPAIR) as usize - ptr as usize },
        1338usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(SNAPISOPAIR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GRIDMODE) as usize - ptr as usize },
        1340usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(GRIDMODE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GRIDUNIT) as usize - ptr as usize },
        1344usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(GRIDUNIT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AXISMODE) as usize - ptr as usize },
        1360usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(AXISMODE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AXISUNIT) as usize - ptr as usize },
        1368usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(AXISUNIT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VPOINTX) as usize - ptr as usize },
        1384usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(VPOINTX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VPOINTY) as usize - ptr as usize },
        1408usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(VPOINTY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VPOINTZ) as usize - ptr as usize },
        1432usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(VPOINTZ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VPOINTXALT) as usize - ptr as usize },
        1456usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(VPOINTXALT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VPOINTYALT) as usize - ptr as usize },
        1480usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(VPOINTYALT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VPOINTZALT) as usize - ptr as usize },
        1504usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(VPOINTZALT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag_3d) as usize - ptr as usize },
        1528usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(flag_3d)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UCSORG) as usize - ptr as usize },
        1536usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(UCSORG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UCSXDIR) as usize - ptr as usize },
        1560usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(UCSXDIR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UCSYDIR) as usize - ptr as usize },
        1584usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(UCSYDIR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UCSNAME) as usize - ptr as usize },
        1608usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(UCSNAME)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UCSBASE) as usize - ptr as usize },
        1616usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(UCSBASE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UCSORTHOVIEW) as usize - ptr as usize },
        1624usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(UCSORTHOVIEW)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UCSORTHOREF) as usize - ptr as usize },
        1632usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(UCSORTHOREF)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UCSORGTOP) as usize - ptr as usize },
        1640usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(UCSORGTOP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UCSORGBOTTOM) as usize - ptr as usize },
        1664usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(UCSORGBOTTOM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UCSORGLEFT) as usize - ptr as usize },
        1688usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(UCSORGLEFT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UCSORGRIGHT) as usize - ptr as usize },
        1712usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(UCSORGRIGHT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UCSORGFRONT) as usize - ptr as usize },
        1736usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(UCSORGFRONT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UCSORGBACK) as usize - ptr as usize },
        1760usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(UCSORGBACK)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMPOST) as usize - ptr as usize },
        1784usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMPOST)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMAPOST) as usize - ptr as usize },
        1792usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMAPOST)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMTOL) as usize - ptr as usize },
        1800usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMTOL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMLIM) as usize - ptr as usize },
        1801usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMLIM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMTIH) as usize - ptr as usize },
        1802usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMTIH)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMTOH) as usize - ptr as usize },
        1803usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMTOH)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMSE1) as usize - ptr as usize },
        1804usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMSE1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMSE2) as usize - ptr as usize },
        1805usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMSE2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMALT) as usize - ptr as usize },
        1806usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMALT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMTOFL) as usize - ptr as usize },
        1807usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMTOFL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMSAH) as usize - ptr as usize },
        1808usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMSAH)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMTIX) as usize - ptr as usize },
        1809usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMTIX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMSOXD) as usize - ptr as usize },
        1810usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMSOXD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMALTD) as usize - ptr as usize },
        1812usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMALTD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMZIN) as usize - ptr as usize },
        1814usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMZIN)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMSD1) as usize - ptr as usize },
        1816usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMSD1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMSD2) as usize - ptr as usize },
        1817usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMSD2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMTOLJ) as usize - ptr as usize },
        1818usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMTOLJ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMJUST) as usize - ptr as usize },
        1820usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMJUST)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMFIT) as usize - ptr as usize },
        1822usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMFIT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMUPT) as usize - ptr as usize },
        1824usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMUPT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMTZIN) as usize - ptr as usize },
        1826usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMTZIN)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMTAD) as usize - ptr as usize },
        1828usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMTAD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMUNIT) as usize - ptr as usize },
        1830usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMUNIT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMAUNIT) as usize - ptr as usize },
        1832usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMAUNIT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMDEC) as usize - ptr as usize },
        1834usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMDEC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMTDEC) as usize - ptr as usize },
        1836usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMTDEC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMALTU) as usize - ptr as usize },
        1838usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMALTU)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMALTTD) as usize - ptr as usize },
        1840usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMALTTD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMTXSTY) as usize - ptr as usize },
        1848usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMTXSTY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMSCALE) as usize - ptr as usize },
        1856usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMSCALE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMARROW) as usize - ptr as usize },
        1864usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMARROW)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMASZ) as usize - ptr as usize },
        1872usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMASZ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMEXO) as usize - ptr as usize },
        1880usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMEXO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMDLI) as usize - ptr as usize },
        1888usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMDLI)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMEXE) as usize - ptr as usize },
        1896usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMEXE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMRND) as usize - ptr as usize },
        1904usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMRND)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMDLE) as usize - ptr as usize },
        1912usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMDLE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMTP) as usize - ptr as usize },
        1920usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMTP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMTM) as usize - ptr as usize },
        1928usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMTM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMFXL) as usize - ptr as usize },
        1936usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMFXL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMJOGANG) as usize - ptr as usize },
        1944usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMJOGANG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMTFILL) as usize - ptr as usize },
        1952usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMTFILL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMTFILLCLR) as usize - ptr as usize },
        1960usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMTFILLCLR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMAZIN) as usize - ptr as usize },
        2008usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMAZIN)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMARCSYM) as usize - ptr as usize },
        2010usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMARCSYM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMTXT) as usize - ptr as usize },
        2016usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMTXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMCEN) as usize - ptr as usize },
        2024usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMCEN)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMTSZ) as usize - ptr as usize },
        2032usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMTSZ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMALTF) as usize - ptr as usize },
        2040usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMALTF)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMLFAC) as usize - ptr as usize },
        2048usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMLFAC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMTVP) as usize - ptr as usize },
        2056usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMTVP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMTFAC) as usize - ptr as usize },
        2064usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMTFAC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMGAP) as usize - ptr as usize },
        2072usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMGAP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMPOST_T) as usize - ptr as usize },
        2080usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMPOST_T)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMAPOST_T) as usize - ptr as usize },
        2088usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMAPOST_T)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMBLK_T) as usize - ptr as usize },
        2096usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMBLK_T)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMBLK1_T) as usize - ptr as usize },
        2104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMBLK1_T)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMBLK2_T) as usize - ptr as usize },
        2112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMBLK2_T)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_string) as usize - ptr as usize },
        2120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(unknown_string)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMALTRND) as usize - ptr as usize },
        2128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMALTRND)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMCLRD_C) as usize - ptr as usize },
        2136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMCLRD_C)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMCLRE_C) as usize - ptr as usize },
        2138usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMCLRE_C)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMCLRT_C) as usize - ptr as usize },
        2140usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMCLRT_C)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMCLRD) as usize - ptr as usize },
        2144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMCLRD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMCLRE) as usize - ptr as usize },
        2192usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMCLRE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMCLRT) as usize - ptr as usize },
        2240usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMCLRT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMADEC) as usize - ptr as usize },
        2288usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMADEC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMFRAC) as usize - ptr as usize },
        2290usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMFRAC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMLUNIT) as usize - ptr as usize },
        2292usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMLUNIT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMDSEP) as usize - ptr as usize },
        2294usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMDSEP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMTMOVE) as usize - ptr as usize },
        2296usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMTMOVE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMALTZ) as usize - ptr as usize },
        2298usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMALTZ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMALTTZ) as usize - ptr as usize },
        2300usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMALTTZ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMATFIT) as usize - ptr as usize },
        2302usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMATFIT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMFXLON) as usize - ptr as usize },
        2304usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMFXLON)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMTXTDIRECTION) as usize - ptr as usize },
        2305usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMTXTDIRECTION)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMALTMZF) as usize - ptr as usize },
        2312usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMALTMZF)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMALTMZS) as usize - ptr as usize },
        2320usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMALTMZS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMMZF) as usize - ptr as usize },
        2328usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMMZF)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMMZS) as usize - ptr as usize },
        2336usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMMZS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMLDRBLK) as usize - ptr as usize },
        2344usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMLDRBLK)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMBLK) as usize - ptr as usize },
        2352usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMBLK)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMBLK1) as usize - ptr as usize },
        2360usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMBLK1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMBLK2) as usize - ptr as usize },
        2368usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMBLK2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMLTYPE) as usize - ptr as usize },
        2376usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMLTYPE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMLTEX1) as usize - ptr as usize },
        2384usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMLTEX1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMLTEX2) as usize - ptr as usize },
        2392usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMLTEX2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMLWD) as usize - ptr as usize },
        2400usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMLWD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMLWE) as usize - ptr as usize },
        2402usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMLWE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BLOCK_CONTROL_OBJECT) as usize - ptr as usize },
        2408usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(BLOCK_CONTROL_OBJECT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LAYER_CONTROL_OBJECT) as usize - ptr as usize },
        2416usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(LAYER_CONTROL_OBJECT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).STYLE_CONTROL_OBJECT) as usize - ptr as usize },
        2424usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(STYLE_CONTROL_OBJECT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LTYPE_CONTROL_OBJECT) as usize - ptr as usize },
        2432usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(LTYPE_CONTROL_OBJECT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VIEW_CONTROL_OBJECT) as usize - ptr as usize },
        2440usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(VIEW_CONTROL_OBJECT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UCS_CONTROL_OBJECT) as usize - ptr as usize },
        2448usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(UCS_CONTROL_OBJECT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VPORT_CONTROL_OBJECT) as usize - ptr as usize },
        2456usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(VPORT_CONTROL_OBJECT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).APPID_CONTROL_OBJECT) as usize - ptr as usize },
        2464usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(APPID_CONTROL_OBJECT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMSTYLE_CONTROL_OBJECT) as usize - ptr as usize },
        2472usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMSTYLE_CONTROL_OBJECT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VX_CONTROL_OBJECT) as usize - ptr as usize },
        2480usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(VX_CONTROL_OBJECT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DICTIONARY_ACAD_GROUP) as usize - ptr as usize },
        2488usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DICTIONARY_ACAD_GROUP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DICTIONARY_ACAD_MLINESTYLE) as usize - ptr as usize },
        2496usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DICTIONARY_ACAD_MLINESTYLE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DICTIONARY_NAMED_OBJECT) as usize - ptr as usize },
        2504usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DICTIONARY_NAMED_OBJECT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TSTACKALIGN) as usize - ptr as usize },
        2512usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(TSTACKALIGN)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TSTACKSIZE) as usize - ptr as usize },
        2514usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(TSTACKSIZE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HYPERLINKBASE) as usize - ptr as usize },
        2520usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(HYPERLINKBASE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).STYLESHEET) as usize - ptr as usize },
        2528usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(STYLESHEET)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DICTIONARY_LAYOUT) as usize - ptr as usize },
        2536usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DICTIONARY_LAYOUT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DICTIONARY_PLOTSETTINGS) as usize - ptr as usize },
        2544usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DICTIONARY_PLOTSETTINGS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DICTIONARY_PLOTSTYLENAME) as usize - ptr as usize },
        2552usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DICTIONARY_PLOTSTYLENAME)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DICTIONARY_MATERIAL) as usize - ptr as usize },
        2560usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DICTIONARY_MATERIAL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DICTIONARY_COLOR) as usize - ptr as usize },
        2568usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DICTIONARY_COLOR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DICTIONARY_VISUALSTYLE) as usize - ptr as usize },
        2576usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DICTIONARY_VISUALSTYLE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DICTIONARY_LIGHTLIST) as usize - ptr as usize },
        2584usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DICTIONARY_LIGHTLIST)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_20) as usize - ptr as usize },
        2592usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(unknown_20)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FLAGS) as usize - ptr as usize },
        2600usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(FLAGS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CELWEIGHT) as usize - ptr as usize },
        2604usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(CELWEIGHT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ENDCAPS) as usize - ptr as usize },
        2606usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(ENDCAPS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).JOINSTYLE) as usize - ptr as usize },
        2607usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(JOINSTYLE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LWDISPLAY) as usize - ptr as usize },
        2608usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(LWDISPLAY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).XEDIT) as usize - ptr as usize },
        2609usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(XEDIT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EXTNAMES) as usize - ptr as usize },
        2610usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(EXTNAMES)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PSTYLEMODE) as usize - ptr as usize },
        2611usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(PSTYLEMODE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OLESTARTUP) as usize - ptr as usize },
        2612usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(OLESTARTUP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).INSUNITS) as usize - ptr as usize },
        2614usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(INSUNITS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CEPSNTYPE) as usize - ptr as usize },
        2616usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(CEPSNTYPE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CPSNID) as usize - ptr as usize },
        2624usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(CPSNID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FINGERPRINTGUID) as usize - ptr as usize },
        2632usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(FINGERPRINTGUID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VERSIONGUID) as usize - ptr as usize },
        2640usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(VERSIONGUID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SORTENTS) as usize - ptr as usize },
        2648usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(SORTENTS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).INDEXCTL) as usize - ptr as usize },
        2649usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(INDEXCTL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HIDETEXT) as usize - ptr as usize },
        2650usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(HIDETEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).XCLIPFRAME) as usize - ptr as usize },
        2651usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(XCLIPFRAME)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMASSOC) as usize - ptr as usize },
        2652usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DIMASSOC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HALOGAP) as usize - ptr as usize },
        2653usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(HALOGAP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OBSCOLOR) as usize - ptr as usize },
        2654usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(OBSCOLOR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).INTERSECTIONCOLOR) as usize - ptr as usize },
        2656usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(INTERSECTIONCOLOR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OBSLTYPE) as usize - ptr as usize },
        2658usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(OBSLTYPE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).INTERSECTIONDISPLAY) as usize - ptr as usize },
        2659usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(INTERSECTIONDISPLAY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PROJECTNAME) as usize - ptr as usize },
        2664usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(PROJECTNAME)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BLOCK_RECORD_PSPACE) as usize - ptr as usize },
        2672usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(BLOCK_RECORD_PSPACE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BLOCK_RECORD_MSPACE) as usize - ptr as usize },
        2680usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(BLOCK_RECORD_MSPACE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LTYPE_BYLAYER) as usize - ptr as usize },
        2688usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(LTYPE_BYLAYER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LTYPE_BYBLOCK) as usize - ptr as usize },
        2696usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(LTYPE_BYBLOCK)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LTYPE_CONTINUOUS) as usize - ptr as usize },
        2704usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(LTYPE_CONTINUOUS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CAMERADISPLAY) as usize - ptr as usize },
        2712usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(CAMERADISPLAY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_21) as usize - ptr as usize },
        2716usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(unknown_21)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_22) as usize - ptr as usize },
        2720usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(unknown_22)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_23) as usize - ptr as usize },
        2728usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(unknown_23)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).STEPSPERSEC) as usize - ptr as usize },
        2736usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(STEPSPERSEC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).STEPSIZE) as usize - ptr as usize },
        2744usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(STEPSIZE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._3DDWFPREC) as usize - ptr as usize },
        2752usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(_3DDWFPREC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LENSLENGTH) as usize - ptr as usize },
        2760usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(LENSLENGTH)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CAMERAHEIGHT) as usize - ptr as usize },
        2768usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(CAMERAHEIGHT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SOLIDHIST) as usize - ptr as usize },
        2776usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(SOLIDHIST)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SHOWHIST) as usize - ptr as usize },
        2777usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(SHOWHIST)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PSOLWIDTH) as usize - ptr as usize },
        2784usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(PSOLWIDTH)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PSOLHEIGHT) as usize - ptr as usize },
        2792usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(PSOLHEIGHT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LOFTANG1) as usize - ptr as usize },
        2800usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(LOFTANG1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LOFTANG2) as usize - ptr as usize },
        2808usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(LOFTANG2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LOFTMAG1) as usize - ptr as usize },
        2816usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(LOFTMAG1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LOFTMAG2) as usize - ptr as usize },
        2824usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(LOFTMAG2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LOFTPARAM) as usize - ptr as usize },
        2832usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(LOFTPARAM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LOFTNORMALS) as usize - ptr as usize },
        2834usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(LOFTNORMALS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LATITUDE) as usize - ptr as usize },
        2840usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(LATITUDE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LONGITUDE) as usize - ptr as usize },
        2848usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(LONGITUDE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NORTHDIRECTION) as usize - ptr as usize },
        2856usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(NORTHDIRECTION)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TIMEZONE) as usize - ptr as usize },
        2864usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(TIMEZONE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LIGHTGLYPHDISPLAY) as usize - ptr as usize },
        2868usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(LIGHTGLYPHDISPLAY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TILEMODELIGHTSYNCH) as usize - ptr as usize },
        2869usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(TILEMODELIGHTSYNCH)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DWFFRAME) as usize - ptr as usize },
        2870usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DWFFRAME)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DGNFRAME) as usize - ptr as usize },
        2871usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DGNFRAME)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).REALWORLDSCALE) as usize - ptr as usize },
        2872usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(REALWORLDSCALE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).INTERFERECOLOR) as usize - ptr as usize },
        2880usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(INTERFERECOLOR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).INTERFEREOBJVS) as usize - ptr as usize },
        2928usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(INTERFEREOBJVS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).INTERFEREVPVS) as usize - ptr as usize },
        2936usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(INTERFEREVPVS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DRAGVS) as usize - ptr as usize },
        2944usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(DRAGVS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CSHADOW) as usize - ptr as usize },
        2952usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(CSHADOW)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SHADOWPLANELOCATION) as usize - ptr as usize },
        2960usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(SHADOWPLANELOCATION)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_54) as usize - ptr as usize },
        2968usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(unknown_54)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_55) as usize - ptr as usize },
        2970usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(unknown_55)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_56) as usize - ptr as usize },
        2972usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(unknown_56)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_57) as usize - ptr as usize },
        2974usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(unknown_57)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dwg_size) as usize - ptr as usize },
        2976usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(dwg_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numentities) as usize - ptr as usize },
        2980usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(numentities)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).circle_zoom_percent) as usize - ptr as usize },
        2982usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(circle_zoom_percent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FRONTZ) as usize - ptr as usize },
        2984usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(FRONTZ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BACKZ) as usize - ptr as usize },
        2992usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(BACKZ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UCSICON) as usize - ptr as usize },
        3000usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(UCSICON)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oldCECOLOR_hi) as usize - ptr as usize },
        3004usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(oldCECOLOR_hi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oldCECOLOR_lo) as usize - ptr as usize },
        3008usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(oldCECOLOR_lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layer_colors) as usize - ptr as usize },
        3012usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(layer_colors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_51e) as usize - ptr as usize },
        3268usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(unknown_51e)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_520) as usize - ptr as usize },
        3270usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(unknown_520)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_52c) as usize - ptr as usize },
        3272usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(unknown_52c)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_52e) as usize - ptr as usize },
        3274usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(unknown_52e)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_530) as usize - ptr as usize },
        3276usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(unknown_530)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_59) as usize - ptr as usize },
        3278usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(unknown_59)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aspect_ratio) as usize - ptr as usize },
        3280usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header_variables),
            "::",
            stringify!(aspect_ratio)
        )
    );
}
#[doc = "\\struct Dwg_Header_Variables\nDWG header variables for all versions.\nIf uppercase related to the DXF HEADER $ name.\n\n\\ref _dwg_header_variables"]
pub type Dwg_Header_Variables = _dwg_header_variables;
#[doc = "UNUSED (0) entity. Unknown entities are stored as blob"]
pub type Dwg_Entity_UNUSED = ::std::os::raw::c_int;
#[doc = " \\ref Dwg_Entity_TEXT\nTEXT (1/7) entity"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_TEXT {
    pub parent: *mut _dwg_object_entity,
    #[doc = "< r2000+. should be renamed to opts for r11 compat"]
    pub dataflags: BITCODE_RC,
    #[doc = "< DXF 30 (z coord of 10), when dataflags & 1"]
    pub elevation: BITCODE_RD,
    #[doc = "< DXF 10"]
    pub ins_pt: BITCODE_2DPOINT,
    #[doc = "< DXF 11. optional, when dataflags & 2, i.e 72/73 != 0"]
    pub alignment_pt: BITCODE_2DPOINT,
    #[doc = "< DXF 210. Default 0,0,1"]
    pub extrusion: BITCODE_BE,
    #[doc = "< DXF 39"]
    pub thickness: BITCODE_RD,
    #[doc = "< DXF 51"]
    pub oblique_angle: BITCODE_RD,
    #[doc = "< DXF 50"]
    pub rotation: BITCODE_RD,
    #[doc = "< DXF 40"]
    pub height: BITCODE_RD,
    #[doc = "< DXF 41"]
    pub width_factor: BITCODE_RD,
    #[doc = "< DXF 1"]
    pub text_value: BITCODE_TV,
    #[doc = "< DXF 71"]
    pub generation: BITCODE_BS,
    #[doc = "< DXF 72. options 0-5:\n0 = Left; 1= Center; 2 = Right; 3 = Aligned;\n4 = Middle; 5 = Fit"]
    pub horiz_alignment: BITCODE_BS,
    #[doc = "< DXF 73. options 0-3:\n0 = Baseline; 1 = Bottom; 2 = Middle; 3 = Top"]
    pub vert_alignment: BITCODE_BS,
    #[doc = "< code 5, DXF 7, optional"]
    pub style: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_entity_TEXT() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_TEXT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_TEXT>(),
        144usize,
        concat!("Size of: ", stringify!(_dwg_entity_TEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_TEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_TEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TEXT),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataflags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TEXT),
            "::",
            stringify!(dataflags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elevation) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TEXT),
            "::",
            stringify!(elevation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ins_pt) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TEXT),
            "::",
            stringify!(ins_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alignment_pt) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TEXT),
            "::",
            stringify!(alignment_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extrusion) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TEXT),
            "::",
            stringify!(extrusion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thickness) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TEXT),
            "::",
            stringify!(thickness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oblique_angle) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TEXT),
            "::",
            stringify!(oblique_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rotation) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TEXT),
            "::",
            stringify!(rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TEXT),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width_factor) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TEXT),
            "::",
            stringify!(width_factor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_value) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TEXT),
            "::",
            stringify!(text_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).generation) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TEXT),
            "::",
            stringify!(generation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).horiz_alignment) as usize - ptr as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TEXT),
            "::",
            stringify!(horiz_alignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vert_alignment) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TEXT),
            "::",
            stringify!(vert_alignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).style) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TEXT),
            "::",
            stringify!(style)
        )
    );
}
#[doc = " \\ref Dwg_Entity_TEXT\nTEXT (1/7) entity"]
pub type Dwg_Entity_TEXT = _dwg_entity_TEXT;
#[doc = " \\ref Dwg_Entity_ATTRIB\nATTRIB (2/16) entity"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_ATTRIB {
    pub parent: *mut _dwg_object_entity,
    pub elevation: BITCODE_BD,
    pub ins_pt: BITCODE_2DPOINT,
    pub alignment_pt: BITCODE_2DPOINT,
    pub extrusion: BITCODE_BE,
    pub thickness: BITCODE_RD,
    pub oblique_angle: BITCODE_RD,
    pub rotation: BITCODE_RD,
    pub height: BITCODE_RD,
    pub width_factor: BITCODE_RD,
    pub text_value: BITCODE_TV,
    pub generation: BITCODE_BS,
    pub horiz_alignment: BITCODE_BS,
    pub vert_alignment: BITCODE_BS,
    pub dataflags: BITCODE_RC,
    pub class_version: BITCODE_RC,
    pub type_: BITCODE_RC,
    pub tag: BITCODE_TV,
    pub field_length: BITCODE_BS,
    pub flags: BITCODE_RC,
    pub lock_position_flag: BITCODE_B,
    pub style: BITCODE_H,
    pub mtext_style: BITCODE_H,
    pub annotative_data_size: BITCODE_BS,
    pub annotative_data_bytes: BITCODE_RC,
    pub annotative_app: BITCODE_H,
    pub annotative_short: BITCODE_BS,
}
#[test]
fn bindgen_test_layout__dwg_entity_ATTRIB() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_ATTRIB> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_ATTRIB>(),
        192usize,
        concat!("Size of: ", stringify!(_dwg_entity_ATTRIB))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_ATTRIB>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_ATTRIB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTRIB),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elevation) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTRIB),
            "::",
            stringify!(elevation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ins_pt) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTRIB),
            "::",
            stringify!(ins_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alignment_pt) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTRIB),
            "::",
            stringify!(alignment_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extrusion) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTRIB),
            "::",
            stringify!(extrusion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thickness) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTRIB),
            "::",
            stringify!(thickness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oblique_angle) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTRIB),
            "::",
            stringify!(oblique_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rotation) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTRIB),
            "::",
            stringify!(rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTRIB),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width_factor) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTRIB),
            "::",
            stringify!(width_factor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_value) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTRIB),
            "::",
            stringify!(text_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).generation) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTRIB),
            "::",
            stringify!(generation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).horiz_alignment) as usize - ptr as usize },
        122usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTRIB),
            "::",
            stringify!(horiz_alignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vert_alignment) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTRIB),
            "::",
            stringify!(vert_alignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataflags) as usize - ptr as usize },
        126usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTRIB),
            "::",
            stringify!(dataflags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        127usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTRIB),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTRIB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tag) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTRIB),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field_length) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTRIB),
            "::",
            stringify!(field_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        146usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTRIB),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_position_flag) as usize - ptr as usize },
        147usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTRIB),
            "::",
            stringify!(lock_position_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).style) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTRIB),
            "::",
            stringify!(style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mtext_style) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTRIB),
            "::",
            stringify!(mtext_style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).annotative_data_size) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTRIB),
            "::",
            stringify!(annotative_data_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).annotative_data_bytes) as usize - ptr as usize },
        170usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTRIB),
            "::",
            stringify!(annotative_data_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).annotative_app) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTRIB),
            "::",
            stringify!(annotative_app)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).annotative_short) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTRIB),
            "::",
            stringify!(annotative_short)
        )
    );
}
#[doc = " \\ref Dwg_Entity_ATTRIB\nATTRIB (2/16) entity"]
pub type Dwg_Entity_ATTRIB = _dwg_entity_ATTRIB;
#[doc = " \\ref Dwg_Entity_ATTDEF\nATTDEF (3/15) entity"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_ATTDEF {
    pub parent: *mut _dwg_object_entity,
    pub elevation: BITCODE_BD,
    pub ins_pt: BITCODE_2DPOINT,
    pub alignment_pt: BITCODE_2DPOINT,
    pub extrusion: BITCODE_BE,
    pub thickness: BITCODE_RD,
    pub oblique_angle: BITCODE_RD,
    pub rotation: BITCODE_RD,
    pub height: BITCODE_RD,
    pub width_factor: BITCODE_RD,
    pub default_value: BITCODE_TV,
    pub generation: BITCODE_BS,
    pub horiz_alignment: BITCODE_BS,
    pub vert_alignment: BITCODE_BS,
    pub dataflags: BITCODE_RC,
    pub class_version: BITCODE_RC,
    pub type_: BITCODE_RC,
    pub tag: BITCODE_TV,
    pub field_length: BITCODE_BS,
    pub flags: BITCODE_RC,
    pub lock_position_flag: BITCODE_B,
    pub style: BITCODE_H,
    pub mtext_style: BITCODE_H,
    pub annotative_data_size: BITCODE_BS,
    pub annotative_data_bytes: BITCODE_RC,
    pub annotative_app: BITCODE_H,
    pub annotative_short: BITCODE_BS,
    pub attdef_class_version: BITCODE_RC,
    pub prompt: BITCODE_TV,
}
#[test]
fn bindgen_test_layout__dwg_entity_ATTDEF() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_ATTDEF> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_ATTDEF>(),
        200usize,
        concat!("Size of: ", stringify!(_dwg_entity_ATTDEF))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_ATTDEF>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_ATTDEF))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTDEF),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elevation) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTDEF),
            "::",
            stringify!(elevation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ins_pt) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTDEF),
            "::",
            stringify!(ins_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alignment_pt) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTDEF),
            "::",
            stringify!(alignment_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extrusion) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTDEF),
            "::",
            stringify!(extrusion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thickness) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTDEF),
            "::",
            stringify!(thickness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oblique_angle) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTDEF),
            "::",
            stringify!(oblique_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rotation) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTDEF),
            "::",
            stringify!(rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTDEF),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width_factor) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTDEF),
            "::",
            stringify!(width_factor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).default_value) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTDEF),
            "::",
            stringify!(default_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).generation) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTDEF),
            "::",
            stringify!(generation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).horiz_alignment) as usize - ptr as usize },
        122usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTDEF),
            "::",
            stringify!(horiz_alignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vert_alignment) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTDEF),
            "::",
            stringify!(vert_alignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataflags) as usize - ptr as usize },
        126usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTDEF),
            "::",
            stringify!(dataflags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        127usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTDEF),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTDEF),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tag) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTDEF),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field_length) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTDEF),
            "::",
            stringify!(field_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        146usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTDEF),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_position_flag) as usize - ptr as usize },
        147usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTDEF),
            "::",
            stringify!(lock_position_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).style) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTDEF),
            "::",
            stringify!(style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mtext_style) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTDEF),
            "::",
            stringify!(mtext_style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).annotative_data_size) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTDEF),
            "::",
            stringify!(annotative_data_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).annotative_data_bytes) as usize - ptr as usize },
        170usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTDEF),
            "::",
            stringify!(annotative_data_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).annotative_app) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTDEF),
            "::",
            stringify!(annotative_app)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).annotative_short) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTDEF),
            "::",
            stringify!(annotative_short)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attdef_class_version) as usize - ptr as usize },
        186usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTDEF),
            "::",
            stringify!(attdef_class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prompt) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ATTDEF),
            "::",
            stringify!(prompt)
        )
    );
}
#[doc = " \\ref Dwg_Entity_ATTDEF\nATTDEF (3/15) entity"]
pub type Dwg_Entity_ATTDEF = _dwg_entity_ATTDEF;
#[doc = "BLOCK (4/12) entity"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_BLOCK {
    pub parent: *mut _dwg_object_entity,
    pub name: BITCODE_TV,
    pub xref_pname: BITCODE_TV,
    pub base_pt: BITCODE_2RD,
}
#[test]
fn bindgen_test_layout__dwg_entity_BLOCK() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_BLOCK> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_BLOCK>(),
        40usize,
        concat!("Size of: ", stringify!(_dwg_entity_BLOCK))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_BLOCK>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_BLOCK))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_BLOCK),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_BLOCK),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xref_pname) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_BLOCK),
            "::",
            stringify!(xref_pname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_pt) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_BLOCK),
            "::",
            stringify!(base_pt)
        )
    );
}
#[doc = "BLOCK (4/12) entity"]
pub type Dwg_Entity_BLOCK = _dwg_entity_BLOCK;
#[doc = "ENDBLK (5/13) entity"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_ENDBLK {
    pub parent: *mut _dwg_object_entity,
}
#[test]
fn bindgen_test_layout__dwg_entity_ENDBLK() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_ENDBLK> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_ENDBLK>(),
        8usize,
        concat!("Size of: ", stringify!(_dwg_entity_ENDBLK))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_ENDBLK>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_ENDBLK))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ENDBLK),
            "::",
            stringify!(parent)
        )
    );
}
#[doc = "ENDBLK (5/13) entity"]
pub type Dwg_Entity_ENDBLK = _dwg_entity_ENDBLK;
#[doc = "SEQEND (6/17) entity"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_SEQEND {
    pub parent: *mut _dwg_object_entity,
    pub begin_addr_r11: BITCODE_RL,
}
#[test]
fn bindgen_test_layout__dwg_entity_SEQEND() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_SEQEND> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_SEQEND>(),
        16usize,
        concat!("Size of: ", stringify!(_dwg_entity_SEQEND))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_SEQEND>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_SEQEND))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SEQEND),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).begin_addr_r11) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SEQEND),
            "::",
            stringify!(begin_addr_r11)
        )
    );
}
#[doc = "SEQEND (6/17) entity"]
pub type Dwg_Entity_SEQEND = _dwg_entity_SEQEND;
#[doc = "INSERT (7/14) entity"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_INSERT {
    pub parent: *mut _dwg_object_entity,
    pub ins_pt: BITCODE_3DPOINT,
    pub scale_flag: BITCODE_BB,
    pub scale: BITCODE_3DPOINT,
    pub rotation: BITCODE_BD,
    pub extrusion: BITCODE_BE,
    pub has_attribs: BITCODE_B,
    pub num_owned: BITCODE_BL,
    pub block_header: BITCODE_H,
    pub first_attrib: BITCODE_H,
    pub last_attrib: BITCODE_H,
    pub attribs: *mut BITCODE_H,
    pub seqend: BITCODE_H,
    pub num_cols: BITCODE_RS,
    pub num_rows: BITCODE_RS,
    pub col_spacing: BITCODE_RD,
    pub row_spacing: BITCODE_RD,
    pub block_name: BITCODE_TV,
}
#[test]
fn bindgen_test_layout__dwg_entity_INSERT() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_INSERT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_INSERT>(),
        176usize,
        concat!("Size of: ", stringify!(_dwg_entity_INSERT))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_INSERT>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_INSERT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_INSERT),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ins_pt) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_INSERT),
            "::",
            stringify!(ins_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale_flag) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_INSERT),
            "::",
            stringify!(scale_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_INSERT),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rotation) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_INSERT),
            "::",
            stringify!(rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extrusion) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_INSERT),
            "::",
            stringify!(extrusion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_attribs) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_INSERT),
            "::",
            stringify!(has_attribs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_owned) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_INSERT),
            "::",
            stringify!(num_owned)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block_header) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_INSERT),
            "::",
            stringify!(block_header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).first_attrib) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_INSERT),
            "::",
            stringify!(first_attrib)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_attrib) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_INSERT),
            "::",
            stringify!(last_attrib)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attribs) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_INSERT),
            "::",
            stringify!(attribs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seqend) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_INSERT),
            "::",
            stringify!(seqend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_cols) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_INSERT),
            "::",
            stringify!(num_cols)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_rows) as usize - ptr as usize },
        146usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_INSERT),
            "::",
            stringify!(num_rows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).col_spacing) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_INSERT),
            "::",
            stringify!(col_spacing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).row_spacing) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_INSERT),
            "::",
            stringify!(row_spacing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block_name) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_INSERT),
            "::",
            stringify!(block_name)
        )
    );
}
#[doc = "INSERT (7/14) entity"]
pub type Dwg_Entity_INSERT = _dwg_entity_INSERT;
#[doc = "MINSERT (8) entity"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_MINSERT {
    pub parent: *mut _dwg_object_entity,
    pub ins_pt: BITCODE_3DPOINT,
    pub scale_flag: BITCODE_BB,
    pub scale: BITCODE_3DPOINT,
    pub rotation: BITCODE_BD,
    pub extrusion: BITCODE_BE,
    pub has_attribs: BITCODE_B,
    pub num_owned: BITCODE_BL,
    pub num_cols: BITCODE_BS,
    pub num_rows: BITCODE_BS,
    pub col_spacing: BITCODE_BD,
    pub row_spacing: BITCODE_BD,
    pub block_header: BITCODE_H,
    pub first_attrib: BITCODE_H,
    pub last_attrib: BITCODE_H,
    pub attribs: *mut BITCODE_H,
    pub seqend: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_entity_MINSERT() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_MINSERT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_MINSERT>(),
        168usize,
        concat!("Size of: ", stringify!(_dwg_entity_MINSERT))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_MINSERT>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_MINSERT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MINSERT),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ins_pt) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MINSERT),
            "::",
            stringify!(ins_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale_flag) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MINSERT),
            "::",
            stringify!(scale_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MINSERT),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rotation) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MINSERT),
            "::",
            stringify!(rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extrusion) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MINSERT),
            "::",
            stringify!(extrusion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_attribs) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MINSERT),
            "::",
            stringify!(has_attribs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_owned) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MINSERT),
            "::",
            stringify!(num_owned)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_cols) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MINSERT),
            "::",
            stringify!(num_cols)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_rows) as usize - ptr as usize },
        106usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MINSERT),
            "::",
            stringify!(num_rows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).col_spacing) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MINSERT),
            "::",
            stringify!(col_spacing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).row_spacing) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MINSERT),
            "::",
            stringify!(row_spacing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block_header) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MINSERT),
            "::",
            stringify!(block_header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).first_attrib) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MINSERT),
            "::",
            stringify!(first_attrib)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_attrib) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MINSERT),
            "::",
            stringify!(last_attrib)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attribs) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MINSERT),
            "::",
            stringify!(attribs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seqend) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MINSERT),
            "::",
            stringify!(seqend)
        )
    );
}
#[doc = "MINSERT (8) entity"]
pub type Dwg_Entity_MINSERT = _dwg_entity_MINSERT;
#[doc = "VERTEX_2D (10/20) entity"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_VERTEX_2D {
    pub parent: *mut _dwg_object_entity,
    pub flag: BITCODE_RC,
    pub point: BITCODE_3BD,
    pub start_width: BITCODE_BD,
    pub end_width: BITCODE_BD,
    pub id: BITCODE_BL,
    pub bulge: BITCODE_BD,
    pub tangent_dir: BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_entity_VERTEX_2D() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_VERTEX_2D> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_VERTEX_2D>(),
        80usize,
        concat!("Size of: ", stringify!(_dwg_entity_VERTEX_2D))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_VERTEX_2D>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_VERTEX_2D))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VERTEX_2D),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VERTEX_2D),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).point) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VERTEX_2D),
            "::",
            stringify!(point)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_width) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VERTEX_2D),
            "::",
            stringify!(start_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_width) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VERTEX_2D),
            "::",
            stringify!(end_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VERTEX_2D),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bulge) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VERTEX_2D),
            "::",
            stringify!(bulge)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tangent_dir) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VERTEX_2D),
            "::",
            stringify!(tangent_dir)
        )
    );
}
#[doc = "VERTEX_2D (10/20) entity"]
pub type Dwg_Entity_VERTEX_2D = _dwg_entity_VERTEX_2D;
#[doc = "VERTEX_3D (11) entity"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_VERTEX_3D {
    pub parent: *mut _dwg_object_entity,
    pub flag: BITCODE_RC,
    pub point: BITCODE_3BD,
}
#[test]
fn bindgen_test_layout__dwg_entity_VERTEX_3D() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_VERTEX_3D> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_VERTEX_3D>(),
        40usize,
        concat!("Size of: ", stringify!(_dwg_entity_VERTEX_3D))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_VERTEX_3D>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_VERTEX_3D))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VERTEX_3D),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VERTEX_3D),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).point) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VERTEX_3D),
            "::",
            stringify!(point)
        )
    );
}
#[doc = "VERTEX_3D (11) entity"]
pub type Dwg_Entity_VERTEX_3D = _dwg_entity_VERTEX_3D;
#[doc = "VERTEX_MESH (12) - same as VERTEX_3D entity"]
pub type Dwg_Entity_VERTEX_MESH = Dwg_Entity_VERTEX_3D;
#[doc = "VERTEX_PFACE (13) - same as VERTEX_3D entity"]
pub type Dwg_Entity_VERTEX_PFACE = Dwg_Entity_VERTEX_3D;
#[doc = "VERTEX_PFACE_FACE (14) entity"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_VERTEX_PFACE_FACE {
    pub parent: *mut _dwg_object_entity,
    pub flag: BITCODE_RC,
    pub vertind: [BITCODE_BS; 4usize],
}
#[test]
fn bindgen_test_layout__dwg_entity_VERTEX_PFACE_FACE() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_VERTEX_PFACE_FACE> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_VERTEX_PFACE_FACE>(),
        24usize,
        concat!("Size of: ", stringify!(_dwg_entity_VERTEX_PFACE_FACE))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_VERTEX_PFACE_FACE>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_VERTEX_PFACE_FACE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VERTEX_PFACE_FACE),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VERTEX_PFACE_FACE),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertind) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VERTEX_PFACE_FACE),
            "::",
            stringify!(vertind)
        )
    );
}
#[doc = "VERTEX_PFACE_FACE (14) entity"]
pub type Dwg_Entity_VERTEX_PFACE_FACE = _dwg_entity_VERTEX_PFACE_FACE;
#[doc = "2D POLYLINE (15/19) entity"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_POLYLINE_2D {
    pub parent: *mut _dwg_object_entity,
    pub has_vertex: BITCODE_B,
    pub num_owned: BITCODE_BL,
    pub first_vertex: BITCODE_H,
    pub last_vertex: BITCODE_H,
    pub vertex: *mut BITCODE_H,
    pub seqend: BITCODE_H,
    pub flag: BITCODE_BS,
    pub curve_type: BITCODE_BS,
    pub start_width: BITCODE_BD,
    pub end_width: BITCODE_BD,
    pub thickness: BITCODE_BT,
    pub elevation: BITCODE_BD,
    pub extrusion: BITCODE_BE,
    pub extra_r11_size: BITCODE_BL,
    pub extra_r11_text: BITCODE_TV,
    pub num_m_verts: BITCODE_BS,
    pub num_n_verts: BITCODE_BS,
}
#[test]
fn bindgen_test_layout__dwg_entity_POLYLINE_2D() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_POLYLINE_2D> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_POLYLINE_2D>(),
        136usize,
        concat!("Size of: ", stringify!(_dwg_entity_POLYLINE_2D))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_POLYLINE_2D>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_POLYLINE_2D))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_2D),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_vertex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_2D),
            "::",
            stringify!(has_vertex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_owned) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_2D),
            "::",
            stringify!(num_owned)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).first_vertex) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_2D),
            "::",
            stringify!(first_vertex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_vertex) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_2D),
            "::",
            stringify!(last_vertex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertex) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_2D),
            "::",
            stringify!(vertex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seqend) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_2D),
            "::",
            stringify!(seqend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_2D),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).curve_type) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_2D),
            "::",
            stringify!(curve_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_width) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_2D),
            "::",
            stringify!(start_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_width) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_2D),
            "::",
            stringify!(end_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thickness) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_2D),
            "::",
            stringify!(thickness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elevation) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_2D),
            "::",
            stringify!(elevation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extrusion) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_2D),
            "::",
            stringify!(extrusion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extra_r11_size) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_2D),
            "::",
            stringify!(extra_r11_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extra_r11_text) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_2D),
            "::",
            stringify!(extra_r11_text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_m_verts) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_2D),
            "::",
            stringify!(num_m_verts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_n_verts) as usize - ptr as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_2D),
            "::",
            stringify!(num_n_verts)
        )
    );
}
#[doc = "2D POLYLINE (15/19) entity"]
pub type Dwg_Entity_POLYLINE_2D = _dwg_entity_POLYLINE_2D;
#[doc = "3D POLYLINE (16/19) entity"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_POLYLINE_3D {
    pub parent: *mut _dwg_object_entity,
    pub has_vertex: BITCODE_B,
    pub num_owned: BITCODE_BL,
    pub first_vertex: BITCODE_H,
    pub last_vertex: BITCODE_H,
    pub vertex: *mut BITCODE_H,
    pub seqend: BITCODE_H,
    pub curve_type: BITCODE_RC,
    pub start_width: BITCODE_BD,
    pub end_width: BITCODE_BD,
    pub flag: BITCODE_RC,
    pub extrusion: BITCODE_BE,
}
#[test]
fn bindgen_test_layout__dwg_entity_POLYLINE_3D() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_POLYLINE_3D> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_POLYLINE_3D>(),
        104usize,
        concat!("Size of: ", stringify!(_dwg_entity_POLYLINE_3D))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_POLYLINE_3D>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_POLYLINE_3D))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_3D),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_vertex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_3D),
            "::",
            stringify!(has_vertex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_owned) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_3D),
            "::",
            stringify!(num_owned)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).first_vertex) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_3D),
            "::",
            stringify!(first_vertex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_vertex) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_3D),
            "::",
            stringify!(last_vertex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertex) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_3D),
            "::",
            stringify!(vertex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seqend) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_3D),
            "::",
            stringify!(seqend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).curve_type) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_3D),
            "::",
            stringify!(curve_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_width) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_3D),
            "::",
            stringify!(start_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_width) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_3D),
            "::",
            stringify!(end_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_3D),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extrusion) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_3D),
            "::",
            stringify!(extrusion)
        )
    );
}
#[doc = "3D POLYLINE (16/19) entity"]
pub type Dwg_Entity_POLYLINE_3D = _dwg_entity_POLYLINE_3D;
#[doc = "ARC (17/8) entity"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_ARC {
    pub parent: *mut _dwg_object_entity,
    pub center: BITCODE_3BD,
    pub radius: BITCODE_BD,
    pub thickness: BITCODE_BT,
    pub extrusion: BITCODE_BE,
    pub start_angle: BITCODE_BD,
    pub end_angle: BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_entity_ARC() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_ARC> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_ARC>(),
        88usize,
        concat!("Size of: ", stringify!(_dwg_entity_ARC))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_ARC>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_ARC))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARC),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).center) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARC),
            "::",
            stringify!(center)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).radius) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARC),
            "::",
            stringify!(radius)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thickness) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARC),
            "::",
            stringify!(thickness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extrusion) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARC),
            "::",
            stringify!(extrusion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_angle) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARC),
            "::",
            stringify!(start_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_angle) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARC),
            "::",
            stringify!(end_angle)
        )
    );
}
#[doc = "ARC (17/8) entity"]
pub type Dwg_Entity_ARC = _dwg_entity_ARC;
#[doc = "CIRCLE (18/3) entity"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_CIRCLE {
    pub parent: *mut _dwg_object_entity,
    pub center: BITCODE_3BD,
    pub radius: BITCODE_BD,
    pub thickness: BITCODE_BT,
    pub extrusion: BITCODE_BE,
}
#[test]
fn bindgen_test_layout__dwg_entity_CIRCLE() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_CIRCLE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_CIRCLE>(),
        72usize,
        concat!("Size of: ", stringify!(_dwg_entity_CIRCLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_CIRCLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_CIRCLE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_CIRCLE),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).center) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_CIRCLE),
            "::",
            stringify!(center)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).radius) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_CIRCLE),
            "::",
            stringify!(radius)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thickness) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_CIRCLE),
            "::",
            stringify!(thickness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extrusion) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_CIRCLE),
            "::",
            stringify!(extrusion)
        )
    );
}
#[doc = "CIRCLE (18/3) entity"]
pub type Dwg_Entity_CIRCLE = _dwg_entity_CIRCLE;
#[doc = "LINE (19/1) entity"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_LINE {
    pub parent: *mut _dwg_object_entity,
    pub z_is_zero: BITCODE_RC,
    pub start: BITCODE_3BD,
    pub end: BITCODE_3BD,
    pub thickness: BITCODE_BT,
    pub extrusion: BITCODE_BE,
    pub unknown_r11: BITCODE_2RD,
}
#[test]
fn bindgen_test_layout__dwg_entity_LINE() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_LINE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_LINE>(),
        112usize,
        concat!("Size of: ", stringify!(_dwg_entity_LINE))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_LINE>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_LINE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LINE),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z_is_zero) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LINE),
            "::",
            stringify!(z_is_zero)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LINE),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LINE),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thickness) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LINE),
            "::",
            stringify!(thickness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extrusion) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LINE),
            "::",
            stringify!(extrusion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_r11) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LINE),
            "::",
            stringify!(unknown_r11)
        )
    );
}
#[doc = "LINE (19/1) entity"]
pub type Dwg_Entity_LINE = _dwg_entity_LINE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_DIMENSION_common {
    pub parent: *mut _dwg_object_entity,
    pub class_version: BITCODE_RC,
    pub extrusion: BITCODE_BE,
    pub def_pt: BITCODE_3BD,
    pub text_midpt: BITCODE_2RD,
    pub elevation: BITCODE_BD,
    pub flag: BITCODE_RC,
    pub flag1: BITCODE_RC,
    pub user_text: BITCODE_TV,
    pub text_rotation: BITCODE_BD,
    pub horiz_dir: BITCODE_BD,
    pub ins_scale: BITCODE_3BD,
    pub ins_rotation: BITCODE_BD,
    pub attachment: BITCODE_BS,
    pub lspace_style: BITCODE_BS,
    pub lspace_factor: BITCODE_BD,
    pub act_measurement: BITCODE_BD,
    pub unknown: BITCODE_B,
    pub flip_arrow1: BITCODE_B,
    pub flip_arrow2: BITCODE_B,
    pub clone_ins_pt: BITCODE_2RD,
    pub dimstyle: BITCODE_H,
    pub block: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_DIMENSION_common() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_DIMENSION_common> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_DIMENSION_common>(),
        216usize,
        concat!("Size of: ", stringify!(_dwg_DIMENSION_common))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_DIMENSION_common>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_DIMENSION_common))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_DIMENSION_common),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_DIMENSION_common),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extrusion) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_DIMENSION_common),
            "::",
            stringify!(extrusion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_pt) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_DIMENSION_common),
            "::",
            stringify!(def_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_midpt) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_DIMENSION_common),
            "::",
            stringify!(text_midpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elevation) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_DIMENSION_common),
            "::",
            stringify!(elevation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_DIMENSION_common),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag1) as usize - ptr as usize },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_DIMENSION_common),
            "::",
            stringify!(flag1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_text) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_DIMENSION_common),
            "::",
            stringify!(user_text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_rotation) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_DIMENSION_common),
            "::",
            stringify!(text_rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).horiz_dir) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_DIMENSION_common),
            "::",
            stringify!(horiz_dir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ins_scale) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_DIMENSION_common),
            "::",
            stringify!(ins_scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ins_rotation) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_DIMENSION_common),
            "::",
            stringify!(ins_rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attachment) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_DIMENSION_common),
            "::",
            stringify!(attachment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lspace_style) as usize - ptr as usize },
        154usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_DIMENSION_common),
            "::",
            stringify!(lspace_style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lspace_factor) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_DIMENSION_common),
            "::",
            stringify!(lspace_factor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).act_measurement) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_DIMENSION_common),
            "::",
            stringify!(act_measurement)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_DIMENSION_common),
            "::",
            stringify!(unknown)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flip_arrow1) as usize - ptr as usize },
        177usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_DIMENSION_common),
            "::",
            stringify!(flip_arrow1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flip_arrow2) as usize - ptr as usize },
        178usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_DIMENSION_common),
            "::",
            stringify!(flip_arrow2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clone_ins_pt) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_DIMENSION_common),
            "::",
            stringify!(clone_ins_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dimstyle) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_DIMENSION_common),
            "::",
            stringify!(dimstyle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_DIMENSION_common),
            "::",
            stringify!(block)
        )
    );
}
pub type Dwg_DIMENSION_common = _dwg_DIMENSION_common;
#[doc = "ordinate dimension - DIMENSION_ORDINATE (20) entity"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_DIMENSION_ORDINATE {
    pub parent: *mut _dwg_object_entity,
    pub class_version: BITCODE_RC,
    pub extrusion: BITCODE_BE,
    pub def_pt: BITCODE_3BD,
    pub text_midpt: BITCODE_2RD,
    pub elevation: BITCODE_BD,
    pub flag: BITCODE_RC,
    pub flag1: BITCODE_RC,
    pub user_text: BITCODE_TV,
    pub text_rotation: BITCODE_BD,
    pub horiz_dir: BITCODE_BD,
    pub ins_scale: BITCODE_3BD,
    pub ins_rotation: BITCODE_BD,
    pub attachment: BITCODE_BS,
    pub lspace_style: BITCODE_BS,
    pub lspace_factor: BITCODE_BD,
    pub act_measurement: BITCODE_BD,
    pub unknown: BITCODE_B,
    pub flip_arrow1: BITCODE_B,
    pub flip_arrow2: BITCODE_B,
    pub clone_ins_pt: BITCODE_2RD,
    pub dimstyle: BITCODE_H,
    pub block: BITCODE_H,
    pub feature_location_pt: BITCODE_3BD,
    pub leader_endpt: BITCODE_3BD,
    pub flag2: BITCODE_RC,
}
#[test]
fn bindgen_test_layout__dwg_entity_DIMENSION_ORDINATE() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_DIMENSION_ORDINATE> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_DIMENSION_ORDINATE>(),
        272usize,
        concat!("Size of: ", stringify!(_dwg_entity_DIMENSION_ORDINATE))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_DIMENSION_ORDINATE>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_DIMENSION_ORDINATE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ORDINATE),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ORDINATE),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extrusion) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ORDINATE),
            "::",
            stringify!(extrusion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_pt) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ORDINATE),
            "::",
            stringify!(def_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_midpt) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ORDINATE),
            "::",
            stringify!(text_midpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elevation) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ORDINATE),
            "::",
            stringify!(elevation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ORDINATE),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag1) as usize - ptr as usize },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ORDINATE),
            "::",
            stringify!(flag1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_text) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ORDINATE),
            "::",
            stringify!(user_text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_rotation) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ORDINATE),
            "::",
            stringify!(text_rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).horiz_dir) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ORDINATE),
            "::",
            stringify!(horiz_dir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ins_scale) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ORDINATE),
            "::",
            stringify!(ins_scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ins_rotation) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ORDINATE),
            "::",
            stringify!(ins_rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attachment) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ORDINATE),
            "::",
            stringify!(attachment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lspace_style) as usize - ptr as usize },
        154usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ORDINATE),
            "::",
            stringify!(lspace_style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lspace_factor) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ORDINATE),
            "::",
            stringify!(lspace_factor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).act_measurement) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ORDINATE),
            "::",
            stringify!(act_measurement)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ORDINATE),
            "::",
            stringify!(unknown)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flip_arrow1) as usize - ptr as usize },
        177usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ORDINATE),
            "::",
            stringify!(flip_arrow1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flip_arrow2) as usize - ptr as usize },
        178usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ORDINATE),
            "::",
            stringify!(flip_arrow2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clone_ins_pt) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ORDINATE),
            "::",
            stringify!(clone_ins_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dimstyle) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ORDINATE),
            "::",
            stringify!(dimstyle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ORDINATE),
            "::",
            stringify!(block)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).feature_location_pt) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ORDINATE),
            "::",
            stringify!(feature_location_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).leader_endpt) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ORDINATE),
            "::",
            stringify!(leader_endpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag2) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ORDINATE),
            "::",
            stringify!(flag2)
        )
    );
}
#[doc = "ordinate dimension - DIMENSION_ORDINATE (20) entity"]
pub type Dwg_Entity_DIMENSION_ORDINATE = _dwg_entity_DIMENSION_ORDINATE;
#[doc = "linear dimension - DIMENSION_LINEAR (21/23) entity"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_DIMENSION_LINEAR {
    pub parent: *mut _dwg_object_entity,
    pub class_version: BITCODE_RC,
    pub extrusion: BITCODE_BE,
    pub def_pt: BITCODE_3BD,
    pub text_midpt: BITCODE_2RD,
    pub elevation: BITCODE_BD,
    pub flag: BITCODE_RC,
    pub flag1: BITCODE_RC,
    pub user_text: BITCODE_TV,
    pub text_rotation: BITCODE_BD,
    pub horiz_dir: BITCODE_BD,
    pub ins_scale: BITCODE_3BD,
    pub ins_rotation: BITCODE_BD,
    pub attachment: BITCODE_BS,
    pub lspace_style: BITCODE_BS,
    pub lspace_factor: BITCODE_BD,
    pub act_measurement: BITCODE_BD,
    pub unknown: BITCODE_B,
    pub flip_arrow1: BITCODE_B,
    pub flip_arrow2: BITCODE_B,
    pub clone_ins_pt: BITCODE_2RD,
    pub dimstyle: BITCODE_H,
    pub block: BITCODE_H,
    pub xline1_pt: BITCODE_3BD,
    pub xline2_pt: BITCODE_3BD,
    pub oblique_angle: BITCODE_BD,
    pub dim_rotation: BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_entity_DIMENSION_LINEAR() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_DIMENSION_LINEAR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_DIMENSION_LINEAR>(),
        280usize,
        concat!("Size of: ", stringify!(_dwg_entity_DIMENSION_LINEAR))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_DIMENSION_LINEAR>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_DIMENSION_LINEAR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_LINEAR),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_LINEAR),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extrusion) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_LINEAR),
            "::",
            stringify!(extrusion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_pt) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_LINEAR),
            "::",
            stringify!(def_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_midpt) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_LINEAR),
            "::",
            stringify!(text_midpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elevation) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_LINEAR),
            "::",
            stringify!(elevation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_LINEAR),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag1) as usize - ptr as usize },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_LINEAR),
            "::",
            stringify!(flag1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_text) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_LINEAR),
            "::",
            stringify!(user_text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_rotation) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_LINEAR),
            "::",
            stringify!(text_rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).horiz_dir) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_LINEAR),
            "::",
            stringify!(horiz_dir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ins_scale) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_LINEAR),
            "::",
            stringify!(ins_scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ins_rotation) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_LINEAR),
            "::",
            stringify!(ins_rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attachment) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_LINEAR),
            "::",
            stringify!(attachment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lspace_style) as usize - ptr as usize },
        154usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_LINEAR),
            "::",
            stringify!(lspace_style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lspace_factor) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_LINEAR),
            "::",
            stringify!(lspace_factor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).act_measurement) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_LINEAR),
            "::",
            stringify!(act_measurement)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_LINEAR),
            "::",
            stringify!(unknown)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flip_arrow1) as usize - ptr as usize },
        177usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_LINEAR),
            "::",
            stringify!(flip_arrow1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flip_arrow2) as usize - ptr as usize },
        178usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_LINEAR),
            "::",
            stringify!(flip_arrow2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clone_ins_pt) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_LINEAR),
            "::",
            stringify!(clone_ins_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dimstyle) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_LINEAR),
            "::",
            stringify!(dimstyle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_LINEAR),
            "::",
            stringify!(block)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xline1_pt) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_LINEAR),
            "::",
            stringify!(xline1_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xline2_pt) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_LINEAR),
            "::",
            stringify!(xline2_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oblique_angle) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_LINEAR),
            "::",
            stringify!(oblique_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dim_rotation) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_LINEAR),
            "::",
            stringify!(dim_rotation)
        )
    );
}
#[doc = "linear dimension - DIMENSION_LINEAR (21/23) entity"]
pub type Dwg_Entity_DIMENSION_LINEAR = _dwg_entity_DIMENSION_LINEAR;
#[doc = "aligned dimension - DIMENSION_ALIGNED (22) entity"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_DIMENSION_ALIGNED {
    pub parent: *mut _dwg_object_entity,
    pub class_version: BITCODE_RC,
    pub extrusion: BITCODE_BE,
    pub def_pt: BITCODE_3BD,
    pub text_midpt: BITCODE_2RD,
    pub elevation: BITCODE_BD,
    pub flag: BITCODE_RC,
    pub flag1: BITCODE_RC,
    pub user_text: BITCODE_TV,
    pub text_rotation: BITCODE_BD,
    pub horiz_dir: BITCODE_BD,
    pub ins_scale: BITCODE_3BD,
    pub ins_rotation: BITCODE_BD,
    pub attachment: BITCODE_BS,
    pub lspace_style: BITCODE_BS,
    pub lspace_factor: BITCODE_BD,
    pub act_measurement: BITCODE_BD,
    pub unknown: BITCODE_B,
    pub flip_arrow1: BITCODE_B,
    pub flip_arrow2: BITCODE_B,
    pub clone_ins_pt: BITCODE_2RD,
    pub dimstyle: BITCODE_H,
    pub block: BITCODE_H,
    pub xline1_pt: BITCODE_3BD,
    pub xline2_pt: BITCODE_3BD,
    pub oblique_angle: BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_entity_DIMENSION_ALIGNED() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_DIMENSION_ALIGNED> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_DIMENSION_ALIGNED>(),
        272usize,
        concat!("Size of: ", stringify!(_dwg_entity_DIMENSION_ALIGNED))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_DIMENSION_ALIGNED>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_DIMENSION_ALIGNED))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ALIGNED),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ALIGNED),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extrusion) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ALIGNED),
            "::",
            stringify!(extrusion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_pt) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ALIGNED),
            "::",
            stringify!(def_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_midpt) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ALIGNED),
            "::",
            stringify!(text_midpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elevation) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ALIGNED),
            "::",
            stringify!(elevation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ALIGNED),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag1) as usize - ptr as usize },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ALIGNED),
            "::",
            stringify!(flag1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_text) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ALIGNED),
            "::",
            stringify!(user_text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_rotation) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ALIGNED),
            "::",
            stringify!(text_rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).horiz_dir) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ALIGNED),
            "::",
            stringify!(horiz_dir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ins_scale) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ALIGNED),
            "::",
            stringify!(ins_scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ins_rotation) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ALIGNED),
            "::",
            stringify!(ins_rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attachment) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ALIGNED),
            "::",
            stringify!(attachment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lspace_style) as usize - ptr as usize },
        154usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ALIGNED),
            "::",
            stringify!(lspace_style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lspace_factor) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ALIGNED),
            "::",
            stringify!(lspace_factor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).act_measurement) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ALIGNED),
            "::",
            stringify!(act_measurement)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ALIGNED),
            "::",
            stringify!(unknown)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flip_arrow1) as usize - ptr as usize },
        177usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ALIGNED),
            "::",
            stringify!(flip_arrow1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flip_arrow2) as usize - ptr as usize },
        178usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ALIGNED),
            "::",
            stringify!(flip_arrow2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clone_ins_pt) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ALIGNED),
            "::",
            stringify!(clone_ins_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dimstyle) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ALIGNED),
            "::",
            stringify!(dimstyle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ALIGNED),
            "::",
            stringify!(block)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xline1_pt) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ALIGNED),
            "::",
            stringify!(xline1_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xline2_pt) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ALIGNED),
            "::",
            stringify!(xline2_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oblique_angle) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ALIGNED),
            "::",
            stringify!(oblique_angle)
        )
    );
}
#[doc = "aligned dimension - DIMENSION_ALIGNED (22) entity"]
pub type Dwg_Entity_DIMENSION_ALIGNED = _dwg_entity_DIMENSION_ALIGNED;
#[doc = "angular 3pt dimension - DIMENSION_ANG3PT (23) entity"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_DIMENSION_ANG3PT {
    pub parent: *mut _dwg_object_entity,
    pub class_version: BITCODE_RC,
    pub extrusion: BITCODE_BE,
    pub def_pt: BITCODE_3BD,
    pub text_midpt: BITCODE_2RD,
    pub elevation: BITCODE_BD,
    pub flag: BITCODE_RC,
    pub flag1: BITCODE_RC,
    pub user_text: BITCODE_TV,
    pub text_rotation: BITCODE_BD,
    pub horiz_dir: BITCODE_BD,
    pub ins_scale: BITCODE_3BD,
    pub ins_rotation: BITCODE_BD,
    pub attachment: BITCODE_BS,
    pub lspace_style: BITCODE_BS,
    pub lspace_factor: BITCODE_BD,
    pub act_measurement: BITCODE_BD,
    pub unknown: BITCODE_B,
    pub flip_arrow1: BITCODE_B,
    pub flip_arrow2: BITCODE_B,
    pub clone_ins_pt: BITCODE_2RD,
    pub dimstyle: BITCODE_H,
    pub block: BITCODE_H,
    pub xline1_pt: BITCODE_3BD,
    pub xline2_pt: BITCODE_3BD,
    pub center_pt: BITCODE_3BD,
    pub xline2end_pt: BITCODE_3RD,
}
#[test]
fn bindgen_test_layout__dwg_entity_DIMENSION_ANG3PT() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_DIMENSION_ANG3PT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_DIMENSION_ANG3PT>(),
        312usize,
        concat!("Size of: ", stringify!(_dwg_entity_DIMENSION_ANG3PT))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_DIMENSION_ANG3PT>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_DIMENSION_ANG3PT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG3PT),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG3PT),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extrusion) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG3PT),
            "::",
            stringify!(extrusion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_pt) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG3PT),
            "::",
            stringify!(def_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_midpt) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG3PT),
            "::",
            stringify!(text_midpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elevation) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG3PT),
            "::",
            stringify!(elevation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG3PT),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag1) as usize - ptr as usize },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG3PT),
            "::",
            stringify!(flag1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_text) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG3PT),
            "::",
            stringify!(user_text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_rotation) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG3PT),
            "::",
            stringify!(text_rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).horiz_dir) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG3PT),
            "::",
            stringify!(horiz_dir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ins_scale) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG3PT),
            "::",
            stringify!(ins_scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ins_rotation) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG3PT),
            "::",
            stringify!(ins_rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attachment) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG3PT),
            "::",
            stringify!(attachment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lspace_style) as usize - ptr as usize },
        154usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG3PT),
            "::",
            stringify!(lspace_style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lspace_factor) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG3PT),
            "::",
            stringify!(lspace_factor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).act_measurement) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG3PT),
            "::",
            stringify!(act_measurement)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG3PT),
            "::",
            stringify!(unknown)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flip_arrow1) as usize - ptr as usize },
        177usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG3PT),
            "::",
            stringify!(flip_arrow1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flip_arrow2) as usize - ptr as usize },
        178usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG3PT),
            "::",
            stringify!(flip_arrow2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clone_ins_pt) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG3PT),
            "::",
            stringify!(clone_ins_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dimstyle) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG3PT),
            "::",
            stringify!(dimstyle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG3PT),
            "::",
            stringify!(block)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xline1_pt) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG3PT),
            "::",
            stringify!(xline1_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xline2_pt) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG3PT),
            "::",
            stringify!(xline2_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).center_pt) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG3PT),
            "::",
            stringify!(center_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xline2end_pt) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG3PT),
            "::",
            stringify!(xline2end_pt)
        )
    );
}
#[doc = "angular 3pt dimension - DIMENSION_ANG3PT (23) entity"]
pub type Dwg_Entity_DIMENSION_ANG3PT = _dwg_entity_DIMENSION_ANG3PT;
#[doc = "angular 2 line dimension - DIMENSION_ANG2LN (24) entity"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_DIMENSION_ANG2LN {
    pub parent: *mut _dwg_object_entity,
    pub class_version: BITCODE_RC,
    pub extrusion: BITCODE_BE,
    pub def_pt: BITCODE_3BD,
    pub text_midpt: BITCODE_2RD,
    pub elevation: BITCODE_BD,
    pub flag: BITCODE_RC,
    pub flag1: BITCODE_RC,
    pub user_text: BITCODE_TV,
    pub text_rotation: BITCODE_BD,
    pub horiz_dir: BITCODE_BD,
    pub ins_scale: BITCODE_3BD,
    pub ins_rotation: BITCODE_BD,
    pub attachment: BITCODE_BS,
    pub lspace_style: BITCODE_BS,
    pub lspace_factor: BITCODE_BD,
    pub act_measurement: BITCODE_BD,
    pub unknown: BITCODE_B,
    pub flip_arrow1: BITCODE_B,
    pub flip_arrow2: BITCODE_B,
    pub clone_ins_pt: BITCODE_2RD,
    pub dimstyle: BITCODE_H,
    pub block: BITCODE_H,
    pub xline1start_pt: BITCODE_3BD,
    pub xline1end_pt: BITCODE_3BD,
    pub xline2start_pt: BITCODE_3BD,
    pub xline2end_pt: BITCODE_3BD,
}
#[test]
fn bindgen_test_layout__dwg_entity_DIMENSION_ANG2LN() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_DIMENSION_ANG2LN> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_DIMENSION_ANG2LN>(),
        312usize,
        concat!("Size of: ", stringify!(_dwg_entity_DIMENSION_ANG2LN))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_DIMENSION_ANG2LN>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_DIMENSION_ANG2LN))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG2LN),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG2LN),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extrusion) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG2LN),
            "::",
            stringify!(extrusion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_pt) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG2LN),
            "::",
            stringify!(def_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_midpt) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG2LN),
            "::",
            stringify!(text_midpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elevation) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG2LN),
            "::",
            stringify!(elevation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG2LN),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag1) as usize - ptr as usize },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG2LN),
            "::",
            stringify!(flag1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_text) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG2LN),
            "::",
            stringify!(user_text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_rotation) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG2LN),
            "::",
            stringify!(text_rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).horiz_dir) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG2LN),
            "::",
            stringify!(horiz_dir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ins_scale) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG2LN),
            "::",
            stringify!(ins_scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ins_rotation) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG2LN),
            "::",
            stringify!(ins_rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attachment) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG2LN),
            "::",
            stringify!(attachment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lspace_style) as usize - ptr as usize },
        154usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG2LN),
            "::",
            stringify!(lspace_style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lspace_factor) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG2LN),
            "::",
            stringify!(lspace_factor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).act_measurement) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG2LN),
            "::",
            stringify!(act_measurement)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG2LN),
            "::",
            stringify!(unknown)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flip_arrow1) as usize - ptr as usize },
        177usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG2LN),
            "::",
            stringify!(flip_arrow1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flip_arrow2) as usize - ptr as usize },
        178usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG2LN),
            "::",
            stringify!(flip_arrow2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clone_ins_pt) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG2LN),
            "::",
            stringify!(clone_ins_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dimstyle) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG2LN),
            "::",
            stringify!(dimstyle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG2LN),
            "::",
            stringify!(block)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xline1start_pt) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG2LN),
            "::",
            stringify!(xline1start_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xline1end_pt) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG2LN),
            "::",
            stringify!(xline1end_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xline2start_pt) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG2LN),
            "::",
            stringify!(xline2start_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xline2end_pt) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_ANG2LN),
            "::",
            stringify!(xline2end_pt)
        )
    );
}
#[doc = "angular 2 line dimension - DIMENSION_ANG2LN (24) entity"]
pub type Dwg_Entity_DIMENSION_ANG2LN = _dwg_entity_DIMENSION_ANG2LN;
#[doc = "radius dimension - DIMENSION_RADIUS (25) entity"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_DIMENSION_RADIUS {
    pub parent: *mut _dwg_object_entity,
    pub class_version: BITCODE_RC,
    pub extrusion: BITCODE_BE,
    pub def_pt: BITCODE_3BD,
    pub text_midpt: BITCODE_2RD,
    pub elevation: BITCODE_BD,
    pub flag: BITCODE_RC,
    pub flag1: BITCODE_RC,
    pub user_text: BITCODE_TV,
    pub text_rotation: BITCODE_BD,
    pub horiz_dir: BITCODE_BD,
    pub ins_scale: BITCODE_3BD,
    pub ins_rotation: BITCODE_BD,
    pub attachment: BITCODE_BS,
    pub lspace_style: BITCODE_BS,
    pub lspace_factor: BITCODE_BD,
    pub act_measurement: BITCODE_BD,
    pub unknown: BITCODE_B,
    pub flip_arrow1: BITCODE_B,
    pub flip_arrow2: BITCODE_B,
    pub clone_ins_pt: BITCODE_2RD,
    pub dimstyle: BITCODE_H,
    pub block: BITCODE_H,
    #[doc = "< DXF 15"]
    pub first_arc_pt: BITCODE_3BD,
    #[doc = "< DXF 40"]
    pub leader_len: BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_entity_DIMENSION_RADIUS() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_DIMENSION_RADIUS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_DIMENSION_RADIUS>(),
        248usize,
        concat!("Size of: ", stringify!(_dwg_entity_DIMENSION_RADIUS))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_DIMENSION_RADIUS>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_DIMENSION_RADIUS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_RADIUS),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_RADIUS),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extrusion) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_RADIUS),
            "::",
            stringify!(extrusion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_pt) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_RADIUS),
            "::",
            stringify!(def_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_midpt) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_RADIUS),
            "::",
            stringify!(text_midpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elevation) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_RADIUS),
            "::",
            stringify!(elevation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_RADIUS),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag1) as usize - ptr as usize },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_RADIUS),
            "::",
            stringify!(flag1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_text) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_RADIUS),
            "::",
            stringify!(user_text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_rotation) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_RADIUS),
            "::",
            stringify!(text_rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).horiz_dir) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_RADIUS),
            "::",
            stringify!(horiz_dir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ins_scale) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_RADIUS),
            "::",
            stringify!(ins_scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ins_rotation) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_RADIUS),
            "::",
            stringify!(ins_rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attachment) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_RADIUS),
            "::",
            stringify!(attachment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lspace_style) as usize - ptr as usize },
        154usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_RADIUS),
            "::",
            stringify!(lspace_style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lspace_factor) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_RADIUS),
            "::",
            stringify!(lspace_factor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).act_measurement) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_RADIUS),
            "::",
            stringify!(act_measurement)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_RADIUS),
            "::",
            stringify!(unknown)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flip_arrow1) as usize - ptr as usize },
        177usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_RADIUS),
            "::",
            stringify!(flip_arrow1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flip_arrow2) as usize - ptr as usize },
        178usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_RADIUS),
            "::",
            stringify!(flip_arrow2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clone_ins_pt) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_RADIUS),
            "::",
            stringify!(clone_ins_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dimstyle) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_RADIUS),
            "::",
            stringify!(dimstyle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_RADIUS),
            "::",
            stringify!(block)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).first_arc_pt) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_RADIUS),
            "::",
            stringify!(first_arc_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).leader_len) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_RADIUS),
            "::",
            stringify!(leader_len)
        )
    );
}
#[doc = "radius dimension - DIMENSION_RADIUS (25) entity"]
pub type Dwg_Entity_DIMENSION_RADIUS = _dwg_entity_DIMENSION_RADIUS;
#[doc = "diameter dimension - DIMENSION_DIAMETER (26) entity"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_DIMENSION_DIAMETER {
    pub parent: *mut _dwg_object_entity,
    pub class_version: BITCODE_RC,
    pub extrusion: BITCODE_BE,
    pub def_pt: BITCODE_3BD,
    pub text_midpt: BITCODE_2RD,
    pub elevation: BITCODE_BD,
    pub flag: BITCODE_RC,
    pub flag1: BITCODE_RC,
    pub user_text: BITCODE_TV,
    pub text_rotation: BITCODE_BD,
    pub horiz_dir: BITCODE_BD,
    pub ins_scale: BITCODE_3BD,
    pub ins_rotation: BITCODE_BD,
    pub attachment: BITCODE_BS,
    pub lspace_style: BITCODE_BS,
    pub lspace_factor: BITCODE_BD,
    pub act_measurement: BITCODE_BD,
    pub unknown: BITCODE_B,
    pub flip_arrow1: BITCODE_B,
    pub flip_arrow2: BITCODE_B,
    pub clone_ins_pt: BITCODE_2RD,
    pub dimstyle: BITCODE_H,
    pub block: BITCODE_H,
    #[doc = "< DXF 15"]
    pub first_arc_pt: BITCODE_3BD,
    #[doc = "< DXF 40"]
    pub leader_len: BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_entity_DIMENSION_DIAMETER() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_DIMENSION_DIAMETER> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_DIMENSION_DIAMETER>(),
        248usize,
        concat!("Size of: ", stringify!(_dwg_entity_DIMENSION_DIAMETER))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_DIMENSION_DIAMETER>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_DIMENSION_DIAMETER))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_DIAMETER),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_DIAMETER),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extrusion) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_DIAMETER),
            "::",
            stringify!(extrusion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_pt) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_DIAMETER),
            "::",
            stringify!(def_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_midpt) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_DIAMETER),
            "::",
            stringify!(text_midpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elevation) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_DIAMETER),
            "::",
            stringify!(elevation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_DIAMETER),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag1) as usize - ptr as usize },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_DIAMETER),
            "::",
            stringify!(flag1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_text) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_DIAMETER),
            "::",
            stringify!(user_text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_rotation) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_DIAMETER),
            "::",
            stringify!(text_rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).horiz_dir) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_DIAMETER),
            "::",
            stringify!(horiz_dir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ins_scale) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_DIAMETER),
            "::",
            stringify!(ins_scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ins_rotation) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_DIAMETER),
            "::",
            stringify!(ins_rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attachment) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_DIAMETER),
            "::",
            stringify!(attachment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lspace_style) as usize - ptr as usize },
        154usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_DIAMETER),
            "::",
            stringify!(lspace_style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lspace_factor) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_DIAMETER),
            "::",
            stringify!(lspace_factor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).act_measurement) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_DIAMETER),
            "::",
            stringify!(act_measurement)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_DIAMETER),
            "::",
            stringify!(unknown)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flip_arrow1) as usize - ptr as usize },
        177usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_DIAMETER),
            "::",
            stringify!(flip_arrow1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flip_arrow2) as usize - ptr as usize },
        178usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_DIAMETER),
            "::",
            stringify!(flip_arrow2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clone_ins_pt) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_DIAMETER),
            "::",
            stringify!(clone_ins_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dimstyle) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_DIAMETER),
            "::",
            stringify!(dimstyle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_DIAMETER),
            "::",
            stringify!(block)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).first_arc_pt) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_DIAMETER),
            "::",
            stringify!(first_arc_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).leader_len) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_DIMENSION_DIAMETER),
            "::",
            stringify!(leader_len)
        )
    );
}
#[doc = "diameter dimension - DIMENSION_DIAMETER (26) entity"]
pub type Dwg_Entity_DIMENSION_DIAMETER = _dwg_entity_DIMENSION_DIAMETER;
#[doc = "arc dimension - ARC_DIMENSION (varies) entity"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_ARC_DIMENSION {
    pub parent: *mut _dwg_object_entity,
    pub class_version: BITCODE_RC,
    pub extrusion: BITCODE_BE,
    pub def_pt: BITCODE_3BD,
    pub text_midpt: BITCODE_2RD,
    pub elevation: BITCODE_BD,
    pub flag: BITCODE_RC,
    pub flag1: BITCODE_RC,
    pub user_text: BITCODE_TV,
    pub text_rotation: BITCODE_BD,
    pub horiz_dir: BITCODE_BD,
    pub ins_scale: BITCODE_3BD,
    pub ins_rotation: BITCODE_BD,
    pub attachment: BITCODE_BS,
    pub lspace_style: BITCODE_BS,
    pub lspace_factor: BITCODE_BD,
    pub act_measurement: BITCODE_BD,
    pub unknown: BITCODE_B,
    pub flip_arrow1: BITCODE_B,
    pub flip_arrow2: BITCODE_B,
    pub clone_ins_pt: BITCODE_2RD,
    pub dimstyle: BITCODE_H,
    pub block: BITCODE_H,
    pub xline1_pt: BITCODE_3BD,
    pub xline2_pt: BITCODE_3BD,
    pub center_pt: BITCODE_3BD,
    pub is_partial: BITCODE_B,
    pub arc_start_param: BITCODE_BD,
    pub arc_end_param: BITCODE_BD,
    pub has_leader: BITCODE_B,
    pub leader1_pt: BITCODE_3BD,
    pub leader2_pt: BITCODE_3BD,
}
#[test]
fn bindgen_test_layout__dwg_entity_ARC_DIMENSION() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_ARC_DIMENSION> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_ARC_DIMENSION>(),
        368usize,
        concat!("Size of: ", stringify!(_dwg_entity_ARC_DIMENSION))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_ARC_DIMENSION>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_ARC_DIMENSION))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARC_DIMENSION),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARC_DIMENSION),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extrusion) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARC_DIMENSION),
            "::",
            stringify!(extrusion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_pt) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARC_DIMENSION),
            "::",
            stringify!(def_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_midpt) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARC_DIMENSION),
            "::",
            stringify!(text_midpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elevation) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARC_DIMENSION),
            "::",
            stringify!(elevation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARC_DIMENSION),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag1) as usize - ptr as usize },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARC_DIMENSION),
            "::",
            stringify!(flag1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_text) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARC_DIMENSION),
            "::",
            stringify!(user_text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_rotation) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARC_DIMENSION),
            "::",
            stringify!(text_rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).horiz_dir) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARC_DIMENSION),
            "::",
            stringify!(horiz_dir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ins_scale) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARC_DIMENSION),
            "::",
            stringify!(ins_scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ins_rotation) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARC_DIMENSION),
            "::",
            stringify!(ins_rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attachment) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARC_DIMENSION),
            "::",
            stringify!(attachment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lspace_style) as usize - ptr as usize },
        154usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARC_DIMENSION),
            "::",
            stringify!(lspace_style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lspace_factor) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARC_DIMENSION),
            "::",
            stringify!(lspace_factor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).act_measurement) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARC_DIMENSION),
            "::",
            stringify!(act_measurement)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARC_DIMENSION),
            "::",
            stringify!(unknown)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flip_arrow1) as usize - ptr as usize },
        177usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARC_DIMENSION),
            "::",
            stringify!(flip_arrow1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flip_arrow2) as usize - ptr as usize },
        178usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARC_DIMENSION),
            "::",
            stringify!(flip_arrow2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clone_ins_pt) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARC_DIMENSION),
            "::",
            stringify!(clone_ins_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dimstyle) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARC_DIMENSION),
            "::",
            stringify!(dimstyle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARC_DIMENSION),
            "::",
            stringify!(block)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xline1_pt) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARC_DIMENSION),
            "::",
            stringify!(xline1_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xline2_pt) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARC_DIMENSION),
            "::",
            stringify!(xline2_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).center_pt) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARC_DIMENSION),
            "::",
            stringify!(center_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_partial) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARC_DIMENSION),
            "::",
            stringify!(is_partial)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arc_start_param) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARC_DIMENSION),
            "::",
            stringify!(arc_start_param)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arc_end_param) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARC_DIMENSION),
            "::",
            stringify!(arc_end_param)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_leader) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARC_DIMENSION),
            "::",
            stringify!(has_leader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).leader1_pt) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARC_DIMENSION),
            "::",
            stringify!(leader1_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).leader2_pt) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARC_DIMENSION),
            "::",
            stringify!(leader2_pt)
        )
    );
}
#[doc = "arc dimension - ARC_DIMENSION (varies) entity"]
pub type Dwg_Entity_ARC_DIMENSION = _dwg_entity_ARC_DIMENSION;
#[doc = "arc dimension - LARGE_RADIAL_DIMENSION (varies) entity"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_LARGE_RADIAL_DIMENSION {
    pub parent: *mut _dwg_object_entity,
    pub class_version: BITCODE_RC,
    pub extrusion: BITCODE_BE,
    pub def_pt: BITCODE_3BD,
    pub text_midpt: BITCODE_2RD,
    pub elevation: BITCODE_BD,
    pub flag: BITCODE_RC,
    pub flag1: BITCODE_RC,
    pub user_text: BITCODE_TV,
    pub text_rotation: BITCODE_BD,
    pub horiz_dir: BITCODE_BD,
    pub ins_scale: BITCODE_3BD,
    pub ins_rotation: BITCODE_BD,
    pub attachment: BITCODE_BS,
    pub lspace_style: BITCODE_BS,
    pub lspace_factor: BITCODE_BD,
    pub act_measurement: BITCODE_BD,
    pub unknown: BITCODE_B,
    pub flip_arrow1: BITCODE_B,
    pub flip_arrow2: BITCODE_B,
    pub clone_ins_pt: BITCODE_2RD,
    pub dimstyle: BITCODE_H,
    pub block: BITCODE_H,
    #[doc = "< DXF 15"]
    pub first_arc_pt: BITCODE_3BD,
    #[doc = "< DXF 40"]
    pub leader_len: BITCODE_BD,
    #[doc = "< DXF 12-32"]
    pub ovr_center: BITCODE_3BD,
    #[doc = "< DXF 13-33"]
    pub jog_point: BITCODE_3BD,
}
#[test]
fn bindgen_test_layout__dwg_entity_LARGE_RADIAL_DIMENSION() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_LARGE_RADIAL_DIMENSION> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_LARGE_RADIAL_DIMENSION>(),
        296usize,
        concat!("Size of: ", stringify!(_dwg_entity_LARGE_RADIAL_DIMENSION))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_LARGE_RADIAL_DIMENSION>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_entity_LARGE_RADIAL_DIMENSION)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LARGE_RADIAL_DIMENSION),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LARGE_RADIAL_DIMENSION),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extrusion) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LARGE_RADIAL_DIMENSION),
            "::",
            stringify!(extrusion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_pt) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LARGE_RADIAL_DIMENSION),
            "::",
            stringify!(def_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_midpt) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LARGE_RADIAL_DIMENSION),
            "::",
            stringify!(text_midpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elevation) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LARGE_RADIAL_DIMENSION),
            "::",
            stringify!(elevation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LARGE_RADIAL_DIMENSION),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag1) as usize - ptr as usize },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LARGE_RADIAL_DIMENSION),
            "::",
            stringify!(flag1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_text) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LARGE_RADIAL_DIMENSION),
            "::",
            stringify!(user_text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_rotation) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LARGE_RADIAL_DIMENSION),
            "::",
            stringify!(text_rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).horiz_dir) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LARGE_RADIAL_DIMENSION),
            "::",
            stringify!(horiz_dir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ins_scale) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LARGE_RADIAL_DIMENSION),
            "::",
            stringify!(ins_scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ins_rotation) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LARGE_RADIAL_DIMENSION),
            "::",
            stringify!(ins_rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attachment) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LARGE_RADIAL_DIMENSION),
            "::",
            stringify!(attachment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lspace_style) as usize - ptr as usize },
        154usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LARGE_RADIAL_DIMENSION),
            "::",
            stringify!(lspace_style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lspace_factor) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LARGE_RADIAL_DIMENSION),
            "::",
            stringify!(lspace_factor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).act_measurement) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LARGE_RADIAL_DIMENSION),
            "::",
            stringify!(act_measurement)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LARGE_RADIAL_DIMENSION),
            "::",
            stringify!(unknown)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flip_arrow1) as usize - ptr as usize },
        177usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LARGE_RADIAL_DIMENSION),
            "::",
            stringify!(flip_arrow1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flip_arrow2) as usize - ptr as usize },
        178usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LARGE_RADIAL_DIMENSION),
            "::",
            stringify!(flip_arrow2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clone_ins_pt) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LARGE_RADIAL_DIMENSION),
            "::",
            stringify!(clone_ins_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dimstyle) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LARGE_RADIAL_DIMENSION),
            "::",
            stringify!(dimstyle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LARGE_RADIAL_DIMENSION),
            "::",
            stringify!(block)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).first_arc_pt) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LARGE_RADIAL_DIMENSION),
            "::",
            stringify!(first_arc_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).leader_len) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LARGE_RADIAL_DIMENSION),
            "::",
            stringify!(leader_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ovr_center) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LARGE_RADIAL_DIMENSION),
            "::",
            stringify!(ovr_center)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jog_point) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LARGE_RADIAL_DIMENSION),
            "::",
            stringify!(jog_point)
        )
    );
}
#[doc = "arc dimension - LARGE_RADIAL_DIMENSION (varies) entity"]
pub type Dwg_Entity_LARGE_RADIAL_DIMENSION = _dwg_entity_LARGE_RADIAL_DIMENSION;
#[doc = "Struct for:  POINT (27/2)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_POINT {
    pub parent: *mut _dwg_object_entity,
    pub x: BITCODE_BD,
    pub y: BITCODE_BD,
    pub z: BITCODE_BD,
    pub thickness: BITCODE_BT,
    pub extrusion: BITCODE_BE,
    pub x_ang: BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_entity_POINT() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_POINT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_POINT>(),
        72usize,
        concat!("Size of: ", stringify!(_dwg_entity_POINT))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_POINT>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_POINT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINT),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINT),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINT),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINT),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thickness) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINT),
            "::",
            stringify!(thickness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extrusion) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINT),
            "::",
            stringify!(extrusion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x_ang) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINT),
            "::",
            stringify!(x_ang)
        )
    );
}
#[doc = "Struct for:  POINT (27/2)"]
pub type Dwg_Entity_POINT = _dwg_entity_POINT;
#[doc = "Struct for:  3D FACE (28/22)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_3DFACE {
    pub parent: *mut _dwg_object_entity,
    pub has_no_flags: BITCODE_B,
    pub z_is_zero: BITCODE_B,
    pub corner1: BITCODE_3BD,
    pub corner2: BITCODE_3BD,
    pub corner3: BITCODE_3BD,
    pub corner4: BITCODE_3BD,
    pub invis_flags: BITCODE_BS,
}
#[test]
fn bindgen_test_layout__dwg_entity_3DFACE() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_3DFACE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_3DFACE>(),
        120usize,
        concat!("Size of: ", stringify!(_dwg_entity_3DFACE))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_3DFACE>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_3DFACE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_3DFACE),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_no_flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_3DFACE),
            "::",
            stringify!(has_no_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z_is_zero) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_3DFACE),
            "::",
            stringify!(z_is_zero)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).corner1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_3DFACE),
            "::",
            stringify!(corner1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).corner2) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_3DFACE),
            "::",
            stringify!(corner2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).corner3) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_3DFACE),
            "::",
            stringify!(corner3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).corner4) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_3DFACE),
            "::",
            stringify!(corner4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).invis_flags) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_3DFACE),
            "::",
            stringify!(invis_flags)
        )
    );
}
#[doc = "Struct for:  3D FACE (28/22)"]
pub type Dwg_Entity__3DFACE = _dwg_entity_3DFACE;
#[doc = "Struct for:  POLYLINE (PFACE) (29)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_POLYLINE_PFACE {
    pub parent: *mut _dwg_object_entity,
    pub has_vertex: BITCODE_B,
    pub num_owned: BITCODE_BL,
    pub first_vertex: BITCODE_H,
    pub last_vertex: BITCODE_H,
    pub vertex: *mut BITCODE_H,
    pub seqend: BITCODE_H,
    pub flag: BITCODE_BS,
    pub numverts: BITCODE_BS,
    pub numfaces: BITCODE_BS,
}
#[test]
fn bindgen_test_layout__dwg_entity_POLYLINE_PFACE() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_POLYLINE_PFACE> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_POLYLINE_PFACE>(),
        56usize,
        concat!("Size of: ", stringify!(_dwg_entity_POLYLINE_PFACE))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_POLYLINE_PFACE>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_POLYLINE_PFACE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_PFACE),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_vertex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_PFACE),
            "::",
            stringify!(has_vertex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_owned) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_PFACE),
            "::",
            stringify!(num_owned)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).first_vertex) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_PFACE),
            "::",
            stringify!(first_vertex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_vertex) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_PFACE),
            "::",
            stringify!(last_vertex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertex) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_PFACE),
            "::",
            stringify!(vertex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seqend) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_PFACE),
            "::",
            stringify!(seqend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_PFACE),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numverts) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_PFACE),
            "::",
            stringify!(numverts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numfaces) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_PFACE),
            "::",
            stringify!(numfaces)
        )
    );
}
#[doc = "Struct for:  POLYLINE (PFACE) (29)"]
pub type Dwg_Entity_POLYLINE_PFACE = _dwg_entity_POLYLINE_PFACE;
#[doc = "Struct for:  POLYLINE (MESH) (30)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_POLYLINE_MESH {
    pub parent: *mut _dwg_object_entity,
    pub has_vertex: BITCODE_B,
    pub num_owned: BITCODE_BL,
    pub first_vertex: BITCODE_H,
    pub last_vertex: BITCODE_H,
    pub vertex: *mut BITCODE_H,
    pub seqend: BITCODE_H,
    pub flag: BITCODE_BS,
    pub curve_type: BITCODE_BS,
    pub num_m_verts: BITCODE_BS,
    pub num_n_verts: BITCODE_BS,
    pub m_density: BITCODE_BS,
    pub n_density: BITCODE_BS,
}
#[test]
fn bindgen_test_layout__dwg_entity_POLYLINE_MESH() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_POLYLINE_MESH> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_POLYLINE_MESH>(),
        64usize,
        concat!("Size of: ", stringify!(_dwg_entity_POLYLINE_MESH))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_POLYLINE_MESH>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_POLYLINE_MESH))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_MESH),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_vertex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_MESH),
            "::",
            stringify!(has_vertex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_owned) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_MESH),
            "::",
            stringify!(num_owned)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).first_vertex) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_MESH),
            "::",
            stringify!(first_vertex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_vertex) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_MESH),
            "::",
            stringify!(last_vertex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertex) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_MESH),
            "::",
            stringify!(vertex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seqend) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_MESH),
            "::",
            stringify!(seqend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_MESH),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).curve_type) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_MESH),
            "::",
            stringify!(curve_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_m_verts) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_MESH),
            "::",
            stringify!(num_m_verts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_n_verts) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_MESH),
            "::",
            stringify!(num_n_verts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_density) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_MESH),
            "::",
            stringify!(m_density)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_density) as usize - ptr as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLYLINE_MESH),
            "::",
            stringify!(n_density)
        )
    );
}
#[doc = "Struct for:  POLYLINE (MESH) (30)"]
pub type Dwg_Entity_POLYLINE_MESH = _dwg_entity_POLYLINE_MESH;
#[doc = "Struct for:  SOLID (31/11)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_SOLID {
    pub parent: *mut _dwg_object_entity,
    pub thickness: BITCODE_BT,
    pub elevation: BITCODE_BD,
    pub corner1: BITCODE_2RD,
    pub corner2: BITCODE_2RD,
    pub corner3: BITCODE_2RD,
    pub corner4: BITCODE_2RD,
    pub extrusion: BITCODE_BE,
}
#[test]
fn bindgen_test_layout__dwg_entity_SOLID() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_SOLID> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_SOLID>(),
        112usize,
        concat!("Size of: ", stringify!(_dwg_entity_SOLID))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_SOLID>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_SOLID))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SOLID),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thickness) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SOLID),
            "::",
            stringify!(thickness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elevation) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SOLID),
            "::",
            stringify!(elevation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).corner1) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SOLID),
            "::",
            stringify!(corner1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).corner2) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SOLID),
            "::",
            stringify!(corner2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).corner3) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SOLID),
            "::",
            stringify!(corner3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).corner4) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SOLID),
            "::",
            stringify!(corner4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extrusion) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SOLID),
            "::",
            stringify!(extrusion)
        )
    );
}
#[doc = "Struct for:  SOLID (31/11)"]
pub type Dwg_Entity_SOLID = _dwg_entity_SOLID;
#[doc = "Struct for:  TRACE (32/9)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_TRACE {
    pub parent: *mut _dwg_object_entity,
    pub thickness: BITCODE_BT,
    pub elevation: BITCODE_BD,
    pub corner1: BITCODE_2RD,
    pub corner2: BITCODE_2RD,
    pub corner3: BITCODE_2RD,
    pub corner4: BITCODE_2RD,
    pub extrusion: BITCODE_BE,
}
#[test]
fn bindgen_test_layout__dwg_entity_TRACE() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_TRACE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_TRACE>(),
        112usize,
        concat!("Size of: ", stringify!(_dwg_entity_TRACE))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_TRACE>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_TRACE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TRACE),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thickness) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TRACE),
            "::",
            stringify!(thickness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elevation) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TRACE),
            "::",
            stringify!(elevation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).corner1) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TRACE),
            "::",
            stringify!(corner1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).corner2) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TRACE),
            "::",
            stringify!(corner2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).corner3) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TRACE),
            "::",
            stringify!(corner3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).corner4) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TRACE),
            "::",
            stringify!(corner4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extrusion) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TRACE),
            "::",
            stringify!(extrusion)
        )
    );
}
#[doc = "Struct for:  TRACE (32/9)"]
pub type Dwg_Entity_TRACE = _dwg_entity_TRACE;
#[doc = "Struct for:  SHAPE (33/4)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_SHAPE {
    pub parent: *mut _dwg_object_entity,
    pub ins_pt: BITCODE_3BD,
    pub scale: BITCODE_BD,
    pub rotation: BITCODE_BD,
    pub width_factor: BITCODE_BD,
    pub oblique_angle: BITCODE_BD,
    pub thickness: BITCODE_BD,
    pub style_id: BITCODE_BS,
    pub extrusion: BITCODE_BE,
    pub style: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_entity_SHAPE() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_SHAPE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_SHAPE>(),
        112usize,
        concat!("Size of: ", stringify!(_dwg_entity_SHAPE))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_SHAPE>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_SHAPE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SHAPE),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ins_pt) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SHAPE),
            "::",
            stringify!(ins_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SHAPE),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rotation) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SHAPE),
            "::",
            stringify!(rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width_factor) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SHAPE),
            "::",
            stringify!(width_factor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oblique_angle) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SHAPE),
            "::",
            stringify!(oblique_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thickness) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SHAPE),
            "::",
            stringify!(thickness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).style_id) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SHAPE),
            "::",
            stringify!(style_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extrusion) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SHAPE),
            "::",
            stringify!(extrusion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).style) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SHAPE),
            "::",
            stringify!(style)
        )
    );
}
#[doc = "Struct for:  SHAPE (33/4)"]
pub type Dwg_Entity_SHAPE = _dwg_entity_SHAPE;
#[doc = "Struct for:  VIEWPORT ENTITY (34/24)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_VIEWPORT {
    pub parent: *mut _dwg_object_entity,
    pub center: BITCODE_3BD,
    pub width: BITCODE_BD,
    pub height: BITCODE_BD,
    pub on_off: BITCODE_RS,
    pub id: BITCODE_RS,
    pub view_target: BITCODE_3BD,
    pub VIEWDIR: BITCODE_3BD,
    pub twist_angle: BITCODE_BD,
    pub VIEWSIZE: BITCODE_BD,
    pub lens_length: BITCODE_BD,
    pub front_clip_z: BITCODE_BD,
    pub back_clip_z: BITCODE_BD,
    pub SNAPANG: BITCODE_BD,
    pub VIEWCTR: BITCODE_2RD,
    pub SNAPBASE: BITCODE_2RD,
    pub SNAPUNIT: BITCODE_2RD,
    pub GRIDUNIT: BITCODE_2RD,
    pub circle_zoom: BITCODE_BS,
    pub grid_major: BITCODE_BS,
    pub num_frozen_layers: BITCODE_BL,
    pub status_flag: BITCODE_BL,
    pub style_sheet: BITCODE_TV,
    pub render_mode: BITCODE_RC,
    pub ucs_at_origin: BITCODE_B,
    pub UCSVP: BITCODE_B,
    pub ucsorg: BITCODE_3BD,
    pub ucsxdir: BITCODE_3BD,
    pub ucsydir: BITCODE_3BD,
    pub ucs_elevation: BITCODE_BD,
    pub UCSORTHOVIEW: BITCODE_BS,
    pub shadeplot_mode: BITCODE_BS,
    pub use_default_lights: BITCODE_B,
    pub default_lighting_type: BITCODE_RC,
    pub brightness: BITCODE_BD,
    pub contrast: BITCODE_BD,
    pub ambient_color: BITCODE_CMC,
    pub vport_entity_header: BITCODE_H,
    pub frozen_layers: *mut BITCODE_H,
    pub clip_boundary: BITCODE_H,
    pub named_ucs: BITCODE_H,
    pub base_ucs: BITCODE_H,
    pub background: BITCODE_H,
    pub visualstyle: BITCODE_H,
    pub shadeplot: BITCODE_H,
    pub sun: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_entity_VIEWPORT() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_VIEWPORT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_VIEWPORT>(),
        472usize,
        concat!("Size of: ", stringify!(_dwg_entity_VIEWPORT))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_VIEWPORT>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_VIEWPORT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VIEWPORT),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).center) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VIEWPORT),
            "::",
            stringify!(center)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VIEWPORT),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VIEWPORT),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).on_off) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VIEWPORT),
            "::",
            stringify!(on_off)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VIEWPORT),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).view_target) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VIEWPORT),
            "::",
            stringify!(view_target)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VIEWDIR) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VIEWPORT),
            "::",
            stringify!(VIEWDIR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).twist_angle) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VIEWPORT),
            "::",
            stringify!(twist_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VIEWSIZE) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VIEWPORT),
            "::",
            stringify!(VIEWSIZE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lens_length) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VIEWPORT),
            "::",
            stringify!(lens_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).front_clip_z) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VIEWPORT),
            "::",
            stringify!(front_clip_z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).back_clip_z) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VIEWPORT),
            "::",
            stringify!(back_clip_z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SNAPANG) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VIEWPORT),
            "::",
            stringify!(SNAPANG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VIEWCTR) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VIEWPORT),
            "::",
            stringify!(VIEWCTR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SNAPBASE) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VIEWPORT),
            "::",
            stringify!(SNAPBASE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SNAPUNIT) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VIEWPORT),
            "::",
            stringify!(SNAPUNIT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GRIDUNIT) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VIEWPORT),
            "::",
            stringify!(GRIDUNIT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).circle_zoom) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VIEWPORT),
            "::",
            stringify!(circle_zoom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).grid_major) as usize - ptr as usize },
        218usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VIEWPORT),
            "::",
            stringify!(grid_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_frozen_layers) as usize - ptr as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VIEWPORT),
            "::",
            stringify!(num_frozen_layers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status_flag) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VIEWPORT),
            "::",
            stringify!(status_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).style_sheet) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VIEWPORT),
            "::",
            stringify!(style_sheet)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).render_mode) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VIEWPORT),
            "::",
            stringify!(render_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ucs_at_origin) as usize - ptr as usize },
        241usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VIEWPORT),
            "::",
            stringify!(ucs_at_origin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UCSVP) as usize - ptr as usize },
        242usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VIEWPORT),
            "::",
            stringify!(UCSVP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ucsorg) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VIEWPORT),
            "::",
            stringify!(ucsorg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ucsxdir) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VIEWPORT),
            "::",
            stringify!(ucsxdir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ucsydir) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VIEWPORT),
            "::",
            stringify!(ucsydir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ucs_elevation) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VIEWPORT),
            "::",
            stringify!(ucs_elevation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UCSORTHOVIEW) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VIEWPORT),
            "::",
            stringify!(UCSORTHOVIEW)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shadeplot_mode) as usize - ptr as usize },
        330usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VIEWPORT),
            "::",
            stringify!(shadeplot_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_default_lights) as usize - ptr as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VIEWPORT),
            "::",
            stringify!(use_default_lights)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).default_lighting_type) as usize - ptr as usize },
        333usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VIEWPORT),
            "::",
            stringify!(default_lighting_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).brightness) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VIEWPORT),
            "::",
            stringify!(brightness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).contrast) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VIEWPORT),
            "::",
            stringify!(contrast)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ambient_color) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VIEWPORT),
            "::",
            stringify!(ambient_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vport_entity_header) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VIEWPORT),
            "::",
            stringify!(vport_entity_header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frozen_layers) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VIEWPORT),
            "::",
            stringify!(frozen_layers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clip_boundary) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VIEWPORT),
            "::",
            stringify!(clip_boundary)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).named_ucs) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VIEWPORT),
            "::",
            stringify!(named_ucs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_ucs) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VIEWPORT),
            "::",
            stringify!(base_ucs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).background) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VIEWPORT),
            "::",
            stringify!(background)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).visualstyle) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VIEWPORT),
            "::",
            stringify!(visualstyle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shadeplot) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VIEWPORT),
            "::",
            stringify!(shadeplot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sun) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VIEWPORT),
            "::",
            stringify!(sun)
        )
    );
}
#[doc = "Struct for:  VIEWPORT ENTITY (34/24)"]
pub type Dwg_Entity_VIEWPORT = _dwg_entity_VIEWPORT;
#[doc = "ELLIPSE (35) entity"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_ELLIPSE {
    pub parent: *mut _dwg_object_entity,
    pub center: BITCODE_3BD,
    pub sm_axis: BITCODE_3BD,
    pub extrusion: BITCODE_BE,
    pub axis_ratio: BITCODE_BD,
    pub start_angle: BITCODE_BD,
    pub end_angle: BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_entity_ELLIPSE() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_ELLIPSE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_ELLIPSE>(),
        104usize,
        concat!("Size of: ", stringify!(_dwg_entity_ELLIPSE))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_ELLIPSE>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_ELLIPSE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ELLIPSE),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).center) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ELLIPSE),
            "::",
            stringify!(center)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sm_axis) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ELLIPSE),
            "::",
            stringify!(sm_axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extrusion) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ELLIPSE),
            "::",
            stringify!(extrusion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis_ratio) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ELLIPSE),
            "::",
            stringify!(axis_ratio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_angle) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ELLIPSE),
            "::",
            stringify!(start_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_angle) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ELLIPSE),
            "::",
            stringify!(end_angle)
        )
    );
}
#[doc = "ELLIPSE (35) entity"]
pub type Dwg_Entity_ELLIPSE = _dwg_entity_ELLIPSE;
#[doc = "spline - SPLINE (36) entity"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_SPLINE_control_point {
    pub parent: *mut _dwg_entity_SPLINE,
    pub x: f64,
    pub y: f64,
    pub z: f64,
    pub w: f64,
}
#[test]
fn bindgen_test_layout__dwg_SPLINE_control_point() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_SPLINE_control_point> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_SPLINE_control_point>(),
        40usize,
        concat!("Size of: ", stringify!(_dwg_SPLINE_control_point))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_SPLINE_control_point>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_SPLINE_control_point))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_SPLINE_control_point),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_SPLINE_control_point),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_SPLINE_control_point),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_SPLINE_control_point),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_SPLINE_control_point),
            "::",
            stringify!(w)
        )
    );
}
#[doc = "spline - SPLINE (36) entity"]
pub type Dwg_SPLINE_control_point = _dwg_SPLINE_control_point;
pub const SPLINETYPE_QUADRATIC: _bindgen_ty_1 = 5;
pub const SPLINETYPE_CUBIC: _bindgen_ty_1 = 6;
pub type _bindgen_ty_1 = ::std::os::raw::c_int;
pub const SPLINE_SCENARIO_SPLINE: _bindgen_ty_2 = 1;
pub const SPLINE_SCENARIO_BEZIER: _bindgen_ty_2 = 2;
pub type _bindgen_ty_2 = ::std::os::raw::c_int;
pub const SPLINE_SPLINEFLAGS_METHOD_FIT_POINTS: _bindgen_ty_3 = 1;
pub const SPLINE_SPLINEFLAGS_CV_FRAME_SHOW: _bindgen_ty_3 = 2;
pub const SPLINE_SPLINEFLAGS_CLOSED: _bindgen_ty_3 = 4;
pub type _bindgen_ty_3 = ::std::os::raw::c_int;
pub const SPLINE_KNOTPARAM_CHORD: _bindgen_ty_4 = 0;
pub const SPLINE_KNOTPARAM_SQUARE_ROOT: _bindgen_ty_4 = 1;
pub const SPLINE_KNOTPARAM_UNIFORM: _bindgen_ty_4 = 2;
pub const SPLINE_KNOTPARAM_CUSTOM: _bindgen_ty_4 = 15;
pub type _bindgen_ty_4 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_SPLINE {
    pub parent: *mut _dwg_object_entity,
    pub flag: BITCODE_RS,
    pub scenario: BITCODE_BS,
    pub degree: BITCODE_BS,
    pub splineflags: BITCODE_BL,
    pub knotparam: BITCODE_BL,
    pub fit_tol: BITCODE_BD,
    pub beg_tan_vec: BITCODE_3BD,
    pub end_tan_vec: BITCODE_3BD,
    pub closed_b: BITCODE_B,
    pub periodic: BITCODE_B,
    pub rational: BITCODE_B,
    pub weighted: BITCODE_B,
    pub knot_tol: BITCODE_BD,
    pub ctrl_tol: BITCODE_BD,
    pub num_fit_pts: BITCODE_BS,
    pub fit_pts: *mut BITCODE_3DPOINT,
    pub num_knots: BITCODE_BL,
    pub knots: *mut BITCODE_BD,
    pub num_ctrl_pts: BITCODE_BL,
    pub ctrl_pts: *mut Dwg_SPLINE_control_point,
}
#[test]
fn bindgen_test_layout__dwg_entity_SPLINE() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_SPLINE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_SPLINE>(),
        152usize,
        concat!("Size of: ", stringify!(_dwg_entity_SPLINE))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_SPLINE>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_SPLINE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SPLINE),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SPLINE),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scenario) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SPLINE),
            "::",
            stringify!(scenario)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).degree) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SPLINE),
            "::",
            stringify!(degree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).splineflags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SPLINE),
            "::",
            stringify!(splineflags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).knotparam) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SPLINE),
            "::",
            stringify!(knotparam)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fit_tol) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SPLINE),
            "::",
            stringify!(fit_tol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).beg_tan_vec) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SPLINE),
            "::",
            stringify!(beg_tan_vec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_tan_vec) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SPLINE),
            "::",
            stringify!(end_tan_vec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).closed_b) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SPLINE),
            "::",
            stringify!(closed_b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).periodic) as usize - ptr as usize },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SPLINE),
            "::",
            stringify!(periodic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rational) as usize - ptr as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SPLINE),
            "::",
            stringify!(rational)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).weighted) as usize - ptr as usize },
        83usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SPLINE),
            "::",
            stringify!(weighted)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).knot_tol) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SPLINE),
            "::",
            stringify!(knot_tol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctrl_tol) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SPLINE),
            "::",
            stringify!(ctrl_tol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_fit_pts) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SPLINE),
            "::",
            stringify!(num_fit_pts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fit_pts) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SPLINE),
            "::",
            stringify!(fit_pts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_knots) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SPLINE),
            "::",
            stringify!(num_knots)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).knots) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SPLINE),
            "::",
            stringify!(knots)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_ctrl_pts) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SPLINE),
            "::",
            stringify!(num_ctrl_pts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctrl_pts) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SPLINE),
            "::",
            stringify!(ctrl_pts)
        )
    );
}
pub type Dwg_Entity_SPLINE = _dwg_entity_SPLINE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_3DSOLID_wire {
    pub parent: *mut _dwg_entity_3DSOLID,
    pub type_: BITCODE_RC,
    pub selection_marker: BITCODE_BLd,
    pub color: BITCODE_BL,
    pub acis_index: BITCODE_BLd,
    pub num_points: BITCODE_BL,
    pub points: *mut BITCODE_3BD,
    pub transform_present: BITCODE_B,
    pub axis_x: BITCODE_3BD,
    pub axis_y: BITCODE_3BD,
    pub axis_z: BITCODE_3BD,
    pub translation: BITCODE_3BD,
    pub scale: BITCODE_3BD,
    pub has_rotation: BITCODE_B,
    pub has_reflection: BITCODE_B,
    pub has_shear: BITCODE_B,
}
#[test]
fn bindgen_test_layout__dwg_3DSOLID_wire() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_3DSOLID_wire> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_3DSOLID_wire>(),
        176usize,
        concat!("Size of: ", stringify!(_dwg_3DSOLID_wire))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_3DSOLID_wire>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_3DSOLID_wire))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_3DSOLID_wire),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_3DSOLID_wire),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).selection_marker) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_3DSOLID_wire),
            "::",
            stringify!(selection_marker)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_3DSOLID_wire),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acis_index) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_3DSOLID_wire),
            "::",
            stringify!(acis_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_points) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_3DSOLID_wire),
            "::",
            stringify!(num_points)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).points) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_3DSOLID_wire),
            "::",
            stringify!(points)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transform_present) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_3DSOLID_wire),
            "::",
            stringify!(transform_present)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis_x) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_3DSOLID_wire),
            "::",
            stringify!(axis_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis_y) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_3DSOLID_wire),
            "::",
            stringify!(axis_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis_z) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_3DSOLID_wire),
            "::",
            stringify!(axis_z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).translation) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_3DSOLID_wire),
            "::",
            stringify!(translation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_3DSOLID_wire),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_rotation) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_3DSOLID_wire),
            "::",
            stringify!(has_rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_reflection) as usize - ptr as usize },
        169usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_3DSOLID_wire),
            "::",
            stringify!(has_reflection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_shear) as usize - ptr as usize },
        170usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_3DSOLID_wire),
            "::",
            stringify!(has_shear)
        )
    );
}
pub type Dwg_3DSOLID_wire = _dwg_3DSOLID_wire;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_3DSOLID_silhouette {
    pub parent: *mut _dwg_entity_3DSOLID,
    pub vp_id: BITCODE_BL,
    pub vp_target: BITCODE_3BD,
    pub vp_dir_from_target: BITCODE_3BD,
    pub vp_up_dir: BITCODE_3BD,
    pub vp_perspective: BITCODE_B,
    pub has_wires: BITCODE_B,
    pub num_wires: BITCODE_BL,
    pub wires: *mut Dwg_3DSOLID_wire,
}
#[test]
fn bindgen_test_layout__dwg_3DSOLID_silhouette() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_3DSOLID_silhouette> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_3DSOLID_silhouette>(),
        104usize,
        concat!("Size of: ", stringify!(_dwg_3DSOLID_silhouette))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_3DSOLID_silhouette>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_3DSOLID_silhouette))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_3DSOLID_silhouette),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vp_id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_3DSOLID_silhouette),
            "::",
            stringify!(vp_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vp_target) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_3DSOLID_silhouette),
            "::",
            stringify!(vp_target)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vp_dir_from_target) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_3DSOLID_silhouette),
            "::",
            stringify!(vp_dir_from_target)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vp_up_dir) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_3DSOLID_silhouette),
            "::",
            stringify!(vp_up_dir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vp_perspective) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_3DSOLID_silhouette),
            "::",
            stringify!(vp_perspective)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_wires) as usize - ptr as usize },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_3DSOLID_silhouette),
            "::",
            stringify!(has_wires)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_wires) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_3DSOLID_silhouette),
            "::",
            stringify!(num_wires)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wires) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_3DSOLID_silhouette),
            "::",
            stringify!(wires)
        )
    );
}
pub type Dwg_3DSOLID_silhouette = _dwg_3DSOLID_silhouette;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_3DSOLID_material {
    pub parent: *mut _dwg_entity_3DSOLID,
    pub array_index: BITCODE_BL,
    pub mat_absref: BITCODE_BL,
    pub material_handle: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_3DSOLID_material() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_3DSOLID_material> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_3DSOLID_material>(),
        24usize,
        concat!("Size of: ", stringify!(_dwg_3DSOLID_material))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_3DSOLID_material>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_3DSOLID_material))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_3DSOLID_material),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).array_index) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_3DSOLID_material),
            "::",
            stringify!(array_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mat_absref) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_3DSOLID_material),
            "::",
            stringify!(mat_absref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).material_handle) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_3DSOLID_material),
            "::",
            stringify!(material_handle)
        )
    );
}
pub type Dwg_3DSOLID_material = _dwg_3DSOLID_material;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_3DSOLID {
    pub parent: *mut _dwg_object_entity,
    pub acis_empty: BITCODE_B,
    pub unknown: BITCODE_B,
    pub version: BITCODE_BS,
    pub num_blocks: BITCODE_BL,
    pub block_size: *mut BITCODE_BL,
    pub encr_sat_data: *mut *mut ::std::os::raw::c_char,
    pub sab_size: BITCODE_BL,
    pub acis_data: *mut BITCODE_RC,
    pub wireframe_data_present: BITCODE_B,
    pub point_present: BITCODE_B,
    pub point: BITCODE_3BD,
    pub isolines: BITCODE_BL,
    pub isoline_present: BITCODE_B,
    pub num_wires: BITCODE_BL,
    pub wires: *mut Dwg_3DSOLID_wire,
    pub num_silhouettes: BITCODE_BL,
    pub silhouettes: *mut Dwg_3DSOLID_silhouette,
    pub _dxf_sab_converted: BITCODE_B,
    pub acis_empty2: BITCODE_B,
    pub extra_acis_data: *mut _dwg_entity_3DSOLID,
    pub num_materials: BITCODE_BL,
    pub materials: *mut Dwg_3DSOLID_material,
    pub revision_guid: [BITCODE_RC; 39usize],
    pub revision_major: BITCODE_BL,
    pub revision_minor1: BITCODE_BS,
    pub revision_minor2: BITCODE_BS,
    pub revision_bytes: [BITCODE_RC; 9usize],
    pub end_marker: BITCODE_BL,
    pub history_id: BITCODE_H,
    pub has_revision_guid: BITCODE_B,
    pub acis_empty_bit: BITCODE_B,
}
#[test]
fn bindgen_test_layout__dwg_entity_3DSOLID() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_3DSOLID> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_3DSOLID>(),
        232usize,
        concat!("Size of: ", stringify!(_dwg_entity_3DSOLID))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_3DSOLID>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_3DSOLID))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_3DSOLID),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acis_empty) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_3DSOLID),
            "::",
            stringify!(acis_empty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_3DSOLID),
            "::",
            stringify!(unknown)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_3DSOLID),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_blocks) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_3DSOLID),
            "::",
            stringify!(num_blocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_3DSOLID),
            "::",
            stringify!(block_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encr_sat_data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_3DSOLID),
            "::",
            stringify!(encr_sat_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sab_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_3DSOLID),
            "::",
            stringify!(sab_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acis_data) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_3DSOLID),
            "::",
            stringify!(acis_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wireframe_data_present) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_3DSOLID),
            "::",
            stringify!(wireframe_data_present)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).point_present) as usize - ptr as usize },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_3DSOLID),
            "::",
            stringify!(point_present)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).point) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_3DSOLID),
            "::",
            stringify!(point)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isolines) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_3DSOLID),
            "::",
            stringify!(isolines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isoline_present) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_3DSOLID),
            "::",
            stringify!(isoline_present)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_wires) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_3DSOLID),
            "::",
            stringify!(num_wires)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wires) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_3DSOLID),
            "::",
            stringify!(wires)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_silhouettes) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_3DSOLID),
            "::",
            stringify!(num_silhouettes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).silhouettes) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_3DSOLID),
            "::",
            stringify!(silhouettes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._dxf_sab_converted) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_3DSOLID),
            "::",
            stringify!(_dxf_sab_converted)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acis_empty2) as usize - ptr as usize },
        121usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_3DSOLID),
            "::",
            stringify!(acis_empty2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extra_acis_data) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_3DSOLID),
            "::",
            stringify!(extra_acis_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_materials) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_3DSOLID),
            "::",
            stringify!(num_materials)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).materials) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_3DSOLID),
            "::",
            stringify!(materials)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision_guid) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_3DSOLID),
            "::",
            stringify!(revision_guid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision_major) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_3DSOLID),
            "::",
            stringify!(revision_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision_minor1) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_3DSOLID),
            "::",
            stringify!(revision_minor1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision_minor2) as usize - ptr as usize },
        198usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_3DSOLID),
            "::",
            stringify!(revision_minor2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision_bytes) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_3DSOLID),
            "::",
            stringify!(revision_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_marker) as usize - ptr as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_3DSOLID),
            "::",
            stringify!(end_marker)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).history_id) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_3DSOLID),
            "::",
            stringify!(history_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_revision_guid) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_3DSOLID),
            "::",
            stringify!(has_revision_guid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acis_empty_bit) as usize - ptr as usize },
        225usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_3DSOLID),
            "::",
            stringify!(acis_empty_bit)
        )
    );
}
pub type Dwg_Entity__3DSOLID = _dwg_entity_3DSOLID;
#[doc = "REGION (37) entity"]
pub type Dwg_Entity_REGION = Dwg_Entity__3DSOLID;
#[doc = "BODY (39) entity"]
pub type Dwg_Entity_BODY = Dwg_Entity__3DSOLID;
#[doc = "ray - RAY (40) entity"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_RAY {
    pub parent: *mut _dwg_object_entity,
    #[doc = "< DXF 10"]
    pub point: BITCODE_3BD,
    #[doc = "< DXF 11"]
    pub vector: BITCODE_3BD,
}
#[test]
fn bindgen_test_layout__dwg_entity_RAY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_RAY> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_RAY>(),
        56usize,
        concat!("Size of: ", stringify!(_dwg_entity_RAY))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_RAY>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_RAY))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_RAY),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).point) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_RAY),
            "::",
            stringify!(point)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vector) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_RAY),
            "::",
            stringify!(vector)
        )
    );
}
#[doc = "ray - RAY (40) entity"]
pub type Dwg_Entity_RAY = _dwg_entity_RAY;
#[doc = "XLINE (41) entity"]
pub type Dwg_Entity_XLINE = Dwg_Entity_RAY;
#[doc = "DICTIONARY (42)\nThis structure is used for all the new tables.\nBeware: Keep same offsets as DICTIONARYWDFLT"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_DICTIONARY {
    pub parent: *mut _dwg_object_object,
    #[doc = "< no DXF"]
    pub numitems: BITCODE_BL,
    #[doc = "< DXF 280"]
    pub is_hardowner: BITCODE_RC,
    #[doc = "< DXF 281, ie merge_style"]
    pub cloning: BITCODE_BS,
    #[doc = "< DXF 3"]
    pub texts: *mut BITCODE_TV,
    #[doc = "< DXF 350/360, pairwise with texts"]
    pub itemhandles: *mut BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_object_DICTIONARY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_DICTIONARY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_DICTIONARY>(),
        32usize,
        concat!("Size of: ", stringify!(_dwg_object_DICTIONARY))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_DICTIONARY>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_DICTIONARY))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DICTIONARY),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numitems) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DICTIONARY),
            "::",
            stringify!(numitems)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_hardowner) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DICTIONARY),
            "::",
            stringify!(is_hardowner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cloning) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DICTIONARY),
            "::",
            stringify!(cloning)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).texts) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DICTIONARY),
            "::",
            stringify!(texts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).itemhandles) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DICTIONARY),
            "::",
            stringify!(itemhandles)
        )
    );
}
#[doc = "DICTIONARY (42)\nThis structure is used for all the new tables.\nBeware: Keep same offsets as DICTIONARYWDFLT"]
pub type Dwg_Object_DICTIONARY = _dwg_object_DICTIONARY;
#[doc = "Class DICTIONARYWDFLT (varies)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_DICTIONARYWDFLT {
    pub parent: *mut _dwg_object_object,
    #[doc = "< no DXF"]
    pub numitems: BITCODE_BL,
    #[doc = "< DXF 280"]
    pub is_hardowner: BITCODE_RC,
    #[doc = "< DXF 281, ie merge_style"]
    pub cloning: BITCODE_BS,
    #[doc = "< DXF 3"]
    pub texts: *mut BITCODE_TV,
    #[doc = "< DXF 350/360, pairwise with texts"]
    pub itemhandles: *mut BITCODE_H,
    pub defaultid: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_object_DICTIONARYWDFLT() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_DICTIONARYWDFLT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_DICTIONARYWDFLT>(),
        40usize,
        concat!("Size of: ", stringify!(_dwg_object_DICTIONARYWDFLT))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_DICTIONARYWDFLT>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_DICTIONARYWDFLT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DICTIONARYWDFLT),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numitems) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DICTIONARYWDFLT),
            "::",
            stringify!(numitems)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_hardowner) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DICTIONARYWDFLT),
            "::",
            stringify!(is_hardowner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cloning) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DICTIONARYWDFLT),
            "::",
            stringify!(cloning)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).texts) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DICTIONARYWDFLT),
            "::",
            stringify!(texts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).itemhandles) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DICTIONARYWDFLT),
            "::",
            stringify!(itemhandles)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).defaultid) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DICTIONARYWDFLT),
            "::",
            stringify!(defaultid)
        )
    );
}
#[doc = "Class DICTIONARYWDFLT (varies)"]
pub type Dwg_Object_DICTIONARYWDFLT = _dwg_object_DICTIONARYWDFLT;
#[doc = "OLEFRAME (43) entity\n(replaced by OLE2FRAME (74) later)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_OLEFRAME {
    pub parent: *mut _dwg_object_entity,
    pub flag: BITCODE_BS,
    pub mode: BITCODE_BS,
    pub data_size: BITCODE_BL,
    pub data: BITCODE_TF,
}
#[test]
fn bindgen_test_layout__dwg_entity_OLEFRAME() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_OLEFRAME> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_OLEFRAME>(),
        24usize,
        concat!("Size of: ", stringify!(_dwg_entity_OLEFRAME))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_OLEFRAME>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_OLEFRAME))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_OLEFRAME),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_OLEFRAME),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_OLEFRAME),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_size) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_OLEFRAME),
            "::",
            stringify!(data_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_OLEFRAME),
            "::",
            stringify!(data)
        )
    );
}
#[doc = "OLEFRAME (43) entity\n(replaced by OLE2FRAME (74) later)"]
pub type Dwg_Entity_OLEFRAME = _dwg_entity_OLEFRAME;
#[doc = "MTEXT (44) entity"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_MTEXT {
    pub parent: *mut _dwg_object_entity,
    #[doc = "< DXF 10"]
    pub ins_pt: BITCODE_3BD,
    #[doc = "< DXF 210"]
    pub extrusion: BITCODE_BE,
    #[doc = "< DXF 11, defines the rotation"]
    pub x_axis_dir: BITCODE_3BD,
    #[doc = "< no DXF"]
    pub rect_height: BITCODE_BD,
    #[doc = "< DXF 41"]
    pub rect_width: BITCODE_BD,
    #[doc = "< DXF 40 >= 0.0"]
    pub text_height: BITCODE_BD,
    #[doc = "< DXF 71.\n1 = Top left, 2 = Top center, 3 = Top\nright, 4 = Middle left, 5 = Middle\ncenter, 6 = Middle right, 7 = Bottom\nleft, 8 = Bottom center, 9 = Bottom\nright"]
    pub attachment: BITCODE_BS,
    #[doc = "< DXF 72.\n1 = Left to right, 3 = Top to bottom,\n5 = By style (the flow direction is inherited\nfrom the associated text style)"]
    pub flow_dir: BITCODE_BS,
    #[doc = "< DXF 42"]
    pub extents_width: BITCODE_BD,
    #[doc = "< DXF 43 the actual height"]
    pub extents_height: BITCODE_BD,
    #[doc = "< DXF 1"]
    pub text: BITCODE_TV,
    #[doc = "< DXF 7"]
    pub style: BITCODE_H,
    #[doc = "< DXF 73. r2000+"]
    pub linespace_style: BITCODE_BS,
    #[doc = "< DXF 44. r2000+. Mtext line spacing factor (optional):\nPercentage of default (3-on-5) line spacing to\nbe applied. Valid values range from 0.25 to 4.00"]
    pub linespace_factor: BITCODE_BD,
    pub unknown_b0: BITCODE_B,
    #[doc = "< DXF 90. r2004+\n0 = Background fill off,\n1 = Use background fill color,\n2 = Use drawing window color as background fill color.\n16 = textframe (r2018+)"]
    pub bg_fill_flag: BITCODE_BL,
    #[doc = "< DXF 45. r2004+\nmargin around the text."]
    pub bg_fill_scale: BITCODE_BL,
    #[doc = "< DXF 63. r2004+. on bg_fill_flag==1"]
    pub bg_fill_color: BITCODE_CMC,
    #[doc = "< DXF 441. r2004+. unused"]
    pub bg_fill_trans: BITCODE_BL,
    #[doc = "< r2018+:"]
    pub is_not_annotative: BITCODE_B,
    #[doc = "< always 0"]
    pub class_version: BITCODE_BS,
    #[doc = "< DXF 70. default true"]
    pub default_flag: BITCODE_B,
    pub appid: BITCODE_H,
    #[doc = "< redundant copy, not BS"]
    pub ignore_attachment: BITCODE_BL,
    #[doc = "< DXF 71 0: none, 1: static, 2: dynamic."]
    pub column_type: BITCODE_BS,
    #[doc = "< DXF 72 if static"]
    pub numfragments: BITCODE_BL,
    #[doc = "< DXF 44"]
    pub column_width: BITCODE_BD,
    #[doc = "< DXF 45"]
    pub gutter: BITCODE_BD,
    #[doc = "< DXF 73"]
    pub auto_height: BITCODE_B,
    #[doc = "< DXF 74"]
    pub flow_reversed: BITCODE_B,
    #[doc = "< DXF 72 if dynamic and not auto_height"]
    pub num_column_heights: BITCODE_BL,
    #[doc = "< DXF 46"]
    pub column_heights: *mut BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_entity_MTEXT() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_MTEXT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_MTEXT>(),
        296usize,
        concat!("Size of: ", stringify!(_dwg_entity_MTEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_MTEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_MTEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MTEXT),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ins_pt) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MTEXT),
            "::",
            stringify!(ins_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extrusion) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MTEXT),
            "::",
            stringify!(extrusion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x_axis_dir) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MTEXT),
            "::",
            stringify!(x_axis_dir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rect_height) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MTEXT),
            "::",
            stringify!(rect_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rect_width) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MTEXT),
            "::",
            stringify!(rect_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_height) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MTEXT),
            "::",
            stringify!(text_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attachment) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MTEXT),
            "::",
            stringify!(attachment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flow_dir) as usize - ptr as usize },
        106usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MTEXT),
            "::",
            stringify!(flow_dir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extents_width) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MTEXT),
            "::",
            stringify!(extents_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extents_height) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MTEXT),
            "::",
            stringify!(extents_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MTEXT),
            "::",
            stringify!(text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).style) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MTEXT),
            "::",
            stringify!(style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).linespace_style) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MTEXT),
            "::",
            stringify!(linespace_style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).linespace_factor) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MTEXT),
            "::",
            stringify!(linespace_factor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_b0) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MTEXT),
            "::",
            stringify!(unknown_b0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_fill_flag) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MTEXT),
            "::",
            stringify!(bg_fill_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_fill_scale) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MTEXT),
            "::",
            stringify!(bg_fill_scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_fill_color) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MTEXT),
            "::",
            stringify!(bg_fill_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_fill_trans) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MTEXT),
            "::",
            stringify!(bg_fill_trans)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_not_annotative) as usize - ptr as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MTEXT),
            "::",
            stringify!(is_not_annotative)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        230usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MTEXT),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).default_flag) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MTEXT),
            "::",
            stringify!(default_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).appid) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MTEXT),
            "::",
            stringify!(appid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ignore_attachment) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MTEXT),
            "::",
            stringify!(ignore_attachment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).column_type) as usize - ptr as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MTEXT),
            "::",
            stringify!(column_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numfragments) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MTEXT),
            "::",
            stringify!(numfragments)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).column_width) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MTEXT),
            "::",
            stringify!(column_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gutter) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MTEXT),
            "::",
            stringify!(gutter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).auto_height) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MTEXT),
            "::",
            stringify!(auto_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flow_reversed) as usize - ptr as usize },
        281usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MTEXT),
            "::",
            stringify!(flow_reversed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_column_heights) as usize - ptr as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MTEXT),
            "::",
            stringify!(num_column_heights)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).column_heights) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MTEXT),
            "::",
            stringify!(column_heights)
        )
    );
}
#[doc = "MTEXT (44) entity"]
pub type Dwg_Entity_MTEXT = _dwg_entity_MTEXT;
#[doc = "LEADER (45) entity"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_LEADER {
    pub parent: *mut _dwg_object_entity,
    pub unknown_bit_1: BITCODE_B,
    pub path_type: BITCODE_BS,
    pub annot_type: BITCODE_BS,
    pub num_points: BITCODE_BL,
    pub points: *mut BITCODE_3DPOINT,
    pub origin: BITCODE_3DPOINT,
    pub extrusion: BITCODE_BE,
    pub x_direction: BITCODE_3DPOINT,
    pub inspt_offset: BITCODE_3DPOINT,
    pub endptproj: BITCODE_3DPOINT,
    pub dimgap: BITCODE_BD,
    pub box_height: BITCODE_BD,
    pub box_width: BITCODE_BD,
    pub hookline_dir: BITCODE_B,
    pub hookline_on: BITCODE_B,
    pub arrowhead_on: BITCODE_B,
    pub arrowhead_type: BITCODE_BS,
    pub dimasz: BITCODE_BD,
    pub unknown_bit_2: BITCODE_B,
    pub unknown_bit_3: BITCODE_B,
    pub unknown_short_1: BITCODE_BS,
    pub byblock_color: BITCODE_BS,
    pub unknown_bit_4: BITCODE_B,
    pub unknown_bit_5: BITCODE_B,
    pub associated_annotation: BITCODE_H,
    pub dimstyle: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_entity_LEADER() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_LEADER> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_LEADER>(),
        216usize,
        concat!("Size of: ", stringify!(_dwg_entity_LEADER))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_LEADER>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_LEADER))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LEADER),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bit_1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LEADER),
            "::",
            stringify!(unknown_bit_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path_type) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LEADER),
            "::",
            stringify!(path_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).annot_type) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LEADER),
            "::",
            stringify!(annot_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_points) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LEADER),
            "::",
            stringify!(num_points)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).points) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LEADER),
            "::",
            stringify!(points)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).origin) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LEADER),
            "::",
            stringify!(origin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extrusion) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LEADER),
            "::",
            stringify!(extrusion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x_direction) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LEADER),
            "::",
            stringify!(x_direction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inspt_offset) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LEADER),
            "::",
            stringify!(inspt_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endptproj) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LEADER),
            "::",
            stringify!(endptproj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dimgap) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LEADER),
            "::",
            stringify!(dimgap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).box_height) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LEADER),
            "::",
            stringify!(box_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).box_width) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LEADER),
            "::",
            stringify!(box_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hookline_dir) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LEADER),
            "::",
            stringify!(hookline_dir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hookline_on) as usize - ptr as usize },
        177usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LEADER),
            "::",
            stringify!(hookline_on)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arrowhead_on) as usize - ptr as usize },
        178usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LEADER),
            "::",
            stringify!(arrowhead_on)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arrowhead_type) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LEADER),
            "::",
            stringify!(arrowhead_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dimasz) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LEADER),
            "::",
            stringify!(dimasz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bit_2) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LEADER),
            "::",
            stringify!(unknown_bit_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bit_3) as usize - ptr as usize },
        193usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LEADER),
            "::",
            stringify!(unknown_bit_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_short_1) as usize - ptr as usize },
        194usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LEADER),
            "::",
            stringify!(unknown_short_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byblock_color) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LEADER),
            "::",
            stringify!(byblock_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bit_4) as usize - ptr as usize },
        198usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LEADER),
            "::",
            stringify!(unknown_bit_4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bit_5) as usize - ptr as usize },
        199usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LEADER),
            "::",
            stringify!(unknown_bit_5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).associated_annotation) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LEADER),
            "::",
            stringify!(associated_annotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dimstyle) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LEADER),
            "::",
            stringify!(dimstyle)
        )
    );
}
#[doc = "LEADER (45) entity"]
pub type Dwg_Entity_LEADER = _dwg_entity_LEADER;
#[doc = "TOLERANCE (46) entity"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_TOLERANCE {
    pub parent: *mut _dwg_object_entity,
    pub unknown_short: BITCODE_BS,
    pub height: BITCODE_BD,
    pub dimgap: BITCODE_BD,
    pub ins_pt: BITCODE_3BD,
    pub x_direction: BITCODE_3BD,
    pub extrusion: BITCODE_BE,
    pub text_value: BITCODE_TV,
    pub dimstyle: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_entity_TOLERANCE() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_TOLERANCE> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_TOLERANCE>(),
        120usize,
        concat!("Size of: ", stringify!(_dwg_entity_TOLERANCE))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_TOLERANCE>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_TOLERANCE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TOLERANCE),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_short) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TOLERANCE),
            "::",
            stringify!(unknown_short)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TOLERANCE),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dimgap) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TOLERANCE),
            "::",
            stringify!(dimgap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ins_pt) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TOLERANCE),
            "::",
            stringify!(ins_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x_direction) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TOLERANCE),
            "::",
            stringify!(x_direction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extrusion) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TOLERANCE),
            "::",
            stringify!(extrusion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_value) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TOLERANCE),
            "::",
            stringify!(text_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dimstyle) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TOLERANCE),
            "::",
            stringify!(dimstyle)
        )
    );
}
#[doc = "TOLERANCE (46) entity"]
pub type Dwg_Entity_TOLERANCE = _dwg_entity_TOLERANCE;
#[doc = "MLINE (47) entity"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_MLINE_line {
    pub parent: *mut _dwg_MLINE_vertex,
    pub num_segparms: BITCODE_BS,
    pub segparms: *mut BITCODE_BD,
    pub num_areafillparms: BITCODE_BS,
    pub areafillparms: *mut BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_MLINE_line() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_MLINE_line> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_MLINE_line>(),
        40usize,
        concat!("Size of: ", stringify!(_dwg_MLINE_line))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_MLINE_line>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_MLINE_line))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLINE_line),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_segparms) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLINE_line),
            "::",
            stringify!(num_segparms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).segparms) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLINE_line),
            "::",
            stringify!(segparms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_areafillparms) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLINE_line),
            "::",
            stringify!(num_areafillparms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).areafillparms) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLINE_line),
            "::",
            stringify!(areafillparms)
        )
    );
}
#[doc = "MLINE (47) entity"]
pub type Dwg_MLINE_line = _dwg_MLINE_line;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_MLINE_vertex {
    pub parent: *mut _dwg_entity_MLINE,
    pub vertex: BITCODE_3BD,
    pub vertex_direction: BITCODE_3BD,
    pub miter_direction: BITCODE_3BD,
    pub num_lines: BITCODE_RC,
    pub lines: *mut Dwg_MLINE_line,
}
#[test]
fn bindgen_test_layout__dwg_MLINE_vertex() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_MLINE_vertex> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_MLINE_vertex>(),
        96usize,
        concat!("Size of: ", stringify!(_dwg_MLINE_vertex))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_MLINE_vertex>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_MLINE_vertex))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLINE_vertex),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLINE_vertex),
            "::",
            stringify!(vertex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertex_direction) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLINE_vertex),
            "::",
            stringify!(vertex_direction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).miter_direction) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLINE_vertex),
            "::",
            stringify!(miter_direction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_lines) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLINE_vertex),
            "::",
            stringify!(num_lines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lines) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLINE_vertex),
            "::",
            stringify!(lines)
        )
    );
}
pub type Dwg_MLINE_vertex = _dwg_MLINE_vertex;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_MLINE {
    pub parent: *mut _dwg_object_entity,
    pub scale: BITCODE_BD,
    pub justification: BITCODE_RC,
    pub base_point: BITCODE_3BD,
    pub extrusion: BITCODE_BE,
    pub flags: BITCODE_BS,
    pub num_lines: BITCODE_RC,
    pub num_verts: BITCODE_BS,
    pub verts: *mut Dwg_MLINE_vertex,
    pub mlinestyle: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_entity_MLINE() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_MLINE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_MLINE>(),
        96usize,
        concat!("Size of: ", stringify!(_dwg_entity_MLINE))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_MLINE>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_MLINE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MLINE),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MLINE),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).justification) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MLINE),
            "::",
            stringify!(justification)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_point) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MLINE),
            "::",
            stringify!(base_point)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extrusion) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MLINE),
            "::",
            stringify!(extrusion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MLINE),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_lines) as usize - ptr as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MLINE),
            "::",
            stringify!(num_lines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_verts) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MLINE),
            "::",
            stringify!(num_verts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).verts) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MLINE),
            "::",
            stringify!(verts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mlinestyle) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MLINE),
            "::",
            stringify!(mlinestyle)
        )
    );
}
pub type Dwg_Entity_MLINE = _dwg_entity_MLINE;
#[doc = "BLOCK_CONTROL (48) object, table header"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_BLOCK_CONTROL {
    pub parent: *mut _dwg_object_object,
    pub num_entries: BITCODE_BS,
    pub entries: *mut BITCODE_H,
    pub flags_r11: BITCODE_RS,
    pub model_space: BITCODE_H,
    pub paper_space: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_object_BLOCK_CONTROL() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_BLOCK_CONTROL> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_BLOCK_CONTROL>(),
        48usize,
        concat!("Size of: ", stringify!(_dwg_object_BLOCK_CONTROL))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_BLOCK_CONTROL>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_BLOCK_CONTROL))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCK_CONTROL),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_entries) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCK_CONTROL),
            "::",
            stringify!(num_entries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entries) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCK_CONTROL),
            "::",
            stringify!(entries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags_r11) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCK_CONTROL),
            "::",
            stringify!(flags_r11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).model_space) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCK_CONTROL),
            "::",
            stringify!(model_space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paper_space) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCK_CONTROL),
            "::",
            stringify!(paper_space)
        )
    );
}
#[doc = "BLOCK_CONTROL (48) object, table header"]
pub type Dwg_Object_BLOCK_CONTROL = _dwg_object_BLOCK_CONTROL;
#[doc = "BLOCK_HEADER (49/T1) object, table entry"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_BLOCK_HEADER {
    pub parent: *mut _dwg_object_object,
    pub flag: BITCODE_RC,
    pub name: BITCODE_TV,
    pub used: BITCODE_RSd,
    pub is_xref_ref: BITCODE_B,
    pub is_xref_resolved: BITCODE_BS,
    pub is_xref_dep: BITCODE_B,
    pub xref: BITCODE_H,
    pub __iterator: BITCODE_BL,
    pub anonymous: BITCODE_B,
    pub hasattrs: BITCODE_B,
    pub blkisxref: BITCODE_B,
    pub xrefoverlaid: BITCODE_B,
    pub loaded_bit: BITCODE_B,
    pub num_owned: BITCODE_BL,
    pub base_pt: BITCODE_3DPOINT,
    pub xref_pname: BITCODE_TV,
    pub num_inserts: BITCODE_RL,
    pub description: BITCODE_TV,
    pub preview_size: BITCODE_BL,
    pub preview: BITCODE_TF,
    pub insert_units: BITCODE_BS,
    pub explodable: BITCODE_B,
    pub block_scaling: BITCODE_RC,
    pub block_entity: BITCODE_H,
    pub first_entity: BITCODE_H,
    pub last_entity: BITCODE_H,
    pub entities: *mut BITCODE_H,
    pub endblk_entity: BITCODE_H,
    pub inserts: *mut BITCODE_H,
    pub layout: BITCODE_H,
    pub flag2: BITCODE_RS,
    pub unknown_r11: BITCODE_RC,
    pub block_offset_r11: BITCODE_RL,
}
#[test]
fn bindgen_test_layout__dwg_object_BLOCK_HEADER() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_BLOCK_HEADER> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_BLOCK_HEADER>(),
        192usize,
        concat!("Size of: ", stringify!(_dwg_object_BLOCK_HEADER))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_BLOCK_HEADER>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_BLOCK_HEADER))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCK_HEADER),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCK_HEADER),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCK_HEADER),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).used) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCK_HEADER),
            "::",
            stringify!(used)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_xref_ref) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCK_HEADER),
            "::",
            stringify!(is_xref_ref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_xref_resolved) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCK_HEADER),
            "::",
            stringify!(is_xref_resolved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_xref_dep) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCK_HEADER),
            "::",
            stringify!(is_xref_dep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xref) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCK_HEADER),
            "::",
            stringify!(xref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__iterator) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCK_HEADER),
            "::",
            stringify!(__iterator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).anonymous) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCK_HEADER),
            "::",
            stringify!(anonymous)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hasattrs) as usize - ptr as usize },
        45usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCK_HEADER),
            "::",
            stringify!(hasattrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blkisxref) as usize - ptr as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCK_HEADER),
            "::",
            stringify!(blkisxref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xrefoverlaid) as usize - ptr as usize },
        47usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCK_HEADER),
            "::",
            stringify!(xrefoverlaid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loaded_bit) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCK_HEADER),
            "::",
            stringify!(loaded_bit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_owned) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCK_HEADER),
            "::",
            stringify!(num_owned)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_pt) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCK_HEADER),
            "::",
            stringify!(base_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xref_pname) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCK_HEADER),
            "::",
            stringify!(xref_pname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_inserts) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCK_HEADER),
            "::",
            stringify!(num_inserts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).description) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCK_HEADER),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).preview_size) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCK_HEADER),
            "::",
            stringify!(preview_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).preview) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCK_HEADER),
            "::",
            stringify!(preview)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).insert_units) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCK_HEADER),
            "::",
            stringify!(insert_units)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).explodable) as usize - ptr as usize },
        122usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCK_HEADER),
            "::",
            stringify!(explodable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block_scaling) as usize - ptr as usize },
        123usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCK_HEADER),
            "::",
            stringify!(block_scaling)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block_entity) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCK_HEADER),
            "::",
            stringify!(block_entity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).first_entity) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCK_HEADER),
            "::",
            stringify!(first_entity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_entity) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCK_HEADER),
            "::",
            stringify!(last_entity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entities) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCK_HEADER),
            "::",
            stringify!(entities)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endblk_entity) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCK_HEADER),
            "::",
            stringify!(endblk_entity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inserts) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCK_HEADER),
            "::",
            stringify!(inserts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layout) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCK_HEADER),
            "::",
            stringify!(layout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag2) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCK_HEADER),
            "::",
            stringify!(flag2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_r11) as usize - ptr as usize },
        186usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCK_HEADER),
            "::",
            stringify!(unknown_r11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block_offset_r11) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCK_HEADER),
            "::",
            stringify!(block_offset_r11)
        )
    );
}
#[doc = "BLOCK_HEADER (49/T1) object, table entry"]
pub type Dwg_Object_BLOCK_HEADER = _dwg_object_BLOCK_HEADER;
#[doc = "LAYER_CONTROL (50) object, table header"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_LAYER_CONTROL {
    pub parent: *mut _dwg_object_object,
    pub num_entries: BITCODE_BS,
    pub entries: *mut BITCODE_H,
    pub flags_r11: BITCODE_RS,
}
#[test]
fn bindgen_test_layout__dwg_object_LAYER_CONTROL() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_LAYER_CONTROL> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_LAYER_CONTROL>(),
        32usize,
        concat!("Size of: ", stringify!(_dwg_object_LAYER_CONTROL))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_LAYER_CONTROL>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_LAYER_CONTROL))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYER_CONTROL),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_entries) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYER_CONTROL),
            "::",
            stringify!(num_entries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entries) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYER_CONTROL),
            "::",
            stringify!(entries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags_r11) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYER_CONTROL),
            "::",
            stringify!(flags_r11)
        )
    );
}
#[doc = "LAYER_CONTROL (50) object, table header"]
pub type Dwg_Object_LAYER_CONTROL = _dwg_object_LAYER_CONTROL;
#[doc = "LAYER (51/T2) object, table entry"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_LAYER {
    pub parent: *mut _dwg_object_object,
    pub flag: BITCODE_RC,
    pub name: BITCODE_TV,
    pub used: BITCODE_RSd,
    pub is_xref_ref: BITCODE_B,
    pub is_xref_resolved: BITCODE_BS,
    pub is_xref_dep: BITCODE_B,
    pub xref: BITCODE_H,
    pub flag0: BITCODE_BS,
    pub frozen: BITCODE_B,
    pub on: BITCODE_B,
    pub frozen_in_new: BITCODE_B,
    pub locked: BITCODE_B,
    pub plotflag: BITCODE_B,
    pub linewt: BITCODE_RC,
    pub color: BITCODE_CMC,
    pub plotstyle: BITCODE_H,
    pub material: BITCODE_H,
    pub ltype: BITCODE_H,
    pub visualstyle: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_object_LAYER() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_LAYER> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_LAYER>(),
        128usize,
        concat!("Size of: ", stringify!(_dwg_object_LAYER))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_LAYER>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_LAYER))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYER),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYER),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYER),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).used) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYER),
            "::",
            stringify!(used)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_xref_ref) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYER),
            "::",
            stringify!(is_xref_ref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_xref_resolved) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYER),
            "::",
            stringify!(is_xref_resolved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_xref_dep) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYER),
            "::",
            stringify!(is_xref_dep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xref) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYER),
            "::",
            stringify!(xref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag0) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYER),
            "::",
            stringify!(flag0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frozen) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYER),
            "::",
            stringify!(frozen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).on) as usize - ptr as usize },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYER),
            "::",
            stringify!(on)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frozen_in_new) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYER),
            "::",
            stringify!(frozen_in_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).locked) as usize - ptr as usize },
        45usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYER),
            "::",
            stringify!(locked)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plotflag) as usize - ptr as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYER),
            "::",
            stringify!(plotflag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).linewt) as usize - ptr as usize },
        47usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYER),
            "::",
            stringify!(linewt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYER),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plotstyle) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYER),
            "::",
            stringify!(plotstyle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).material) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYER),
            "::",
            stringify!(material)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ltype) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYER),
            "::",
            stringify!(ltype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).visualstyle) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYER),
            "::",
            stringify!(visualstyle)
        )
    );
}
#[doc = "LAYER (51/T2) object, table entry"]
pub type Dwg_Object_LAYER = _dwg_object_LAYER;
#[doc = "STYLE_CONTROL (52) object, table header"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_STYLE_CONTROL {
    pub parent: *mut _dwg_object_object,
    pub num_entries: BITCODE_BS,
    pub entries: *mut BITCODE_H,
    pub flags_r11: BITCODE_RS,
}
#[test]
fn bindgen_test_layout__dwg_object_STYLE_CONTROL() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_STYLE_CONTROL> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_STYLE_CONTROL>(),
        32usize,
        concat!("Size of: ", stringify!(_dwg_object_STYLE_CONTROL))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_STYLE_CONTROL>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_STYLE_CONTROL))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_STYLE_CONTROL),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_entries) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_STYLE_CONTROL),
            "::",
            stringify!(num_entries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entries) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_STYLE_CONTROL),
            "::",
            stringify!(entries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags_r11) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_STYLE_CONTROL),
            "::",
            stringify!(flags_r11)
        )
    );
}
#[doc = "STYLE_CONTROL (52) object, table header"]
pub type Dwg_Object_STYLE_CONTROL = _dwg_object_STYLE_CONTROL;
#[doc = "STYLE (53/T3) object, table entry.\nTextStyleTableRecord. Some call it SHAPEFILE."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_STYLE {
    pub parent: *mut _dwg_object_object,
    pub flag: BITCODE_RC,
    pub name: BITCODE_TV,
    pub used: BITCODE_RSd,
    pub is_xref_ref: BITCODE_B,
    pub is_xref_resolved: BITCODE_BS,
    pub is_xref_dep: BITCODE_B,
    pub xref: BITCODE_H,
    pub is_shape: BITCODE_B,
    pub is_vertical: BITCODE_B,
    pub text_size: BITCODE_BD,
    pub width_factor: BITCODE_BD,
    pub oblique_angle: BITCODE_BD,
    pub generation: BITCODE_RC,
    pub last_height: BITCODE_BD,
    pub font_file: BITCODE_TV,
    pub bigfont_file: BITCODE_TV,
}
#[test]
fn bindgen_test_layout__dwg_object_STYLE() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_STYLE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_STYLE>(),
        104usize,
        concat!("Size of: ", stringify!(_dwg_object_STYLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_STYLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_STYLE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_STYLE),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_STYLE),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_STYLE),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).used) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_STYLE),
            "::",
            stringify!(used)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_xref_ref) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_STYLE),
            "::",
            stringify!(is_xref_ref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_xref_resolved) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_STYLE),
            "::",
            stringify!(is_xref_resolved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_xref_dep) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_STYLE),
            "::",
            stringify!(is_xref_dep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xref) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_STYLE),
            "::",
            stringify!(xref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_shape) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_STYLE),
            "::",
            stringify!(is_shape)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_vertical) as usize - ptr as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_STYLE),
            "::",
            stringify!(is_vertical)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_size) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_STYLE),
            "::",
            stringify!(text_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width_factor) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_STYLE),
            "::",
            stringify!(width_factor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oblique_angle) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_STYLE),
            "::",
            stringify!(oblique_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).generation) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_STYLE),
            "::",
            stringify!(generation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_height) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_STYLE),
            "::",
            stringify!(last_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).font_file) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_STYLE),
            "::",
            stringify!(font_file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bigfont_file) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_STYLE),
            "::",
            stringify!(bigfont_file)
        )
    );
}
#[doc = "STYLE (53/T3) object, table entry.\nTextStyleTableRecord. Some call it SHAPEFILE."]
pub type Dwg_Object_STYLE = _dwg_object_STYLE;
#[doc = "LTYPE_CONTROL (56) object, table header"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_LTYPE_CONTROL {
    pub parent: *mut _dwg_object_object,
    pub num_entries: BITCODE_BS,
    pub entries: *mut BITCODE_H,
    pub flags_r11: BITCODE_RS,
    pub bylayer: BITCODE_H,
    pub byblock: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_object_LTYPE_CONTROL() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_LTYPE_CONTROL> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_LTYPE_CONTROL>(),
        48usize,
        concat!("Size of: ", stringify!(_dwg_object_LTYPE_CONTROL))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_LTYPE_CONTROL>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_LTYPE_CONTROL))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LTYPE_CONTROL),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_entries) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LTYPE_CONTROL),
            "::",
            stringify!(num_entries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entries) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LTYPE_CONTROL),
            "::",
            stringify!(entries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags_r11) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LTYPE_CONTROL),
            "::",
            stringify!(flags_r11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bylayer) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LTYPE_CONTROL),
            "::",
            stringify!(bylayer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byblock) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LTYPE_CONTROL),
            "::",
            stringify!(byblock)
        )
    );
}
#[doc = "LTYPE_CONTROL (56) object, table header"]
pub type Dwg_Object_LTYPE_CONTROL = _dwg_object_LTYPE_CONTROL;
#[doc = "LTYPE (57/T4) object, table entry"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_LTYPE_dash {
    pub parent: *mut _dwg_object_LTYPE,
    pub length: BITCODE_BD,
    pub complex_shapecode: BITCODE_BS,
    pub style: BITCODE_H,
    pub x_offset: BITCODE_RD,
    pub y_offset: BITCODE_RD,
    pub scale: BITCODE_BD,
    pub rotation: BITCODE_BD,
    pub shape_flag: BITCODE_BS,
    pub text: BITCODE_TV,
}
#[test]
fn bindgen_test_layout__dwg_LTYPE_dash() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_LTYPE_dash> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_LTYPE_dash>(),
        80usize,
        concat!("Size of: ", stringify!(_dwg_LTYPE_dash))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_LTYPE_dash>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_LTYPE_dash))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LTYPE_dash),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LTYPE_dash),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).complex_shapecode) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LTYPE_dash),
            "::",
            stringify!(complex_shapecode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).style) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LTYPE_dash),
            "::",
            stringify!(style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x_offset) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LTYPE_dash),
            "::",
            stringify!(x_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y_offset) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LTYPE_dash),
            "::",
            stringify!(y_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LTYPE_dash),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rotation) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LTYPE_dash),
            "::",
            stringify!(rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shape_flag) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LTYPE_dash),
            "::",
            stringify!(shape_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LTYPE_dash),
            "::",
            stringify!(text)
        )
    );
}
#[doc = "LTYPE (57/T4) object, table entry"]
pub type Dwg_LTYPE_dash = _dwg_LTYPE_dash;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_LTYPE {
    pub parent: *mut _dwg_object_object,
    pub flag: BITCODE_RC,
    pub name: BITCODE_TV,
    pub used: BITCODE_RSd,
    pub is_xref_ref: BITCODE_B,
    pub is_xref_resolved: BITCODE_BS,
    pub is_xref_dep: BITCODE_B,
    pub xref: BITCODE_H,
    pub description: BITCODE_TV,
    pub pattern_len: BITCODE_BD,
    pub alignment: BITCODE_RC,
    pub numdashes: BITCODE_RC,
    pub dashes: *mut Dwg_LTYPE_dash,
    pub dashes_r11: [BITCODE_RD; 12usize],
    pub has_strings_area: BITCODE_B,
    pub strings_area: BITCODE_TF,
    pub unknown_r11: BITCODE_RC,
}
#[test]
fn bindgen_test_layout__dwg_object_LTYPE() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_LTYPE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_LTYPE>(),
        192usize,
        concat!("Size of: ", stringify!(_dwg_object_LTYPE))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_LTYPE>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_LTYPE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LTYPE),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LTYPE),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LTYPE),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).used) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LTYPE),
            "::",
            stringify!(used)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_xref_ref) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LTYPE),
            "::",
            stringify!(is_xref_ref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_xref_resolved) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LTYPE),
            "::",
            stringify!(is_xref_resolved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_xref_dep) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LTYPE),
            "::",
            stringify!(is_xref_dep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xref) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LTYPE),
            "::",
            stringify!(xref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).description) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LTYPE),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pattern_len) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LTYPE),
            "::",
            stringify!(pattern_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alignment) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LTYPE),
            "::",
            stringify!(alignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numdashes) as usize - ptr as usize },
        57usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LTYPE),
            "::",
            stringify!(numdashes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dashes) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LTYPE),
            "::",
            stringify!(dashes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dashes_r11) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LTYPE),
            "::",
            stringify!(dashes_r11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_strings_area) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LTYPE),
            "::",
            stringify!(has_strings_area)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).strings_area) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LTYPE),
            "::",
            stringify!(strings_area)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_r11) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LTYPE),
            "::",
            stringify!(unknown_r11)
        )
    );
}
pub type Dwg_Object_LTYPE = _dwg_object_LTYPE;
#[doc = "VIEW_CONTROL (60) object, table header"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_VIEW_CONTROL {
    pub parent: *mut _dwg_object_object,
    pub num_entries: BITCODE_BS,
    pub entries: *mut BITCODE_H,
    pub flags_r11: BITCODE_RS,
}
#[test]
fn bindgen_test_layout__dwg_object_VIEW_CONTROL() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_VIEW_CONTROL> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_VIEW_CONTROL>(),
        32usize,
        concat!("Size of: ", stringify!(_dwg_object_VIEW_CONTROL))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_VIEW_CONTROL>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_VIEW_CONTROL))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VIEW_CONTROL),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_entries) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VIEW_CONTROL),
            "::",
            stringify!(num_entries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entries) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VIEW_CONTROL),
            "::",
            stringify!(entries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags_r11) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VIEW_CONTROL),
            "::",
            stringify!(flags_r11)
        )
    );
}
#[doc = "VIEW_CONTROL (60) object, table header"]
pub type Dwg_Object_VIEW_CONTROL = _dwg_object_VIEW_CONTROL;
#[doc = "VIEW (61/T5) object, table entry"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_VIEW {
    pub parent: *mut _dwg_object_object,
    pub flag: BITCODE_RC,
    pub name: BITCODE_TV,
    pub used: BITCODE_RSd,
    pub is_xref_ref: BITCODE_B,
    pub is_xref_resolved: BITCODE_BS,
    pub is_xref_dep: BITCODE_B,
    pub xref: BITCODE_H,
    pub VIEWSIZE: BITCODE_BD,
    pub view_width: BITCODE_BD,
    pub aspect_ratio: BITCODE_BD,
    pub VIEWCTR: BITCODE_2RD,
    pub view_target: BITCODE_3BD,
    pub VIEWDIR: BITCODE_3BD,
    pub twist_angle: BITCODE_BD,
    pub lens_length: BITCODE_BD,
    pub front_clip_z: BITCODE_BD,
    pub back_clip_z: BITCODE_BD,
    pub VIEWMODE: BITCODE_4BITS,
    pub render_mode: BITCODE_RC,
    pub use_default_lights: BITCODE_B,
    pub default_lightning_type: BITCODE_RC,
    pub brightness: BITCODE_BD,
    pub contrast: BITCODE_BD,
    pub ambient_color: BITCODE_CMC,
    pub is_pspace: BITCODE_B,
    pub associated_ucs: BITCODE_B,
    pub ucsorg: BITCODE_3BD,
    pub ucsxdir: BITCODE_3BD,
    pub ucsydir: BITCODE_3BD,
    pub ucs_elevation: BITCODE_BD,
    pub UCSORTHOVIEW: BITCODE_BS,
    pub is_camera_plottable: BITCODE_B,
    pub background: BITCODE_H,
    pub visualstyle: BITCODE_H,
    pub sun: BITCODE_H,
    pub base_ucs: BITCODE_H,
    pub named_ucs: BITCODE_H,
    pub livesection: BITCODE_H,
    pub flag_3d: BITCODE_RS,
    pub unknown_r2: BITCODE_RC,
    pub unknown_r11: BITCODE_RC,
}
#[test]
fn bindgen_test_layout__dwg_object_VIEW() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_VIEW> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_VIEW>(),
        384usize,
        concat!("Size of: ", stringify!(_dwg_object_VIEW))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_VIEW>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_VIEW))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VIEW),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VIEW),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VIEW),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).used) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VIEW),
            "::",
            stringify!(used)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_xref_ref) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VIEW),
            "::",
            stringify!(is_xref_ref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_xref_resolved) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VIEW),
            "::",
            stringify!(is_xref_resolved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_xref_dep) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VIEW),
            "::",
            stringify!(is_xref_dep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xref) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VIEW),
            "::",
            stringify!(xref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VIEWSIZE) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VIEW),
            "::",
            stringify!(VIEWSIZE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).view_width) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VIEW),
            "::",
            stringify!(view_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aspect_ratio) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VIEW),
            "::",
            stringify!(aspect_ratio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VIEWCTR) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VIEW),
            "::",
            stringify!(VIEWCTR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).view_target) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VIEW),
            "::",
            stringify!(view_target)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VIEWDIR) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VIEW),
            "::",
            stringify!(VIEWDIR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).twist_angle) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VIEW),
            "::",
            stringify!(twist_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lens_length) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VIEW),
            "::",
            stringify!(lens_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).front_clip_z) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VIEW),
            "::",
            stringify!(front_clip_z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).back_clip_z) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VIEW),
            "::",
            stringify!(back_clip_z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VIEWMODE) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VIEW),
            "::",
            stringify!(VIEWMODE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).render_mode) as usize - ptr as usize },
        161usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VIEW),
            "::",
            stringify!(render_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_default_lights) as usize - ptr as usize },
        162usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VIEW),
            "::",
            stringify!(use_default_lights)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).default_lightning_type) as usize - ptr as usize },
        163usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VIEW),
            "::",
            stringify!(default_lightning_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).brightness) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VIEW),
            "::",
            stringify!(brightness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).contrast) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VIEW),
            "::",
            stringify!(contrast)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ambient_color) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VIEW),
            "::",
            stringify!(ambient_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_pspace) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VIEW),
            "::",
            stringify!(is_pspace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).associated_ucs) as usize - ptr as usize },
        233usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VIEW),
            "::",
            stringify!(associated_ucs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ucsorg) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VIEW),
            "::",
            stringify!(ucsorg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ucsxdir) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VIEW),
            "::",
            stringify!(ucsxdir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ucsydir) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VIEW),
            "::",
            stringify!(ucsydir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ucs_elevation) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VIEW),
            "::",
            stringify!(ucs_elevation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UCSORTHOVIEW) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VIEW),
            "::",
            stringify!(UCSORTHOVIEW)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_camera_plottable) as usize - ptr as usize },
        322usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VIEW),
            "::",
            stringify!(is_camera_plottable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).background) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VIEW),
            "::",
            stringify!(background)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).visualstyle) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VIEW),
            "::",
            stringify!(visualstyle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sun) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VIEW),
            "::",
            stringify!(sun)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_ucs) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VIEW),
            "::",
            stringify!(base_ucs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).named_ucs) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VIEW),
            "::",
            stringify!(named_ucs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).livesection) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VIEW),
            "::",
            stringify!(livesection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag_3d) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VIEW),
            "::",
            stringify!(flag_3d)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_r2) as usize - ptr as usize },
        378usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VIEW),
            "::",
            stringify!(unknown_r2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_r11) as usize - ptr as usize },
        379usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VIEW),
            "::",
            stringify!(unknown_r11)
        )
    );
}
#[doc = "VIEW (61/T5) object, table entry"]
pub type Dwg_Object_VIEW = _dwg_object_VIEW;
#[doc = "UCS_CONTROL (62) object, table header"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_UCS_CONTROL {
    pub parent: *mut _dwg_object_object,
    pub num_entries: BITCODE_BS,
    pub entries: *mut BITCODE_H,
    pub flags_r11: BITCODE_RS,
}
#[test]
fn bindgen_test_layout__dwg_object_UCS_CONTROL() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_UCS_CONTROL> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_UCS_CONTROL>(),
        32usize,
        concat!("Size of: ", stringify!(_dwg_object_UCS_CONTROL))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_UCS_CONTROL>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_UCS_CONTROL))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_UCS_CONTROL),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_entries) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_UCS_CONTROL),
            "::",
            stringify!(num_entries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entries) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_UCS_CONTROL),
            "::",
            stringify!(entries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags_r11) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_UCS_CONTROL),
            "::",
            stringify!(flags_r11)
        )
    );
}
#[doc = "UCS_CONTROL (62) object, table header"]
pub type Dwg_Object_UCS_CONTROL = _dwg_object_UCS_CONTROL;
#[doc = "UCS (63/T6) object, table entry"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_UCS_orthopts {
    pub parent: *mut _dwg_object_UCS,
    pub type_: BITCODE_BS,
    pub pt: BITCODE_3BD,
}
#[test]
fn bindgen_test_layout__dwg_UCS_orthopts() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_UCS_orthopts> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_UCS_orthopts>(),
        40usize,
        concat!("Size of: ", stringify!(_dwg_UCS_orthopts))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_UCS_orthopts>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_UCS_orthopts))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_UCS_orthopts),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_UCS_orthopts),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_UCS_orthopts),
            "::",
            stringify!(pt)
        )
    );
}
#[doc = "UCS (63/T6) object, table entry"]
pub type Dwg_UCS_orthopts = _dwg_UCS_orthopts;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_UCS {
    pub parent: *mut _dwg_object_object,
    pub flag: BITCODE_RC,
    pub name: BITCODE_TV,
    pub used: BITCODE_RSd,
    pub is_xref_ref: BITCODE_B,
    pub is_xref_resolved: BITCODE_BS,
    pub is_xref_dep: BITCODE_B,
    pub xref: BITCODE_H,
    pub ucsorg: BITCODE_3BD,
    pub ucsxdir: BITCODE_3BD,
    pub ucsydir: BITCODE_3BD,
    pub ucs_elevation: BITCODE_BD,
    pub UCSORTHOVIEW: BITCODE_BS,
    pub base_ucs: BITCODE_H,
    pub named_ucs: BITCODE_H,
    pub num_orthopts: BITCODE_BS,
    pub orthopts: *mut Dwg_UCS_orthopts,
}
#[test]
fn bindgen_test_layout__dwg_object_UCS() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_UCS> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_UCS>(),
        160usize,
        concat!("Size of: ", stringify!(_dwg_object_UCS))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_UCS>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_UCS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_UCS),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_UCS),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_UCS),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).used) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_UCS),
            "::",
            stringify!(used)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_xref_ref) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_UCS),
            "::",
            stringify!(is_xref_ref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_xref_resolved) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_UCS),
            "::",
            stringify!(is_xref_resolved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_xref_dep) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_UCS),
            "::",
            stringify!(is_xref_dep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xref) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_UCS),
            "::",
            stringify!(xref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ucsorg) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_UCS),
            "::",
            stringify!(ucsorg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ucsxdir) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_UCS),
            "::",
            stringify!(ucsxdir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ucsydir) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_UCS),
            "::",
            stringify!(ucsydir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ucs_elevation) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_UCS),
            "::",
            stringify!(ucs_elevation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UCSORTHOVIEW) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_UCS),
            "::",
            stringify!(UCSORTHOVIEW)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_ucs) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_UCS),
            "::",
            stringify!(base_ucs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).named_ucs) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_UCS),
            "::",
            stringify!(named_ucs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_orthopts) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_UCS),
            "::",
            stringify!(num_orthopts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).orthopts) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_UCS),
            "::",
            stringify!(orthopts)
        )
    );
}
pub type Dwg_Object_UCS = _dwg_object_UCS;
#[doc = "VPORT_CONTROL (64) object, table header"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_VPORT_CONTROL {
    pub parent: *mut _dwg_object_object,
    pub num_entries: BITCODE_BS,
    pub entries: *mut BITCODE_H,
    pub flags_r11: BITCODE_RS,
}
#[test]
fn bindgen_test_layout__dwg_object_VPORT_CONTROL() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_VPORT_CONTROL> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_VPORT_CONTROL>(),
        32usize,
        concat!("Size of: ", stringify!(_dwg_object_VPORT_CONTROL))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_VPORT_CONTROL>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_VPORT_CONTROL))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT_CONTROL),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_entries) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT_CONTROL),
            "::",
            stringify!(num_entries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entries) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT_CONTROL),
            "::",
            stringify!(entries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags_r11) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT_CONTROL),
            "::",
            stringify!(flags_r11)
        )
    );
}
#[doc = "VPORT_CONTROL (64) object, table header"]
pub type Dwg_Object_VPORT_CONTROL = _dwg_object_VPORT_CONTROL;
#[doc = "VPORT (65/T7) object, table entry"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_VPORT {
    pub parent: *mut _dwg_object_object,
    pub flag: BITCODE_RC,
    pub name: BITCODE_TV,
    pub used: BITCODE_RSd,
    pub is_xref_ref: BITCODE_B,
    pub is_xref_resolved: BITCODE_BS,
    pub is_xref_dep: BITCODE_B,
    pub xref: BITCODE_H,
    pub VIEWSIZE: BITCODE_BD,
    pub view_width: BITCODE_BD,
    pub aspect_ratio: BITCODE_BD,
    pub VIEWCTR: BITCODE_2RD,
    pub view_target: BITCODE_3BD,
    pub VIEWDIR: BITCODE_3BD,
    pub view_twist: BITCODE_BD,
    pub lens_length: BITCODE_BD,
    pub front_clip_z: BITCODE_BD,
    pub back_clip_z: BITCODE_BD,
    pub VIEWMODE: BITCODE_4BITS,
    pub render_mode: BITCODE_RC,
    pub use_default_lights: BITCODE_B,
    pub default_lightning_type: BITCODE_RC,
    pub brightness: BITCODE_BD,
    pub contrast: BITCODE_BD,
    pub ambient_color: BITCODE_CMC,
    pub lower_left: BITCODE_2RD,
    pub upper_right: BITCODE_2RD,
    pub UCSFOLLOW: BITCODE_B,
    pub circle_zoom: BITCODE_BS,
    pub FASTZOOM: BITCODE_B,
    pub UCSICON: BITCODE_RC,
    pub GRIDMODE: BITCODE_B,
    pub GRIDUNIT: BITCODE_2RD,
    pub SNAPMODE: BITCODE_B,
    pub SNAPSTYLE: BITCODE_B,
    pub SNAPISOPAIR: BITCODE_BS,
    pub SNAPANG: BITCODE_BD,
    pub SNAPBASE: BITCODE_2RD,
    pub SNAPUNIT: BITCODE_2RD,
    pub ucs_at_origin: BITCODE_B,
    pub UCSVP: BITCODE_B,
    pub ucsorg: BITCODE_3BD,
    pub ucsxdir: BITCODE_3BD,
    pub ucsydir: BITCODE_3BD,
    pub ucs_elevation: BITCODE_BD,
    pub UCSORTHOVIEW: BITCODE_BS,
    pub grid_flags: BITCODE_BS,
    pub grid_major: BITCODE_BS,
    pub background: BITCODE_H,
    pub visualstyle: BITCODE_H,
    pub sun: BITCODE_H,
    pub named_ucs: BITCODE_H,
    pub base_ucs: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_object_VPORT() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_VPORT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_VPORT>(),
        472usize,
        concat!("Size of: ", stringify!(_dwg_object_VPORT))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_VPORT>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_VPORT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).used) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(used)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_xref_ref) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(is_xref_ref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_xref_resolved) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(is_xref_resolved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_xref_dep) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(is_xref_dep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xref) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(xref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VIEWSIZE) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(VIEWSIZE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).view_width) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(view_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aspect_ratio) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(aspect_ratio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VIEWCTR) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(VIEWCTR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).view_target) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(view_target)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VIEWDIR) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(VIEWDIR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).view_twist) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(view_twist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lens_length) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(lens_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).front_clip_z) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(front_clip_z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).back_clip_z) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(back_clip_z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VIEWMODE) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(VIEWMODE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).render_mode) as usize - ptr as usize },
        161usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(render_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_default_lights) as usize - ptr as usize },
        162usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(use_default_lights)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).default_lightning_type) as usize - ptr as usize },
        163usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(default_lightning_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).brightness) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(brightness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).contrast) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(contrast)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ambient_color) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(ambient_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lower_left) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(lower_left)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upper_right) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(upper_right)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UCSFOLLOW) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(UCSFOLLOW)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).circle_zoom) as usize - ptr as usize },
        266usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(circle_zoom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FASTZOOM) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(FASTZOOM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UCSICON) as usize - ptr as usize },
        269usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(UCSICON)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GRIDMODE) as usize - ptr as usize },
        270usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(GRIDMODE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GRIDUNIT) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(GRIDUNIT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SNAPMODE) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(SNAPMODE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SNAPSTYLE) as usize - ptr as usize },
        289usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(SNAPSTYLE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SNAPISOPAIR) as usize - ptr as usize },
        290usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(SNAPISOPAIR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SNAPANG) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(SNAPANG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SNAPBASE) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(SNAPBASE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SNAPUNIT) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(SNAPUNIT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ucs_at_origin) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(ucs_at_origin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UCSVP) as usize - ptr as usize },
        337usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(UCSVP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ucsorg) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(ucsorg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ucsxdir) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(ucsxdir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ucsydir) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(ucsydir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ucs_elevation) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(ucs_elevation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UCSORTHOVIEW) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(UCSORTHOVIEW)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).grid_flags) as usize - ptr as usize },
        426usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(grid_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).grid_major) as usize - ptr as usize },
        428usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(grid_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).background) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(background)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).visualstyle) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(visualstyle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sun) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(sun)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).named_ucs) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(named_ucs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_ucs) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VPORT),
            "::",
            stringify!(base_ucs)
        )
    );
}
#[doc = "VPORT (65/T7) object, table entry"]
pub type Dwg_Object_VPORT = _dwg_object_VPORT;
#[doc = "APPID_CONTROL (66) object\nThe table header of all registered applications"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_APPID_CONTROL {
    pub parent: *mut _dwg_object_object,
    pub num_entries: BITCODE_BS,
    pub entries: *mut BITCODE_H,
    pub flags_r11: BITCODE_RS,
}
#[test]
fn bindgen_test_layout__dwg_object_APPID_CONTROL() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_APPID_CONTROL> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_APPID_CONTROL>(),
        32usize,
        concat!("Size of: ", stringify!(_dwg_object_APPID_CONTROL))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_APPID_CONTROL>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_APPID_CONTROL))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_APPID_CONTROL),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_entries) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_APPID_CONTROL),
            "::",
            stringify!(num_entries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entries) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_APPID_CONTROL),
            "::",
            stringify!(entries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags_r11) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_APPID_CONTROL),
            "::",
            stringify!(flags_r11)
        )
    );
}
#[doc = "APPID_CONTROL (66) object\nThe table header of all registered applications"]
pub type Dwg_Object_APPID_CONTROL = _dwg_object_APPID_CONTROL;
#[doc = "APPID (67/T8) object\nThe table entry of a registered application"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_APPID {
    pub parent: *mut _dwg_object_object,
    pub flag: BITCODE_RC,
    pub name: BITCODE_TV,
    pub used: BITCODE_RSd,
    pub is_xref_ref: BITCODE_B,
    pub is_xref_resolved: BITCODE_BS,
    pub is_xref_dep: BITCODE_B,
    pub xref: BITCODE_H,
    pub unknown: BITCODE_RC,
}
#[test]
fn bindgen_test_layout__dwg_object_APPID() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_APPID> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_APPID>(),
        48usize,
        concat!("Size of: ", stringify!(_dwg_object_APPID))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_APPID>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_APPID))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_APPID),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_APPID),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_APPID),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).used) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_APPID),
            "::",
            stringify!(used)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_xref_ref) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_APPID),
            "::",
            stringify!(is_xref_ref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_xref_resolved) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_APPID),
            "::",
            stringify!(is_xref_resolved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_xref_dep) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_APPID),
            "::",
            stringify!(is_xref_dep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xref) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_APPID),
            "::",
            stringify!(xref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_APPID),
            "::",
            stringify!(unknown)
        )
    );
}
#[doc = "APPID (67/T8) object\nThe table entry of a registered application"]
pub type Dwg_Object_APPID = _dwg_object_APPID;
#[doc = "DIMSTYLE_CONTROL (68) object\nThe table header of all dimension styles"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_DIMSTYLE_CONTROL {
    pub parent: *mut _dwg_object_object,
    pub num_entries: BITCODE_BS,
    pub entries: *mut BITCODE_H,
    pub flags_r11: BITCODE_RS,
    pub num_morehandles: BITCODE_RC,
    pub morehandles: *mut BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_object_DIMSTYLE_CONTROL() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_DIMSTYLE_CONTROL> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_DIMSTYLE_CONTROL>(),
        40usize,
        concat!("Size of: ", stringify!(_dwg_object_DIMSTYLE_CONTROL))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_DIMSTYLE_CONTROL>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_DIMSTYLE_CONTROL))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE_CONTROL),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_entries) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE_CONTROL),
            "::",
            stringify!(num_entries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entries) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE_CONTROL),
            "::",
            stringify!(entries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags_r11) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE_CONTROL),
            "::",
            stringify!(flags_r11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_morehandles) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE_CONTROL),
            "::",
            stringify!(num_morehandles)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).morehandles) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE_CONTROL),
            "::",
            stringify!(morehandles)
        )
    );
}
#[doc = "DIMSTYLE_CONTROL (68) object\nThe table header of all dimension styles"]
pub type Dwg_Object_DIMSTYLE_CONTROL = _dwg_object_DIMSTYLE_CONTROL;
#[doc = "DIMSTYLE (69/T9) object, table entry"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_DIMSTYLE {
    pub parent: *mut _dwg_object_object,
    pub flag: BITCODE_RC,
    pub name: BITCODE_TV,
    pub used: BITCODE_RSd,
    pub is_xref_ref: BITCODE_B,
    pub is_xref_resolved: BITCODE_BS,
    pub is_xref_dep: BITCODE_B,
    pub xref: BITCODE_H,
    pub DIMTOL: BITCODE_B,
    pub DIMLIM: BITCODE_B,
    pub DIMTIH: BITCODE_B,
    pub DIMTOH: BITCODE_B,
    pub DIMSE1: BITCODE_B,
    pub DIMSE2: BITCODE_B,
    pub DIMALT: BITCODE_B,
    pub DIMTOFL: BITCODE_B,
    pub DIMSAH: BITCODE_B,
    pub DIMTIX: BITCODE_B,
    pub DIMSOXD: BITCODE_B,
    #[doc = "< r13-r14 only RC"]
    pub DIMALTD: BITCODE_BS,
    #[doc = "< r13-r14 only RC"]
    pub DIMZIN: BITCODE_BS,
    pub DIMSD1: BITCODE_B,
    pub DIMSD2: BITCODE_B,
    #[doc = "< r13-r14 only RC"]
    pub DIMTOLJ: BITCODE_BS,
    #[doc = "< r13-r14 only RC"]
    pub DIMJUST: BITCODE_BS,
    #[doc = "< r13-r14 only RC"]
    pub DIMFIT: BITCODE_BS,
    pub DIMUPT: BITCODE_B,
    #[doc = "< r13-r14 only RC"]
    pub DIMTZIN: BITCODE_BS,
    #[doc = "< r13-r14 only RC"]
    pub DIMALTZ: BITCODE_BS,
    #[doc = "< r13-r14 only RC"]
    pub DIMALTTZ: BITCODE_BS,
    #[doc = "< r13-r14 only RC"]
    pub DIMTAD: BITCODE_BS,
    pub DIMUNIT: BITCODE_BS,
    pub DIMAUNIT: BITCODE_BS,
    pub DIMDEC: BITCODE_BS,
    pub DIMTDEC: BITCODE_BS,
    pub DIMALTU: BITCODE_BS,
    pub DIMALTTD: BITCODE_BS,
    pub DIMSCALE: BITCODE_BD,
    pub DIMASZ: BITCODE_BD,
    pub DIMEXO: BITCODE_BD,
    pub DIMDLI: BITCODE_BD,
    pub DIMEXE: BITCODE_BD,
    pub DIMRND: BITCODE_BD,
    pub DIMDLE: BITCODE_BD,
    pub DIMTP: BITCODE_BD,
    pub DIMTM: BITCODE_BD,
    pub DIMFXL: BITCODE_BD,
    pub DIMJOGANG: BITCODE_BD,
    pub DIMTFILL: BITCODE_BS,
    pub DIMTFILLCLR: BITCODE_CMC,
    pub DIMAZIN: BITCODE_BS,
    pub DIMARCSYM: BITCODE_BS,
    pub DIMTXT: BITCODE_BD,
    pub DIMCEN: BITCODE_BD,
    pub DIMTSZ: BITCODE_BD,
    pub DIMALTF: BITCODE_BD,
    pub DIMLFAC: BITCODE_BD,
    pub DIMTVP: BITCODE_BD,
    pub DIMTFAC: BITCODE_BD,
    pub DIMGAP: BITCODE_BD,
    pub DIMPOST: BITCODE_TV,
    pub DIMAPOST: BITCODE_TV,
    pub DIMBLK_T: BITCODE_TV,
    pub DIMBLK1_T: BITCODE_TV,
    pub DIMBLK2_T: BITCODE_TV,
    pub DIMALTRND: BITCODE_BD,
    pub DIMCLRD_N: BITCODE_RS,
    pub DIMCLRE_N: BITCODE_RS,
    pub DIMCLRT_N: BITCODE_RS,
    pub DIMCLRD: BITCODE_CMC,
    pub DIMCLRE: BITCODE_CMC,
    pub DIMCLRT: BITCODE_CMC,
    pub DIMADEC: BITCODE_BS,
    pub DIMFRAC: BITCODE_BS,
    pub DIMLUNIT: BITCODE_BS,
    pub DIMDSEP: BITCODE_BS,
    pub DIMTMOVE: BITCODE_BS,
    pub DIMATFIT: BITCODE_BS,
    #[doc = "< r2007+"]
    pub DIMFXLON: BITCODE_B,
    #[doc = "< r2010+"]
    pub DIMTXTDIRECTION: BITCODE_B,
    #[doc = "< r2010+"]
    pub DIMALTMZF: BITCODE_BD,
    #[doc = "< r2010+"]
    pub DIMALTMZS: BITCODE_TV,
    #[doc = "< r2010+"]
    pub DIMMZF: BITCODE_BD,
    #[doc = "< r2010+"]
    pub DIMMZS: BITCODE_TV,
    pub DIMLWD: BITCODE_BSd,
    pub DIMLWE: BITCODE_BSd,
    pub flag0: BITCODE_B,
    pub DIMTXSTY: BITCODE_H,
    pub DIMLDRBLK: BITCODE_H,
    pub DIMBLK: BITCODE_H,
    pub DIMBLK1: BITCODE_H,
    pub DIMBLK2: BITCODE_H,
    pub DIMLTYPE: BITCODE_H,
    pub DIMLTEX1: BITCODE_H,
    pub DIMLTEX2: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_object_DIMSTYLE() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_DIMSTYLE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_DIMSTYLE>(),
        624usize,
        concat!("Size of: ", stringify!(_dwg_object_DIMSTYLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_DIMSTYLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_DIMSTYLE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).used) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(used)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_xref_ref) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(is_xref_ref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_xref_resolved) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(is_xref_resolved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_xref_dep) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(is_xref_dep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xref) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(xref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMTOL) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMTOL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMLIM) as usize - ptr as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMLIM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMTIH) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMTIH)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMTOH) as usize - ptr as usize },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMTOH)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMSE1) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMSE1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMSE2) as usize - ptr as usize },
        45usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMSE2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMALT) as usize - ptr as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMALT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMTOFL) as usize - ptr as usize },
        47usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMTOFL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMSAH) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMSAH)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMTIX) as usize - ptr as usize },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMTIX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMSOXD) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMSOXD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMALTD) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMALTD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMZIN) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMZIN)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMSD1) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMSD1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMSD2) as usize - ptr as usize },
        57usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMSD2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMTOLJ) as usize - ptr as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMTOLJ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMJUST) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMJUST)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMFIT) as usize - ptr as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMFIT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMUPT) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMUPT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMTZIN) as usize - ptr as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMTZIN)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMALTZ) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMALTZ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMALTTZ) as usize - ptr as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMALTTZ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMTAD) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMTAD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMUNIT) as usize - ptr as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMUNIT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMAUNIT) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMAUNIT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMDEC) as usize - ptr as usize },
        78usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMDEC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMTDEC) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMTDEC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMALTU) as usize - ptr as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMALTU)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMALTTD) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMALTTD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMSCALE) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMSCALE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMASZ) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMASZ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMEXO) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMEXO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMDLI) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMDLI)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMEXE) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMEXE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMRND) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMRND)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMDLE) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMDLE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMTP) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMTP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMTM) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMTM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMFXL) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMFXL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMJOGANG) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMJOGANG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMTFILL) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMTFILL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMTFILLCLR) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMTFILLCLR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMAZIN) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMAZIN)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMARCSYM) as usize - ptr as usize },
        234usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMARCSYM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMTXT) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMTXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMCEN) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMCEN)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMTSZ) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMTSZ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMALTF) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMALTF)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMLFAC) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMLFAC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMTVP) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMTVP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMTFAC) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMTFAC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMGAP) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMGAP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMPOST) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMPOST)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMAPOST) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMAPOST)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMBLK_T) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMBLK_T)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMBLK1_T) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMBLK1_T)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMBLK2_T) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMBLK2_T)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMALTRND) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMALTRND)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMCLRD_N) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMCLRD_N)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMCLRE_N) as usize - ptr as usize },
        354usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMCLRE_N)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMCLRT_N) as usize - ptr as usize },
        356usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMCLRT_N)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMCLRD) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMCLRD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMCLRE) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMCLRE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMCLRT) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMCLRT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMADEC) as usize - ptr as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMADEC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMFRAC) as usize - ptr as usize },
        506usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMFRAC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMLUNIT) as usize - ptr as usize },
        508usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMLUNIT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMDSEP) as usize - ptr as usize },
        510usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMDSEP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMTMOVE) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMTMOVE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMATFIT) as usize - ptr as usize },
        514usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMATFIT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMFXLON) as usize - ptr as usize },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMFXLON)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMTXTDIRECTION) as usize - ptr as usize },
        517usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMTXTDIRECTION)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMALTMZF) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMALTMZF)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMALTMZS) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMALTMZS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMMZF) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMMZF)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMMZS) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMMZS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMLWD) as usize - ptr as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMLWD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMLWE) as usize - ptr as usize },
        554usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMLWE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag0) as usize - ptr as usize },
        556usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(flag0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMTXSTY) as usize - ptr as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMTXSTY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMLDRBLK) as usize - ptr as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMLDRBLK)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMBLK) as usize - ptr as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMBLK)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMBLK1) as usize - ptr as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMBLK1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMBLK2) as usize - ptr as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMBLK2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMLTYPE) as usize - ptr as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMLTYPE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMLTEX1) as usize - ptr as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMLTEX1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMLTEX2) as usize - ptr as usize },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMSTYLE),
            "::",
            stringify!(DIMLTEX2)
        )
    );
}
#[doc = "DIMSTYLE (69/T9) object, table entry"]
pub type Dwg_Object_DIMSTYLE = _dwg_object_DIMSTYLE;
#[doc = "VX_CONTROL (70) table object (r11-r2000)\nThe table header for all viewport entities (unused in newer versions)\nCalled VXTable"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_VX_CONTROL {
    pub parent: *mut _dwg_object_object,
    pub num_entries: BITCODE_BS,
    pub entries: *mut BITCODE_H,
    pub flags_r11: BITCODE_RS,
}
#[test]
fn bindgen_test_layout__dwg_object_VX_CONTROL() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_VX_CONTROL> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_VX_CONTROL>(),
        32usize,
        concat!("Size of: ", stringify!(_dwg_object_VX_CONTROL))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_VX_CONTROL>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_VX_CONTROL))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VX_CONTROL),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_entries) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VX_CONTROL),
            "::",
            stringify!(num_entries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entries) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VX_CONTROL),
            "::",
            stringify!(entries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags_r11) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VX_CONTROL),
            "::",
            stringify!(flags_r11)
        )
    );
}
#[doc = "VX_CONTROL (70) table object (r11-r2000)\nThe table header for all viewport entities (unused in newer versions)\nCalled VXTable"]
pub type Dwg_Object_VX_CONTROL = _dwg_object_VX_CONTROL;
#[doc = "VX_TABLE_RECORD (71/T10) table object (r11-r2000)\nCalled VXTableRecord / VX_TABLE_RECORD"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_VX_TABLE_RECORD {
    pub parent: *mut _dwg_object_object,
    pub flag: BITCODE_RC,
    pub name: BITCODE_TV,
    pub used: BITCODE_RSd,
    pub is_xref_ref: BITCODE_B,
    pub is_xref_resolved: BITCODE_BS,
    pub is_xref_dep: BITCODE_B,
    pub xref: BITCODE_H,
    pub is_on: BITCODE_B,
    pub viewport: BITCODE_H,
    pub prev_entry: BITCODE_H,
    pub vport_entity_address: BITCODE_RS,
    pub r11_viewport_index: BITCODE_RSd,
    pub r11_prev_entry_index: BITCODE_RSd,
}
#[test]
fn bindgen_test_layout__dwg_object_VX_TABLE_RECORD() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_VX_TABLE_RECORD> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_VX_TABLE_RECORD>(),
        72usize,
        concat!("Size of: ", stringify!(_dwg_object_VX_TABLE_RECORD))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_VX_TABLE_RECORD>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_VX_TABLE_RECORD))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VX_TABLE_RECORD),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VX_TABLE_RECORD),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VX_TABLE_RECORD),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).used) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VX_TABLE_RECORD),
            "::",
            stringify!(used)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_xref_ref) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VX_TABLE_RECORD),
            "::",
            stringify!(is_xref_ref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_xref_resolved) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VX_TABLE_RECORD),
            "::",
            stringify!(is_xref_resolved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_xref_dep) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VX_TABLE_RECORD),
            "::",
            stringify!(is_xref_dep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xref) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VX_TABLE_RECORD),
            "::",
            stringify!(xref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_on) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VX_TABLE_RECORD),
            "::",
            stringify!(is_on)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewport) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VX_TABLE_RECORD),
            "::",
            stringify!(viewport)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev_entry) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VX_TABLE_RECORD),
            "::",
            stringify!(prev_entry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vport_entity_address) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VX_TABLE_RECORD),
            "::",
            stringify!(vport_entity_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r11_viewport_index) as usize - ptr as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VX_TABLE_RECORD),
            "::",
            stringify!(r11_viewport_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r11_prev_entry_index) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VX_TABLE_RECORD),
            "::",
            stringify!(r11_prev_entry_index)
        )
    );
}
#[doc = "VX_TABLE_RECORD (71/T10) table object (r11-r2000)\nCalled VXTableRecord / VX_TABLE_RECORD"]
pub type Dwg_Object_VX_TABLE_RECORD = _dwg_object_VX_TABLE_RECORD;
#[doc = "GROUP (72) object"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_GROUP {
    pub parent: *mut _dwg_object_object,
    pub name: BITCODE_TV,
    pub unnamed: BITCODE_BS,
    pub selectable: BITCODE_BS,
    pub num_groups: BITCODE_BL,
    pub groups: *mut BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_object_GROUP() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_GROUP> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_GROUP>(),
        32usize,
        concat!("Size of: ", stringify!(_dwg_object_GROUP))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_GROUP>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_GROUP))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GROUP),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GROUP),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unnamed) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GROUP),
            "::",
            stringify!(unnamed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).selectable) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GROUP),
            "::",
            stringify!(selectable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_groups) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GROUP),
            "::",
            stringify!(num_groups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).groups) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GROUP),
            "::",
            stringify!(groups)
        )
    );
}
#[doc = "GROUP (72) object"]
pub type Dwg_Object_GROUP = _dwg_object_GROUP;
#[doc = "MLINESTYLE (73) object"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_MLINESTYLE_line {
    pub parent: *mut _dwg_object_MLINESTYLE,
    pub offset: BITCODE_BD,
    pub color: BITCODE_CMC,
    pub lt: _dwg_MLINESTYLE_line__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _dwg_MLINESTYLE_line__bindgen_ty_1 {
    pub index: BITCODE_BSd,
    pub ltype: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_MLINESTYLE_line__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_MLINESTYLE_line__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_MLINESTYLE_line__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_dwg_MLINESTYLE_line__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_MLINESTYLE_line__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_MLINESTYLE_line__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLINESTYLE_line__bindgen_ty_1),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ltype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLINESTYLE_line__bindgen_ty_1),
            "::",
            stringify!(ltype)
        )
    );
}
#[test]
fn bindgen_test_layout__dwg_MLINESTYLE_line() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_MLINESTYLE_line> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_MLINESTYLE_line>(),
        72usize,
        concat!("Size of: ", stringify!(_dwg_MLINESTYLE_line))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_MLINESTYLE_line>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_MLINESTYLE_line))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLINESTYLE_line),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLINESTYLE_line),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLINESTYLE_line),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lt) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLINESTYLE_line),
            "::",
            stringify!(lt)
        )
    );
}
#[doc = "MLINESTYLE (73) object"]
pub type Dwg_MLINESTYLE_line = _dwg_MLINESTYLE_line;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_MLINESTYLE {
    pub parent: *mut _dwg_object_object,
    pub name: BITCODE_TV,
    pub description: BITCODE_TV,
    pub flag: BITCODE_BS,
    pub fill_color: BITCODE_CMC,
    pub start_angle: BITCODE_BD,
    pub end_angle: BITCODE_BD,
    pub num_lines: BITCODE_RC,
    pub lines: *mut Dwg_MLINESTYLE_line,
}
#[test]
fn bindgen_test_layout__dwg_object_MLINESTYLE() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_MLINESTYLE> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_MLINESTYLE>(),
        112usize,
        concat!("Size of: ", stringify!(_dwg_object_MLINESTYLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_MLINESTYLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_MLINESTYLE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLINESTYLE),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLINESTYLE),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).description) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLINESTYLE),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLINESTYLE),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fill_color) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLINESTYLE),
            "::",
            stringify!(fill_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_angle) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLINESTYLE),
            "::",
            stringify!(start_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_angle) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLINESTYLE),
            "::",
            stringify!(end_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_lines) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLINESTYLE),
            "::",
            stringify!(num_lines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lines) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLINESTYLE),
            "::",
            stringify!(lines)
        )
    );
}
pub type Dwg_Object_MLINESTYLE = _dwg_object_MLINESTYLE;
#[doc = "OLE2FRAME (74 + varies) object"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_OLE2FRAME {
    pub parent: *mut _dwg_object_entity,
    #[doc = "< DXF 71, 1: Link, 2: Embedded, 3: Static"]
    pub type_: BITCODE_BS,
    #[doc = "< r2000+ DXF 72, tile_mode, 0: mspace, 1: pspace"]
    pub mode: BITCODE_BS,
    #[doc = "< r2000+ DXF 73, 0 or 1 (locked)"]
    pub lock_aspect: BITCODE_RC,
    #[doc = "< DXF 90"]
    pub data_size: BITCODE_BL,
    #[doc = "< DXF 310, the binary object data"]
    pub data: BITCODE_TF,
    #[doc = "< DXF 70, always 2"]
    pub oleversion: BITCODE_BS,
    #[doc = "< DXF 3, e.g. OLE or Paintbrush Picture"]
    pub oleclient: BITCODE_TF,
    #[doc = "< DXF 10, upper left corner"]
    pub pt1: BITCODE_3BD,
    #[doc = "< DXF 11, lower right corner"]
    pub pt2: BITCODE_3BD,
}
#[test]
fn bindgen_test_layout__dwg_entity_OLE2FRAME() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_OLE2FRAME> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_OLE2FRAME>(),
        96usize,
        concat!("Size of: ", stringify!(_dwg_entity_OLE2FRAME))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_OLE2FRAME>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_OLE2FRAME))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_OLE2FRAME),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_OLE2FRAME),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_OLE2FRAME),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_aspect) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_OLE2FRAME),
            "::",
            stringify!(lock_aspect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_OLE2FRAME),
            "::",
            stringify!(data_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_OLE2FRAME),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oleversion) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_OLE2FRAME),
            "::",
            stringify!(oleversion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oleclient) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_OLE2FRAME),
            "::",
            stringify!(oleclient)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt1) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_OLE2FRAME),
            "::",
            stringify!(pt1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt2) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_OLE2FRAME),
            "::",
            stringify!(pt2)
        )
    );
}
#[doc = "OLE2FRAME (74 + varies) object"]
pub type Dwg_Entity_OLE2FRAME = _dwg_entity_OLE2FRAME;
#[doc = "DUMMY (75) object, placeholder for unsupported types on encode."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_DUMMY {
    pub parent: *mut _dwg_object_object,
}
#[test]
fn bindgen_test_layout__dwg_object_DUMMY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_DUMMY> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_DUMMY>(),
        8usize,
        concat!("Size of: ", stringify!(_dwg_object_DUMMY))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_DUMMY>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_DUMMY))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DUMMY),
            "::",
            stringify!(parent)
        )
    );
}
#[doc = "DUMMY (75) object, placeholder for unsupported types on encode."]
pub type Dwg_Object_DUMMY = _dwg_object_DUMMY;
#[doc = "LONG_TRANSACTION (76) object"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_LONG_TRANSACTION {
    pub parent: *mut _dwg_object_object,
}
#[test]
fn bindgen_test_layout__dwg_object_LONG_TRANSACTION() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_LONG_TRANSACTION> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_LONG_TRANSACTION>(),
        8usize,
        concat!("Size of: ", stringify!(_dwg_object_LONG_TRANSACTION))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_LONG_TRANSACTION>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_LONG_TRANSACTION))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LONG_TRANSACTION),
            "::",
            stringify!(parent)
        )
    );
}
#[doc = "LONG_TRANSACTION (76) object"]
pub type Dwg_Object_LONG_TRANSACTION = _dwg_object_LONG_TRANSACTION;
#[doc = "subtype PROXY_LWPOLYLINE (33) in a PROXY object\nNot a LWPOLYLINE (77? + varies)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_LWPOLYLINE_width {
    pub start: BITCODE_BD,
    pub end: BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_LWPOLYLINE_width() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_LWPOLYLINE_width> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_LWPOLYLINE_width>(),
        16usize,
        concat!("Size of: ", stringify!(_dwg_LWPOLYLINE_width))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_LWPOLYLINE_width>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_LWPOLYLINE_width))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LWPOLYLINE_width),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LWPOLYLINE_width),
            "::",
            stringify!(end)
        )
    );
}
#[doc = "subtype PROXY_LWPOLYLINE (33) in a PROXY object\nNot a LWPOLYLINE (77? + varies)"]
pub type Dwg_LWPOLYLINE_width = _dwg_LWPOLYLINE_width;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_PROXY_LWPOLYLINE {
    pub parent: *mut _dwg_entity_PROXY_ENTITY,
    pub size: BITCODE_RL,
    pub flags: BITCODE_BS,
    pub const_width: BITCODE_BD,
    pub elevation: BITCODE_BD,
    pub thickness: BITCODE_BD,
    pub extrusion: BITCODE_BE,
    pub num_points: BITCODE_BL,
    pub points: *mut BITCODE_2RD,
    pub num_bulges: BITCODE_BL,
    pub bulges: *mut BITCODE_BD,
    pub num_widths: BITCODE_BL,
    pub widths: *mut Dwg_LWPOLYLINE_width,
    pub unknown_1: BITCODE_RC,
    pub unknown_2: BITCODE_RC,
    pub unknown_3: BITCODE_RC,
}
#[test]
fn bindgen_test_layout__dwg_PROXY_LWPOLYLINE() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_PROXY_LWPOLYLINE> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_PROXY_LWPOLYLINE>(),
        120usize,
        concat!("Size of: ", stringify!(_dwg_PROXY_LWPOLYLINE))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_PROXY_LWPOLYLINE>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_PROXY_LWPOLYLINE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_PROXY_LWPOLYLINE),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_PROXY_LWPOLYLINE),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_PROXY_LWPOLYLINE),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).const_width) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_PROXY_LWPOLYLINE),
            "::",
            stringify!(const_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elevation) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_PROXY_LWPOLYLINE),
            "::",
            stringify!(elevation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thickness) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_PROXY_LWPOLYLINE),
            "::",
            stringify!(thickness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extrusion) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_PROXY_LWPOLYLINE),
            "::",
            stringify!(extrusion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_points) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_PROXY_LWPOLYLINE),
            "::",
            stringify!(num_points)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).points) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_PROXY_LWPOLYLINE),
            "::",
            stringify!(points)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_bulges) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_PROXY_LWPOLYLINE),
            "::",
            stringify!(num_bulges)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bulges) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_PROXY_LWPOLYLINE),
            "::",
            stringify!(bulges)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_widths) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_PROXY_LWPOLYLINE),
            "::",
            stringify!(num_widths)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).widths) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_PROXY_LWPOLYLINE),
            "::",
            stringify!(widths)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_1) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_PROXY_LWPOLYLINE),
            "::",
            stringify!(unknown_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_2) as usize - ptr as usize },
        113usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_PROXY_LWPOLYLINE),
            "::",
            stringify!(unknown_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_3) as usize - ptr as usize },
        114usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_PROXY_LWPOLYLINE),
            "::",
            stringify!(unknown_3)
        )
    );
}
pub type Dwg_PROXY_LWPOLYLINE = _dwg_PROXY_LWPOLYLINE;
#[doc = "(ACAD_)PROXY_ENTITY (498, 0x1f2) object"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_PROXY_ENTITY {
    pub parent: *mut _dwg_object_entity,
    #[doc = "< DXF 91, always 498, same as obj->type"]
    pub class_id: BITCODE_BL,
    #[doc = "< DXF 95 <r2018, 71 r2018+"]
    pub version: BITCODE_BL,
    #[doc = "< DXF 97 r2018+"]
    pub maint_version: BITCODE_BL,
    #[doc = "< DXF 70"]
    pub from_dxf: BITCODE_B,
    pub data_numbits: BITCODE_BL,
    #[doc = "< DXF 93"]
    pub data_size: BITCODE_BL,
    #[doc = "< DXF 310"]
    pub data: *mut BITCODE_RC,
    pub num_objids: BITCODE_BL,
    #[doc = "< DXF 340"]
    pub objids: *mut BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_entity_PROXY_ENTITY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_PROXY_ENTITY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_PROXY_ENTITY>(),
        56usize,
        concat!("Size of: ", stringify!(_dwg_entity_PROXY_ENTITY))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_PROXY_ENTITY>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_PROXY_ENTITY))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_PROXY_ENTITY),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_PROXY_ENTITY),
            "::",
            stringify!(class_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_PROXY_ENTITY),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maint_version) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_PROXY_ENTITY),
            "::",
            stringify!(maint_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).from_dxf) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_PROXY_ENTITY),
            "::",
            stringify!(from_dxf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_numbits) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_PROXY_ENTITY),
            "::",
            stringify!(data_numbits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_size) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_PROXY_ENTITY),
            "::",
            stringify!(data_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_PROXY_ENTITY),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_objids) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_PROXY_ENTITY),
            "::",
            stringify!(num_objids)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objids) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_PROXY_ENTITY),
            "::",
            stringify!(objids)
        )
    );
}
#[doc = "(ACAD_)PROXY_ENTITY (498, 0x1f2) object"]
pub type Dwg_Entity_PROXY_ENTITY = _dwg_entity_PROXY_ENTITY;
#[doc = "(ACAD_)PROXY OBJECT (499, 0x1f3) object"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_PROXY_OBJECT {
    pub parent: *mut _dwg_object_object,
    #[doc = "< DXF 91, always 499, same as obj->type"]
    pub class_id: BITCODE_BL,
    #[doc = "< DXF 95 <r2018, 71 r2018+"]
    pub version: BITCODE_BL,
    #[doc = "< DXF 97 r2018+"]
    pub maint_version: BITCODE_BL,
    #[doc = "< DXF 70"]
    pub from_dxf: BITCODE_B,
    pub data_numbits: BITCODE_BL,
    #[doc = "< DXF 93"]
    pub data_size: BITCODE_BL,
    #[doc = "< DXF 310"]
    pub data: *mut BITCODE_RC,
    pub num_objids: BITCODE_BL,
    #[doc = "< DXF 340"]
    pub objids: *mut BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_object_PROXY_OBJECT() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_PROXY_OBJECT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_PROXY_OBJECT>(),
        56usize,
        concat!("Size of: ", stringify!(_dwg_object_PROXY_OBJECT))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_PROXY_OBJECT>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_PROXY_OBJECT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PROXY_OBJECT),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PROXY_OBJECT),
            "::",
            stringify!(class_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PROXY_OBJECT),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maint_version) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PROXY_OBJECT),
            "::",
            stringify!(maint_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).from_dxf) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PROXY_OBJECT),
            "::",
            stringify!(from_dxf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_numbits) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PROXY_OBJECT),
            "::",
            stringify!(data_numbits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_size) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PROXY_OBJECT),
            "::",
            stringify!(data_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PROXY_OBJECT),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_objids) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PROXY_OBJECT),
            "::",
            stringify!(num_objids)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objids) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PROXY_OBJECT),
            "::",
            stringify!(objids)
        )
    );
}
#[doc = "(ACAD_)PROXY OBJECT (499, 0x1f3) object"]
pub type Dwg_Object_PROXY_OBJECT = _dwg_object_PROXY_OBJECT;
#[doc = "Structs for HATCH (78 + varies)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_HATCH_Color {
    pub parent: *mut _dwg_entity_HATCH,
    pub shift_value: BITCODE_BD,
    pub color: BITCODE_CMC,
}
#[test]
fn bindgen_test_layout__dwg_HATCH_Color() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_HATCH_Color> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_HATCH_Color>(),
        64usize,
        concat!("Size of: ", stringify!(_dwg_HATCH_Color))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_HATCH_Color>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_HATCH_Color))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_HATCH_Color),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shift_value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_HATCH_Color),
            "::",
            stringify!(shift_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_HATCH_Color),
            "::",
            stringify!(color)
        )
    );
}
#[doc = "Structs for HATCH (78 + varies)"]
pub type Dwg_HATCH_Color = _dwg_HATCH_Color;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_HATCH_ControlPoint {
    pub parent: *mut _dwg_HATCH_PathSeg,
    pub point: BITCODE_2RD,
    pub weight: BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_HATCH_ControlPoint() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_HATCH_ControlPoint> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_HATCH_ControlPoint>(),
        32usize,
        concat!("Size of: ", stringify!(_dwg_HATCH_ControlPoint))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_HATCH_ControlPoint>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_HATCH_ControlPoint))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_HATCH_ControlPoint),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).point) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_HATCH_ControlPoint),
            "::",
            stringify!(point)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).weight) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_HATCH_ControlPoint),
            "::",
            stringify!(weight)
        )
    );
}
pub type Dwg_HATCH_ControlPoint = _dwg_HATCH_ControlPoint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_HATCH_PathSeg {
    pub parent: *mut _dwg_HATCH_Path,
    pub curve_type: BITCODE_RC,
    pub first_endpoint: BITCODE_2RD,
    pub second_endpoint: BITCODE_2RD,
    pub center: BITCODE_2RD,
    pub radius: BITCODE_BD,
    pub start_angle: BITCODE_BD,
    pub end_angle: BITCODE_BD,
    pub is_ccw: BITCODE_B,
    pub endpoint: BITCODE_2RD,
    pub minor_major_ratio: BITCODE_BD,
    pub degree: BITCODE_BL,
    pub is_rational: BITCODE_B,
    pub is_periodic: BITCODE_B,
    pub num_knots: BITCODE_BL,
    pub num_control_points: BITCODE_BL,
    pub knots: *mut BITCODE_BD,
    pub control_points: *mut Dwg_HATCH_ControlPoint,
    pub num_fitpts: BITCODE_BL,
    pub fitpts: *mut BITCODE_2RD,
    pub start_tangent: BITCODE_2RD,
    pub end_tangent: BITCODE_2RD,
}
#[test]
fn bindgen_test_layout__dwg_HATCH_PathSeg() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_HATCH_PathSeg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_HATCH_PathSeg>(),
        200usize,
        concat!("Size of: ", stringify!(_dwg_HATCH_PathSeg))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_HATCH_PathSeg>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_HATCH_PathSeg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_HATCH_PathSeg),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).curve_type) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_HATCH_PathSeg),
            "::",
            stringify!(curve_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).first_endpoint) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_HATCH_PathSeg),
            "::",
            stringify!(first_endpoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).second_endpoint) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_HATCH_PathSeg),
            "::",
            stringify!(second_endpoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).center) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_HATCH_PathSeg),
            "::",
            stringify!(center)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).radius) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_HATCH_PathSeg),
            "::",
            stringify!(radius)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_angle) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_HATCH_PathSeg),
            "::",
            stringify!(start_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_angle) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_HATCH_PathSeg),
            "::",
            stringify!(end_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_ccw) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_HATCH_PathSeg),
            "::",
            stringify!(is_ccw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endpoint) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_HATCH_PathSeg),
            "::",
            stringify!(endpoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor_major_ratio) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_HATCH_PathSeg),
            "::",
            stringify!(minor_major_ratio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).degree) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_HATCH_PathSeg),
            "::",
            stringify!(degree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_rational) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_HATCH_PathSeg),
            "::",
            stringify!(is_rational)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_periodic) as usize - ptr as usize },
        125usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_HATCH_PathSeg),
            "::",
            stringify!(is_periodic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_knots) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_HATCH_PathSeg),
            "::",
            stringify!(num_knots)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_control_points) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_HATCH_PathSeg),
            "::",
            stringify!(num_control_points)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).knots) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_HATCH_PathSeg),
            "::",
            stringify!(knots)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).control_points) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_HATCH_PathSeg),
            "::",
            stringify!(control_points)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_fitpts) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_HATCH_PathSeg),
            "::",
            stringify!(num_fitpts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fitpts) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_HATCH_PathSeg),
            "::",
            stringify!(fitpts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_tangent) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_HATCH_PathSeg),
            "::",
            stringify!(start_tangent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_tangent) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_HATCH_PathSeg),
            "::",
            stringify!(end_tangent)
        )
    );
}
pub type Dwg_HATCH_PathSeg = _dwg_HATCH_PathSeg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_HATCH_PolylinePath {
    pub parent: *mut _dwg_HATCH_Path,
    pub point: BITCODE_2RD,
    pub bulge: BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_HATCH_PolylinePath() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_HATCH_PolylinePath> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_HATCH_PolylinePath>(),
        32usize,
        concat!("Size of: ", stringify!(_dwg_HATCH_PolylinePath))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_HATCH_PolylinePath>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_HATCH_PolylinePath))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_HATCH_PolylinePath),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).point) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_HATCH_PolylinePath),
            "::",
            stringify!(point)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bulge) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_HATCH_PolylinePath),
            "::",
            stringify!(bulge)
        )
    );
}
pub type Dwg_HATCH_PolylinePath = _dwg_HATCH_PolylinePath;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_HATCH_Path {
    pub parent: *mut _dwg_entity_HATCH,
    pub flag: BITCODE_BL,
    pub num_segs_or_paths: BITCODE_BL,
    pub segs: *mut Dwg_HATCH_PathSeg,
    pub bulges_present: BITCODE_B,
    pub closed: BITCODE_B,
    pub polyline_paths: *mut Dwg_HATCH_PolylinePath,
    pub num_boundary_handles: BITCODE_BL,
    pub boundary_handles: *mut BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_HATCH_Path() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_HATCH_Path> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_HATCH_Path>(),
        56usize,
        concat!("Size of: ", stringify!(_dwg_HATCH_Path))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_HATCH_Path>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_HATCH_Path))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_HATCH_Path),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_HATCH_Path),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_segs_or_paths) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_HATCH_Path),
            "::",
            stringify!(num_segs_or_paths)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).segs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_HATCH_Path),
            "::",
            stringify!(segs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bulges_present) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_HATCH_Path),
            "::",
            stringify!(bulges_present)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).closed) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_HATCH_Path),
            "::",
            stringify!(closed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).polyline_paths) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_HATCH_Path),
            "::",
            stringify!(polyline_paths)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_boundary_handles) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_HATCH_Path),
            "::",
            stringify!(num_boundary_handles)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).boundary_handles) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_HATCH_Path),
            "::",
            stringify!(boundary_handles)
        )
    );
}
pub type Dwg_HATCH_Path = _dwg_HATCH_Path;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_HATCH_DefLine {
    pub parent: *mut _dwg_entity_HATCH,
    pub angle: BITCODE_BD,
    pub pt0: BITCODE_2BD,
    pub offset: BITCODE_2BD,
    pub num_dashes: BITCODE_BS,
    pub dashes: *mut BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_HATCH_DefLine() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_HATCH_DefLine> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_HATCH_DefLine>(),
        64usize,
        concat!("Size of: ", stringify!(_dwg_HATCH_DefLine))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_HATCH_DefLine>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_HATCH_DefLine))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_HATCH_DefLine),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).angle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_HATCH_DefLine),
            "::",
            stringify!(angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt0) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_HATCH_DefLine),
            "::",
            stringify!(pt0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_HATCH_DefLine),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_dashes) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_HATCH_DefLine),
            "::",
            stringify!(num_dashes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dashes) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_HATCH_DefLine),
            "::",
            stringify!(dashes)
        )
    );
}
pub type Dwg_HATCH_DefLine = _dwg_HATCH_DefLine;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_HATCH {
    pub parent: *mut _dwg_object_entity,
    pub is_gradient_fill: BITCODE_BL,
    pub reserved: BITCODE_BL,
    pub gradient_angle: BITCODE_BD,
    pub gradient_shift: BITCODE_BD,
    pub single_color_gradient: BITCODE_BL,
    pub gradient_tint: BITCODE_BD,
    pub num_colors: BITCODE_BL,
    pub colors: *mut Dwg_HATCH_Color,
    pub gradient_name: BITCODE_TV,
    pub elevation: BITCODE_BD,
    pub extrusion: BITCODE_BE,
    pub name: BITCODE_TV,
    pub is_solid_fill: BITCODE_B,
    pub is_associative: BITCODE_B,
    pub num_paths: BITCODE_BL,
    pub paths: *mut Dwg_HATCH_Path,
    pub style: BITCODE_BS,
    pub pattern_type: BITCODE_BS,
    pub angle: BITCODE_BD,
    pub scale_spacing: BITCODE_BD,
    pub double_flag: BITCODE_B,
    pub num_deflines: BITCODE_BS,
    pub deflines: *mut Dwg_HATCH_DefLine,
    pub has_derived: BITCODE_B,
    pub pixel_size: BITCODE_BD,
    pub num_seeds: BITCODE_BL,
    pub seeds: *mut BITCODE_2RD,
}
#[test]
fn bindgen_test_layout__dwg_entity_HATCH() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_HATCH> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_HATCH>(),
        200usize,
        concat!("Size of: ", stringify!(_dwg_entity_HATCH))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_HATCH>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_HATCH))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HATCH),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_gradient_fill) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HATCH),
            "::",
            stringify!(is_gradient_fill)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HATCH),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gradient_angle) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HATCH),
            "::",
            stringify!(gradient_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gradient_shift) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HATCH),
            "::",
            stringify!(gradient_shift)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).single_color_gradient) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HATCH),
            "::",
            stringify!(single_color_gradient)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gradient_tint) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HATCH),
            "::",
            stringify!(gradient_tint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_colors) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HATCH),
            "::",
            stringify!(num_colors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colors) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HATCH),
            "::",
            stringify!(colors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gradient_name) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HATCH),
            "::",
            stringify!(gradient_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elevation) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HATCH),
            "::",
            stringify!(elevation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extrusion) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HATCH),
            "::",
            stringify!(extrusion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HATCH),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_solid_fill) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HATCH),
            "::",
            stringify!(is_solid_fill)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_associative) as usize - ptr as usize },
        113usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HATCH),
            "::",
            stringify!(is_associative)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_paths) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HATCH),
            "::",
            stringify!(num_paths)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paths) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HATCH),
            "::",
            stringify!(paths)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).style) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HATCH),
            "::",
            stringify!(style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pattern_type) as usize - ptr as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HATCH),
            "::",
            stringify!(pattern_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).angle) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HATCH),
            "::",
            stringify!(angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale_spacing) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HATCH),
            "::",
            stringify!(scale_spacing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).double_flag) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HATCH),
            "::",
            stringify!(double_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_deflines) as usize - ptr as usize },
        154usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HATCH),
            "::",
            stringify!(num_deflines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deflines) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HATCH),
            "::",
            stringify!(deflines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_derived) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HATCH),
            "::",
            stringify!(has_derived)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pixel_size) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HATCH),
            "::",
            stringify!(pixel_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_seeds) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HATCH),
            "::",
            stringify!(num_seeds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seeds) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HATCH),
            "::",
            stringify!(seeds)
        )
    );
}
pub type Dwg_Entity_HATCH = _dwg_entity_HATCH;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_MPOLYGON {
    pub parent: *mut _dwg_object_entity,
    pub is_gradient_fill: BITCODE_BL,
    pub reserved: BITCODE_BL,
    pub gradient_angle: BITCODE_BD,
    pub gradient_shift: BITCODE_BD,
    pub single_color_gradient: BITCODE_BL,
    pub gradient_tint: BITCODE_BD,
    pub num_colors: BITCODE_BL,
    pub colors: *mut Dwg_HATCH_Color,
    pub gradient_name: BITCODE_TV,
    pub elevation: BITCODE_BD,
    pub extrusion: BITCODE_BE,
    pub name: BITCODE_TV,
    pub is_solid_fill: BITCODE_B,
    pub is_associative: BITCODE_B,
    pub num_paths: BITCODE_BL,
    pub paths: *mut Dwg_HATCH_Path,
    pub style: BITCODE_BS,
    pub pattern_type: BITCODE_BS,
    pub angle: BITCODE_BD,
    pub scale_spacing: BITCODE_BD,
    pub double_flag: BITCODE_B,
    pub num_deflines: BITCODE_BS,
    pub deflines: *mut Dwg_HATCH_DefLine,
    pub hatch_color: BITCODE_CMC,
    pub x_dir: BITCODE_2RD,
    pub num_boundary_handles: BITCODE_BL,
}
#[test]
fn bindgen_test_layout__dwg_entity_MPOLYGON() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_MPOLYGON> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_MPOLYGON>(),
        240usize,
        concat!("Size of: ", stringify!(_dwg_entity_MPOLYGON))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_MPOLYGON>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_MPOLYGON))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MPOLYGON),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_gradient_fill) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MPOLYGON),
            "::",
            stringify!(is_gradient_fill)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MPOLYGON),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gradient_angle) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MPOLYGON),
            "::",
            stringify!(gradient_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gradient_shift) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MPOLYGON),
            "::",
            stringify!(gradient_shift)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).single_color_gradient) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MPOLYGON),
            "::",
            stringify!(single_color_gradient)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gradient_tint) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MPOLYGON),
            "::",
            stringify!(gradient_tint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_colors) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MPOLYGON),
            "::",
            stringify!(num_colors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colors) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MPOLYGON),
            "::",
            stringify!(colors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gradient_name) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MPOLYGON),
            "::",
            stringify!(gradient_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elevation) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MPOLYGON),
            "::",
            stringify!(elevation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extrusion) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MPOLYGON),
            "::",
            stringify!(extrusion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MPOLYGON),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_solid_fill) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MPOLYGON),
            "::",
            stringify!(is_solid_fill)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_associative) as usize - ptr as usize },
        113usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MPOLYGON),
            "::",
            stringify!(is_associative)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_paths) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MPOLYGON),
            "::",
            stringify!(num_paths)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paths) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MPOLYGON),
            "::",
            stringify!(paths)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).style) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MPOLYGON),
            "::",
            stringify!(style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pattern_type) as usize - ptr as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MPOLYGON),
            "::",
            stringify!(pattern_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).angle) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MPOLYGON),
            "::",
            stringify!(angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale_spacing) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MPOLYGON),
            "::",
            stringify!(scale_spacing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).double_flag) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MPOLYGON),
            "::",
            stringify!(double_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_deflines) as usize - ptr as usize },
        154usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MPOLYGON),
            "::",
            stringify!(num_deflines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deflines) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MPOLYGON),
            "::",
            stringify!(deflines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hatch_color) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MPOLYGON),
            "::",
            stringify!(hatch_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x_dir) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MPOLYGON),
            "::",
            stringify!(x_dir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_boundary_handles) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MPOLYGON),
            "::",
            stringify!(num_boundary_handles)
        )
    );
}
pub type Dwg_Entity_MPOLYGON = _dwg_entity_MPOLYGON;
#[doc = "XRECORD (79 + varies) object"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_XRECORD {
    pub parent: *mut _dwg_object_object,
    pub cloning: BITCODE_BS,
    pub xdata_size: BITCODE_BL,
    pub num_xdata: BITCODE_BL,
    pub xdata: *mut Dwg_Resbuf,
    pub num_objid_handles: BITCODE_BL,
    pub objid_handles: *mut BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_object_XRECORD() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_XRECORD> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_XRECORD>(),
        48usize,
        concat!("Size of: ", stringify!(_dwg_object_XRECORD))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_XRECORD>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_XRECORD))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_XRECORD),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cloning) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_XRECORD),
            "::",
            stringify!(cloning)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xdata_size) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_XRECORD),
            "::",
            stringify!(xdata_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_xdata) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_XRECORD),
            "::",
            stringify!(num_xdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xdata) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_XRECORD),
            "::",
            stringify!(xdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_objid_handles) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_XRECORD),
            "::",
            stringify!(num_objid_handles)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objid_handles) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_XRECORD),
            "::",
            stringify!(objid_handles)
        )
    );
}
#[doc = "XRECORD (79 + varies) object"]
pub type Dwg_Object_XRECORD = _dwg_object_XRECORD;
#[doc = "PLACEHOLDER (80 + varies) object\nACDBPLACEHOLDER"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_PLACEHOLDER {
    pub parent: *mut _dwg_object_object,
}
#[test]
fn bindgen_test_layout__dwg_object_PLACEHOLDER() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_PLACEHOLDER> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_PLACEHOLDER>(),
        8usize,
        concat!("Size of: ", stringify!(_dwg_object_PLACEHOLDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_PLACEHOLDER>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_PLACEHOLDER))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PLACEHOLDER),
            "::",
            stringify!(parent)
        )
    );
}
#[doc = "PLACEHOLDER (80 + varies) object\nACDBPLACEHOLDER"]
pub type Dwg_Object_PLACEHOLDER = _dwg_object_PLACEHOLDER;
#[doc = " Entity MULTILEADER (varies)\n R2000+ in work"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_LEADER_Break {
    pub parent: *mut _dwg_LEADER_Line,
    #[doc = "< DXF 12"]
    pub start: BITCODE_3BD,
    #[doc = "< DXF 13"]
    pub end: BITCODE_3BD,
}
#[test]
fn bindgen_test_layout__dwg_LEADER_Break() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_LEADER_Break> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_LEADER_Break>(),
        56usize,
        concat!("Size of: ", stringify!(_dwg_LEADER_Break))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_LEADER_Break>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_LEADER_Break))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LEADER_Break),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LEADER_Break),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LEADER_Break),
            "::",
            stringify!(end)
        )
    );
}
#[doc = " Entity MULTILEADER (varies)\n R2000+ in work"]
pub type Dwg_LEADER_Break = _dwg_LEADER_Break;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_LEADER_Line {
    pub parent: *mut _dwg_LEADER_Node,
    pub num_points: BITCODE_BL,
    #[doc = "< DXF 10"]
    pub points: *mut BITCODE_3DPOINT,
    pub num_breaks: BITCODE_BL,
    #[doc = "< DXF 12, 13"]
    pub breaks: *mut Dwg_LEADER_Break,
    #[doc = "< DXF 91"]
    pub line_index: BITCODE_BL,
    pub type_: BITCODE_BS,
    pub color: BITCODE_CMC,
    pub ltype: BITCODE_H,
    pub linewt: BITCODE_BLd,
    pub arrow_size: BITCODE_BD,
    pub arrow_handle: BITCODE_H,
    pub flags: BITCODE_BL,
}
#[test]
fn bindgen_test_layout__dwg_LEADER_Line() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_LEADER_Line> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_LEADER_Line>(),
        136usize,
        concat!("Size of: ", stringify!(_dwg_LEADER_Line))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_LEADER_Line>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_LEADER_Line))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LEADER_Line),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_points) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LEADER_Line),
            "::",
            stringify!(num_points)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).points) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LEADER_Line),
            "::",
            stringify!(points)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_breaks) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LEADER_Line),
            "::",
            stringify!(num_breaks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).breaks) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LEADER_Line),
            "::",
            stringify!(breaks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line_index) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LEADER_Line),
            "::",
            stringify!(line_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LEADER_Line),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LEADER_Line),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ltype) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LEADER_Line),
            "::",
            stringify!(ltype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).linewt) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LEADER_Line),
            "::",
            stringify!(linewt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arrow_size) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LEADER_Line),
            "::",
            stringify!(arrow_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arrow_handle) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LEADER_Line),
            "::",
            stringify!(arrow_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LEADER_Line),
            "::",
            stringify!(flags)
        )
    );
}
pub type Dwg_LEADER_Line = _dwg_LEADER_Line;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_LEADER_ArrowHead {
    pub parent: *mut _dwg_entity_MULTILEADER,
    pub is_default: BITCODE_B,
    pub arrowhead: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_LEADER_ArrowHead() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_LEADER_ArrowHead> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_LEADER_ArrowHead>(),
        24usize,
        concat!("Size of: ", stringify!(_dwg_LEADER_ArrowHead))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_LEADER_ArrowHead>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_LEADER_ArrowHead))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LEADER_ArrowHead),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_default) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LEADER_ArrowHead),
            "::",
            stringify!(is_default)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arrowhead) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LEADER_ArrowHead),
            "::",
            stringify!(arrowhead)
        )
    );
}
pub type Dwg_LEADER_ArrowHead = _dwg_LEADER_ArrowHead;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_LEADER_BlockLabel {
    pub parent: *mut _dwg_entity_MULTILEADER,
    pub attdef: BITCODE_H,
    pub label_text: BITCODE_TV,
    pub ui_index: BITCODE_BS,
    pub width: BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_LEADER_BlockLabel() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_LEADER_BlockLabel> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_LEADER_BlockLabel>(),
        40usize,
        concat!("Size of: ", stringify!(_dwg_LEADER_BlockLabel))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_LEADER_BlockLabel>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_LEADER_BlockLabel))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LEADER_BlockLabel),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attdef) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LEADER_BlockLabel),
            "::",
            stringify!(attdef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).label_text) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LEADER_BlockLabel),
            "::",
            stringify!(label_text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ui_index) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LEADER_BlockLabel),
            "::",
            stringify!(ui_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LEADER_BlockLabel),
            "::",
            stringify!(width)
        )
    );
}
pub type Dwg_LEADER_BlockLabel = _dwg_LEADER_BlockLabel;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_LEADER_Node {
    pub parent: *mut _dwg_entity_MULTILEADER,
    #[doc = "< DXF 290"]
    pub has_lastleaderlinepoint: BITCODE_B,
    #[doc = "< DXF 291"]
    pub has_dogleg: BITCODE_B,
    #[doc = "< DXF 10"]
    pub lastleaderlinepoint: BITCODE_3BD,
    #[doc = "< DXF 11"]
    pub dogleg_vector: BITCODE_3BD,
    #[doc = "< DXF 90"]
    pub branch_index: BITCODE_BL,
    #[doc = "< DXF 40"]
    pub dogleg_length: BITCODE_BD,
    pub num_lines: BITCODE_BL,
    #[doc = "< DXF 10"]
    pub lines: *mut Dwg_LEADER_Line,
    pub num_breaks: BITCODE_BL,
    #[doc = "< DXF 12, 13"]
    pub breaks: *mut Dwg_LEADER_Break,
    pub attach_dir: BITCODE_BS,
}
#[test]
fn bindgen_test_layout__dwg_LEADER_Node() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_LEADER_Node> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_LEADER_Node>(),
        120usize,
        concat!("Size of: ", stringify!(_dwg_LEADER_Node))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_LEADER_Node>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_LEADER_Node))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LEADER_Node),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_lastleaderlinepoint) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LEADER_Node),
            "::",
            stringify!(has_lastleaderlinepoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_dogleg) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LEADER_Node),
            "::",
            stringify!(has_dogleg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lastleaderlinepoint) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LEADER_Node),
            "::",
            stringify!(lastleaderlinepoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dogleg_vector) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LEADER_Node),
            "::",
            stringify!(dogleg_vector)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).branch_index) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LEADER_Node),
            "::",
            stringify!(branch_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dogleg_length) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LEADER_Node),
            "::",
            stringify!(dogleg_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_lines) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LEADER_Node),
            "::",
            stringify!(num_lines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lines) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LEADER_Node),
            "::",
            stringify!(lines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_breaks) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LEADER_Node),
            "::",
            stringify!(num_breaks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).breaks) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LEADER_Node),
            "::",
            stringify!(breaks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attach_dir) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LEADER_Node),
            "::",
            stringify!(attach_dir)
        )
    );
}
pub type Dwg_LEADER_Node = _dwg_LEADER_Node;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_MLEADER_Content_MText {
    pub type_: BITCODE_RC,
    pub normal: BITCODE_3BD,
    pub location: BITCODE_3BD,
    pub rotation: BITCODE_BD,
    pub style: BITCODE_H,
    pub direction: BITCODE_3BD,
    pub color: BITCODE_CMC,
    pub width: BITCODE_BD,
    pub height: BITCODE_BD,
    pub line_spacing_factor: BITCODE_BD,
    pub default_text: BITCODE_TV,
    pub line_spacing_style: BITCODE_BS,
    pub alignment: BITCODE_BS,
    pub flow: BITCODE_BS,
    pub bg_color: BITCODE_CMC,
    pub bg_scale: BITCODE_BD,
    pub bg_transparency: BITCODE_BL,
    pub is_bg_fill: BITCODE_B,
    pub is_bg_mask_fill: BITCODE_B,
    pub col_type: BITCODE_BS,
    pub is_height_auto: BITCODE_B,
    pub col_width: BITCODE_BD,
    pub col_gutter: BITCODE_BD,
    pub is_col_flow_reversed: BITCODE_B,
    pub num_col_sizes: BITCODE_BL,
    pub col_sizes: *mut BITCODE_BD,
    pub word_break: BITCODE_B,
    pub unknown: BITCODE_B,
}
#[test]
fn bindgen_test_layout__dwg_MLEADER_Content_MText() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_MLEADER_Content_MText> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_MLEADER_Content_MText>(),
        296usize,
        concat!("Size of: ", stringify!(_dwg_MLEADER_Content_MText))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_MLEADER_Content_MText>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_MLEADER_Content_MText))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_Content_MText),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).normal) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_Content_MText),
            "::",
            stringify!(normal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).location) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_Content_MText),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rotation) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_Content_MText),
            "::",
            stringify!(rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).style) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_Content_MText),
            "::",
            stringify!(style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).direction) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_Content_MText),
            "::",
            stringify!(direction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_Content_MText),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_Content_MText),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_Content_MText),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line_spacing_factor) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_Content_MText),
            "::",
            stringify!(line_spacing_factor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).default_text) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_Content_MText),
            "::",
            stringify!(default_text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line_spacing_style) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_Content_MText),
            "::",
            stringify!(line_spacing_style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alignment) as usize - ptr as usize },
        178usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_Content_MText),
            "::",
            stringify!(alignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flow) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_Content_MText),
            "::",
            stringify!(flow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_color) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_Content_MText),
            "::",
            stringify!(bg_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_scale) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_Content_MText),
            "::",
            stringify!(bg_scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_transparency) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_Content_MText),
            "::",
            stringify!(bg_transparency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_bg_fill) as usize - ptr as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_Content_MText),
            "::",
            stringify!(is_bg_fill)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_bg_mask_fill) as usize - ptr as usize },
        245usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_Content_MText),
            "::",
            stringify!(is_bg_mask_fill)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).col_type) as usize - ptr as usize },
        246usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_Content_MText),
            "::",
            stringify!(col_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_height_auto) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_Content_MText),
            "::",
            stringify!(is_height_auto)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).col_width) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_Content_MText),
            "::",
            stringify!(col_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).col_gutter) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_Content_MText),
            "::",
            stringify!(col_gutter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_col_flow_reversed) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_Content_MText),
            "::",
            stringify!(is_col_flow_reversed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_col_sizes) as usize - ptr as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_Content_MText),
            "::",
            stringify!(num_col_sizes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).col_sizes) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_Content_MText),
            "::",
            stringify!(col_sizes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).word_break) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_Content_MText),
            "::",
            stringify!(word_break)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown) as usize - ptr as usize },
        289usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_Content_MText),
            "::",
            stringify!(unknown)
        )
    );
}
pub type Dwg_MLEADER_Content_MText = _dwg_MLEADER_Content_MText;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_MLEADER_Content_Block {
    pub type_: BITCODE_RC,
    pub normal: BITCODE_3BD,
    pub location: BITCODE_3BD,
    pub rotation: BITCODE_BD,
    pub block_table: BITCODE_H,
    pub scale: BITCODE_3BD,
    pub color: BITCODE_CMC,
    pub transform: *mut BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_MLEADER_Content_Block() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_MLEADER_Content_Block> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_MLEADER_Content_Block>(),
        152usize,
        concat!("Size of: ", stringify!(_dwg_MLEADER_Content_Block))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_MLEADER_Content_Block>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_MLEADER_Content_Block))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_Content_Block),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).normal) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_Content_Block),
            "::",
            stringify!(normal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).location) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_Content_Block),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rotation) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_Content_Block),
            "::",
            stringify!(rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block_table) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_Content_Block),
            "::",
            stringify!(block_table)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_Content_Block),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_Content_Block),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transform) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_Content_Block),
            "::",
            stringify!(transform)
        )
    );
}
pub type Dwg_MLEADER_Content_Block = _dwg_MLEADER_Content_Block;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _dwg_MLEADER_Content {
    pub txt: Dwg_MLEADER_Content_MText,
    pub blk: Dwg_MLEADER_Content_Block,
}
#[test]
fn bindgen_test_layout__dwg_MLEADER_Content() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_MLEADER_Content> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_MLEADER_Content>(),
        296usize,
        concat!("Size of: ", stringify!(_dwg_MLEADER_Content))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_MLEADER_Content>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_MLEADER_Content))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).txt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_Content),
            "::",
            stringify!(txt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blk) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_Content),
            "::",
            stringify!(blk)
        )
    );
}
pub type Dwg_MLEADER_Content = _dwg_MLEADER_Content;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_MLEADER_AnnotContext {
    pub num_leaders: BITCODE_BL,
    pub leaders: *mut Dwg_LEADER_Node,
    pub attach_dir: BITCODE_BS,
    pub scale_factor: BITCODE_BD,
    pub content_base: BITCODE_3BD,
    pub text_height: BITCODE_BD,
    pub arrow_size: BITCODE_BD,
    pub landing_gap: BITCODE_BD,
    pub text_left: BITCODE_BS,
    pub text_right: BITCODE_BS,
    pub text_angletype: BITCODE_BS,
    pub text_alignment: BITCODE_BS,
    pub has_content_txt: BITCODE_B,
    pub has_content_blk: BITCODE_B,
    pub content: Dwg_MLEADER_Content,
    pub base: BITCODE_3BD,
    pub base_dir: BITCODE_3BD,
    pub base_vert: BITCODE_3BD,
    pub is_normal_reversed: BITCODE_B,
    pub text_top: BITCODE_BS,
    pub text_bottom: BITCODE_BS,
}
#[test]
fn bindgen_test_layout__dwg_MLEADER_AnnotContext() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_MLEADER_AnnotContext> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_MLEADER_AnnotContext>(),
        472usize,
        concat!("Size of: ", stringify!(_dwg_MLEADER_AnnotContext))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_MLEADER_AnnotContext>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_MLEADER_AnnotContext))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_leaders) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_AnnotContext),
            "::",
            stringify!(num_leaders)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).leaders) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_AnnotContext),
            "::",
            stringify!(leaders)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attach_dir) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_AnnotContext),
            "::",
            stringify!(attach_dir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale_factor) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_AnnotContext),
            "::",
            stringify!(scale_factor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).content_base) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_AnnotContext),
            "::",
            stringify!(content_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_height) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_AnnotContext),
            "::",
            stringify!(text_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arrow_size) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_AnnotContext),
            "::",
            stringify!(arrow_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).landing_gap) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_AnnotContext),
            "::",
            stringify!(landing_gap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_left) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_AnnotContext),
            "::",
            stringify!(text_left)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_right) as usize - ptr as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_AnnotContext),
            "::",
            stringify!(text_right)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_angletype) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_AnnotContext),
            "::",
            stringify!(text_angletype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_alignment) as usize - ptr as usize },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_AnnotContext),
            "::",
            stringify!(text_alignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_content_txt) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_AnnotContext),
            "::",
            stringify!(has_content_txt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_content_blk) as usize - ptr as usize },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_AnnotContext),
            "::",
            stringify!(has_content_blk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).content) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_AnnotContext),
            "::",
            stringify!(content)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_AnnotContext),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_dir) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_AnnotContext),
            "::",
            stringify!(base_dir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_vert) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_AnnotContext),
            "::",
            stringify!(base_vert)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_normal_reversed) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_AnnotContext),
            "::",
            stringify!(is_normal_reversed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_top) as usize - ptr as usize },
        466usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_AnnotContext),
            "::",
            stringify!(text_top)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_bottom) as usize - ptr as usize },
        468usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MLEADER_AnnotContext),
            "::",
            stringify!(text_bottom)
        )
    );
}
pub type Dwg_MLEADER_AnnotContext = _dwg_MLEADER_AnnotContext;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_entity_MULTILEADER {
    pub parent: *mut _dwg_object_entity,
    #[doc = "< r2010+ =2"]
    pub class_version: BITCODE_BS,
    pub ctx: Dwg_MLEADER_AnnotContext,
    pub mleaderstyle: BITCODE_H,
    pub flags: BITCODE_BL,
    pub type_: BITCODE_BS,
    pub line_color: BITCODE_CMC,
    pub line_ltype: BITCODE_H,
    pub line_linewt: BITCODE_BLd,
    pub has_landing: BITCODE_B,
    pub has_dogleg: BITCODE_B,
    pub landing_dist: BITCODE_BD,
    pub arrow_handle: BITCODE_H,
    pub arrow_size: BITCODE_BD,
    pub style_content: BITCODE_BS,
    pub text_style: BITCODE_H,
    pub text_left: BITCODE_BS,
    pub text_right: BITCODE_BS,
    pub text_angletype: BITCODE_BS,
    pub text_alignment: BITCODE_BS,
    pub text_color: BITCODE_CMC,
    pub has_text_frame: BITCODE_B,
    pub block_style: BITCODE_H,
    pub block_color: BITCODE_CMC,
    pub block_scale: BITCODE_3BD,
    pub block_rotation: BITCODE_BD,
    pub style_attachment: BITCODE_BS,
    pub is_annotative: BITCODE_B,
    pub num_arrowheads: BITCODE_BL,
    pub arrowheads: *mut Dwg_LEADER_ArrowHead,
    pub num_blocklabels: BITCODE_BL,
    pub blocklabels: *mut Dwg_LEADER_BlockLabel,
    pub is_neg_textdir: BITCODE_B,
    pub ipe_alignment: BITCODE_BS,
    pub justification: BITCODE_BS,
    pub scale_factor: BITCODE_BD,
    #[doc = "< r2010+ (0 = horizontal, 1 = vertical)"]
    pub attach_dir: BITCODE_BS,
    #[doc = "< r2010+"]
    pub attach_top: BITCODE_BS,
    #[doc = "< r2010+"]
    pub attach_bottom: BITCODE_BS,
    #[doc = "< r2013+"]
    pub is_text_extended: BITCODE_B,
}
#[test]
fn bindgen_test_layout__dwg_entity_MULTILEADER() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_MULTILEADER> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_MULTILEADER>(),
        816usize,
        concat!("Size of: ", stringify!(_dwg_entity_MULTILEADER))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_MULTILEADER>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_MULTILEADER))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MULTILEADER),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MULTILEADER),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MULTILEADER),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mleaderstyle) as usize - ptr as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MULTILEADER),
            "::",
            stringify!(mleaderstyle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MULTILEADER),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        500usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MULTILEADER),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line_color) as usize - ptr as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MULTILEADER),
            "::",
            stringify!(line_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line_ltype) as usize - ptr as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MULTILEADER),
            "::",
            stringify!(line_ltype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line_linewt) as usize - ptr as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MULTILEADER),
            "::",
            stringify!(line_linewt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_landing) as usize - ptr as usize },
        564usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MULTILEADER),
            "::",
            stringify!(has_landing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_dogleg) as usize - ptr as usize },
        565usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MULTILEADER),
            "::",
            stringify!(has_dogleg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).landing_dist) as usize - ptr as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MULTILEADER),
            "::",
            stringify!(landing_dist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arrow_handle) as usize - ptr as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MULTILEADER),
            "::",
            stringify!(arrow_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arrow_size) as usize - ptr as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MULTILEADER),
            "::",
            stringify!(arrow_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).style_content) as usize - ptr as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MULTILEADER),
            "::",
            stringify!(style_content)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_style) as usize - ptr as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MULTILEADER),
            "::",
            stringify!(text_style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_left) as usize - ptr as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MULTILEADER),
            "::",
            stringify!(text_left)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_right) as usize - ptr as usize },
        610usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MULTILEADER),
            "::",
            stringify!(text_right)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_angletype) as usize - ptr as usize },
        612usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MULTILEADER),
            "::",
            stringify!(text_angletype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_alignment) as usize - ptr as usize },
        614usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MULTILEADER),
            "::",
            stringify!(text_alignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_color) as usize - ptr as usize },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MULTILEADER),
            "::",
            stringify!(text_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_text_frame) as usize - ptr as usize },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MULTILEADER),
            "::",
            stringify!(has_text_frame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block_style) as usize - ptr as usize },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MULTILEADER),
            "::",
            stringify!(block_style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block_color) as usize - ptr as usize },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MULTILEADER),
            "::",
            stringify!(block_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block_scale) as usize - ptr as usize },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MULTILEADER),
            "::",
            stringify!(block_scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block_rotation) as usize - ptr as usize },
        752usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MULTILEADER),
            "::",
            stringify!(block_rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).style_attachment) as usize - ptr as usize },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MULTILEADER),
            "::",
            stringify!(style_attachment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_annotative) as usize - ptr as usize },
        762usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MULTILEADER),
            "::",
            stringify!(is_annotative)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_arrowheads) as usize - ptr as usize },
        764usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MULTILEADER),
            "::",
            stringify!(num_arrowheads)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arrowheads) as usize - ptr as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MULTILEADER),
            "::",
            stringify!(arrowheads)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_blocklabels) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MULTILEADER),
            "::",
            stringify!(num_blocklabels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blocklabels) as usize - ptr as usize },
        784usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MULTILEADER),
            "::",
            stringify!(blocklabels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_neg_textdir) as usize - ptr as usize },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MULTILEADER),
            "::",
            stringify!(is_neg_textdir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipe_alignment) as usize - ptr as usize },
        794usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MULTILEADER),
            "::",
            stringify!(ipe_alignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).justification) as usize - ptr as usize },
        796usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MULTILEADER),
            "::",
            stringify!(justification)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale_factor) as usize - ptr as usize },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MULTILEADER),
            "::",
            stringify!(scale_factor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attach_dir) as usize - ptr as usize },
        808usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MULTILEADER),
            "::",
            stringify!(attach_dir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attach_top) as usize - ptr as usize },
        810usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MULTILEADER),
            "::",
            stringify!(attach_top)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attach_bottom) as usize - ptr as usize },
        812usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MULTILEADER),
            "::",
            stringify!(attach_bottom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_text_extended) as usize - ptr as usize },
        814usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MULTILEADER),
            "::",
            stringify!(is_text_extended)
        )
    );
}
pub type Dwg_Entity_MULTILEADER = _dwg_entity_MULTILEADER;
#[doc = " Object MLEADERSTYLE (varies)\n R2000+"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_MLEADERSTYLE {
    pub parent: *mut _dwg_object_object,
    #[doc = "< DXF 179, r2010+ =2"]
    pub class_version: BITCODE_BS,
    pub content_type: BITCODE_BS,
    pub mleader_order: BITCODE_BS,
    pub leader_order: BITCODE_BS,
    pub max_points: BITCODE_BL,
    pub first_seg_angle: BITCODE_BD,
    pub second_seg_angle: BITCODE_BD,
    pub type_: BITCODE_BS,
    pub line_color: BITCODE_CMC,
    pub line_type: BITCODE_H,
    pub linewt: BITCODE_BLd,
    pub has_landing: BITCODE_B,
    pub has_dogleg: BITCODE_B,
    pub landing_gap: BITCODE_BD,
    pub landing_dist: BITCODE_BD,
    pub description: BITCODE_TV,
    pub arrow_head: BITCODE_H,
    pub arrow_head_size: BITCODE_BD,
    pub text_default: BITCODE_TV,
    pub text_style: BITCODE_H,
    pub attach_left: BITCODE_BS,
    pub attach_right: BITCODE_BS,
    pub text_angle_type: BITCODE_BS,
    pub text_align_type: BITCODE_BS,
    pub text_color: BITCODE_CMC,
    pub text_height: BITCODE_BD,
    pub has_text_frame: BITCODE_B,
    pub text_always_left: BITCODE_B,
    pub align_space: BITCODE_BD,
    pub block: BITCODE_H,
    pub block_color: BITCODE_CMC,
    pub block_scale: BITCODE_3BD,
    pub use_block_scale: BITCODE_B,
    pub block_rotation: BITCODE_BD,
    pub use_block_rotation: BITCODE_B,
    pub block_connection: BITCODE_BS,
    pub scale: BITCODE_BD,
    pub is_changed: BITCODE_B,
    pub is_annotative: BITCODE_B,
    pub break_size: BITCODE_BD,
    #[doc = "< r2010+ (0 = horizontal, 1 = vertical)"]
    pub attach_dir: BITCODE_BS,
    #[doc = "< r2010+"]
    pub attach_top: BITCODE_BS,
    #[doc = "< r2010+"]
    pub attach_bottom: BITCODE_BS,
    #[doc = "< r2013+"]
    pub text_extended: BITCODE_B,
}
#[test]
fn bindgen_test_layout__dwg_object_MLEADERSTYLE() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_MLEADERSTYLE> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_MLEADERSTYLE>(),
        384usize,
        concat!("Size of: ", stringify!(_dwg_object_MLEADERSTYLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_MLEADERSTYLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_MLEADERSTYLE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLEADERSTYLE),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLEADERSTYLE),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).content_type) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLEADERSTYLE),
            "::",
            stringify!(content_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mleader_order) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLEADERSTYLE),
            "::",
            stringify!(mleader_order)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).leader_order) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLEADERSTYLE),
            "::",
            stringify!(leader_order)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_points) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLEADERSTYLE),
            "::",
            stringify!(max_points)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).first_seg_angle) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLEADERSTYLE),
            "::",
            stringify!(first_seg_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).second_seg_angle) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLEADERSTYLE),
            "::",
            stringify!(second_seg_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLEADERSTYLE),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line_color) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLEADERSTYLE),
            "::",
            stringify!(line_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line_type) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLEADERSTYLE),
            "::",
            stringify!(line_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).linewt) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLEADERSTYLE),
            "::",
            stringify!(linewt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_landing) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLEADERSTYLE),
            "::",
            stringify!(has_landing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_dogleg) as usize - ptr as usize },
        109usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLEADERSTYLE),
            "::",
            stringify!(has_dogleg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).landing_gap) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLEADERSTYLE),
            "::",
            stringify!(landing_gap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).landing_dist) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLEADERSTYLE),
            "::",
            stringify!(landing_dist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).description) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLEADERSTYLE),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arrow_head) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLEADERSTYLE),
            "::",
            stringify!(arrow_head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arrow_head_size) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLEADERSTYLE),
            "::",
            stringify!(arrow_head_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_default) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLEADERSTYLE),
            "::",
            stringify!(text_default)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_style) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLEADERSTYLE),
            "::",
            stringify!(text_style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attach_left) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLEADERSTYLE),
            "::",
            stringify!(attach_left)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attach_right) as usize - ptr as usize },
        170usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLEADERSTYLE),
            "::",
            stringify!(attach_right)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_angle_type) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLEADERSTYLE),
            "::",
            stringify!(text_angle_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_align_type) as usize - ptr as usize },
        174usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLEADERSTYLE),
            "::",
            stringify!(text_align_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_color) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLEADERSTYLE),
            "::",
            stringify!(text_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_height) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLEADERSTYLE),
            "::",
            stringify!(text_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_text_frame) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLEADERSTYLE),
            "::",
            stringify!(has_text_frame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_always_left) as usize - ptr as usize },
        233usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLEADERSTYLE),
            "::",
            stringify!(text_always_left)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).align_space) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLEADERSTYLE),
            "::",
            stringify!(align_space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLEADERSTYLE),
            "::",
            stringify!(block)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block_color) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLEADERSTYLE),
            "::",
            stringify!(block_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block_scale) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLEADERSTYLE),
            "::",
            stringify!(block_scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_block_scale) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLEADERSTYLE),
            "::",
            stringify!(use_block_scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block_rotation) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLEADERSTYLE),
            "::",
            stringify!(block_rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_block_rotation) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLEADERSTYLE),
            "::",
            stringify!(use_block_rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block_connection) as usize - ptr as usize },
        346usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLEADERSTYLE),
            "::",
            stringify!(block_connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLEADERSTYLE),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_changed) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLEADERSTYLE),
            "::",
            stringify!(is_changed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_annotative) as usize - ptr as usize },
        361usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLEADERSTYLE),
            "::",
            stringify!(is_annotative)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).break_size) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLEADERSTYLE),
            "::",
            stringify!(break_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attach_dir) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLEADERSTYLE),
            "::",
            stringify!(attach_dir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attach_top) as usize - ptr as usize },
        378usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLEADERSTYLE),
            "::",
            stringify!(attach_top)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attach_bottom) as usize - ptr as usize },
        380usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLEADERSTYLE),
            "::",
            stringify!(attach_bottom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_extended) as usize - ptr as usize },
        382usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLEADERSTYLE),
            "::",
            stringify!(text_extended)
        )
    );
}
#[doc = " Object MLEADERSTYLE (varies)\n R2000+"]
pub type Dwg_Object_MLEADERSTYLE = _dwg_object_MLEADERSTYLE;
#[doc = "VBA_PROJECT (81 + varies) object\nHas its own optional section? section[5]?"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_VBA_PROJECT {
    pub parent: *mut _dwg_object_object,
    pub data_size: BITCODE_BL,
    pub data: BITCODE_TF,
}
#[test]
fn bindgen_test_layout__dwg_object_VBA_PROJECT() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_VBA_PROJECT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_VBA_PROJECT>(),
        24usize,
        concat!("Size of: ", stringify!(_dwg_object_VBA_PROJECT))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_VBA_PROJECT>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_VBA_PROJECT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VBA_PROJECT),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VBA_PROJECT),
            "::",
            stringify!(data_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VBA_PROJECT),
            "::",
            stringify!(data)
        )
    );
}
#[doc = "VBA_PROJECT (81 + varies) object\nHas its own optional section? section[5]?"]
pub type Dwg_Object_VBA_PROJECT = _dwg_object_VBA_PROJECT;
#[doc = "Object PLOTSETTINGS (varies)\nSee also LAYOUT."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_PLOTSETTINGS {
    pub parent: *mut _dwg_object_object,
    #[doc = "< DXF 1"]
    pub printer_cfg_file: BITCODE_TV,
    #[doc = "< DXF 2"]
    pub paper_size: BITCODE_TV,
    #[doc = "< DXF 4"]
    pub canonical_media_name: BITCODE_TV,
    #[doc = "< DXF 70\n1 = PlotViewportBorders\n2 = ShowPlotStyles\n4 = PlotCentered\n8 = PlotHidden\n16 = UseStandardScale\n32 = PlotPlotStyles\n64 = ScaleLineweights\n128 = PrintLineweights\n512 = DrawViewportsFirst\n1024 = ModelType\n2048 = UpdatePaper\n4096 = ZoomToPaperOnUpdate\n8192 = Initializing\n16384 = PrevPlotInit"]
    pub plot_flags: BITCODE_BS,
    #[doc = "< DXF 6, r2004+"]
    pub plotview: BITCODE_H,
    #[doc = "< DXF 6, until r2000"]
    pub plotview_name: BITCODE_TV,
    #[doc = "< DXF 40, margins in mm"]
    pub left_margin: BITCODE_BD,
    #[doc = "< DXF 42"]
    pub bottom_margin: BITCODE_BD,
    #[doc = "< DXF 43"]
    pub right_margin: BITCODE_BD,
    #[doc = "< DXF 44"]
    pub top_margin: BITCODE_BD,
    #[doc = "< DXF 44, in mm"]
    pub paper_width: BITCODE_BD,
    #[doc = "< DXF 45, in mm"]
    pub paper_height: BITCODE_BD,
    #[doc = "< DXF 46,47"]
    pub plot_origin: BITCODE_2BD_1,
    #[doc = "< DXF 48,49"]
    pub plot_window_ll: BITCODE_2BD_1,
    #[doc = "< DXF 140,141"]
    pub plot_window_ur: BITCODE_2BD_1,
    #[doc = "< DXF 72,  0 inches, 1 mm, 2 pixel"]
    pub plot_paper_unit: BITCODE_BS,
    #[doc = "< DXF 73,  0 normal, 1 90, 2 180, 3 270 deg"]
    pub plot_rotation_mode: BITCODE_BS,
    #[doc = "< DXF 74,  0 display, 1 extents, 2 limits, 3 view\n(see DXF 6), 4 window (see 48-140), 5 layout"]
    pub plot_type: BITCODE_BS,
    #[doc = "< DXF 142"]
    pub paper_units: BITCODE_BD,
    #[doc = "< DXF 143"]
    pub drawing_units: BITCODE_BD,
    #[doc = "< DXF 7"]
    pub stylesheet: BITCODE_TV,
    #[doc = "< DXF 75, 0 = scaled to fit,\n1 = 1/128\"=1', 2 = 1/64\"=1', 3 = 1/32\"=1'\n4 = 1/16\"=1', 5 = 3/32\"=1', 6 = 1/8\"=1'\n7 = 3/16\"=1', 8 = 1/4\"=1', 9 = 3/8\"=1'\n10 = 1/2\"=1', 11 = 3/4\"=1', 12 = 1\"=1'\n13 = 3\"=1', 14 = 6\"=1', 15 = 1'=1'\n16 = 1:1, 17= 1:2, 18 = 1:4 19 = 1:8, 20 = 1:10, 21=\n1:16               22 = 1:20, 23 = 1:30, 24 = 1:40, 25 = 1:50, 26 =\n1:100               27 = 2:1, 28 = 4:1, 29 = 8:1, 30 = 10:1, 31 =\n100:1, 32 = 1000:1"]
    pub std_scale_type: BITCODE_BS,
    #[doc = "< DXF 147, value of 75"]
    pub std_scale_factor: BITCODE_BD,
    #[doc = "< DXF 148 + 149"]
    pub paper_image_origin: BITCODE_2BD_1,
    #[doc = "< DXF 76, 0 display, 1 wireframe, 2 hidden, 3\nrendered, 4 visualstyle, 5 renderPreset"]
    pub shadeplot_type: BITCODE_BS,
    #[doc = "< DXF 77, 0 draft, 1 preview, 2 nomal,\n3 presentation, 4 maximum, 5 custom"]
    pub shadeplot_reslevel: BITCODE_BS,
    #[doc = "< DXF 78, 100-32767"]
    pub shadeplot_customdpi: BITCODE_BS,
    #[doc = "< DXF 333 optional. As in VIEWPORT"]
    pub shadeplot: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_object_PLOTSETTINGS() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_PLOTSETTINGS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_PLOTSETTINGS>(),
        232usize,
        concat!("Size of: ", stringify!(_dwg_object_PLOTSETTINGS))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_PLOTSETTINGS>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_PLOTSETTINGS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PLOTSETTINGS),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).printer_cfg_file) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PLOTSETTINGS),
            "::",
            stringify!(printer_cfg_file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paper_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PLOTSETTINGS),
            "::",
            stringify!(paper_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).canonical_media_name) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PLOTSETTINGS),
            "::",
            stringify!(canonical_media_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plot_flags) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PLOTSETTINGS),
            "::",
            stringify!(plot_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plotview) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PLOTSETTINGS),
            "::",
            stringify!(plotview)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plotview_name) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PLOTSETTINGS),
            "::",
            stringify!(plotview_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).left_margin) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PLOTSETTINGS),
            "::",
            stringify!(left_margin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bottom_margin) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PLOTSETTINGS),
            "::",
            stringify!(bottom_margin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right_margin) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PLOTSETTINGS),
            "::",
            stringify!(right_margin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).top_margin) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PLOTSETTINGS),
            "::",
            stringify!(top_margin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paper_width) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PLOTSETTINGS),
            "::",
            stringify!(paper_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paper_height) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PLOTSETTINGS),
            "::",
            stringify!(paper_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plot_origin) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PLOTSETTINGS),
            "::",
            stringify!(plot_origin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plot_window_ll) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PLOTSETTINGS),
            "::",
            stringify!(plot_window_ll)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plot_window_ur) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PLOTSETTINGS),
            "::",
            stringify!(plot_window_ur)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plot_paper_unit) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PLOTSETTINGS),
            "::",
            stringify!(plot_paper_unit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plot_rotation_mode) as usize - ptr as usize },
        154usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PLOTSETTINGS),
            "::",
            stringify!(plot_rotation_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plot_type) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PLOTSETTINGS),
            "::",
            stringify!(plot_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paper_units) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PLOTSETTINGS),
            "::",
            stringify!(paper_units)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drawing_units) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PLOTSETTINGS),
            "::",
            stringify!(drawing_units)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stylesheet) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PLOTSETTINGS),
            "::",
            stringify!(stylesheet)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).std_scale_type) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PLOTSETTINGS),
            "::",
            stringify!(std_scale_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).std_scale_factor) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PLOTSETTINGS),
            "::",
            stringify!(std_scale_factor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paper_image_origin) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PLOTSETTINGS),
            "::",
            stringify!(paper_image_origin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shadeplot_type) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PLOTSETTINGS),
            "::",
            stringify!(shadeplot_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shadeplot_reslevel) as usize - ptr as usize },
        218usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PLOTSETTINGS),
            "::",
            stringify!(shadeplot_reslevel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shadeplot_customdpi) as usize - ptr as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PLOTSETTINGS),
            "::",
            stringify!(shadeplot_customdpi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shadeplot) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PLOTSETTINGS),
            "::",
            stringify!(shadeplot)
        )
    );
}
#[doc = "Object PLOTSETTINGS (varies)\nSee also LAYOUT."]
pub type Dwg_Object_PLOTSETTINGS = _dwg_object_PLOTSETTINGS;
#[doc = "LAYOUT (82 + varies) object"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_LAYOUT {
    pub parent: *mut _dwg_object_object,
    pub plotsettings: Dwg_Object_PLOTSETTINGS,
    pub layout_name: BITCODE_TV,
    pub tab_order: BITCODE_BS,
    pub layout_flags: BITCODE_BS,
    pub INSBASE: BITCODE_3DPOINT,
    pub LIMMIN: BITCODE_2DPOINT,
    pub LIMMAX: BITCODE_2DPOINT,
    pub UCSORG: BITCODE_3DPOINT,
    pub UCSXDIR: BITCODE_3DPOINT,
    pub UCSYDIR: BITCODE_3DPOINT,
    pub ucs_elevation: BITCODE_BD,
    pub UCSORTHOVIEW: BITCODE_BS,
    pub EXTMIN: BITCODE_3DPOINT,
    pub EXTMAX: BITCODE_3DPOINT,
    pub block_header: BITCODE_H,
    pub active_viewport: BITCODE_H,
    pub base_ucs: BITCODE_H,
    pub named_ucs: BITCODE_H,
    pub num_viewports: BITCODE_BL,
    pub viewports: *mut BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_object_LAYOUT() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_LAYOUT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_LAYOUT>(),
        496usize,
        concat!("Size of: ", stringify!(_dwg_object_LAYOUT))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_LAYOUT>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_LAYOUT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYOUT),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plotsettings) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYOUT),
            "::",
            stringify!(plotsettings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layout_name) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYOUT),
            "::",
            stringify!(layout_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tab_order) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYOUT),
            "::",
            stringify!(tab_order)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layout_flags) as usize - ptr as usize },
        250usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYOUT),
            "::",
            stringify!(layout_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).INSBASE) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYOUT),
            "::",
            stringify!(INSBASE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LIMMIN) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYOUT),
            "::",
            stringify!(LIMMIN)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LIMMAX) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYOUT),
            "::",
            stringify!(LIMMAX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UCSORG) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYOUT),
            "::",
            stringify!(UCSORG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UCSXDIR) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYOUT),
            "::",
            stringify!(UCSXDIR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UCSYDIR) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYOUT),
            "::",
            stringify!(UCSYDIR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ucs_elevation) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYOUT),
            "::",
            stringify!(ucs_elevation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UCSORTHOVIEW) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYOUT),
            "::",
            stringify!(UCSORTHOVIEW)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EXTMIN) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYOUT),
            "::",
            stringify!(EXTMIN)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EXTMAX) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYOUT),
            "::",
            stringify!(EXTMAX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block_header) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYOUT),
            "::",
            stringify!(block_header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).active_viewport) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYOUT),
            "::",
            stringify!(active_viewport)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_ucs) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYOUT),
            "::",
            stringify!(base_ucs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).named_ucs) as usize - ptr as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYOUT),
            "::",
            stringify!(named_ucs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_viewports) as usize - ptr as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYOUT),
            "::",
            stringify!(num_viewports)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewports) as usize - ptr as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYOUT),
            "::",
            stringify!(viewports)
        )
    );
}
#[doc = "LAYOUT (82 + varies) object"]
pub type Dwg_Object_LAYOUT = _dwg_object_LAYOUT;
#[doc = "Class DICTIONARYVAR (varies)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_DICTIONARYVAR {
    pub parent: *mut _dwg_object_object,
    pub schema: BITCODE_RC,
    pub strvalue: BITCODE_TV,
}
#[test]
fn bindgen_test_layout__dwg_object_DICTIONARYVAR() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_DICTIONARYVAR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_DICTIONARYVAR>(),
        24usize,
        concat!("Size of: ", stringify!(_dwg_object_DICTIONARYVAR))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_DICTIONARYVAR>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_DICTIONARYVAR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DICTIONARYVAR),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).schema) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DICTIONARYVAR),
            "::",
            stringify!(schema)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).strvalue) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DICTIONARYVAR),
            "::",
            stringify!(strvalue)
        )
    );
}
#[doc = "Class DICTIONARYVAR (varies)"]
pub type Dwg_Object_DICTIONARYVAR = _dwg_object_DICTIONARYVAR;
#[doc = "Class TABLE (varies)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_TABLE_value {
    pub flags: BITCODE_BL,
    pub format_flags: BITCODE_BL,
    pub data_type: BITCODE_BL,
    pub data_size: BITCODE_BL,
    pub data_long: BITCODE_BL,
    pub data_double: BITCODE_BD,
    pub data_string: BITCODE_TV,
    pub data_date: BITCODE_TF,
    pub data_point: BITCODE_2RD,
    pub data_3dpoint: BITCODE_3RD,
    pub data_handle: BITCODE_H,
    pub unit_type: BITCODE_BL,
    pub format_string: BITCODE_TV,
    pub value_string: BITCODE_TV,
}
#[test]
fn bindgen_test_layout__dwg_TABLE_value() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_TABLE_value> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_TABLE_value>(),
        120usize,
        concat!("Size of: ", stringify!(_dwg_TABLE_value))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_TABLE_value>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_TABLE_value))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_value),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format_flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_value),
            "::",
            stringify!(format_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_type) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_value),
            "::",
            stringify!(data_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_size) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_value),
            "::",
            stringify!(data_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_long) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_value),
            "::",
            stringify!(data_long)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_double) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_value),
            "::",
            stringify!(data_double)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_string) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_value),
            "::",
            stringify!(data_string)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_date) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_value),
            "::",
            stringify!(data_date)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_point) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_value),
            "::",
            stringify!(data_point)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_3dpoint) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_value),
            "::",
            stringify!(data_3dpoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_handle) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_value),
            "::",
            stringify!(data_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unit_type) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_value),
            "::",
            stringify!(unit_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format_string) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_value),
            "::",
            stringify!(format_string)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value_string) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_value),
            "::",
            stringify!(value_string)
        )
    );
}
#[doc = "Class TABLE (varies)"]
pub type Dwg_TABLE_value = _dwg_TABLE_value;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_TABLE_CustomDataItem {
    pub name: BITCODE_TV,
    pub value: Dwg_TABLE_value,
    pub cell_parent: *mut _dwg_TableCell,
    pub row_parent: *mut _dwg_TableRow,
}
#[test]
fn bindgen_test_layout__dwg_TABLE_CustomDataItem() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_TABLE_CustomDataItem> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_TABLE_CustomDataItem>(),
        144usize,
        concat!("Size of: ", stringify!(_dwg_TABLE_CustomDataItem))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_TABLE_CustomDataItem>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_TABLE_CustomDataItem))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_CustomDataItem),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_CustomDataItem),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cell_parent) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_CustomDataItem),
            "::",
            stringify!(cell_parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).row_parent) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_CustomDataItem),
            "::",
            stringify!(row_parent)
        )
    );
}
pub type Dwg_TABLE_CustomDataItem = _dwg_TABLE_CustomDataItem;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_TABLE_AttrDef {
    pub parent: *mut _dwg_TABLE_Cell,
    pub attdef: BITCODE_H,
    pub index: BITCODE_BS,
    pub text: BITCODE_TV,
}
#[test]
fn bindgen_test_layout__dwg_TABLE_AttrDef() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_TABLE_AttrDef> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_TABLE_AttrDef>(),
        32usize,
        concat!("Size of: ", stringify!(_dwg_TABLE_AttrDef))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_TABLE_AttrDef>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_TABLE_AttrDef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_AttrDef),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attdef) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_AttrDef),
            "::",
            stringify!(attdef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_AttrDef),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_AttrDef),
            "::",
            stringify!(text)
        )
    );
}
pub type Dwg_TABLE_AttrDef = _dwg_TABLE_AttrDef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_TABLE_Cell {
    pub parent: *mut _dwg_entity_TABLE,
    pub type_: BITCODE_BS,
    pub flags: BITCODE_RC,
    pub is_merged_value: BITCODE_B,
    pub is_autofit_flag: BITCODE_B,
    pub merged_width_flag: BITCODE_BL,
    pub merged_height_flag: BITCODE_BL,
    pub rotation: BITCODE_BD,
    pub text_value: BITCODE_TV,
    pub text_style: BITCODE_H,
    pub block_handle: BITCODE_H,
    pub block_scale: BITCODE_BD,
    pub additional_data_flag: BITCODE_B,
    pub cell_flag_override: BITCODE_BL,
    pub virtual_edge_flag: BITCODE_RC,
    pub cell_alignment: BITCODE_RS,
    pub bg_fill_none: BITCODE_B,
    pub bg_color: BITCODE_CMC,
    pub content_color: BITCODE_CMC,
    pub text_height: BITCODE_BD,
    pub top_grid_color: BITCODE_CMC,
    pub top_grid_linewt: BITCODE_BS,
    pub top_visibility: BITCODE_BS,
    pub right_grid_color: BITCODE_CMC,
    pub right_grid_linewt: BITCODE_BS,
    pub right_visibility: BITCODE_BS,
    pub bottom_grid_color: BITCODE_CMC,
    pub bottom_grid_linewt: BITCODE_BS,
    pub bottom_visibility: BITCODE_BS,
    pub left_grid_color: BITCODE_CMC,
    pub left_grid_linewt: BITCODE_BS,
    pub left_visibility: BITCODE_BS,
    pub unknown: BITCODE_BL,
    pub value: Dwg_TABLE_value,
    pub num_attr_defs: BITCODE_BL,
    pub attr_defs: *mut Dwg_TABLE_AttrDef,
}
#[test]
fn bindgen_test_layout__dwg_TABLE_Cell() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_TABLE_Cell> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_TABLE_Cell>(),
        544usize,
        concat!("Size of: ", stringify!(_dwg_TABLE_Cell))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_TABLE_Cell>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_TABLE_Cell))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_Cell),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_Cell),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_Cell),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_merged_value) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_Cell),
            "::",
            stringify!(is_merged_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_autofit_flag) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_Cell),
            "::",
            stringify!(is_autofit_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).merged_width_flag) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_Cell),
            "::",
            stringify!(merged_width_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).merged_height_flag) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_Cell),
            "::",
            stringify!(merged_height_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rotation) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_Cell),
            "::",
            stringify!(rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_value) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_Cell),
            "::",
            stringify!(text_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_style) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_Cell),
            "::",
            stringify!(text_style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block_handle) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_Cell),
            "::",
            stringify!(block_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block_scale) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_Cell),
            "::",
            stringify!(block_scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).additional_data_flag) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_Cell),
            "::",
            stringify!(additional_data_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cell_flag_override) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_Cell),
            "::",
            stringify!(cell_flag_override)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).virtual_edge_flag) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_Cell),
            "::",
            stringify!(virtual_edge_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cell_alignment) as usize - ptr as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_Cell),
            "::",
            stringify!(cell_alignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_fill_none) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_Cell),
            "::",
            stringify!(bg_fill_none)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_color) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_Cell),
            "::",
            stringify!(bg_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).content_color) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_Cell),
            "::",
            stringify!(content_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_height) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_Cell),
            "::",
            stringify!(text_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).top_grid_color) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_Cell),
            "::",
            stringify!(top_grid_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).top_grid_linewt) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_Cell),
            "::",
            stringify!(top_grid_linewt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).top_visibility) as usize - ptr as usize },
        234usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_Cell),
            "::",
            stringify!(top_visibility)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right_grid_color) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_Cell),
            "::",
            stringify!(right_grid_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right_grid_linewt) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_Cell),
            "::",
            stringify!(right_grid_linewt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right_visibility) as usize - ptr as usize },
        290usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_Cell),
            "::",
            stringify!(right_visibility)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bottom_grid_color) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_Cell),
            "::",
            stringify!(bottom_grid_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bottom_grid_linewt) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_Cell),
            "::",
            stringify!(bottom_grid_linewt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bottom_visibility) as usize - ptr as usize },
        346usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_Cell),
            "::",
            stringify!(bottom_visibility)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).left_grid_color) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_Cell),
            "::",
            stringify!(left_grid_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).left_grid_linewt) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_Cell),
            "::",
            stringify!(left_grid_linewt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).left_visibility) as usize - ptr as usize },
        402usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_Cell),
            "::",
            stringify!(left_visibility)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown) as usize - ptr as usize },
        404usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_Cell),
            "::",
            stringify!(unknown)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_Cell),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_attr_defs) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_Cell),
            "::",
            stringify!(num_attr_defs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr_defs) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_Cell),
            "::",
            stringify!(attr_defs)
        )
    );
}
pub type Dwg_TABLE_Cell = _dwg_TABLE_Cell;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_TABLE_BreakHeight {
    pub parent: *mut _dwg_entity_TABLE,
    pub position: BITCODE_3BD,
    pub height: BITCODE_BD,
    pub flag: BITCODE_BL,
}
#[test]
fn bindgen_test_layout__dwg_TABLE_BreakHeight() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_TABLE_BreakHeight> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_TABLE_BreakHeight>(),
        48usize,
        concat!("Size of: ", stringify!(_dwg_TABLE_BreakHeight))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_TABLE_BreakHeight>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_TABLE_BreakHeight))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_BreakHeight),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).position) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_BreakHeight),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_BreakHeight),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_BreakHeight),
            "::",
            stringify!(flag)
        )
    );
}
pub type Dwg_TABLE_BreakHeight = _dwg_TABLE_BreakHeight;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_TABLE_BreakRow {
    pub parent: *mut _dwg_entity_TABLE,
    pub position: BITCODE_3BD,
    pub start: BITCODE_BL,
    pub end: BITCODE_BL,
}
#[test]
fn bindgen_test_layout__dwg_TABLE_BreakRow() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_TABLE_BreakRow> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_TABLE_BreakRow>(),
        40usize,
        concat!("Size of: ", stringify!(_dwg_TABLE_BreakRow))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_TABLE_BreakRow>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_TABLE_BreakRow))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_BreakRow),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).position) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_BreakRow),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_BreakRow),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLE_BreakRow),
            "::",
            stringify!(end)
        )
    );
}
pub type Dwg_TABLE_BreakRow = _dwg_TABLE_BreakRow;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_LinkedData {
    pub name: BITCODE_TV,
    pub description: BITCODE_TV,
}
#[test]
fn bindgen_test_layout__dwg_LinkedData() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_LinkedData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_LinkedData>(),
        16usize,
        concat!("Size of: ", stringify!(_dwg_LinkedData))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_LinkedData>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_LinkedData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LinkedData),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).description) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LinkedData),
            "::",
            stringify!(description)
        )
    );
}
pub type Dwg_LinkedData = _dwg_LinkedData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_TableCellContent_Attr {
    pub parent: *mut _dwg_TableCellContent,
    pub attdef: BITCODE_H,
    pub value: BITCODE_TV,
    pub index: BITCODE_BL,
}
#[test]
fn bindgen_test_layout__dwg_TableCellContent_Attr() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_TableCellContent_Attr> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_TableCellContent_Attr>(),
        32usize,
        concat!("Size of: ", stringify!(_dwg_TableCellContent_Attr))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_TableCellContent_Attr>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_TableCellContent_Attr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TableCellContent_Attr),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attdef) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TableCellContent_Attr),
            "::",
            stringify!(attdef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TableCellContent_Attr),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TableCellContent_Attr),
            "::",
            stringify!(index)
        )
    );
}
pub type Dwg_TableCellContent_Attr = _dwg_TableCellContent_Attr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_ContentFormat {
    pub property_override_flags: BITCODE_BL,
    pub property_flags: BITCODE_BL,
    pub value_data_type: BITCODE_BL,
    pub value_unit_type: BITCODE_BL,
    pub value_format_string: BITCODE_TV,
    pub rotation: BITCODE_BD,
    pub block_scale: BITCODE_BD,
    pub cell_alignment: BITCODE_BL,
    pub content_color: BITCODE_CMC,
    pub text_style: BITCODE_H,
    pub text_height: BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_ContentFormat() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_ContentFormat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_ContentFormat>(),
        112usize,
        concat!("Size of: ", stringify!(_dwg_ContentFormat))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_ContentFormat>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_ContentFormat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).property_override_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ContentFormat),
            "::",
            stringify!(property_override_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).property_flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ContentFormat),
            "::",
            stringify!(property_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value_data_type) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ContentFormat),
            "::",
            stringify!(value_data_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value_unit_type) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ContentFormat),
            "::",
            stringify!(value_unit_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value_format_string) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ContentFormat),
            "::",
            stringify!(value_format_string)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rotation) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ContentFormat),
            "::",
            stringify!(rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block_scale) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ContentFormat),
            "::",
            stringify!(block_scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cell_alignment) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ContentFormat),
            "::",
            stringify!(cell_alignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).content_color) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ContentFormat),
            "::",
            stringify!(content_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_style) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ContentFormat),
            "::",
            stringify!(text_style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_height) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ContentFormat),
            "::",
            stringify!(text_height)
        )
    );
}
pub type Dwg_ContentFormat = _dwg_ContentFormat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_TableCellContent {
    pub parent: *mut _dwg_TableCell,
    pub type_: BITCODE_BL,
    pub value: Dwg_TABLE_value,
    pub handle: BITCODE_H,
    pub num_attrs: BITCODE_BL,
    pub attrs: *mut Dwg_TableCellContent_Attr,
    pub has_content_format_overrides: BITCODE_BS,
    pub content_format: Dwg_ContentFormat,
}
#[test]
fn bindgen_test_layout__dwg_TableCellContent() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_TableCellContent> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_TableCellContent>(),
        280usize,
        concat!("Size of: ", stringify!(_dwg_TableCellContent))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_TableCellContent>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_TableCellContent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TableCellContent),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TableCellContent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TableCellContent),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TableCellContent),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_attrs) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TableCellContent),
            "::",
            stringify!(num_attrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attrs) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TableCellContent),
            "::",
            stringify!(attrs)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).has_content_format_overrides) as usize - ptr as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TableCellContent),
            "::",
            stringify!(has_content_format_overrides)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).content_format) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TableCellContent),
            "::",
            stringify!(content_format)
        )
    );
}
pub type Dwg_TableCellContent = _dwg_TableCellContent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_CellContentGeometry {
    pub dist_top_left: BITCODE_3BD,
    pub dist_center: BITCODE_3BD,
    pub content_width: BITCODE_BD,
    pub content_height: BITCODE_BD,
    pub width: BITCODE_BD,
    pub height: BITCODE_BD,
    pub unknown: BITCODE_BL,
    pub cell_parent: *mut _dwg_TableCell,
    pub geom_parent: *mut _dwg_TABLEGEOMETRY_Cell,
}
#[test]
fn bindgen_test_layout__dwg_CellContentGeometry() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_CellContentGeometry> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_CellContentGeometry>(),
        104usize,
        concat!("Size of: ", stringify!(_dwg_CellContentGeometry))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_CellContentGeometry>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_CellContentGeometry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dist_top_left) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_CellContentGeometry),
            "::",
            stringify!(dist_top_left)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dist_center) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_CellContentGeometry),
            "::",
            stringify!(dist_center)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).content_width) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_CellContentGeometry),
            "::",
            stringify!(content_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).content_height) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_CellContentGeometry),
            "::",
            stringify!(content_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_CellContentGeometry),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_CellContentGeometry),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_CellContentGeometry),
            "::",
            stringify!(unknown)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cell_parent) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_CellContentGeometry),
            "::",
            stringify!(cell_parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geom_parent) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_CellContentGeometry),
            "::",
            stringify!(geom_parent)
        )
    );
}
pub type Dwg_CellContentGeometry = _dwg_CellContentGeometry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_TableCell {
    pub flag: BITCODE_BL,
    pub tooltip: BITCODE_TV,
    pub customdata: BITCODE_BL,
    pub num_customdata_items: BITCODE_BL,
    pub customdata_items: *mut Dwg_TABLE_CustomDataItem,
    pub has_linked_data: BITCODE_BL,
    pub data_link: BITCODE_H,
    pub num_rows: BITCODE_BL,
    pub num_cols: BITCODE_BL,
    pub unknown: BITCODE_BL,
    pub num_cell_contents: BITCODE_BL,
    pub cell_contents: *mut Dwg_TableCellContent,
    pub style_id: BITCODE_BL,
    pub has_geom_data: BITCODE_BL,
    pub geom_data_flag: BITCODE_BL,
    pub width_w_gap: BITCODE_BD,
    pub height_w_gap: BITCODE_BD,
    pub tablegeometry: BITCODE_H,
    pub num_geometry: BITCODE_BL,
    pub geometry: *mut Dwg_CellContentGeometry,
    pub style_parent: *mut _dwg_CellStyle,
    pub row_parent: *mut _dwg_TableRow,
}
#[test]
fn bindgen_test_layout__dwg_TableCell() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_TableCell> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_TableCell>(),
        144usize,
        concat!("Size of: ", stringify!(_dwg_TableCell))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_TableCell>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_TableCell))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TableCell),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tooltip) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TableCell),
            "::",
            stringify!(tooltip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).customdata) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TableCell),
            "::",
            stringify!(customdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_customdata_items) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TableCell),
            "::",
            stringify!(num_customdata_items)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).customdata_items) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TableCell),
            "::",
            stringify!(customdata_items)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_linked_data) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TableCell),
            "::",
            stringify!(has_linked_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_link) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TableCell),
            "::",
            stringify!(data_link)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_rows) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TableCell),
            "::",
            stringify!(num_rows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_cols) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TableCell),
            "::",
            stringify!(num_cols)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TableCell),
            "::",
            stringify!(unknown)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_cell_contents) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TableCell),
            "::",
            stringify!(num_cell_contents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cell_contents) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TableCell),
            "::",
            stringify!(cell_contents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).style_id) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TableCell),
            "::",
            stringify!(style_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_geom_data) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TableCell),
            "::",
            stringify!(has_geom_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geom_data_flag) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TableCell),
            "::",
            stringify!(geom_data_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width_w_gap) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TableCell),
            "::",
            stringify!(width_w_gap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height_w_gap) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TableCell),
            "::",
            stringify!(height_w_gap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tablegeometry) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TableCell),
            "::",
            stringify!(tablegeometry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_geometry) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TableCell),
            "::",
            stringify!(num_geometry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geometry) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TableCell),
            "::",
            stringify!(geometry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).style_parent) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TableCell),
            "::",
            stringify!(style_parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).row_parent) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TableCell),
            "::",
            stringify!(row_parent)
        )
    );
}
pub type Dwg_TableCell = _dwg_TableCell;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_GridFormat {
    pub parent: *mut _dwg_CellStyle,
    pub index_mask: BITCODE_BL,
    pub border_overrides: BITCODE_BL,
    pub border_type: BITCODE_BL,
    pub color: BITCODE_CMC,
    pub linewt: BITCODE_BLd,
    pub ltype: BITCODE_H,
    pub visible: BITCODE_B,
    pub double_line_spacing: BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_GridFormat() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_GridFormat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_GridFormat>(),
        104usize,
        concat!("Size of: ", stringify!(_dwg_GridFormat))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_GridFormat>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_GridFormat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_GridFormat),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index_mask) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_GridFormat),
            "::",
            stringify!(index_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).border_overrides) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_GridFormat),
            "::",
            stringify!(border_overrides)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).border_type) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_GridFormat),
            "::",
            stringify!(border_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_GridFormat),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).linewt) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_GridFormat),
            "::",
            stringify!(linewt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ltype) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_GridFormat),
            "::",
            stringify!(ltype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).visible) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_GridFormat),
            "::",
            stringify!(visible)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).double_line_spacing) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_GridFormat),
            "::",
            stringify!(double_line_spacing)
        )
    );
}
pub type Dwg_GridFormat = _dwg_GridFormat;
#[doc = "Cell style 20.4.101.4\nfor TABLE, TABLECONTENT, CELLSTYLEMAP"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_CellStyle {
    pub type_: BITCODE_BL,
    pub data_flags: BITCODE_BS,
    pub property_override_flags: BITCODE_BL,
    pub merge_flags: BITCODE_BL,
    pub bg_color: BITCODE_CMC,
    pub content_layout: BITCODE_BL,
    pub content_format: Dwg_ContentFormat,
    pub margin_override_flags: BITCODE_BS,
    pub vert_margin: BITCODE_BD,
    pub horiz_margin: BITCODE_BD,
    pub bottom_margin: BITCODE_BD,
    pub right_margin: BITCODE_BD,
    pub margin_horiz_spacing: BITCODE_BD,
    pub margin_vert_spacing: BITCODE_BD,
    pub num_borders: BITCODE_BL,
    pub borders: *mut Dwg_GridFormat,
    pub tablerow_parent: *mut _dwg_TableRow,
    pub tabledatacolumn_parent: *mut _dwg_TableDataColumn,
}
#[test]
fn bindgen_test_layout__dwg_CellStyle() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_CellStyle> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_CellStyle>(),
        272usize,
        concat!("Size of: ", stringify!(_dwg_CellStyle))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_CellStyle>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_CellStyle))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_CellStyle),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_CellStyle),
            "::",
            stringify!(data_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).property_override_flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_CellStyle),
            "::",
            stringify!(property_override_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).merge_flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_CellStyle),
            "::",
            stringify!(merge_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_color) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_CellStyle),
            "::",
            stringify!(bg_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).content_layout) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_CellStyle),
            "::",
            stringify!(content_layout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).content_format) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_CellStyle),
            "::",
            stringify!(content_format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).margin_override_flags) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_CellStyle),
            "::",
            stringify!(margin_override_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vert_margin) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_CellStyle),
            "::",
            stringify!(vert_margin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).horiz_margin) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_CellStyle),
            "::",
            stringify!(horiz_margin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bottom_margin) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_CellStyle),
            "::",
            stringify!(bottom_margin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right_margin) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_CellStyle),
            "::",
            stringify!(right_margin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).margin_horiz_spacing) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_CellStyle),
            "::",
            stringify!(margin_horiz_spacing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).margin_vert_spacing) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_CellStyle),
            "::",
            stringify!(margin_vert_spacing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_borders) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_CellStyle),
            "::",
            stringify!(num_borders)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).borders) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_CellStyle),
            "::",
            stringify!(borders)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tablerow_parent) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_CellStyle),
            "::",
            stringify!(tablerow_parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tabledatacolumn_parent) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_CellStyle),
            "::",
            stringify!(tabledatacolumn_parent)
        )
    );
}
#[doc = "Cell style 20.4.101.4\nfor TABLE, TABLECONTENT, CELLSTYLEMAP"]
pub type Dwg_CellStyle = _dwg_CellStyle;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_TableRow {
    pub parent: *mut _dwg_LinkedTableData,
    pub num_cells: BITCODE_BL,
    pub cells: *mut Dwg_TableCell,
    pub custom_data: BITCODE_BL,
    pub num_customdata_items: BITCODE_BL,
    pub customdata_items: *mut Dwg_TABLE_CustomDataItem,
    pub cellstyle: Dwg_CellStyle,
    pub style_id: BITCODE_BL,
    pub height: BITCODE_BL,
}
#[test]
fn bindgen_test_layout__dwg_TableRow() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_TableRow> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_TableRow>(),
        320usize,
        concat!("Size of: ", stringify!(_dwg_TableRow))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_TableRow>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_TableRow))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TableRow),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_cells) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TableRow),
            "::",
            stringify!(num_cells)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cells) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TableRow),
            "::",
            stringify!(cells)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom_data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TableRow),
            "::",
            stringify!(custom_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_customdata_items) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TableRow),
            "::",
            stringify!(num_customdata_items)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).customdata_items) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TableRow),
            "::",
            stringify!(customdata_items)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cellstyle) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TableRow),
            "::",
            stringify!(cellstyle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).style_id) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TableRow),
            "::",
            stringify!(style_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        316usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TableRow),
            "::",
            stringify!(height)
        )
    );
}
pub type Dwg_TableRow = _dwg_TableRow;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_TableDataColumn {
    pub parent: *mut _dwg_LinkedTableData,
    pub name: BITCODE_TV,
    pub custom_data: BITCODE_BL,
    pub cellstyle: Dwg_CellStyle,
    pub cellstyle_id: BITCODE_BL,
    pub width: BITCODE_BL,
}
#[test]
fn bindgen_test_layout__dwg_TableDataColumn() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_TableDataColumn> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_TableDataColumn>(),
        304usize,
        concat!("Size of: ", stringify!(_dwg_TableDataColumn))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_TableDataColumn>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_TableDataColumn))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TableDataColumn),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TableDataColumn),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom_data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TableDataColumn),
            "::",
            stringify!(custom_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cellstyle) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TableDataColumn),
            "::",
            stringify!(cellstyle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cellstyle_id) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TableDataColumn),
            "::",
            stringify!(cellstyle_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        300usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TableDataColumn),
            "::",
            stringify!(width)
        )
    );
}
pub type Dwg_TableDataColumn = _dwg_TableDataColumn;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_LinkedTableData {
    pub num_cols: BITCODE_BL,
    pub cols: *mut Dwg_TableDataColumn,
    pub num_rows: BITCODE_BL,
    pub rows: *mut Dwg_TableRow,
    pub num_field_refs: BITCODE_BL,
    pub field_refs: *mut BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_LinkedTableData() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_LinkedTableData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_LinkedTableData>(),
        48usize,
        concat!("Size of: ", stringify!(_dwg_LinkedTableData))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_LinkedTableData>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_LinkedTableData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_cols) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LinkedTableData),
            "::",
            stringify!(num_cols)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cols) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LinkedTableData),
            "::",
            stringify!(cols)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_rows) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LinkedTableData),
            "::",
            stringify!(num_rows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rows) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LinkedTableData),
            "::",
            stringify!(rows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_field_refs) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LinkedTableData),
            "::",
            stringify!(num_field_refs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field_refs) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LinkedTableData),
            "::",
            stringify!(field_refs)
        )
    );
}
pub type Dwg_LinkedTableData = _dwg_LinkedTableData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_FormattedTableMerged {
    pub parent: *mut _dwg_FormattedTableData,
    pub top_row: BITCODE_BL,
    pub left_col: BITCODE_BL,
    pub bottom_row: BITCODE_BL,
    pub right_col: BITCODE_BL,
}
#[test]
fn bindgen_test_layout__dwg_FormattedTableMerged() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_FormattedTableMerged> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_FormattedTableMerged>(),
        24usize,
        concat!("Size of: ", stringify!(_dwg_FormattedTableMerged))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_FormattedTableMerged>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_FormattedTableMerged))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_FormattedTableMerged),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).top_row) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_FormattedTableMerged),
            "::",
            stringify!(top_row)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).left_col) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_FormattedTableMerged),
            "::",
            stringify!(left_col)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bottom_row) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_FormattedTableMerged),
            "::",
            stringify!(bottom_row)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right_col) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_FormattedTableMerged),
            "::",
            stringify!(right_col)
        )
    );
}
pub type Dwg_FormattedTableMerged = _dwg_FormattedTableMerged;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_FormattedTableData {
    pub parent: *mut _dwg_object_TABLECONTENT,
    pub cellstyle: Dwg_CellStyle,
    pub num_merged_cells: BITCODE_BL,
    pub merged_cells: *mut Dwg_FormattedTableMerged,
}
#[test]
fn bindgen_test_layout__dwg_FormattedTableData() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_FormattedTableData> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_FormattedTableData>(),
        296usize,
        concat!("Size of: ", stringify!(_dwg_FormattedTableData))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_FormattedTableData>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_FormattedTableData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_FormattedTableData),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cellstyle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_FormattedTableData),
            "::",
            stringify!(cellstyle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_merged_cells) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_FormattedTableData),
            "::",
            stringify!(num_merged_cells)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).merged_cells) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_FormattedTableData),
            "::",
            stringify!(merged_cells)
        )
    );
}
pub type Dwg_FormattedTableData = _dwg_FormattedTableData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_TABLECONTENT {
    pub parent: *mut _dwg_object_object,
    pub ldata: Dwg_LinkedData,
    pub tdata: Dwg_LinkedTableData,
    pub fdata: Dwg_FormattedTableData,
    pub tablestyle: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_object_TABLECONTENT() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_TABLECONTENT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_TABLECONTENT>(),
        376usize,
        concat!("Size of: ", stringify!(_dwg_object_TABLECONTENT))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_TABLECONTENT>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_TABLECONTENT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_TABLECONTENT),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ldata) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_TABLECONTENT),
            "::",
            stringify!(ldata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tdata) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_TABLECONTENT),
            "::",
            stringify!(tdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fdata) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_TABLECONTENT),
            "::",
            stringify!(fdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tablestyle) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_TABLECONTENT),
            "::",
            stringify!(tablestyle)
        )
    );
}
pub type Dwg_Object_TABLECONTENT = _dwg_object_TABLECONTENT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_TABLE {
    pub parent: *mut _dwg_object_entity,
    pub ldata: Dwg_LinkedData,
    pub tdata: Dwg_LinkedTableData,
    pub fdata: Dwg_FormattedTableData,
    pub tablestyle: BITCODE_H,
    pub unknown_rc: BITCODE_RC,
    pub unknown_h: BITCODE_H,
    pub unknown_bl: BITCODE_BL,
    pub unknown_b: BITCODE_B,
    pub unknown_bl1: BITCODE_BL,
    #[doc = "< DXF 10"]
    pub ins_pt: BITCODE_3BD,
    #[doc = "< DXF 41"]
    pub scale: BITCODE_3BD,
    pub scale_flag: BITCODE_BB,
    #[doc = "< DXF 50"]
    pub rotation: BITCODE_BD,
    #[doc = "< DXF 210"]
    pub extrusion: BITCODE_BE,
    #[doc = "< DXF 66"]
    pub has_attribs: BITCODE_B,
    pub num_owned: BITCODE_BL,
    #[doc = "< DXF 90.\nBit flags, 0x06 (0x02 + 0x04): has block,\n0x10: table direction, 0 = up, 1 = down,\n0x20: title suppressed.\nNormally 0x06 is always set."]
    pub flag_for_table_value: BITCODE_BS,
    #[doc = "< DXF 11"]
    pub horiz_direction: BITCODE_3BD,
    #[doc = "< DXF 90"]
    pub num_cols: BITCODE_BL,
    #[doc = "< DXF 91"]
    pub num_rows: BITCODE_BL,
    #[doc = "< computed"]
    pub num_cells: ::std::os::raw::c_ulong,
    #[doc = "< DXF 142"]
    pub col_widths: *mut BITCODE_BD,
    #[doc = "< DXF 141"]
    pub row_heights: *mut BITCODE_BD,
    pub cells: *mut Dwg_TABLE_Cell,
    pub has_table_overrides: BITCODE_B,
    #[doc = "< DXF 93"]
    pub table_flag_override: BITCODE_BL,
    #[doc = "< DXF 280"]
    pub title_suppressed: BITCODE_B,
    #[doc = "< DXF 281"]
    pub header_suppressed: BITCODE_B,
    #[doc = "< DXF 70"]
    pub flow_direction: BITCODE_BS,
    #[doc = "< DXF 40"]
    pub horiz_cell_margin: BITCODE_BD,
    #[doc = "< DXF 41"]
    pub vert_cell_margin: BITCODE_BD,
    #[doc = "< DXF 64"]
    pub title_row_color: BITCODE_CMC,
    #[doc = "< DXF 64"]
    pub header_row_color: BITCODE_CMC,
    #[doc = "< DXF 64"]
    pub data_row_color: BITCODE_CMC,
    #[doc = "< DXF 283"]
    pub title_row_fill_none: BITCODE_B,
    #[doc = "< DXF 283"]
    pub header_row_fill_none: BITCODE_B,
    #[doc = "< DXF 283"]
    pub data_row_fill_none: BITCODE_B,
    #[doc = "< DXF 63"]
    pub title_row_fill_color: BITCODE_CMC,
    #[doc = "< DXF 63"]
    pub header_row_fill_color: BITCODE_CMC,
    #[doc = "< DXF 63"]
    pub data_row_fill_color: BITCODE_CMC,
    #[doc = "< DXF 170"]
    pub title_row_alignment: BITCODE_BS,
    #[doc = "< DXF 170"]
    pub header_row_alignment: BITCODE_BS,
    #[doc = "< DXF 170"]
    pub data_row_alignment: BITCODE_BS,
    #[doc = "< DXF 7"]
    pub title_text_style: BITCODE_H,
    #[doc = "< DXF 7"]
    pub header_text_style: BITCODE_H,
    #[doc = "< DXF 7"]
    pub data_text_style: BITCODE_H,
    #[doc = "< DXF 140"]
    pub title_row_height: BITCODE_BD,
    #[doc = "< DXF 140"]
    pub header_row_height: BITCODE_BD,
    #[doc = "< DXF 140"]
    pub data_row_height: BITCODE_BD,
    #[doc = "< if DXF 94 > 0"]
    pub has_border_color_overrides: BITCODE_B,
    #[doc = "< DXF 94"]
    pub border_color_overrides_flag: BITCODE_BL,
    #[doc = "< DXF 64 if DXF 94 & 0x1"]
    pub title_horiz_top_color: BITCODE_CMC,
    #[doc = "< DXF 65 if DXF 94 & 0x2"]
    pub title_horiz_ins_color: BITCODE_CMC,
    #[doc = "< DXF 66 if DXF 94 & 0x4"]
    pub title_horiz_bottom_color: BITCODE_CMC,
    #[doc = "< DXF 63 if DXF 94 & 0x8"]
    pub title_vert_left_color: BITCODE_CMC,
    #[doc = "< DXF 68 if DXF 94 & 0x10"]
    pub title_vert_ins_color: BITCODE_CMC,
    #[doc = "< DXF 69 if DXF 94 & 0x20"]
    pub title_vert_right_color: BITCODE_CMC,
    #[doc = "< DXF 64 if DXF 94 & 0x40"]
    pub header_horiz_top_color: BITCODE_CMC,
    #[doc = "< DXF 65"]
    pub header_horiz_ins_color: BITCODE_CMC,
    #[doc = "< DXF 66"]
    pub header_horiz_bottom_color: BITCODE_CMC,
    #[doc = "< DXF 63"]
    pub header_vert_left_color: BITCODE_CMC,
    #[doc = "< DXF 68"]
    pub header_vert_ins_color: BITCODE_CMC,
    #[doc = "< DXF 69"]
    pub header_vert_right_color: BITCODE_CMC,
    #[doc = "< DXF 64"]
    pub data_horiz_top_color: BITCODE_CMC,
    #[doc = "< DXF 65"]
    pub data_horiz_ins_color: BITCODE_CMC,
    #[doc = "< DXF 66"]
    pub data_horiz_bottom_color: BITCODE_CMC,
    #[doc = "< DXF 63"]
    pub data_vert_left_color: BITCODE_CMC,
    #[doc = "< DXF 68"]
    pub data_vert_ins_color: BITCODE_CMC,
    #[doc = "< DXF 69"]
    pub data_vert_right_color: BITCODE_CMC,
    #[doc = "< if DXF 95 > 0"]
    pub has_border_lineweight_overrides: BITCODE_B,
    #[doc = "< DXF 95"]
    pub border_lineweight_overrides_flag: BITCODE_BL,
    pub title_horiz_top_linewt: BITCODE_BS,
    pub title_horiz_ins_linewt: BITCODE_BS,
    pub title_horiz_bottom_linewt: BITCODE_BS,
    pub title_vert_left_linewt: BITCODE_BS,
    pub title_vert_ins_linewt: BITCODE_BS,
    pub title_vert_right_linewt: BITCODE_BS,
    pub header_horiz_top_linewt: BITCODE_BS,
    pub header_horiz_ins_linewt: BITCODE_BS,
    pub header_horiz_bottom_linewt: BITCODE_BS,
    pub header_vert_left_linewt: BITCODE_BS,
    pub header_vert_ins_linewt: BITCODE_BS,
    pub header_vert_right_linewt: BITCODE_BS,
    pub data_horiz_top_linewt: BITCODE_BS,
    pub data_horiz_ins_linewt: BITCODE_BS,
    pub data_horiz_bottom_linewt: BITCODE_BS,
    pub data_vert_left_linewt: BITCODE_BS,
    pub data_vert_ins_linewt: BITCODE_BS,
    pub data_vert_right_linewt: BITCODE_BS,
    pub has_border_visibility_overrides: BITCODE_B,
    #[doc = "< DXF 96"]
    pub border_visibility_overrides_flag: BITCODE_BL,
    pub title_horiz_top_visibility: BITCODE_BS,
    pub title_horiz_ins_visibility: BITCODE_BS,
    pub title_horiz_bottom_visibility: BITCODE_BS,
    pub title_vert_left_visibility: BITCODE_BS,
    pub title_vert_ins_visibility: BITCODE_BS,
    pub title_vert_right_visibility: BITCODE_BS,
    pub header_horiz_top_visibility: BITCODE_BS,
    pub header_horiz_ins_visibility: BITCODE_BS,
    pub header_horiz_bottom_visibility: BITCODE_BS,
    pub header_vert_left_visibility: BITCODE_BS,
    pub header_vert_ins_visibility: BITCODE_BS,
    pub header_vert_right_visibility: BITCODE_BS,
    pub data_horiz_top_visibility: BITCODE_BS,
    pub data_horiz_ins_visibility: BITCODE_BS,
    pub data_horiz_bottom_visibility: BITCODE_BS,
    pub data_vert_left_visibility: BITCODE_BS,
    pub data_vert_ins_visibility: BITCODE_BS,
    pub data_vert_right_visibility: BITCODE_BS,
    pub block_header: BITCODE_H,
    pub first_attrib: BITCODE_H,
    pub last_attrib: BITCODE_H,
    pub attribs: *mut BITCODE_H,
    pub seqend: BITCODE_H,
    pub title_row_style_override: BITCODE_H,
    pub header_row_style_override: BITCODE_H,
    pub data_row_style_override: BITCODE_H,
    pub unknown_bs: BITCODE_BS,
    pub hor_dir: BITCODE_3BD,
    pub has_break_data: BITCODE_BL,
    pub break_flag: BITCODE_BL,
    pub break_flow_direction: BITCODE_BL,
    pub break_spacing: BITCODE_BD,
    pub break_unknown1: BITCODE_BL,
    pub break_unknown2: BITCODE_BL,
    pub num_break_heights: BITCODE_BL,
    pub break_heights: *mut Dwg_TABLE_BreakHeight,
    pub num_break_rows: BITCODE_BL,
    pub break_rows: *mut Dwg_TABLE_BreakRow,
}
#[test]
fn bindgen_test_layout__dwg_entity_TABLE() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_TABLE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_TABLE>(),
        2080usize,
        concat!("Size of: ", stringify!(_dwg_entity_TABLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_TABLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_TABLE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ldata) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(ldata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tdata) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(tdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fdata) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(fdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tablestyle) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(tablestyle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_rc) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(unknown_rc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_h) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(unknown_h)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bl) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(unknown_bl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_b) as usize - ptr as usize },
        396usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(unknown_b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bl1) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(unknown_bl1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ins_pt) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(ins_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale_flag) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(scale_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rotation) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extrusion) as usize - ptr as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(extrusion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_attribs) as usize - ptr as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(has_attribs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_owned) as usize - ptr as usize },
        500usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(num_owned)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag_for_table_value) as usize - ptr as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(flag_for_table_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).horiz_direction) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(horiz_direction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_cols) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(num_cols)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_rows) as usize - ptr as usize },
        540usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(num_rows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_cells) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(num_cells)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).col_widths) as usize - ptr as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(col_widths)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).row_heights) as usize - ptr as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(row_heights)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cells) as usize - ptr as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(cells)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_table_overrides) as usize - ptr as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(has_table_overrides)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).table_flag_override) as usize - ptr as usize },
        580usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(table_flag_override)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title_suppressed) as usize - ptr as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(title_suppressed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header_suppressed) as usize - ptr as usize },
        585usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(header_suppressed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flow_direction) as usize - ptr as usize },
        586usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(flow_direction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).horiz_cell_margin) as usize - ptr as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(horiz_cell_margin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vert_cell_margin) as usize - ptr as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(vert_cell_margin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title_row_color) as usize - ptr as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(title_row_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header_row_color) as usize - ptr as usize },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(header_row_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_row_color) as usize - ptr as usize },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(data_row_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title_row_fill_none) as usize - ptr as usize },
        752usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(title_row_fill_none)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header_row_fill_none) as usize - ptr as usize },
        753usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(header_row_fill_none)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_row_fill_none) as usize - ptr as usize },
        754usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(data_row_fill_none)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title_row_fill_color) as usize - ptr as usize },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(title_row_fill_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header_row_fill_color) as usize - ptr as usize },
        808usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(header_row_fill_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_row_fill_color) as usize - ptr as usize },
        856usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(data_row_fill_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title_row_alignment) as usize - ptr as usize },
        904usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(title_row_alignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header_row_alignment) as usize - ptr as usize },
        906usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(header_row_alignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_row_alignment) as usize - ptr as usize },
        908usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(data_row_alignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title_text_style) as usize - ptr as usize },
        912usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(title_text_style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header_text_style) as usize - ptr as usize },
        920usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(header_text_style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_text_style) as usize - ptr as usize },
        928usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(data_text_style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title_row_height) as usize - ptr as usize },
        936usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(title_row_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header_row_height) as usize - ptr as usize },
        944usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(header_row_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_row_height) as usize - ptr as usize },
        952usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(data_row_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_border_color_overrides) as usize - ptr as usize },
        960usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(has_border_color_overrides)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).border_color_overrides_flag) as usize - ptr as usize },
        964usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(border_color_overrides_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title_horiz_top_color) as usize - ptr as usize },
        968usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(title_horiz_top_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title_horiz_ins_color) as usize - ptr as usize },
        1016usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(title_horiz_ins_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title_horiz_bottom_color) as usize - ptr as usize },
        1064usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(title_horiz_bottom_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title_vert_left_color) as usize - ptr as usize },
        1112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(title_vert_left_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title_vert_ins_color) as usize - ptr as usize },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(title_vert_ins_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title_vert_right_color) as usize - ptr as usize },
        1208usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(title_vert_right_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header_horiz_top_color) as usize - ptr as usize },
        1256usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(header_horiz_top_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header_horiz_ins_color) as usize - ptr as usize },
        1304usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(header_horiz_ins_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header_horiz_bottom_color) as usize - ptr as usize },
        1352usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(header_horiz_bottom_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header_vert_left_color) as usize - ptr as usize },
        1400usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(header_vert_left_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header_vert_ins_color) as usize - ptr as usize },
        1448usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(header_vert_ins_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header_vert_right_color) as usize - ptr as usize },
        1496usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(header_vert_right_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_horiz_top_color) as usize - ptr as usize },
        1544usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(data_horiz_top_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_horiz_ins_color) as usize - ptr as usize },
        1592usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(data_horiz_ins_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_horiz_bottom_color) as usize - ptr as usize },
        1640usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(data_horiz_bottom_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_vert_left_color) as usize - ptr as usize },
        1688usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(data_vert_left_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_vert_ins_color) as usize - ptr as usize },
        1736usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(data_vert_ins_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_vert_right_color) as usize - ptr as usize },
        1784usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(data_vert_right_color)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).has_border_lineweight_overrides) as usize - ptr as usize
        },
        1832usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(has_border_lineweight_overrides)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).border_lineweight_overrides_flag) as usize - ptr as usize
        },
        1836usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(border_lineweight_overrides_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title_horiz_top_linewt) as usize - ptr as usize },
        1840usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(title_horiz_top_linewt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title_horiz_ins_linewt) as usize - ptr as usize },
        1842usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(title_horiz_ins_linewt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title_horiz_bottom_linewt) as usize - ptr as usize },
        1844usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(title_horiz_bottom_linewt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title_vert_left_linewt) as usize - ptr as usize },
        1846usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(title_vert_left_linewt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title_vert_ins_linewt) as usize - ptr as usize },
        1848usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(title_vert_ins_linewt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title_vert_right_linewt) as usize - ptr as usize },
        1850usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(title_vert_right_linewt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header_horiz_top_linewt) as usize - ptr as usize },
        1852usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(header_horiz_top_linewt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header_horiz_ins_linewt) as usize - ptr as usize },
        1854usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(header_horiz_ins_linewt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header_horiz_bottom_linewt) as usize - ptr as usize },
        1856usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(header_horiz_bottom_linewt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header_vert_left_linewt) as usize - ptr as usize },
        1858usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(header_vert_left_linewt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header_vert_ins_linewt) as usize - ptr as usize },
        1860usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(header_vert_ins_linewt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header_vert_right_linewt) as usize - ptr as usize },
        1862usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(header_vert_right_linewt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_horiz_top_linewt) as usize - ptr as usize },
        1864usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(data_horiz_top_linewt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_horiz_ins_linewt) as usize - ptr as usize },
        1866usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(data_horiz_ins_linewt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_horiz_bottom_linewt) as usize - ptr as usize },
        1868usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(data_horiz_bottom_linewt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_vert_left_linewt) as usize - ptr as usize },
        1870usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(data_vert_left_linewt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_vert_ins_linewt) as usize - ptr as usize },
        1872usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(data_vert_ins_linewt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_vert_right_linewt) as usize - ptr as usize },
        1874usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(data_vert_right_linewt)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).has_border_visibility_overrides) as usize - ptr as usize
        },
        1876usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(has_border_visibility_overrides)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).border_visibility_overrides_flag) as usize - ptr as usize
        },
        1880usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(border_visibility_overrides_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title_horiz_top_visibility) as usize - ptr as usize },
        1884usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(title_horiz_top_visibility)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title_horiz_ins_visibility) as usize - ptr as usize },
        1886usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(title_horiz_ins_visibility)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).title_horiz_bottom_visibility) as usize - ptr as usize
        },
        1888usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(title_horiz_bottom_visibility)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title_vert_left_visibility) as usize - ptr as usize },
        1890usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(title_vert_left_visibility)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title_vert_ins_visibility) as usize - ptr as usize },
        1892usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(title_vert_ins_visibility)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title_vert_right_visibility) as usize - ptr as usize },
        1894usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(title_vert_right_visibility)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header_horiz_top_visibility) as usize - ptr as usize },
        1896usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(header_horiz_top_visibility)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header_horiz_ins_visibility) as usize - ptr as usize },
        1898usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(header_horiz_ins_visibility)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).header_horiz_bottom_visibility) as usize - ptr as usize
        },
        1900usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(header_horiz_bottom_visibility)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header_vert_left_visibility) as usize - ptr as usize },
        1902usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(header_vert_left_visibility)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header_vert_ins_visibility) as usize - ptr as usize },
        1904usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(header_vert_ins_visibility)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).header_vert_right_visibility) as usize - ptr as usize
        },
        1906usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(header_vert_right_visibility)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_horiz_top_visibility) as usize - ptr as usize },
        1908usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(data_horiz_top_visibility)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_horiz_ins_visibility) as usize - ptr as usize },
        1910usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(data_horiz_ins_visibility)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).data_horiz_bottom_visibility) as usize - ptr as usize
        },
        1912usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(data_horiz_bottom_visibility)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_vert_left_visibility) as usize - ptr as usize },
        1914usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(data_vert_left_visibility)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_vert_ins_visibility) as usize - ptr as usize },
        1916usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(data_vert_ins_visibility)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_vert_right_visibility) as usize - ptr as usize },
        1918usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(data_vert_right_visibility)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block_header) as usize - ptr as usize },
        1920usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(block_header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).first_attrib) as usize - ptr as usize },
        1928usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(first_attrib)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_attrib) as usize - ptr as usize },
        1936usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(last_attrib)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attribs) as usize - ptr as usize },
        1944usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(attribs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seqend) as usize - ptr as usize },
        1952usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(seqend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title_row_style_override) as usize - ptr as usize },
        1960usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(title_row_style_override)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header_row_style_override) as usize - ptr as usize },
        1968usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(header_row_style_override)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_row_style_override) as usize - ptr as usize },
        1976usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(data_row_style_override)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bs) as usize - ptr as usize },
        1984usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(unknown_bs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hor_dir) as usize - ptr as usize },
        1992usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(hor_dir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_break_data) as usize - ptr as usize },
        2016usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(has_break_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).break_flag) as usize - ptr as usize },
        2020usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(break_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).break_flow_direction) as usize - ptr as usize },
        2024usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(break_flow_direction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).break_spacing) as usize - ptr as usize },
        2032usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(break_spacing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).break_unknown1) as usize - ptr as usize },
        2040usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(break_unknown1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).break_unknown2) as usize - ptr as usize },
        2044usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(break_unknown2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_break_heights) as usize - ptr as usize },
        2048usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(num_break_heights)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).break_heights) as usize - ptr as usize },
        2056usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(break_heights)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_break_rows) as usize - ptr as usize },
        2064usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(num_break_rows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).break_rows) as usize - ptr as usize },
        2072usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_TABLE),
            "::",
            stringify!(break_rows)
        )
    );
}
pub type Dwg_Entity_TABLE = _dwg_entity_TABLE;
#[doc = "Class TABLESTYLE (varies)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_TABLESTYLE_CellStyle {
    pub parent: *mut _dwg_object_TABLESTYLE,
    pub id: BITCODE_BL,
    pub type_: BITCODE_BL,
    pub name: BITCODE_TV,
    pub cellstyle: _dwg_CellStyle,
}
#[test]
fn bindgen_test_layout__dwg_TABLESTYLE_CellStyle() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_TABLESTYLE_CellStyle> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_TABLESTYLE_CellStyle>(),
        296usize,
        concat!("Size of: ", stringify!(_dwg_TABLESTYLE_CellStyle))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_TABLESTYLE_CellStyle>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_TABLESTYLE_CellStyle))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLESTYLE_CellStyle),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLESTYLE_CellStyle),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLESTYLE_CellStyle),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLESTYLE_CellStyle),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cellstyle) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLESTYLE_CellStyle),
            "::",
            stringify!(cellstyle)
        )
    );
}
#[doc = "Class TABLESTYLE (varies)"]
pub type Dwg_TABLESTYLE_CellStyle = _dwg_TABLESTYLE_CellStyle;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_TABLESTYLE_border {
    pub linewt: BITCODE_BSd,
    pub visible: BITCODE_B,
    pub color: BITCODE_CMC,
}
#[test]
fn bindgen_test_layout__dwg_TABLESTYLE_border() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_TABLESTYLE_border> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_TABLESTYLE_border>(),
        56usize,
        concat!("Size of: ", stringify!(_dwg_TABLESTYLE_border))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_TABLESTYLE_border>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_TABLESTYLE_border))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).linewt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLESTYLE_border),
            "::",
            stringify!(linewt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).visible) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLESTYLE_border),
            "::",
            stringify!(visible)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLESTYLE_border),
            "::",
            stringify!(color)
        )
    );
}
pub type Dwg_TABLESTYLE_border = _dwg_TABLESTYLE_border;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_TABLESTYLE_rowstyles {
    pub parent: *mut _dwg_object_TABLESTYLE,
    pub text_style: BITCODE_H,
    pub text_height: BITCODE_BD,
    pub text_alignment: BITCODE_BS,
    pub text_color: BITCODE_CMC,
    pub fill_color: BITCODE_CMC,
    pub has_bgcolor: BITCODE_B,
    pub num_borders: BITCODE_BL,
    pub borders: *mut Dwg_TABLESTYLE_border,
    pub data_type: BITCODE_BL,
    pub unit_type: BITCODE_BL,
    pub format_string: BITCODE_TU,
}
#[test]
fn bindgen_test_layout__dwg_TABLESTYLE_rowstyles() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_TABLESTYLE_rowstyles> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_TABLESTYLE_rowstyles>(),
        160usize,
        concat!("Size of: ", stringify!(_dwg_TABLESTYLE_rowstyles))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_TABLESTYLE_rowstyles>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_TABLESTYLE_rowstyles))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLESTYLE_rowstyles),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_style) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLESTYLE_rowstyles),
            "::",
            stringify!(text_style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_height) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLESTYLE_rowstyles),
            "::",
            stringify!(text_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_alignment) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLESTYLE_rowstyles),
            "::",
            stringify!(text_alignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_color) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLESTYLE_rowstyles),
            "::",
            stringify!(text_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fill_color) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLESTYLE_rowstyles),
            "::",
            stringify!(fill_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_bgcolor) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLESTYLE_rowstyles),
            "::",
            stringify!(has_bgcolor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_borders) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLESTYLE_rowstyles),
            "::",
            stringify!(num_borders)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).borders) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLESTYLE_rowstyles),
            "::",
            stringify!(borders)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_type) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLESTYLE_rowstyles),
            "::",
            stringify!(data_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unit_type) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLESTYLE_rowstyles),
            "::",
            stringify!(unit_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format_string) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLESTYLE_rowstyles),
            "::",
            stringify!(format_string)
        )
    );
}
pub type Dwg_TABLESTYLE_rowstyles = _dwg_TABLESTYLE_rowstyles;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_TABLESTYLE {
    pub parent: *mut _dwg_object_object,
    pub class_version: BITCODE_BS,
    pub name: BITCODE_TV,
    pub flags: BITCODE_BS,
    pub flow_direction: BITCODE_BS,
    pub horiz_cell_margin: BITCODE_BD,
    pub vert_cell_margin: BITCODE_BD,
    pub is_title_suppressed: BITCODE_B,
    pub is_header_suppressed: BITCODE_B,
    pub unknown_rc: BITCODE_RC,
    pub unknown_bl1: BITCODE_BL,
    pub unknown_bl2: BITCODE_BL,
    pub cellstyle: BITCODE_H,
    pub sty: Dwg_TABLESTYLE_CellStyle,
    pub numoverrides: BITCODE_BL,
    pub unknown_bl3: BITCODE_BL,
    pub ovr: Dwg_TABLESTYLE_CellStyle,
    pub num_rowstyles: BITCODE_BL,
    pub rowstyles: *mut Dwg_TABLESTYLE_rowstyles,
}
#[test]
fn bindgen_test_layout__dwg_object_TABLESTYLE() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_TABLESTYLE> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_TABLESTYLE>(),
        688usize,
        concat!("Size of: ", stringify!(_dwg_object_TABLESTYLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_TABLESTYLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_TABLESTYLE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_TABLESTYLE),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_TABLESTYLE),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_TABLESTYLE),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_TABLESTYLE),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flow_direction) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_TABLESTYLE),
            "::",
            stringify!(flow_direction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).horiz_cell_margin) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_TABLESTYLE),
            "::",
            stringify!(horiz_cell_margin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vert_cell_margin) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_TABLESTYLE),
            "::",
            stringify!(vert_cell_margin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_title_suppressed) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_TABLESTYLE),
            "::",
            stringify!(is_title_suppressed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_header_suppressed) as usize - ptr as usize },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_TABLESTYLE),
            "::",
            stringify!(is_header_suppressed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_rc) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_TABLESTYLE),
            "::",
            stringify!(unknown_rc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bl1) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_TABLESTYLE),
            "::",
            stringify!(unknown_bl1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bl2) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_TABLESTYLE),
            "::",
            stringify!(unknown_bl2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cellstyle) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_TABLESTYLE),
            "::",
            stringify!(cellstyle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sty) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_TABLESTYLE),
            "::",
            stringify!(sty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numoverrides) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_TABLESTYLE),
            "::",
            stringify!(numoverrides)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bl3) as usize - ptr as usize },
        372usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_TABLESTYLE),
            "::",
            stringify!(unknown_bl3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ovr) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_TABLESTYLE),
            "::",
            stringify!(ovr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_rowstyles) as usize - ptr as usize },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_TABLESTYLE),
            "::",
            stringify!(num_rowstyles)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rowstyles) as usize - ptr as usize },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_TABLESTYLE),
            "::",
            stringify!(rowstyles)
        )
    );
}
pub type Dwg_Object_TABLESTYLE = _dwg_object_TABLESTYLE;
#[doc = "Class CELLSTYLEMAP (varies)\nR2008+ TABLESTYLE extension class"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_CELLSTYLEMAP {
    pub parent: *mut _dwg_object_object,
    pub num_cells: BITCODE_BL,
    pub cells: *mut Dwg_TABLESTYLE_CellStyle,
}
#[test]
fn bindgen_test_layout__dwg_object_CELLSTYLEMAP() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_CELLSTYLEMAP> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_CELLSTYLEMAP>(),
        24usize,
        concat!("Size of: ", stringify!(_dwg_object_CELLSTYLEMAP))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_CELLSTYLEMAP>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_CELLSTYLEMAP))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_CELLSTYLEMAP),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_cells) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_CELLSTYLEMAP),
            "::",
            stringify!(num_cells)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cells) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_CELLSTYLEMAP),
            "::",
            stringify!(cells)
        )
    );
}
#[doc = "Class CELLSTYLEMAP (varies)\nR2008+ TABLESTYLE extension class"]
pub type Dwg_Object_CELLSTYLEMAP = _dwg_object_CELLSTYLEMAP;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_TABLEGEOMETRY_Cell {
    pub parent: *mut _dwg_object_TABLEGEOMETRY,
    pub geom_data_flag: BITCODE_BL,
    pub width_w_gap: BITCODE_BD,
    pub height_w_gap: BITCODE_BD,
    pub tablegeometry: BITCODE_H,
    pub num_geometry: BITCODE_BL,
    pub geometry: *mut Dwg_CellContentGeometry,
}
#[test]
fn bindgen_test_layout__dwg_TABLEGEOMETRY_Cell() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_TABLEGEOMETRY_Cell> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_TABLEGEOMETRY_Cell>(),
        56usize,
        concat!("Size of: ", stringify!(_dwg_TABLEGEOMETRY_Cell))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_TABLEGEOMETRY_Cell>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_TABLEGEOMETRY_Cell))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLEGEOMETRY_Cell),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geom_data_flag) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLEGEOMETRY_Cell),
            "::",
            stringify!(geom_data_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width_w_gap) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLEGEOMETRY_Cell),
            "::",
            stringify!(width_w_gap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height_w_gap) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLEGEOMETRY_Cell),
            "::",
            stringify!(height_w_gap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tablegeometry) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLEGEOMETRY_Cell),
            "::",
            stringify!(tablegeometry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_geometry) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLEGEOMETRY_Cell),
            "::",
            stringify!(num_geometry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geometry) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_TABLEGEOMETRY_Cell),
            "::",
            stringify!(geometry)
        )
    );
}
pub type Dwg_TABLEGEOMETRY_Cell = _dwg_TABLEGEOMETRY_Cell;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_TABLEGEOMETRY {
    pub parent: *mut _dwg_object_object,
    pub numrows: BITCODE_BL,
    pub numcols: BITCODE_BL,
    pub num_cells: BITCODE_BL,
    pub cells: *mut Dwg_TABLEGEOMETRY_Cell,
}
#[test]
fn bindgen_test_layout__dwg_object_TABLEGEOMETRY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_TABLEGEOMETRY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_TABLEGEOMETRY>(),
        32usize,
        concat!("Size of: ", stringify!(_dwg_object_TABLEGEOMETRY))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_TABLEGEOMETRY>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_TABLEGEOMETRY))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_TABLEGEOMETRY),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numrows) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_TABLEGEOMETRY),
            "::",
            stringify!(numrows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numcols) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_TABLEGEOMETRY),
            "::",
            stringify!(numcols)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_cells) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_TABLEGEOMETRY),
            "::",
            stringify!(num_cells)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cells) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_TABLEGEOMETRY),
            "::",
            stringify!(cells)
        )
    );
}
pub type Dwg_Object_TABLEGEOMETRY = _dwg_object_TABLEGEOMETRY;
#[doc = "Abstract class UNDERLAYDEFINITION (varies)\nParent of {PDF,DGN,DWF}DEFINITION"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_abstractobject_UNDERLAYDEFINITION {
    pub parent: *mut _dwg_object_object,
    #[doc = "< DXF 1, relative or absolute path to the image file"]
    pub filename: BITCODE_TV,
    #[doc = "< DXF 2, pdf: page number, dgn: default, dwf: ?"]
    pub name: BITCODE_TV,
}
#[test]
fn bindgen_test_layout__dwg_abstractobject_UNDERLAYDEFINITION() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_abstractobject_UNDERLAYDEFINITION> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_abstractobject_UNDERLAYDEFINITION>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_abstractobject_UNDERLAYDEFINITION)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_abstractobject_UNDERLAYDEFINITION>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_abstractobject_UNDERLAYDEFINITION)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_abstractobject_UNDERLAYDEFINITION),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filename) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_abstractobject_UNDERLAYDEFINITION),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_abstractobject_UNDERLAYDEFINITION),
            "::",
            stringify!(name)
        )
    );
}
#[doc = "Abstract class UNDERLAYDEFINITION (varies)\nParent of {PDF,DGN,DWF}DEFINITION"]
pub type Dwg_Object_UNDERLAYDEFINITION = _dwg_abstractobject_UNDERLAYDEFINITION;
#[doc = "Abstract class UNDERLAYDEFINITION (varies)\nParent of {PDF,DGN,DWF}DEFINITION"]
pub type Dwg_Object_PDFDEFINITION = _dwg_abstractobject_UNDERLAYDEFINITION;
#[doc = "Abstract class UNDERLAYDEFINITION (varies)\nParent of {PDF,DGN,DWF}DEFINITION"]
pub type Dwg_Object_DGNDEFINITION = _dwg_abstractobject_UNDERLAYDEFINITION;
#[doc = "Abstract class UNDERLAYDEFINITION (varies)\nParent of {PDF,DGN,DWF}DEFINITION"]
pub type Dwg_Object_DWFDEFINITION = _dwg_abstractobject_UNDERLAYDEFINITION;
#[doc = "Abstract entity UNDERLAY, the reference (varies)\nAs IMAGE or WIPEOUT but snappable, and with holes.\nParent of {PDF,DGN,DWF}UNDERLAY\nIn C++ as UnderlayReference"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_abstractentity_UNDERLAY {
    pub parent: *mut _dwg_object_entity,
    #[doc = "< DXF 210 normal"]
    pub extrusion: BITCODE_BE,
    #[doc = "< DXF 10"]
    pub ins_pt: BITCODE_3BD,
    #[doc = "< DXF 41"]
    pub scale: BITCODE_3BD,
    #[doc = "< DXF 50"]
    pub angle: BITCODE_BD,
    #[doc = "< DXF 280: 1 is_clipped, 2 is_on, 4 is_monochrome,\n8 is_adjusted_for_background, 16 is_clip_inverted,\n? is_frame_visible, ? is_frame_plottable"]
    pub flag: BITCODE_RC,
    #[doc = "< DXF 281 20-100, def: 100"]
    pub contrast: BITCODE_RC,
    #[doc = "< DXF 282 0-80, def: 0"]
    pub fade: BITCODE_RC,
    pub num_clip_verts: BITCODE_BL,
    #[doc = "< DXF 11: if 2 rectangle, > polygon"]
    pub clip_verts: *mut BITCODE_2RD,
    #[doc = "< DXF 170"]
    pub num_clip_inverts: BITCODE_BS,
    #[doc = "< DXF 12"]
    pub clip_inverts: *mut BITCODE_2RD,
    #[doc = "< DXF 340"]
    pub definition_id: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_abstractentity_UNDERLAY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_abstractentity_UNDERLAY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_abstractentity_UNDERLAY>(),
        128usize,
        concat!("Size of: ", stringify!(_dwg_abstractentity_UNDERLAY))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_abstractentity_UNDERLAY>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_abstractentity_UNDERLAY))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_abstractentity_UNDERLAY),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extrusion) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_abstractentity_UNDERLAY),
            "::",
            stringify!(extrusion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ins_pt) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_abstractentity_UNDERLAY),
            "::",
            stringify!(ins_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_abstractentity_UNDERLAY),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).angle) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_abstractentity_UNDERLAY),
            "::",
            stringify!(angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_abstractentity_UNDERLAY),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).contrast) as usize - ptr as usize },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_abstractentity_UNDERLAY),
            "::",
            stringify!(contrast)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fade) as usize - ptr as usize },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_abstractentity_UNDERLAY),
            "::",
            stringify!(fade)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_clip_verts) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_abstractentity_UNDERLAY),
            "::",
            stringify!(num_clip_verts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clip_verts) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_abstractentity_UNDERLAY),
            "::",
            stringify!(clip_verts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_clip_inverts) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_abstractentity_UNDERLAY),
            "::",
            stringify!(num_clip_inverts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clip_inverts) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_abstractentity_UNDERLAY),
            "::",
            stringify!(clip_inverts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).definition_id) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_abstractentity_UNDERLAY),
            "::",
            stringify!(definition_id)
        )
    );
}
#[doc = "Abstract entity UNDERLAY, the reference (varies)\nAs IMAGE or WIPEOUT but snappable, and with holes.\nParent of {PDF,DGN,DWF}UNDERLAY\nIn C++ as UnderlayReference"]
pub type Dwg_Entity_UNDERLAY = _dwg_abstractentity_UNDERLAY;
#[doc = "Abstract entity UNDERLAY, the reference (varies)\nAs IMAGE or WIPEOUT but snappable, and with holes.\nParent of {PDF,DGN,DWF}UNDERLAY\nIn C++ as UnderlayReference"]
pub type Dwg_Entity_PDFUNDERLAY = _dwg_abstractentity_UNDERLAY;
#[doc = "Abstract entity UNDERLAY, the reference (varies)\nAs IMAGE or WIPEOUT but snappable, and with holes.\nParent of {PDF,DGN,DWF}UNDERLAY\nIn C++ as UnderlayReference"]
pub type Dwg_Entity_DGNUNDERLAY = _dwg_abstractentity_UNDERLAY;
#[doc = "Abstract entity UNDERLAY, the reference (varies)\nAs IMAGE or WIPEOUT but snappable, and with holes.\nParent of {PDF,DGN,DWF}UNDERLAY\nIn C++ as UnderlayReference"]
pub type Dwg_Entity_DWFUNDERLAY = _dwg_abstractentity_UNDERLAY;
#[doc = "Class DBCOLOR (varies)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_DBCOLOR {
    pub parent: *mut _dwg_object_object,
    pub color: BITCODE_CMC,
}
#[test]
fn bindgen_test_layout__dwg_object_DBCOLOR() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_DBCOLOR> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_DBCOLOR>(),
        56usize,
        concat!("Size of: ", stringify!(_dwg_object_DBCOLOR))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_DBCOLOR>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_DBCOLOR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DBCOLOR),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DBCOLOR),
            "::",
            stringify!(color)
        )
    );
}
#[doc = "Class DBCOLOR (varies)"]
pub type Dwg_Object_DBCOLOR = _dwg_object_DBCOLOR;
#[doc = "Class FIELDLIST AcDbField (varies)\nR2018+"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_FIELD_ChildValue {
    pub parent: *mut _dwg_object_FIELD,
    #[doc = "< DXF 6"]
    pub key: BITCODE_TV,
    pub value: Dwg_TABLE_value,
}
#[test]
fn bindgen_test_layout__dwg_FIELD_ChildValue() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_FIELD_ChildValue> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_FIELD_ChildValue>(),
        136usize,
        concat!("Size of: ", stringify!(_dwg_FIELD_ChildValue))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_FIELD_ChildValue>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_FIELD_ChildValue))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_FIELD_ChildValue),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_FIELD_ChildValue),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_FIELD_ChildValue),
            "::",
            stringify!(value)
        )
    );
}
#[doc = "Class FIELDLIST AcDbField (varies)\nR2018+"]
pub type Dwg_FIELD_ChildValue = _dwg_FIELD_ChildValue;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_FIELD {
    pub parent: *mut _dwg_object_object,
    pub id: BITCODE_TV,
    pub code: BITCODE_TV,
    pub num_childs: BITCODE_BL,
    pub childs: *mut BITCODE_H,
    pub num_objects: BITCODE_BL,
    pub objects: *mut BITCODE_H,
    pub format: BITCODE_TV,
    pub evaluation_option: BITCODE_BL,
    pub filing_option: BITCODE_BL,
    pub field_state: BITCODE_BL,
    pub evaluation_status: BITCODE_BL,
    pub evaluation_error_code: BITCODE_BL,
    pub evaluation_error_msg: BITCODE_TV,
    pub value: Dwg_TABLE_value,
    pub value_string: BITCODE_TV,
    pub value_string_length: BITCODE_BL,
    pub num_childval: BITCODE_BL,
    pub childval: *mut Dwg_FIELD_ChildValue,
}
#[test]
fn bindgen_test_layout__dwg_object_FIELD() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_FIELD> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_FIELD>(),
        240usize,
        concat!("Size of: ", stringify!(_dwg_object_FIELD))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_FIELD>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_FIELD))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_FIELD),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_FIELD),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_FIELD),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_childs) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_FIELD),
            "::",
            stringify!(num_childs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).childs) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_FIELD),
            "::",
            stringify!(childs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_objects) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_FIELD),
            "::",
            stringify!(num_objects)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objects) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_FIELD),
            "::",
            stringify!(objects)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_FIELD),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evaluation_option) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_FIELD),
            "::",
            stringify!(evaluation_option)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filing_option) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_FIELD),
            "::",
            stringify!(filing_option)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field_state) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_FIELD),
            "::",
            stringify!(field_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evaluation_status) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_FIELD),
            "::",
            stringify!(evaluation_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evaluation_error_code) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_FIELD),
            "::",
            stringify!(evaluation_error_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evaluation_error_msg) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_FIELD),
            "::",
            stringify!(evaluation_error_msg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_FIELD),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value_string) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_FIELD),
            "::",
            stringify!(value_string)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value_string_length) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_FIELD),
            "::",
            stringify!(value_string_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_childval) as usize - ptr as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_FIELD),
            "::",
            stringify!(num_childval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).childval) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_FIELD),
            "::",
            stringify!(childval)
        )
    );
}
pub type Dwg_Object_FIELD = _dwg_object_FIELD;
#[doc = " Object FIELDLIST (varies)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_FIELDLIST {
    pub parent: *mut _dwg_object_object,
    pub num_fields: BITCODE_BL,
    pub unknown: BITCODE_B,
    pub fields: *mut BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_object_FIELDLIST() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_FIELDLIST> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_FIELDLIST>(),
        24usize,
        concat!("Size of: ", stringify!(_dwg_object_FIELDLIST))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_FIELDLIST>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_FIELDLIST))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_FIELDLIST),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_fields) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_FIELDLIST),
            "::",
            stringify!(num_fields)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_FIELDLIST),
            "::",
            stringify!(unknown)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fields) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_FIELDLIST),
            "::",
            stringify!(fields)
        )
    );
}
#[doc = " Object FIELDLIST (varies)"]
pub type Dwg_Object_FIELDLIST = _dwg_object_FIELDLIST;
#[doc = "Class GEODATA (varies)\nR2009+"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_GEODATA_meshpt {
    pub source_pt: BITCODE_2RD,
    pub dest_pt: BITCODE_2RD,
}
#[test]
fn bindgen_test_layout__dwg_GEODATA_meshpt() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_GEODATA_meshpt> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_GEODATA_meshpt>(),
        32usize,
        concat!("Size of: ", stringify!(_dwg_GEODATA_meshpt))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_GEODATA_meshpt>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_GEODATA_meshpt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).source_pt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_GEODATA_meshpt),
            "::",
            stringify!(source_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dest_pt) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_GEODATA_meshpt),
            "::",
            stringify!(dest_pt)
        )
    );
}
#[doc = "Class GEODATA (varies)\nR2009+"]
pub type Dwg_GEODATA_meshpt = _dwg_GEODATA_meshpt;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_GEODATA_meshface {
    pub face1: BITCODE_BL,
    pub face2: BITCODE_BL,
    pub face3: BITCODE_BL,
}
#[test]
fn bindgen_test_layout__dwg_GEODATA_meshface() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_GEODATA_meshface> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_GEODATA_meshface>(),
        12usize,
        concat!("Size of: ", stringify!(_dwg_GEODATA_meshface))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_GEODATA_meshface>(),
        4usize,
        concat!("Alignment of ", stringify!(_dwg_GEODATA_meshface))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).face1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_GEODATA_meshface),
            "::",
            stringify!(face1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).face2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_GEODATA_meshface),
            "::",
            stringify!(face2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).face3) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_GEODATA_meshface),
            "::",
            stringify!(face3)
        )
    );
}
pub type Dwg_GEODATA_meshface = _dwg_GEODATA_meshface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_GEODATA {
    pub parent: *mut _dwg_object_object,
    pub class_version: BITCODE_BL,
    pub host_block: BITCODE_H,
    pub coord_type: BITCODE_BS,
    pub design_pt: BITCODE_3BD,
    pub ref_pt: BITCODE_3BD,
    pub obs_pt: BITCODE_3BD,
    pub scale_vec: BITCODE_3BD,
    pub unit_scale_horiz: BITCODE_BD,
    pub units_value_horiz: BITCODE_BL,
    pub unit_scale_vert: BITCODE_BD,
    pub units_value_vert: BITCODE_BL,
    pub up_dir: BITCODE_3BD,
    pub north_dir: BITCODE_2RD,
    pub scale_est: BITCODE_BL,
    pub user_scale_factor: BITCODE_BD,
    pub do_sea_level_corr: BITCODE_B,
    pub sea_level_elev: BITCODE_BD,
    pub coord_proj_radius: BITCODE_BD,
    pub coord_system_def: BITCODE_TV,
    pub geo_rss_tag: BITCODE_TV,
    pub coord_system_datum: BITCODE_TV,
    pub coord_system_wkt: BITCODE_TV,
    pub observation_from_tag: BITCODE_TV,
    pub observation_to_tag: BITCODE_TV,
    pub observation_coverage_tag: BITCODE_TV,
    pub num_geomesh_pts: BITCODE_BL,
    pub geomesh_pts: *mut Dwg_GEODATA_meshpt,
    pub num_geomesh_faces: BITCODE_BL,
    pub geomesh_faces: *mut Dwg_GEODATA_meshface,
    pub has_civil_data: BITCODE_B,
    pub obsolete_false: BITCODE_B,
    pub ref_pt2d: BITCODE_2RD,
    pub zero1: BITCODE_3BD,
    pub zero2: BITCODE_3BD,
    pub unknown1: BITCODE_BL,
    pub unknown2: BITCODE_BL,
    pub unknown_b: BITCODE_B,
    pub north_dir_angle_deg: BITCODE_BD,
    pub north_dir_angle_rad: BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_object_GEODATA() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_GEODATA> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_GEODATA>(),
        432usize,
        concat!("Size of: ", stringify!(_dwg_object_GEODATA))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_GEODATA>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_GEODATA))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEODATA),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEODATA),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).host_block) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEODATA),
            "::",
            stringify!(host_block)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coord_type) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEODATA),
            "::",
            stringify!(coord_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).design_pt) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEODATA),
            "::",
            stringify!(design_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_pt) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEODATA),
            "::",
            stringify!(ref_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).obs_pt) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEODATA),
            "::",
            stringify!(obs_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale_vec) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEODATA),
            "::",
            stringify!(scale_vec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unit_scale_horiz) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEODATA),
            "::",
            stringify!(unit_scale_horiz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).units_value_horiz) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEODATA),
            "::",
            stringify!(units_value_horiz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unit_scale_vert) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEODATA),
            "::",
            stringify!(unit_scale_vert)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).units_value_vert) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEODATA),
            "::",
            stringify!(units_value_vert)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).up_dir) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEODATA),
            "::",
            stringify!(up_dir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).north_dir) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEODATA),
            "::",
            stringify!(north_dir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale_est) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEODATA),
            "::",
            stringify!(scale_est)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_scale_factor) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEODATA),
            "::",
            stringify!(user_scale_factor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_sea_level_corr) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEODATA),
            "::",
            stringify!(do_sea_level_corr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sea_level_elev) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEODATA),
            "::",
            stringify!(sea_level_elev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coord_proj_radius) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEODATA),
            "::",
            stringify!(coord_proj_radius)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coord_system_def) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEODATA),
            "::",
            stringify!(coord_system_def)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geo_rss_tag) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEODATA),
            "::",
            stringify!(geo_rss_tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coord_system_datum) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEODATA),
            "::",
            stringify!(coord_system_datum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coord_system_wkt) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEODATA),
            "::",
            stringify!(coord_system_wkt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).observation_from_tag) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEODATA),
            "::",
            stringify!(observation_from_tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).observation_to_tag) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEODATA),
            "::",
            stringify!(observation_to_tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).observation_coverage_tag) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEODATA),
            "::",
            stringify!(observation_coverage_tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_geomesh_pts) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEODATA),
            "::",
            stringify!(num_geomesh_pts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geomesh_pts) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEODATA),
            "::",
            stringify!(geomesh_pts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_geomesh_faces) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEODATA),
            "::",
            stringify!(num_geomesh_faces)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geomesh_faces) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEODATA),
            "::",
            stringify!(geomesh_faces)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_civil_data) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEODATA),
            "::",
            stringify!(has_civil_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).obsolete_false) as usize - ptr as usize },
        329usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEODATA),
            "::",
            stringify!(obsolete_false)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_pt2d) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEODATA),
            "::",
            stringify!(ref_pt2d)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zero1) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEODATA),
            "::",
            stringify!(zero1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zero2) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEODATA),
            "::",
            stringify!(zero2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown1) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEODATA),
            "::",
            stringify!(unknown1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown2) as usize - ptr as usize },
        404usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEODATA),
            "::",
            stringify!(unknown2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_b) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEODATA),
            "::",
            stringify!(unknown_b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).north_dir_angle_deg) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEODATA),
            "::",
            stringify!(north_dir_angle_deg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).north_dir_angle_rad) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEODATA),
            "::",
            stringify!(north_dir_angle_rad)
        )
    );
}
pub type Dwg_Object_GEODATA = _dwg_object_GEODATA;
#[doc = "Class IDBUFFER (varies)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_IDBUFFER {
    pub parent: *mut _dwg_object_object,
    pub unknown: BITCODE_RC,
    pub num_obj_ids: BITCODE_BL,
    pub obj_ids: *mut BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_object_IDBUFFER() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_IDBUFFER> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_IDBUFFER>(),
        24usize,
        concat!("Size of: ", stringify!(_dwg_object_IDBUFFER))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_IDBUFFER>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_IDBUFFER))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_IDBUFFER),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_IDBUFFER),
            "::",
            stringify!(unknown)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_obj_ids) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_IDBUFFER),
            "::",
            stringify!(num_obj_ids)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).obj_ids) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_IDBUFFER),
            "::",
            stringify!(obj_ids)
        )
    );
}
#[doc = "Class IDBUFFER (varies)"]
pub type Dwg_Object_IDBUFFER = _dwg_object_IDBUFFER;
#[doc = "Classes for IMAGE (varies)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_IMAGE {
    pub parent: *mut _dwg_object_entity,
    pub class_version: BITCODE_BL,
    pub pt0: BITCODE_3BD,
    pub uvec: BITCODE_3BD,
    pub vvec: BITCODE_3BD,
    #[doc = "< DXF 13/23; width, height in pixel"]
    pub size: BITCODE_2RD,
    pub display_props: BITCODE_BS,
    pub clipping: BITCODE_B,
    pub brightness: BITCODE_RC,
    pub contrast: BITCODE_RC,
    pub fade: BITCODE_RC,
    pub clip_mode: BITCODE_B,
    pub clip_boundary_type: BITCODE_BS,
    pub num_clip_verts: BITCODE_BL,
    pub clip_verts: *mut BITCODE_2RD,
    pub imagedef: BITCODE_H,
    pub imagedefreactor: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_entity_IMAGE() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_IMAGE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_IMAGE>(),
        144usize,
        concat!("Size of: ", stringify!(_dwg_entity_IMAGE))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_IMAGE>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_IMAGE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_IMAGE),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_IMAGE),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt0) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_IMAGE),
            "::",
            stringify!(pt0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uvec) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_IMAGE),
            "::",
            stringify!(uvec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vvec) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_IMAGE),
            "::",
            stringify!(vvec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_IMAGE),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).display_props) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_IMAGE),
            "::",
            stringify!(display_props)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clipping) as usize - ptr as usize },
        106usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_IMAGE),
            "::",
            stringify!(clipping)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).brightness) as usize - ptr as usize },
        107usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_IMAGE),
            "::",
            stringify!(brightness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).contrast) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_IMAGE),
            "::",
            stringify!(contrast)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fade) as usize - ptr as usize },
        109usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_IMAGE),
            "::",
            stringify!(fade)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clip_mode) as usize - ptr as usize },
        110usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_IMAGE),
            "::",
            stringify!(clip_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clip_boundary_type) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_IMAGE),
            "::",
            stringify!(clip_boundary_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_clip_verts) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_IMAGE),
            "::",
            stringify!(num_clip_verts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clip_verts) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_IMAGE),
            "::",
            stringify!(clip_verts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imagedef) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_IMAGE),
            "::",
            stringify!(imagedef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imagedefreactor) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_IMAGE),
            "::",
            stringify!(imagedefreactor)
        )
    );
}
#[doc = "Classes for IMAGE (varies)"]
pub type Dwg_Entity_IMAGE = _dwg_entity_IMAGE;
#[doc = "Class IMAGEDEF (varies)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_IMAGEDEF {
    pub parent: *mut _dwg_object_object,
    pub class_version: BITCODE_BL,
    pub image_size: BITCODE_2RD,
    pub file_path: BITCODE_TV,
    pub is_loaded: BITCODE_B,
    pub resunits: BITCODE_RC,
    pub pixel_size: BITCODE_2RD,
}
#[test]
fn bindgen_test_layout__dwg_object_IMAGEDEF() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_IMAGEDEF> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_IMAGEDEF>(),
        64usize,
        concat!("Size of: ", stringify!(_dwg_object_IMAGEDEF))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_IMAGEDEF>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_IMAGEDEF))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_IMAGEDEF),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_IMAGEDEF),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_IMAGEDEF),
            "::",
            stringify!(image_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file_path) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_IMAGEDEF),
            "::",
            stringify!(file_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_loaded) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_IMAGEDEF),
            "::",
            stringify!(is_loaded)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resunits) as usize - ptr as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_IMAGEDEF),
            "::",
            stringify!(resunits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pixel_size) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_IMAGEDEF),
            "::",
            stringify!(pixel_size)
        )
    );
}
#[doc = "Class IMAGEDEF (varies)"]
pub type Dwg_Object_IMAGEDEF = _dwg_object_IMAGEDEF;
#[doc = "Class IMAGEDEF_REACTOR (varies)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_IMAGEDEF_REACTOR {
    pub parent: *mut _dwg_object_object,
    pub class_version: BITCODE_BL,
}
#[test]
fn bindgen_test_layout__dwg_object_IMAGEDEF_REACTOR() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_IMAGEDEF_REACTOR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_IMAGEDEF_REACTOR>(),
        16usize,
        concat!("Size of: ", stringify!(_dwg_object_IMAGEDEF_REACTOR))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_IMAGEDEF_REACTOR>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_IMAGEDEF_REACTOR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_IMAGEDEF_REACTOR),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_IMAGEDEF_REACTOR),
            "::",
            stringify!(class_version)
        )
    );
}
#[doc = "Class IMAGEDEF_REACTOR (varies)"]
pub type Dwg_Object_IMAGEDEF_REACTOR = _dwg_object_IMAGEDEF_REACTOR;
#[doc = "Class INDEX (varies)\nRegistered as \"AutoCAD 2000\", but not seen in the wild."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_INDEX {
    pub parent: *mut _dwg_object_object,
    pub last_updated: BITCODE_TIMEBLL,
}
#[test]
fn bindgen_test_layout__dwg_object_INDEX() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_INDEX> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_INDEX>(),
        24usize,
        concat!("Size of: ", stringify!(_dwg_object_INDEX))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_INDEX>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_INDEX))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_INDEX),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_updated) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_INDEX),
            "::",
            stringify!(last_updated)
        )
    );
}
#[doc = "Class INDEX (varies)\nRegistered as \"AutoCAD 2000\", but not seen in the wild."]
pub type Dwg_Object_INDEX = _dwg_object_INDEX;
#[doc = "Class LAYER_INDEX (varies)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_LAYER_entry {
    pub parent: *mut _dwg_object_LAYER_INDEX,
    pub numlayers: BITCODE_BL,
    pub name: BITCODE_TV,
    pub handle: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_LAYER_entry() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_LAYER_entry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_LAYER_entry>(),
        32usize,
        concat!("Size of: ", stringify!(_dwg_LAYER_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_LAYER_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_LAYER_entry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LAYER_entry),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numlayers) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LAYER_entry),
            "::",
            stringify!(numlayers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LAYER_entry),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LAYER_entry),
            "::",
            stringify!(handle)
        )
    );
}
#[doc = "Class LAYER_INDEX (varies)"]
pub type Dwg_LAYER_entry = _dwg_LAYER_entry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_LAYER_INDEX {
    pub parent: *mut _dwg_object_object,
    pub last_updated: BITCODE_TIMEBLL,
    pub num_entries: BITCODE_BL,
    pub entries: *mut Dwg_LAYER_entry,
}
#[test]
fn bindgen_test_layout__dwg_object_LAYER_INDEX() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_LAYER_INDEX> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_LAYER_INDEX>(),
        40usize,
        concat!("Size of: ", stringify!(_dwg_object_LAYER_INDEX))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_LAYER_INDEX>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_LAYER_INDEX))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYER_INDEX),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_updated) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYER_INDEX),
            "::",
            stringify!(last_updated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_entries) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYER_INDEX),
            "::",
            stringify!(num_entries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entries) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYER_INDEX),
            "::",
            stringify!(entries)
        )
    );
}
pub type Dwg_Object_LAYER_INDEX = _dwg_object_LAYER_INDEX;
#[doc = "Class LWPOLYLINE (77 + varies)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_LWPOLYLINE {
    pub parent: *mut _dwg_object_entity,
    #[doc = "< DXF 70\n512 closed, 128 plinegen, 4 constwidth, 8 elevation, 2 thickness\n1 extrusion, 16 num_bulges, 1024 vertexidcount, 32 has_widths"]
    pub flag: BITCODE_BS,
    #[doc = "< DXF 43"]
    pub const_width: BITCODE_BD,
    #[doc = "< DXF 38"]
    pub elevation: BITCODE_BD,
    #[doc = "< DXF 39"]
    pub thickness: BITCODE_BD,
    #[doc = "< DXF 210"]
    pub extrusion: BITCODE_BE,
    #[doc = "< DXF 90"]
    pub num_points: BITCODE_BL,
    #[doc = "< DXF 10,20"]
    pub points: *mut BITCODE_2RD,
    pub num_bulges: BITCODE_BL,
    #[doc = "< DXF 42"]
    pub bulges: *mut BITCODE_BD,
    #[doc = "< r2010+, same as num_points"]
    pub num_vertexids: BITCODE_BL,
    #[doc = "< r2010+ DXF 91"]
    pub vertexids: *mut BITCODE_BL,
    pub num_widths: BITCODE_BL,
    #[doc = "< DXF 40,41"]
    pub widths: *mut Dwg_LWPOLYLINE_width,
}
#[test]
fn bindgen_test_layout__dwg_entity_LWPOLYLINE() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_LWPOLYLINE> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_LWPOLYLINE>(),
        128usize,
        concat!("Size of: ", stringify!(_dwg_entity_LWPOLYLINE))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_LWPOLYLINE>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_LWPOLYLINE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LWPOLYLINE),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LWPOLYLINE),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).const_width) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LWPOLYLINE),
            "::",
            stringify!(const_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elevation) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LWPOLYLINE),
            "::",
            stringify!(elevation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thickness) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LWPOLYLINE),
            "::",
            stringify!(thickness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extrusion) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LWPOLYLINE),
            "::",
            stringify!(extrusion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_points) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LWPOLYLINE),
            "::",
            stringify!(num_points)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).points) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LWPOLYLINE),
            "::",
            stringify!(points)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_bulges) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LWPOLYLINE),
            "::",
            stringify!(num_bulges)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bulges) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LWPOLYLINE),
            "::",
            stringify!(bulges)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_vertexids) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LWPOLYLINE),
            "::",
            stringify!(num_vertexids)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexids) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LWPOLYLINE),
            "::",
            stringify!(vertexids)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_widths) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LWPOLYLINE),
            "::",
            stringify!(num_widths)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).widths) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LWPOLYLINE),
            "::",
            stringify!(widths)
        )
    );
}
#[doc = "Class LWPOLYLINE (77 + varies)"]
pub type Dwg_Entity_LWPOLYLINE = _dwg_entity_LWPOLYLINE;
#[doc = "Class RASTERVARIABLES (varies)\n(used in conjunction with IMAGE entities)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_RASTERVARIABLES {
    pub parent: *mut _dwg_object_object,
    pub class_version: BITCODE_BL,
    pub image_frame: BITCODE_BS,
    pub image_quality: BITCODE_BS,
    pub units: BITCODE_BS,
}
#[test]
fn bindgen_test_layout__dwg_object_RASTERVARIABLES() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_RASTERVARIABLES> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_RASTERVARIABLES>(),
        24usize,
        concat!("Size of: ", stringify!(_dwg_object_RASTERVARIABLES))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_RASTERVARIABLES>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_RASTERVARIABLES))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RASTERVARIABLES),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RASTERVARIABLES),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image_frame) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RASTERVARIABLES),
            "::",
            stringify!(image_frame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image_quality) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RASTERVARIABLES),
            "::",
            stringify!(image_quality)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).units) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RASTERVARIABLES),
            "::",
            stringify!(units)
        )
    );
}
#[doc = "Class RASTERVARIABLES (varies)\n(used in conjunction with IMAGE entities)"]
pub type Dwg_Object_RASTERVARIABLES = _dwg_object_RASTERVARIABLES;
#[doc = "Object SCALE (varies)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_SCALE {
    pub parent: *mut _dwg_object_object,
    pub flag: BITCODE_BS,
    pub name: BITCODE_TV,
    pub paper_units: BITCODE_BD,
    pub drawing_units: BITCODE_BD,
    pub is_unit_scale: BITCODE_B,
}
#[test]
fn bindgen_test_layout__dwg_object_SCALE() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_SCALE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_SCALE>(),
        48usize,
        concat!("Size of: ", stringify!(_dwg_object_SCALE))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_SCALE>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_SCALE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SCALE),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SCALE),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SCALE),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paper_units) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SCALE),
            "::",
            stringify!(paper_units)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drawing_units) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SCALE),
            "::",
            stringify!(drawing_units)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_unit_scale) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SCALE),
            "::",
            stringify!(is_unit_scale)
        )
    );
}
#[doc = "Object SCALE (varies)"]
pub type Dwg_Object_SCALE = _dwg_object_SCALE;
#[doc = "Class SORTENTSTABLE (varies)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_SORTENTSTABLE {
    pub parent: *mut _dwg_object_object,
    pub num_ents: BITCODE_BL,
    pub sort_ents: *mut BITCODE_H,
    pub block_owner: BITCODE_H,
    pub ents: *mut BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_object_SORTENTSTABLE() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_SORTENTSTABLE> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_SORTENTSTABLE>(),
        40usize,
        concat!("Size of: ", stringify!(_dwg_object_SORTENTSTABLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_SORTENTSTABLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_SORTENTSTABLE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SORTENTSTABLE),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_ents) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SORTENTSTABLE),
            "::",
            stringify!(num_ents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sort_ents) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SORTENTSTABLE),
            "::",
            stringify!(sort_ents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block_owner) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SORTENTSTABLE),
            "::",
            stringify!(block_owner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ents) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SORTENTSTABLE),
            "::",
            stringify!(ents)
        )
    );
}
#[doc = "Class SORTENTSTABLE (varies)"]
pub type Dwg_Object_SORTENTSTABLE = _dwg_object_SORTENTSTABLE;
#[doc = "Class SPATIAL_FILTER (varies)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_SPATIAL_FILTER {
    pub parent: *mut _dwg_object_object,
    pub num_clip_verts: BITCODE_BS,
    pub clip_verts: *mut BITCODE_2RD,
    pub extrusion: BITCODE_BE,
    pub origin: BITCODE_3BD,
    pub display_boundary_on: BITCODE_BS,
    pub front_clip_on: BITCODE_BS,
    pub front_clip_z: BITCODE_BD,
    pub back_clip_on: BITCODE_BS,
    pub back_clip_z: BITCODE_BD,
    pub inverse_transform: *mut BITCODE_BD,
    pub transform: *mut BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_object_SPATIAL_FILTER() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_SPATIAL_FILTER> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_SPATIAL_FILTER>(),
        120usize,
        concat!("Size of: ", stringify!(_dwg_object_SPATIAL_FILTER))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_SPATIAL_FILTER>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_SPATIAL_FILTER))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SPATIAL_FILTER),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_clip_verts) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SPATIAL_FILTER),
            "::",
            stringify!(num_clip_verts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clip_verts) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SPATIAL_FILTER),
            "::",
            stringify!(clip_verts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extrusion) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SPATIAL_FILTER),
            "::",
            stringify!(extrusion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).origin) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SPATIAL_FILTER),
            "::",
            stringify!(origin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).display_boundary_on) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SPATIAL_FILTER),
            "::",
            stringify!(display_boundary_on)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).front_clip_on) as usize - ptr as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SPATIAL_FILTER),
            "::",
            stringify!(front_clip_on)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).front_clip_z) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SPATIAL_FILTER),
            "::",
            stringify!(front_clip_z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).back_clip_on) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SPATIAL_FILTER),
            "::",
            stringify!(back_clip_on)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).back_clip_z) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SPATIAL_FILTER),
            "::",
            stringify!(back_clip_z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inverse_transform) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SPATIAL_FILTER),
            "::",
            stringify!(inverse_transform)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transform) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SPATIAL_FILTER),
            "::",
            stringify!(transform)
        )
    );
}
#[doc = "Class SPATIAL_FILTER (varies)"]
pub type Dwg_Object_SPATIAL_FILTER = _dwg_object_SPATIAL_FILTER;
#[doc = "Class SPATIAL_INDEX (varies)\nODA only covers the AcDbFilter class, but misses the rest."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_SPATIAL_INDEX {
    pub parent: *mut _dwg_object_object,
    pub last_updated: BITCODE_TIMEBLL,
    pub num1: BITCODE_BD,
    pub num2: BITCODE_BD,
    pub num3: BITCODE_BD,
    pub num4: BITCODE_BD,
    pub num5: BITCODE_BD,
    pub num6: BITCODE_BD,
    pub num_hdls: BITCODE_BL,
    pub hdls: *mut BITCODE_H,
    pub bindata_size: BITCODE_BL,
    pub bindata: BITCODE_TF,
}
#[test]
fn bindgen_test_layout__dwg_object_SPATIAL_INDEX() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_SPATIAL_INDEX> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_SPATIAL_INDEX>(),
        104usize,
        concat!("Size of: ", stringify!(_dwg_object_SPATIAL_INDEX))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_SPATIAL_INDEX>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_SPATIAL_INDEX))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SPATIAL_INDEX),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_updated) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SPATIAL_INDEX),
            "::",
            stringify!(last_updated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num1) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SPATIAL_INDEX),
            "::",
            stringify!(num1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num2) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SPATIAL_INDEX),
            "::",
            stringify!(num2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num3) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SPATIAL_INDEX),
            "::",
            stringify!(num3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num4) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SPATIAL_INDEX),
            "::",
            stringify!(num4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num5) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SPATIAL_INDEX),
            "::",
            stringify!(num5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num6) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SPATIAL_INDEX),
            "::",
            stringify!(num6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_hdls) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SPATIAL_INDEX),
            "::",
            stringify!(num_hdls)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdls) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SPATIAL_INDEX),
            "::",
            stringify!(hdls)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bindata_size) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SPATIAL_INDEX),
            "::",
            stringify!(bindata_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bindata) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SPATIAL_INDEX),
            "::",
            stringify!(bindata)
        )
    );
}
#[doc = "Class SPATIAL_INDEX (varies)\nODA only covers the AcDbFilter class, but misses the rest."]
pub type Dwg_Object_SPATIAL_INDEX = _dwg_object_SPATIAL_INDEX;
#[doc = "WIPEOUT (varies, 504)\nR2000+, undocumented = IMAGE layover"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_WIPEOUT {
    pub parent: *mut _dwg_object_entity,
    pub class_version: BITCODE_BL,
    pub pt0: BITCODE_3BD,
    pub uvec: BITCODE_3BD,
    pub vvec: BITCODE_3BD,
    pub size: BITCODE_2RD,
    pub display_props: BITCODE_BS,
    pub clipping: BITCODE_B,
    pub brightness: BITCODE_RC,
    pub contrast: BITCODE_RC,
    pub fade: BITCODE_RC,
    pub clip_mode: BITCODE_B,
    pub clip_boundary_type: BITCODE_BS,
    pub num_clip_verts: BITCODE_BL,
    pub clip_verts: *mut BITCODE_2RD,
    pub imagedef: BITCODE_H,
    pub imagedefreactor: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_entity_WIPEOUT() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_WIPEOUT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_WIPEOUT>(),
        144usize,
        concat!("Size of: ", stringify!(_dwg_entity_WIPEOUT))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_WIPEOUT>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_WIPEOUT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_WIPEOUT),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_WIPEOUT),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt0) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_WIPEOUT),
            "::",
            stringify!(pt0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uvec) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_WIPEOUT),
            "::",
            stringify!(uvec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vvec) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_WIPEOUT),
            "::",
            stringify!(vvec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_WIPEOUT),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).display_props) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_WIPEOUT),
            "::",
            stringify!(display_props)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clipping) as usize - ptr as usize },
        106usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_WIPEOUT),
            "::",
            stringify!(clipping)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).brightness) as usize - ptr as usize },
        107usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_WIPEOUT),
            "::",
            stringify!(brightness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).contrast) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_WIPEOUT),
            "::",
            stringify!(contrast)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fade) as usize - ptr as usize },
        109usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_WIPEOUT),
            "::",
            stringify!(fade)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clip_mode) as usize - ptr as usize },
        110usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_WIPEOUT),
            "::",
            stringify!(clip_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clip_boundary_type) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_WIPEOUT),
            "::",
            stringify!(clip_boundary_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_clip_verts) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_WIPEOUT),
            "::",
            stringify!(num_clip_verts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clip_verts) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_WIPEOUT),
            "::",
            stringify!(clip_verts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imagedef) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_WIPEOUT),
            "::",
            stringify!(imagedef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imagedefreactor) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_WIPEOUT),
            "::",
            stringify!(imagedefreactor)
        )
    );
}
#[doc = "WIPEOUT (varies, 504)\nR2000+, undocumented = IMAGE layover"]
pub type Dwg_Entity_WIPEOUT = _dwg_entity_WIPEOUT;
#[doc = "Class WIPEOUTVARIABLES (varies, 505)\nR2000+, Object bitsize: 96"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_WIPEOUTVARIABLES {
    pub parent: *mut _dwg_object_object,
    #[doc = "< DXF 70"]
    pub display_frame: BITCODE_BS,
}
#[test]
fn bindgen_test_layout__dwg_object_WIPEOUTVARIABLES() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_WIPEOUTVARIABLES> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_WIPEOUTVARIABLES>(),
        16usize,
        concat!("Size of: ", stringify!(_dwg_object_WIPEOUTVARIABLES))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_WIPEOUTVARIABLES>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_WIPEOUTVARIABLES))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_WIPEOUTVARIABLES),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).display_frame) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_WIPEOUTVARIABLES),
            "::",
            stringify!(display_frame)
        )
    );
}
#[doc = "Class WIPEOUTVARIABLES (varies, 505)\nR2000+, Object bitsize: 96"]
pub type Dwg_Object_WIPEOUTVARIABLES = _dwg_object_WIPEOUTVARIABLES;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_SECTIONOBJECT {
    pub parent: *mut _dwg_object_entity,
    #[doc = "< DXF 90. Plane=1, Boundary=2, Volume=4"]
    pub state: BITCODE_BL,
    #[doc = "< DXF 91. hitflags: sectionline=1, sectionlinetop=2, sectionlinebottom=4,\nbackline=8, backlinetop=16, backlinebottom=32, verticallinetop=64,\nverticallinebottom=128.\nheightflags: HeightAboveSectionLine=1, HeightBelowSectionLine=2"]
    pub flags: BITCODE_BL,
    #[doc = "< DXF 1"]
    pub name: BITCODE_TV,
    #[doc = "< DXF 10. normal to the segment line, on the plane"]
    pub vert_dir: BITCODE_3BD,
    #[doc = "< DXF 40"]
    pub top_height: BITCODE_BD,
    #[doc = "< DXF 41"]
    pub bottom_height: BITCODE_BD,
    #[doc = "< DXF 70"]
    pub indicator_alpha: BITCODE_BS,
    #[doc = "< DXF 62/420 (but documented as 63/411)"]
    pub indicator_color: BITCODE_CMC,
    #[doc = "< DXF 92"]
    pub num_verts: BITCODE_BL,
    #[doc = "< DXF 11"]
    pub verts: *mut BITCODE_3BD,
    #[doc = "< DXF 93"]
    pub num_blverts: BITCODE_BL,
    #[doc = "< DXF 12"]
    pub blverts: *mut BITCODE_3BD,
    #[doc = "< DXF 360"]
    pub section_settings: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_entity_SECTIONOBJECT() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_SECTIONOBJECT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_SECTIONOBJECT>(),
        160usize,
        concat!("Size of: ", stringify!(_dwg_entity_SECTIONOBJECT))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_SECTIONOBJECT>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_SECTIONOBJECT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SECTIONOBJECT),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SECTIONOBJECT),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SECTIONOBJECT),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SECTIONOBJECT),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vert_dir) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SECTIONOBJECT),
            "::",
            stringify!(vert_dir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).top_height) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SECTIONOBJECT),
            "::",
            stringify!(top_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bottom_height) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SECTIONOBJECT),
            "::",
            stringify!(bottom_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indicator_alpha) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SECTIONOBJECT),
            "::",
            stringify!(indicator_alpha)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indicator_color) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SECTIONOBJECT),
            "::",
            stringify!(indicator_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_verts) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SECTIONOBJECT),
            "::",
            stringify!(num_verts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).verts) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SECTIONOBJECT),
            "::",
            stringify!(verts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_blverts) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SECTIONOBJECT),
            "::",
            stringify!(num_blverts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blverts) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SECTIONOBJECT),
            "::",
            stringify!(blverts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).section_settings) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SECTIONOBJECT),
            "::",
            stringify!(section_settings)
        )
    );
}
pub type Dwg_Entity_SECTIONOBJECT = _dwg_entity_SECTIONOBJECT;
#[doc = "Unstable\nClass VISUALSTYLE (varies)\nR2007+\n\n32 types, with 3 categories: Face, Edge, Display, plus 58 props r2013+"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_VISUALSTYLE {
    pub parent: *mut _dwg_object_object,
    #[doc = "< DXF 2"]
    pub description: BITCODE_TV,
    #[doc = "< DXF 70 enum 0-32: (kFlat-kEmptyStyle acgivisualstyle.h)"]
    pub style_type: BITCODE_BL,
    #[doc = "< DXF 177, r2010+ ? required on has_xdata"]
    pub ext_lighting_model: BITCODE_BS,
    #[doc = "< DXF 291, has internal_use_only flags"]
    pub internal_only: BITCODE_B,
    #[doc = "< DXF 71 0:Invisible 1:Visible 2:Phong 3:Gooch"]
    pub face_lighting_model: BITCODE_BL,
    #[doc = "< DXF 176 r2010+"]
    pub face_lighting_model_int: BITCODE_BS,
    #[doc = "< DXF 72 0:No lighting 1:Per face 2:Per vertex"]
    pub face_lighting_quality: BITCODE_BL,
    #[doc = "< DXF 176 r2010+"]
    pub face_lighting_quality_int: BITCODE_BS,
    #[doc = "< DXF 73 0 = No color\n1 = Object color\n2 = Background color\n3 = Custom color\n4 = Mono color\n5 = Tinted\n6 = Desaturated"]
    pub face_color_mode: BITCODE_BL,
    #[doc = "< DXF 176 r2010+"]
    pub face_color_mode_int: BITCODE_BS,
    #[doc = "< DXF 40"]
    pub face_opacity: BITCODE_BD,
    #[doc = "< DXF 176 r2010+"]
    pub face_opacity_int: BITCODE_BS,
    #[doc = "< DXF 41"]
    pub face_specular: BITCODE_BD,
    #[doc = "< DXF 176 r2010+"]
    pub face_specular_int: BITCODE_BS,
    #[doc = "< DXF 90 0:No modifiers 1:Opacity 2:Specular"]
    pub face_modifier: BITCODE_BL,
    #[doc = "< DXF 176 r2010+"]
    pub face_modifier_int: BITCODE_BS,
    #[doc = "< DXF 63 + 421"]
    pub face_mono_color: BITCODE_CMC,
    #[doc = "< DXF 176 r2010+"]
    pub face_mono_color_int: BITCODE_BS,
    #[doc = "< DXF 74 0:No edges 1:Isolines 2:Facet edges"]
    pub edge_model: BITCODE_BS,
    #[doc = "< DXF 176 r2010+"]
    pub edge_model_int: BITCODE_BS,
    #[doc = "< DXF 91"]
    pub edge_style: BITCODE_BL,
    #[doc = "< DXF 176 r2010+"]
    pub edge_style_int: BITCODE_BS,
    #[doc = "< DXF 64"]
    pub edge_intersection_color: BITCODE_CMC,
    #[doc = "< DXF 176 r2010+"]
    pub edge_intersection_color_int: BITCODE_BS,
    #[doc = "< DXF 65"]
    pub edge_obscured_color: BITCODE_CMC,
    #[doc = "< DXF 176 r2010+"]
    pub edge_obscured_color_int: BITCODE_BS,
    #[doc = "< DXF 75"]
    pub edge_obscured_ltype: BITCODE_BL,
    #[doc = "< DXF 176 r2010+"]
    pub edge_obscured_ltype_int: BITCODE_BS,
    #[doc = "< DXF 175"]
    pub edge_intersection_ltype: BITCODE_BL,
    #[doc = "< DXF 176 r2010+"]
    pub edge_intersection_ltype_int: BITCODE_BS,
    #[doc = "< DXF 42"]
    pub edge_crease_angle: BITCODE_BD,
    #[doc = "< DXF 176 r2010+"]
    pub edge_crease_angle_int: BITCODE_BS,
    #[doc = "< DXF 92"]
    pub edge_modifier: BITCODE_BL,
    #[doc = "< DXF 176 r2010+"]
    pub edge_modifier_int: BITCODE_BS,
    #[doc = "< DXF 66"]
    pub edge_color: BITCODE_CMC,
    #[doc = "< DXF 176 r2010+"]
    pub edge_color_int: BITCODE_BS,
    #[doc = "< DXF 43"]
    pub edge_opacity: BITCODE_BD,
    #[doc = "< DXF 176 r2010+"]
    pub edge_opacity_int: BITCODE_BS,
    #[doc = "< DXF 76"]
    pub edge_width: BITCODE_BL,
    #[doc = "< DXF 176 r2010+"]
    pub edge_width_int: BITCODE_BS,
    #[doc = "< DXF 77"]
    pub edge_overhang: BITCODE_BL,
    #[doc = "< DXF 176 r2010+"]
    pub edge_overhang_int: BITCODE_BS,
    #[doc = "< DXF 78"]
    pub edge_jitter: BITCODE_BL,
    #[doc = "< DXF 176 r2010+"]
    pub edge_jitter_int: BITCODE_BS,
    #[doc = "< DXF 67"]
    pub edge_silhouette_color: BITCODE_CMC,
    #[doc = "< DXF 176 r2010+"]
    pub edge_silhouette_color_int: BITCODE_BS,
    #[doc = "< DXF 79"]
    pub edge_silhouette_width: BITCODE_BL,
    #[doc = "< DXF 176 r2010+"]
    pub edge_silhouette_width_int: BITCODE_BS,
    #[doc = "< DXF 170"]
    pub edge_halo_gap: BITCODE_BL,
    #[doc = "< DXF 176 r2010+"]
    pub edge_halo_gap_int: BITCODE_BS,
    #[doc = "< DXF 171"]
    pub edge_isolines: BITCODE_BL,
    #[doc = "< DXF 176 r2010+"]
    pub edge_isolines_int: BITCODE_BS,
    #[doc = "< DXF 290"]
    pub edge_do_hide_precision: BITCODE_B,
    #[doc = "< DXF 176 r2010+"]
    pub edge_do_hide_precision_int: BITCODE_BS,
    #[doc = "< DXF 174"]
    pub edge_style_apply: BITCODE_BL,
    #[doc = "< DXF 176 r2010+"]
    pub edge_style_apply_int: BITCODE_BS,
    #[doc = "< DXF 93 flags"]
    pub display_settings: BITCODE_BL,
    #[doc = "< DXF 176 r2010+"]
    pub display_settings_int: BITCODE_BS,
    #[doc = "< DXF 44 <=r2007"]
    pub display_brightness_bl: BITCODE_BLd,
    #[doc = "< DXF 44  r2010+"]
    pub display_brightness: BITCODE_BD,
    #[doc = "< DXF 176 r2010+"]
    pub display_brightness_int: BITCODE_BS,
    #[doc = "< DXF 173"]
    pub display_shadow_type: BITCODE_BL,
    #[doc = "< DXF 176 r2010+"]
    pub display_shadow_type_int: BITCODE_BS,
    #[doc = "< DXF 45 r2007-only 0.0"]
    pub bd2007_45: BITCODE_BD,
    #[doc = "< r2013+ version3 58x"]
    pub num_props: BITCODE_BS,
    pub b_prop1c: BITCODE_B,
    pub b_prop1c_int: BITCODE_BS,
    pub b_prop1d: BITCODE_B,
    pub b_prop1d_int: BITCODE_BS,
    pub b_prop1e: BITCODE_B,
    pub b_prop1e_int: BITCODE_BS,
    pub b_prop1f: BITCODE_B,
    pub b_prop1f_int: BITCODE_BS,
    pub b_prop20: BITCODE_B,
    pub b_prop20_int: BITCODE_BS,
    pub b_prop21: BITCODE_B,
    pub b_prop21_int: BITCODE_BS,
    pub b_prop22: BITCODE_B,
    pub b_prop22_int: BITCODE_BS,
    pub b_prop23: BITCODE_B,
    pub b_prop23_int: BITCODE_BS,
    pub b_prop24: BITCODE_B,
    pub b_prop24_int: BITCODE_BS,
    pub bl_prop25: BITCODE_BL,
    pub bl_prop25_int: BITCODE_BS,
    pub bd_prop26: BITCODE_BD,
    pub bd_prop26_int: BITCODE_BS,
    pub bd_prop27: BITCODE_BD,
    pub bd_prop27_int: BITCODE_BS,
    pub bl_prop28: BITCODE_BL,
    pub bl_prop28_int: BITCODE_BS,
    pub c_prop29: BITCODE_CMC,
    pub c_prop29_int: BITCODE_BS,
    pub bl_prop2a: BITCODE_BL,
    pub bl_prop2a_int: BITCODE_BS,
    pub bl_prop2b: BITCODE_BL,
    pub bl_prop2b_int: BITCODE_BS,
    pub c_prop2c: BITCODE_CMC,
    pub c_prop2c_int: BITCODE_BS,
    pub b_prop2d: BITCODE_B,
    pub b_prop2d_int: BITCODE_BS,
    pub bl_prop2e: BITCODE_BL,
    pub bl_prop2e_int: BITCODE_BS,
    pub bl_prop2f: BITCODE_BL,
    pub bl_prop2f_int: BITCODE_BS,
    pub bl_prop30: BITCODE_BL,
    pub bl_prop30_int: BITCODE_BS,
    pub b_prop31: BITCODE_B,
    pub b_prop31_int: BITCODE_BS,
    pub bl_prop32: BITCODE_BL,
    pub bl_prop32_int: BITCODE_BS,
    pub c_prop33: BITCODE_CMC,
    pub c_prop33_int: BITCODE_BS,
    pub bd_prop34: BITCODE_BD,
    pub bd_prop34_int: BITCODE_BS,
    pub edge_wiggle: BITCODE_BL,
    pub edge_wiggle_int: BITCODE_BS,
    pub strokes: BITCODE_TV,
    pub strokes_int: BITCODE_BS,
    pub b_prop37: BITCODE_B,
    pub b_prop37_int: BITCODE_BS,
    pub bd_prop38: BITCODE_BD,
    pub bd_prop38_int: BITCODE_BS,
    pub bd_prop39: BITCODE_BD,
    pub bd_prop39_int: BITCODE_BS,
}
#[test]
fn bindgen_test_layout__dwg_object_VISUALSTYLE() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_VISUALSTYLE> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_VISUALSTYLE>(),
        920usize,
        concat!("Size of: ", stringify!(_dwg_object_VISUALSTYLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_VISUALSTYLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_VISUALSTYLE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).description) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).style_type) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(style_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ext_lighting_model) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(ext_lighting_model)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).internal_only) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(internal_only)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).face_lighting_model) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(face_lighting_model)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).face_lighting_model_int) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(face_lighting_model_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).face_lighting_quality) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(face_lighting_quality)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).face_lighting_quality_int) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(face_lighting_quality_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).face_color_mode) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(face_color_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).face_color_mode_int) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(face_color_mode_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).face_opacity) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(face_opacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).face_opacity_int) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(face_opacity_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).face_specular) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(face_specular)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).face_specular_int) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(face_specular_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).face_modifier) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(face_modifier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).face_modifier_int) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(face_modifier_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).face_mono_color) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(face_mono_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).face_mono_color_int) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(face_mono_color_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_model) as usize - ptr as usize },
        138usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(edge_model)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_model_int) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(edge_model_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_style) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(edge_style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_style_int) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(edge_style_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_intersection_color) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(edge_intersection_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_intersection_color_int) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(edge_intersection_color_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_obscured_color) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(edge_obscured_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_obscured_color_int) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(edge_obscured_color_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_obscured_ltype) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(edge_obscured_ltype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_obscured_ltype_int) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(edge_obscured_ltype_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_intersection_ltype) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(edge_intersection_ltype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_intersection_ltype_int) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(edge_intersection_ltype_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_crease_angle) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(edge_crease_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_crease_angle_int) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(edge_crease_angle_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_modifier) as usize - ptr as usize },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(edge_modifier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_modifier_int) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(edge_modifier_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_color) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(edge_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_color_int) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(edge_color_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_opacity) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(edge_opacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_opacity_int) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(edge_opacity_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_width) as usize - ptr as usize },
        372usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(edge_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_width_int) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(edge_width_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_overhang) as usize - ptr as usize },
        380usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(edge_overhang)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_overhang_int) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(edge_overhang_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_jitter) as usize - ptr as usize },
        388usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(edge_jitter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_jitter_int) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(edge_jitter_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_silhouette_color) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(edge_silhouette_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_silhouette_color_int) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(edge_silhouette_color_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_silhouette_width) as usize - ptr as usize },
        452usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(edge_silhouette_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_silhouette_width_int) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(edge_silhouette_width_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_halo_gap) as usize - ptr as usize },
        460usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(edge_halo_gap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_halo_gap_int) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(edge_halo_gap_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_isolines) as usize - ptr as usize },
        468usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(edge_isolines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_isolines_int) as usize - ptr as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(edge_isolines_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_do_hide_precision) as usize - ptr as usize },
        474usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(edge_do_hide_precision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_do_hide_precision_int) as usize - ptr as usize },
        476usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(edge_do_hide_precision_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_style_apply) as usize - ptr as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(edge_style_apply)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_style_apply_int) as usize - ptr as usize },
        484usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(edge_style_apply_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).display_settings) as usize - ptr as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(display_settings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).display_settings_int) as usize - ptr as usize },
        492usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(display_settings_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).display_brightness_bl) as usize - ptr as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(display_brightness_bl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).display_brightness) as usize - ptr as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(display_brightness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).display_brightness_int) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(display_brightness_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).display_shadow_type) as usize - ptr as usize },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(display_shadow_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).display_shadow_type_int) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(display_shadow_type_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bd2007_45) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(bd2007_45)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_props) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(num_props)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_prop1c) as usize - ptr as usize },
        538usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(b_prop1c)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_prop1c_int) as usize - ptr as usize },
        540usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(b_prop1c_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_prop1d) as usize - ptr as usize },
        542usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(b_prop1d)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_prop1d_int) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(b_prop1d_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_prop1e) as usize - ptr as usize },
        546usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(b_prop1e)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_prop1e_int) as usize - ptr as usize },
        548usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(b_prop1e_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_prop1f) as usize - ptr as usize },
        550usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(b_prop1f)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_prop1f_int) as usize - ptr as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(b_prop1f_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_prop20) as usize - ptr as usize },
        554usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(b_prop20)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_prop20_int) as usize - ptr as usize },
        556usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(b_prop20_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_prop21) as usize - ptr as usize },
        558usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(b_prop21)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_prop21_int) as usize - ptr as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(b_prop21_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_prop22) as usize - ptr as usize },
        562usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(b_prop22)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_prop22_int) as usize - ptr as usize },
        564usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(b_prop22_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_prop23) as usize - ptr as usize },
        566usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(b_prop23)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_prop23_int) as usize - ptr as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(b_prop23_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_prop24) as usize - ptr as usize },
        570usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(b_prop24)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_prop24_int) as usize - ptr as usize },
        572usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(b_prop24_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bl_prop25) as usize - ptr as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(bl_prop25)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bl_prop25_int) as usize - ptr as usize },
        580usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(bl_prop25_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bd_prop26) as usize - ptr as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(bd_prop26)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bd_prop26_int) as usize - ptr as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(bd_prop26_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bd_prop27) as usize - ptr as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(bd_prop27)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bd_prop27_int) as usize - ptr as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(bd_prop27_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bl_prop28) as usize - ptr as usize },
        612usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(bl_prop28)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bl_prop28_int) as usize - ptr as usize },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(bl_prop28_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_prop29) as usize - ptr as usize },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(c_prop29)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_prop29_int) as usize - ptr as usize },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(c_prop29_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bl_prop2a) as usize - ptr as usize },
        676usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(bl_prop2a)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bl_prop2a_int) as usize - ptr as usize },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(bl_prop2a_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bl_prop2b) as usize - ptr as usize },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(bl_prop2b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bl_prop2b_int) as usize - ptr as usize },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(bl_prop2b_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_prop2c) as usize - ptr as usize },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(c_prop2c)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_prop2c_int) as usize - ptr as usize },
        744usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(c_prop2c_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_prop2d) as usize - ptr as usize },
        746usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(b_prop2d)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_prop2d_int) as usize - ptr as usize },
        748usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(b_prop2d_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bl_prop2e) as usize - ptr as usize },
        752usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(bl_prop2e)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bl_prop2e_int) as usize - ptr as usize },
        756usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(bl_prop2e_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bl_prop2f) as usize - ptr as usize },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(bl_prop2f)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bl_prop2f_int) as usize - ptr as usize },
        764usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(bl_prop2f_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bl_prop30) as usize - ptr as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(bl_prop30)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bl_prop30_int) as usize - ptr as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(bl_prop30_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_prop31) as usize - ptr as usize },
        774usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(b_prop31)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_prop31_int) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(b_prop31_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bl_prop32) as usize - ptr as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(bl_prop32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bl_prop32_int) as usize - ptr as usize },
        784usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(bl_prop32_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_prop33) as usize - ptr as usize },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(c_prop33)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_prop33_int) as usize - ptr as usize },
        840usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(c_prop33_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bd_prop34) as usize - ptr as usize },
        848usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(bd_prop34)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bd_prop34_int) as usize - ptr as usize },
        856usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(bd_prop34_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_wiggle) as usize - ptr as usize },
        860usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(edge_wiggle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_wiggle_int) as usize - ptr as usize },
        864usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(edge_wiggle_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).strokes) as usize - ptr as usize },
        872usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(strokes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).strokes_int) as usize - ptr as usize },
        880usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(strokes_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_prop37) as usize - ptr as usize },
        882usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(b_prop37)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_prop37_int) as usize - ptr as usize },
        884usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(b_prop37_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bd_prop38) as usize - ptr as usize },
        888usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(bd_prop38)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bd_prop38_int) as usize - ptr as usize },
        896usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(bd_prop38_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bd_prop39) as usize - ptr as usize },
        904usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(bd_prop39)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bd_prop39_int) as usize - ptr as usize },
        912usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_VISUALSTYLE),
            "::",
            stringify!(bd_prop39_int)
        )
    );
}
#[doc = "Unstable\nClass VISUALSTYLE (varies)\nR2007+\n\n32 types, with 3 categories: Face, Edge, Display, plus 58 props r2013+"]
pub type Dwg_Object_VISUALSTYLE = _dwg_object_VISUALSTYLE;
#[doc = "Object LIGHTLIST (varies)\nR2010+"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_LIGHTLIST_light {
    pub parent: *mut _dwg_object_LIGHTLIST,
    pub name: BITCODE_TV,
    pub handle: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_LIGHTLIST_light() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_LIGHTLIST_light> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_LIGHTLIST_light>(),
        24usize,
        concat!("Size of: ", stringify!(_dwg_LIGHTLIST_light))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_LIGHTLIST_light>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_LIGHTLIST_light))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LIGHTLIST_light),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LIGHTLIST_light),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LIGHTLIST_light),
            "::",
            stringify!(handle)
        )
    );
}
#[doc = "Object LIGHTLIST (varies)\nR2010+"]
pub type Dwg_LIGHTLIST_light = _dwg_LIGHTLIST_light;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_LIGHTLIST {
    pub parent: *mut _dwg_object_object,
    pub class_version: BITCODE_BL,
    pub num_lights: BITCODE_BL,
    pub lights: *mut Dwg_LIGHTLIST_light,
}
#[test]
fn bindgen_test_layout__dwg_object_LIGHTLIST() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_LIGHTLIST> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_LIGHTLIST>(),
        24usize,
        concat!("Size of: ", stringify!(_dwg_object_LIGHTLIST))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_LIGHTLIST>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_LIGHTLIST))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LIGHTLIST),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LIGHTLIST),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_lights) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LIGHTLIST),
            "::",
            stringify!(num_lights)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lights) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LIGHTLIST),
            "::",
            stringify!(lights)
        )
    );
}
pub type Dwg_Object_LIGHTLIST = _dwg_object_LIGHTLIST;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_MATERIAL_color {
    pub parent: *mut _dwg_object_object,
    #[doc = "< 0 Use current color, 1 Override"]
    pub flag: BITCODE_RC,
    #[doc = "< 0.0 - 1.0"]
    pub factor: BITCODE_BD,
    pub rgb: BITCODE_BL,
}
#[test]
fn bindgen_test_layout__dwg_MATERIAL_color() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_MATERIAL_color> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_MATERIAL_color>(),
        32usize,
        concat!("Size of: ", stringify!(_dwg_MATERIAL_color))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_MATERIAL_color>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_MATERIAL_color))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MATERIAL_color),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MATERIAL_color),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).factor) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MATERIAL_color),
            "::",
            stringify!(factor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rgb) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MATERIAL_color),
            "::",
            stringify!(rgb)
        )
    );
}
pub type Dwg_MATERIAL_color = _dwg_MATERIAL_color;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_MATERIAL_mapper {
    pub parent: *mut _dwg_object_object,
    #[doc = "< DXF 42  def: 1.0"]
    pub blendfactor: BITCODE_BD,
    #[doc = "< DXF 43: 16x BD"]
    pub transmatrix: *mut BITCODE_BD,
    #[doc = "< DXF 3   if NULL no diffuse map"]
    pub filename: BITCODE_TV,
    pub color1: Dwg_MATERIAL_color,
    pub color2: Dwg_MATERIAL_color,
    #[doc = "< DXF 72  0 current, 1 image file (def), 2 2nd map?"]
    pub source: BITCODE_RC,
    #[doc = "< DXF 73  1 Planar (def), 2 Box, 3 Cylinder, 4 Sphere"]
    pub projection: BITCODE_RC,
    #[doc = "< DXF 74  1 = Tile (def), 2 = Crop, 3 = Clamp"]
    pub tiling: BITCODE_RC,
    #[doc = "< DXF 75  1 no, 2: scale to curr ent,\n4: w/ current block transform"]
    pub autotransform: BITCODE_RC,
    pub texturemode: BITCODE_BS,
}
#[test]
fn bindgen_test_layout__dwg_MATERIAL_mapper() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_MATERIAL_mapper> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_MATERIAL_mapper>(),
        104usize,
        concat!("Size of: ", stringify!(_dwg_MATERIAL_mapper))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_MATERIAL_mapper>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_MATERIAL_mapper))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MATERIAL_mapper),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blendfactor) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MATERIAL_mapper),
            "::",
            stringify!(blendfactor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transmatrix) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MATERIAL_mapper),
            "::",
            stringify!(transmatrix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filename) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MATERIAL_mapper),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color1) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MATERIAL_mapper),
            "::",
            stringify!(color1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color2) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MATERIAL_mapper),
            "::",
            stringify!(color2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).source) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MATERIAL_mapper),
            "::",
            stringify!(source)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).projection) as usize - ptr as usize },
        97usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MATERIAL_mapper),
            "::",
            stringify!(projection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tiling) as usize - ptr as usize },
        98usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MATERIAL_mapper),
            "::",
            stringify!(tiling)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).autotransform) as usize - ptr as usize },
        99usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MATERIAL_mapper),
            "::",
            stringify!(autotransform)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).texturemode) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MATERIAL_mapper),
            "::",
            stringify!(texturemode)
        )
    );
}
pub type Dwg_MATERIAL_mapper = _dwg_MATERIAL_mapper;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_MATERIAL_gentexture {
    pub parent: *mut _dwg_object_MATERIAL,
    pub genprocname: BITCODE_TV,
    pub material: *mut _dwg_object_MATERIAL,
}
#[test]
fn bindgen_test_layout__dwg_MATERIAL_gentexture() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_MATERIAL_gentexture> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_MATERIAL_gentexture>(),
        24usize,
        concat!("Size of: ", stringify!(_dwg_MATERIAL_gentexture))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_MATERIAL_gentexture>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_MATERIAL_gentexture))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MATERIAL_gentexture),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).genprocname) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MATERIAL_gentexture),
            "::",
            stringify!(genprocname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).material) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MATERIAL_gentexture),
            "::",
            stringify!(material)
        )
    );
}
pub type Dwg_MATERIAL_gentexture = _dwg_MATERIAL_gentexture;
#[doc = "Object MATERIAL (varies)\nAcad Naming: e.g. Materials/assetlibrary_base.fbm/shaders/AdskShaders.mi\nMaterials/assetlibrary_base.fbm/Mats/SolidGlass/Generic.xml"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_MATERIAL {
    pub parent: *mut _dwg_object_object,
    #[doc = "< DXF 1"]
    pub name: BITCODE_TV,
    #[doc = "< DXF 2 optional"]
    pub description: BITCODE_TV,
    #[doc = "< DXF 70, 40, 90"]
    pub ambient_color: Dwg_MATERIAL_color,
    #[doc = "< DXF 71, 41, 91"]
    pub diffuse_color: Dwg_MATERIAL_color,
    #[doc = "< DXF 42, 72, 3, 73, 74, 75, 43"]
    pub diffusemap: Dwg_MATERIAL_mapper,
    #[doc = "< DXF 44 def: 0.5"]
    pub specular_gloss_factor: BITCODE_BD,
    #[doc = "< DXF 76, 45, 92"]
    pub specular_color: Dwg_MATERIAL_color,
    #[doc = "< DXF 46, 77, 4, 78, 79, 170, 47"]
    pub specularmap: Dwg_MATERIAL_mapper,
    #[doc = "< DXF 48, 171, 6, 172, 173, 174, 49"]
    pub reflectionmap: Dwg_MATERIAL_mapper,
    #[doc = "< DXF 140 def: 1.0"]
    pub opacity_percent: BITCODE_BD,
    #[doc = "< DXF 141, 175, 7, 176, 177, 178, 142"]
    pub opacitymap: Dwg_MATERIAL_mapper,
    #[doc = "< DXF 143, 179, 8, 270, 271, 272, 144"]
    pub bumpmap: Dwg_MATERIAL_mapper,
    #[doc = "< DXF 145 def: 1.0"]
    pub refraction_index: BITCODE_BD,
    #[doc = "< DXF 146, 273, 9, 274, 275, 276, 147"]
    pub refractionmap: Dwg_MATERIAL_mapper,
    #[doc = "< DXF 460"]
    pub color_bleed_scale: BITCODE_BD,
    #[doc = "< DXF 461"]
    pub indirect_bump_scale: BITCODE_BD,
    #[doc = "< DXF 462"]
    pub reflectance_scale: BITCODE_BD,
    #[doc = "< DXF 463"]
    pub transmittance_scale: BITCODE_BD,
    #[doc = "< DXF 290"]
    pub two_sided_material: BITCODE_B,
    #[doc = "< DXF 464"]
    pub luminance: BITCODE_BD,
    #[doc = "< DXF 270"]
    pub luminance_mode: BITCODE_BS,
    #[doc = "< DXF 148"]
    pub translucence: BITCODE_BD,
    #[doc = "< DXF 149"]
    pub self_illumination: BITCODE_BD,
    #[doc = "< DXF 468"]
    pub reflectivity: BITCODE_BD,
    #[doc = "< DXF 93"]
    pub illumination_model: BITCODE_BL,
    #[doc = "< DXF 94"]
    pub channel_flags: BITCODE_BL,
    #[doc = "< DXF 282"]
    pub mode: BITCODE_BL,
    #[doc = "< DXF 300"]
    pub genprocname: BITCODE_TV,
    pub genproctype: BITCODE_BS,
    #[doc = "< DXF 291"]
    pub genprocvalbool: BITCODE_B,
    #[doc = "< DXF 271"]
    pub genprocvalint: BITCODE_BS,
    #[doc = "< DXF 469"]
    pub genprocvalreal: BITCODE_BD,
    #[doc = "< DXF 301"]
    pub genprocvaltext: BITCODE_TV,
    #[doc = "< DXF 62"]
    pub genprocvalcolor: BITCODE_CMC,
    #[doc = "< DXF 292"]
    pub genproctableend: BITCODE_B,
    pub num_gentextures: BITCODE_BS,
    pub gentextures: *mut Dwg_MATERIAL_gentexture,
}
#[test]
fn bindgen_test_layout__dwg_object_MATERIAL() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_MATERIAL> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_MATERIAL>(),
        960usize,
        concat!("Size of: ", stringify!(_dwg_object_MATERIAL))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_MATERIAL>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_MATERIAL))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MATERIAL),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MATERIAL),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).description) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MATERIAL),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ambient_color) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MATERIAL),
            "::",
            stringify!(ambient_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).diffuse_color) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MATERIAL),
            "::",
            stringify!(diffuse_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).diffusemap) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MATERIAL),
            "::",
            stringify!(diffusemap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).specular_gloss_factor) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MATERIAL),
            "::",
            stringify!(specular_gloss_factor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).specular_color) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MATERIAL),
            "::",
            stringify!(specular_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).specularmap) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MATERIAL),
            "::",
            stringify!(specularmap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reflectionmap) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MATERIAL),
            "::",
            stringify!(reflectionmap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opacity_percent) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MATERIAL),
            "::",
            stringify!(opacity_percent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opacitymap) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MATERIAL),
            "::",
            stringify!(opacitymap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bumpmap) as usize - ptr as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MATERIAL),
            "::",
            stringify!(bumpmap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refraction_index) as usize - ptr as usize },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MATERIAL),
            "::",
            stringify!(refraction_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refractionmap) as usize - ptr as usize },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MATERIAL),
            "::",
            stringify!(refractionmap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color_bleed_scale) as usize - ptr as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MATERIAL),
            "::",
            stringify!(color_bleed_scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indirect_bump_scale) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MATERIAL),
            "::",
            stringify!(indirect_bump_scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reflectance_scale) as usize - ptr as usize },
        784usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MATERIAL),
            "::",
            stringify!(reflectance_scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transmittance_scale) as usize - ptr as usize },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MATERIAL),
            "::",
            stringify!(transmittance_scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).two_sided_material) as usize - ptr as usize },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MATERIAL),
            "::",
            stringify!(two_sided_material)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).luminance) as usize - ptr as usize },
        808usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MATERIAL),
            "::",
            stringify!(luminance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).luminance_mode) as usize - ptr as usize },
        816usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MATERIAL),
            "::",
            stringify!(luminance_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).translucence) as usize - ptr as usize },
        824usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MATERIAL),
            "::",
            stringify!(translucence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).self_illumination) as usize - ptr as usize },
        832usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MATERIAL),
            "::",
            stringify!(self_illumination)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reflectivity) as usize - ptr as usize },
        840usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MATERIAL),
            "::",
            stringify!(reflectivity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).illumination_model) as usize - ptr as usize },
        848usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MATERIAL),
            "::",
            stringify!(illumination_model)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channel_flags) as usize - ptr as usize },
        852usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MATERIAL),
            "::",
            stringify!(channel_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        856usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MATERIAL),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).genprocname) as usize - ptr as usize },
        864usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MATERIAL),
            "::",
            stringify!(genprocname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).genproctype) as usize - ptr as usize },
        872usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MATERIAL),
            "::",
            stringify!(genproctype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).genprocvalbool) as usize - ptr as usize },
        874usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MATERIAL),
            "::",
            stringify!(genprocvalbool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).genprocvalint) as usize - ptr as usize },
        876usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MATERIAL),
            "::",
            stringify!(genprocvalint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).genprocvalreal) as usize - ptr as usize },
        880usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MATERIAL),
            "::",
            stringify!(genprocvalreal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).genprocvaltext) as usize - ptr as usize },
        888usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MATERIAL),
            "::",
            stringify!(genprocvaltext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).genprocvalcolor) as usize - ptr as usize },
        896usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MATERIAL),
            "::",
            stringify!(genprocvalcolor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).genproctableend) as usize - ptr as usize },
        944usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MATERIAL),
            "::",
            stringify!(genproctableend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_gentextures) as usize - ptr as usize },
        946usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MATERIAL),
            "::",
            stringify!(num_gentextures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gentextures) as usize - ptr as usize },
        952usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MATERIAL),
            "::",
            stringify!(gentextures)
        )
    );
}
#[doc = "Object MATERIAL (varies)\nAcad Naming: e.g. Materials/assetlibrary_base.fbm/shaders/AdskShaders.mi\nMaterials/assetlibrary_base.fbm/Mats/SolidGlass/Generic.xml"]
pub type Dwg_Object_MATERIAL = _dwg_object_MATERIAL;
#[doc = "Object OBJECT_PTR (varies) UNKNOWN FIELDS\nyet unsorted, and unused."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_OBJECT_PTR {
    pub parent: *mut _dwg_object_object,
}
#[test]
fn bindgen_test_layout__dwg_object_OBJECT_PTR() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_OBJECT_PTR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_OBJECT_PTR>(),
        8usize,
        concat!("Size of: ", stringify!(_dwg_object_OBJECT_PTR))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_OBJECT_PTR>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_OBJECT_PTR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_OBJECT_PTR),
            "::",
            stringify!(parent)
        )
    );
}
#[doc = "Object OBJECT_PTR (varies) UNKNOWN FIELDS\nyet unsorted, and unused."]
pub type Dwg_Object_OBJECT_PTR = _dwg_object_OBJECT_PTR;
#[doc = "Entity LIGHT (varies)\nUNSTABLE, now complete"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_LIGHT {
    pub parent: *mut _dwg_object_entity,
    #[doc = "< DXF 90"]
    pub class_version: BITCODE_BL,
    #[doc = "< DXF 1"]
    pub name: BITCODE_TV,
    #[doc = "< DXF 70, distant = 1; point = 2; spot = 3"]
    pub type_: BITCODE_BL,
    #[doc = "< DXF 290, on or off"]
    pub status: BITCODE_B,
    #[doc = "< DXF 63 + 421. r2000: 90 for rgb"]
    pub light_color: BITCODE_CMC,
    #[doc = "< DXF 291"]
    pub plot_glyph: BITCODE_B,
    #[doc = "< DXF 40"]
    pub intensity: BITCODE_BD,
    #[doc = "< DXF 10"]
    pub position: BITCODE_3BD,
    #[doc = "< DXF 11"]
    pub target: BITCODE_3BD,
    #[doc = "< DXF 72. None=0, Inverse Linear=1,\nInverse Square=2"]
    pub attenuation_type: BITCODE_BL,
    #[doc = "< DXF 292"]
    pub use_attenuation_limits: BITCODE_B,
    #[doc = "< DXF 41"]
    pub attenuation_start_limit: BITCODE_BD,
    #[doc = "< DXF 42"]
    pub attenuation_end_limit: BITCODE_BD,
    #[doc = "< DXF 50"]
    pub hotspot_angle: BITCODE_BD,
    #[doc = "< DXF 51, with type=spot"]
    pub falloff_angle: BITCODE_BD,
    #[doc = "< DXF 293"]
    pub cast_shadows: BITCODE_B,
    #[doc = "< DXF 73, ray_traced=0, shadow_maps=1"]
    pub shadow_type: BITCODE_BL,
    #[doc = "< DXF 91 in pixel: 64,128,256,...4096"]
    pub shadow_map_size: BITCODE_BS,
    #[doc = "< DXF 280 1-10 (num pixels blend into)"]
    pub shadow_map_softness: BITCODE_RC,
    pub is_photometric: BITCODE_B,
    pub has_photometric_data: BITCODE_B,
    #[doc = "< DXF 290"]
    pub has_webfile: BITCODE_B,
    #[doc = "< DXF 300 IES file"]
    pub webfile: BITCODE_TV,
    #[doc = "< DXF 70"]
    pub physical_intensity_method: BITCODE_BS,
    #[doc = "< DXF 40"]
    pub physical_intensity: BITCODE_BD,
    #[doc = "< DXF 41"]
    pub illuminance_dist: BITCODE_BD,
    #[doc = "< DXF 71 0: in kelvin, 1: as preset"]
    pub lamp_color_type: BITCODE_BS,
    #[doc = "< DXF 42 Temperature in Kelvin"]
    pub lamp_color_temp: BITCODE_BD,
    #[doc = "< DXF 72"]
    pub lamp_color_preset: BITCODE_BS,
    #[doc = "< if lamp_color_preset is Custom"]
    pub lamp_color_rgb: BITCODE_BL,
    #[doc = "< DXF 43-45 rotation offset in XYZ Euler angles"]
    pub web_rotation: BITCODE_3BD,
    #[doc = "< DXF 73: 0 linear, 1 rect, 2 disk, 3 cylinder, 4 sphere"]
    pub extlight_shape: BITCODE_BS,
    #[doc = "< DXF 46"]
    pub extlight_length: BITCODE_BD,
    #[doc = "< DXF 47"]
    pub extlight_width: BITCODE_BD,
    #[doc = "< DXF 48"]
    pub extlight_radius: BITCODE_BD,
    #[doc = "< DXF 74"]
    pub webfile_type: BITCODE_BS,
    #[doc = "< DXF 75"]
    pub web_symetry: BITCODE_BS,
    #[doc = "< DXF 76\nif the light displays a target grip for orienting\nthe light"]
    pub has_target_grip: BITCODE_BS,
    #[doc = "< DXF 49"]
    pub web_flux: BITCODE_BD,
    #[doc = "< DXF 50"]
    pub web_angle1: BITCODE_BD,
    #[doc = "< DXF 51"]
    pub web_angle2: BITCODE_BD,
    #[doc = "< DXF 52"]
    pub web_angle3: BITCODE_BD,
    #[doc = "< DXF 53"]
    pub web_angle4: BITCODE_BD,
    #[doc = "< DXF 54"]
    pub web_angle5: BITCODE_BD,
    #[doc = "< DXF 77 0:auto, 1:on, 2:off"]
    pub glyph_display_type: BITCODE_BS,
}
#[test]
fn bindgen_test_layout__dwg_entity_LIGHT() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_LIGHT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_LIGHT>(),
        376usize,
        concat!("Size of: ", stringify!(_dwg_entity_LIGHT))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_LIGHT>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_LIGHT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LIGHT),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LIGHT),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LIGHT),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LIGHT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LIGHT),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).light_color) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LIGHT),
            "::",
            stringify!(light_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plot_glyph) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LIGHT),
            "::",
            stringify!(plot_glyph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).intensity) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LIGHT),
            "::",
            stringify!(intensity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).position) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LIGHT),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LIGHT),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attenuation_type) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LIGHT),
            "::",
            stringify!(attenuation_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_attenuation_limits) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LIGHT),
            "::",
            stringify!(use_attenuation_limits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attenuation_start_limit) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LIGHT),
            "::",
            stringify!(attenuation_start_limit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attenuation_end_limit) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LIGHT),
            "::",
            stringify!(attenuation_end_limit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hotspot_angle) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LIGHT),
            "::",
            stringify!(hotspot_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).falloff_angle) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LIGHT),
            "::",
            stringify!(falloff_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cast_shadows) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LIGHT),
            "::",
            stringify!(cast_shadows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shadow_type) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LIGHT),
            "::",
            stringify!(shadow_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shadow_map_size) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LIGHT),
            "::",
            stringify!(shadow_map_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shadow_map_softness) as usize - ptr as usize },
        194usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LIGHT),
            "::",
            stringify!(shadow_map_softness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_photometric) as usize - ptr as usize },
        195usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LIGHT),
            "::",
            stringify!(is_photometric)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_photometric_data) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LIGHT),
            "::",
            stringify!(has_photometric_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_webfile) as usize - ptr as usize },
        197usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LIGHT),
            "::",
            stringify!(has_webfile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).webfile) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LIGHT),
            "::",
            stringify!(webfile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).physical_intensity_method) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LIGHT),
            "::",
            stringify!(physical_intensity_method)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).physical_intensity) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LIGHT),
            "::",
            stringify!(physical_intensity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).illuminance_dist) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LIGHT),
            "::",
            stringify!(illuminance_dist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lamp_color_type) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LIGHT),
            "::",
            stringify!(lamp_color_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lamp_color_temp) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LIGHT),
            "::",
            stringify!(lamp_color_temp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lamp_color_preset) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LIGHT),
            "::",
            stringify!(lamp_color_preset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lamp_color_rgb) as usize - ptr as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LIGHT),
            "::",
            stringify!(lamp_color_rgb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).web_rotation) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LIGHT),
            "::",
            stringify!(web_rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extlight_shape) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LIGHT),
            "::",
            stringify!(extlight_shape)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extlight_length) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LIGHT),
            "::",
            stringify!(extlight_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extlight_width) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LIGHT),
            "::",
            stringify!(extlight_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extlight_radius) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LIGHT),
            "::",
            stringify!(extlight_radius)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).webfile_type) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LIGHT),
            "::",
            stringify!(webfile_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).web_symetry) as usize - ptr as usize },
        314usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LIGHT),
            "::",
            stringify!(web_symetry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_target_grip) as usize - ptr as usize },
        316usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LIGHT),
            "::",
            stringify!(has_target_grip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).web_flux) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LIGHT),
            "::",
            stringify!(web_flux)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).web_angle1) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LIGHT),
            "::",
            stringify!(web_angle1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).web_angle2) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LIGHT),
            "::",
            stringify!(web_angle2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).web_angle3) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LIGHT),
            "::",
            stringify!(web_angle3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).web_angle4) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LIGHT),
            "::",
            stringify!(web_angle4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).web_angle5) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LIGHT),
            "::",
            stringify!(web_angle5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).glyph_display_type) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LIGHT),
            "::",
            stringify!(glyph_display_type)
        )
    );
}
#[doc = "Entity LIGHT (varies)\nUNSTABLE, now complete"]
pub type Dwg_Entity_LIGHT = _dwg_entity_LIGHT;
#[doc = "Entity CAMERA (varies) UNKNOWN FIELDS\nnot DWG persistent. yet unsorted, and unused."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_CAMERA {
    pub parent: *mut _dwg_object_entity,
    pub view: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_entity_CAMERA() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_CAMERA> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_CAMERA>(),
        16usize,
        concat!("Size of: ", stringify!(_dwg_entity_CAMERA))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_CAMERA>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_CAMERA))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_CAMERA),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).view) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_CAMERA),
            "::",
            stringify!(view)
        )
    );
}
#[doc = "Entity CAMERA (varies) UNKNOWN FIELDS\nnot DWG persistent. yet unsorted, and unused."]
pub type Dwg_Entity_CAMERA = _dwg_entity_CAMERA;
#[doc = "Entity GEOPOSITIONMARKER (varies)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_GEOPOSITIONMARKER {
    pub parent: *mut _dwg_object_entity,
    #[doc = "< DXF 90 point, lat_lon, mylocation"]
    pub class_version: BITCODE_BS,
    #[doc = "< DXF 10"]
    pub position: BITCODE_3BD,
    #[doc = "< DXF 40"]
    pub radius: BITCODE_BD,
    #[doc = "< DXF 40"]
    pub landing_gap: BITCODE_BD,
    #[doc = "< DXF 1"]
    pub notes: BITCODE_TV,
    #[doc = "< DXF 70  0 left, 1 center, 2 right"]
    pub text_alignment: BITCODE_RC,
    #[doc = "< DXF 290"]
    pub mtext_visible: BITCODE_B,
    #[doc = "< DXF 290"]
    pub enable_frame_text: BITCODE_B,
    pub mtext: *mut _dwg_object,
}
#[test]
fn bindgen_test_layout__dwg_entity_GEOPOSITIONMARKER() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_GEOPOSITIONMARKER> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_GEOPOSITIONMARKER>(),
        80usize,
        concat!("Size of: ", stringify!(_dwg_entity_GEOPOSITIONMARKER))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_GEOPOSITIONMARKER>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_GEOPOSITIONMARKER))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_GEOPOSITIONMARKER),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_GEOPOSITIONMARKER),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).position) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_GEOPOSITIONMARKER),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).radius) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_GEOPOSITIONMARKER),
            "::",
            stringify!(radius)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).landing_gap) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_GEOPOSITIONMARKER),
            "::",
            stringify!(landing_gap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notes) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_GEOPOSITIONMARKER),
            "::",
            stringify!(notes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_alignment) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_GEOPOSITIONMARKER),
            "::",
            stringify!(text_alignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mtext_visible) as usize - ptr as usize },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_GEOPOSITIONMARKER),
            "::",
            stringify!(mtext_visible)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enable_frame_text) as usize - ptr as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_GEOPOSITIONMARKER),
            "::",
            stringify!(enable_frame_text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mtext) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_GEOPOSITIONMARKER),
            "::",
            stringify!(mtext)
        )
    );
}
#[doc = "Entity GEOPOSITIONMARKER (varies)"]
pub type Dwg_Entity_GEOPOSITIONMARKER = _dwg_entity_GEOPOSITIONMARKER;
#[doc = "Object GEOMAPIMAGE (varies), LiveMap image overlay.\nyet unsorted, and unused."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_GEOMAPIMAGE {
    pub parent: *mut _dwg_object_object,
    pub class_version: BITCODE_BL,
    pub pt0: BITCODE_3BD,
    pub size: BITCODE_2RD,
    pub display_props: BITCODE_BS,
    pub clipping: BITCODE_B,
    pub brightness: BITCODE_RC,
    pub contrast: BITCODE_RC,
    pub fade: BITCODE_RC,
    pub rotation: BITCODE_BD,
    pub image_width: BITCODE_BD,
    pub image_height: BITCODE_BD,
    pub name: BITCODE_TV,
    pub image_file: BITCODE_BD,
    pub image_visibility: BITCODE_BD,
    pub transparency: BITCODE_BS,
    pub height: BITCODE_BD,
    pub width: BITCODE_BD,
    pub show_rotation: BITCODE_B,
    pub scale_factor: BITCODE_BD,
    pub geoimage_brightness: BITCODE_BS,
    pub geoimage_contrast: BITCODE_BS,
    pub geoimage_fade: BITCODE_BS,
    pub geoimage_position: BITCODE_BS,
    pub geoimage_width: BITCODE_BS,
    pub geoimage_height: BITCODE_BS,
}
#[test]
fn bindgen_test_layout__dwg_object_GEOMAPIMAGE() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_GEOMAPIMAGE> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_GEOMAPIMAGE>(),
        168usize,
        concat!("Size of: ", stringify!(_dwg_object_GEOMAPIMAGE))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_GEOMAPIMAGE>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_GEOMAPIMAGE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEOMAPIMAGE),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEOMAPIMAGE),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt0) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEOMAPIMAGE),
            "::",
            stringify!(pt0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEOMAPIMAGE),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).display_props) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEOMAPIMAGE),
            "::",
            stringify!(display_props)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clipping) as usize - ptr as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEOMAPIMAGE),
            "::",
            stringify!(clipping)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).brightness) as usize - ptr as usize },
        59usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEOMAPIMAGE),
            "::",
            stringify!(brightness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).contrast) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEOMAPIMAGE),
            "::",
            stringify!(contrast)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fade) as usize - ptr as usize },
        61usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEOMAPIMAGE),
            "::",
            stringify!(fade)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rotation) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEOMAPIMAGE),
            "::",
            stringify!(rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image_width) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEOMAPIMAGE),
            "::",
            stringify!(image_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image_height) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEOMAPIMAGE),
            "::",
            stringify!(image_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEOMAPIMAGE),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image_file) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEOMAPIMAGE),
            "::",
            stringify!(image_file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image_visibility) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEOMAPIMAGE),
            "::",
            stringify!(image_visibility)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transparency) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEOMAPIMAGE),
            "::",
            stringify!(transparency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEOMAPIMAGE),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEOMAPIMAGE),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).show_rotation) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEOMAPIMAGE),
            "::",
            stringify!(show_rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale_factor) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEOMAPIMAGE),
            "::",
            stringify!(scale_factor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geoimage_brightness) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEOMAPIMAGE),
            "::",
            stringify!(geoimage_brightness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geoimage_contrast) as usize - ptr as usize },
        154usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEOMAPIMAGE),
            "::",
            stringify!(geoimage_contrast)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geoimage_fade) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEOMAPIMAGE),
            "::",
            stringify!(geoimage_fade)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geoimage_position) as usize - ptr as usize },
        158usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEOMAPIMAGE),
            "::",
            stringify!(geoimage_position)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geoimage_width) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEOMAPIMAGE),
            "::",
            stringify!(geoimage_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geoimage_height) as usize - ptr as usize },
        162usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GEOMAPIMAGE),
            "::",
            stringify!(geoimage_height)
        )
    );
}
#[doc = "Object GEOMAPIMAGE (varies), LiveMap image overlay.\nyet unsorted, and unused."]
pub type Dwg_Object_GEOMAPIMAGE = _dwg_object_GEOMAPIMAGE;
#[doc = "Entity HELIX (varies) UNSTABLE\nsubclass of SPLINE"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_HELIX {
    pub parent: *mut _dwg_object_entity,
    pub flag: BITCODE_BS,
    pub scenario: BITCODE_BS,
    pub degree: BITCODE_BS,
    pub splineflags: BITCODE_BL,
    pub knotparam: BITCODE_BL,
    pub fit_tol: BITCODE_BD,
    pub beg_tan_vec: BITCODE_3BD,
    pub end_tan_vec: BITCODE_3BD,
    pub rational: BITCODE_B,
    pub closed_b: BITCODE_B,
    pub periodic: BITCODE_B,
    pub weighted: BITCODE_B,
    pub knot_tol: BITCODE_BD,
    pub ctrl_tol: BITCODE_BD,
    pub num_fit_pts: BITCODE_BS,
    pub fit_pts: *mut BITCODE_3DPOINT,
    pub num_knots: BITCODE_BL,
    pub knots: *mut BITCODE_BD,
    pub num_ctrl_pts: BITCODE_BL,
    pub ctrl_pts: *mut Dwg_SPLINE_control_point,
    #[doc = "< DXF 90: 27"]
    pub major_version: BITCODE_BL,
    #[doc = "< DXF 91: 1"]
    pub maint_version: BITCODE_BL,
    #[doc = "< DXF 10"]
    pub axis_base_pt: BITCODE_3BD,
    #[doc = "< DXF 11"]
    pub start_pt: BITCODE_3BD,
    #[doc = "< DXF 12"]
    pub axis_vector: BITCODE_3BD,
    #[doc = "< DXF 40"]
    pub radius: BITCODE_BD,
    #[doc = "< DXF 41"]
    pub turns: BITCODE_BD,
    #[doc = "< DXF 42"]
    pub turn_height: BITCODE_BD,
    #[doc = "< DXF 290: 0: left, 1: right (twist)"]
    pub handedness: BITCODE_B,
    #[doc = "< DXF 280: 0: turn_height, 1: turns, 2: height"]
    pub constraint_type: BITCODE_RC,
}
#[test]
fn bindgen_test_layout__dwg_entity_HELIX() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_HELIX> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_HELIX>(),
        264usize,
        concat!("Size of: ", stringify!(_dwg_entity_HELIX))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_HELIX>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_HELIX))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HELIX),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HELIX),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scenario) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HELIX),
            "::",
            stringify!(scenario)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).degree) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HELIX),
            "::",
            stringify!(degree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).splineflags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HELIX),
            "::",
            stringify!(splineflags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).knotparam) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HELIX),
            "::",
            stringify!(knotparam)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fit_tol) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HELIX),
            "::",
            stringify!(fit_tol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).beg_tan_vec) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HELIX),
            "::",
            stringify!(beg_tan_vec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_tan_vec) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HELIX),
            "::",
            stringify!(end_tan_vec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rational) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HELIX),
            "::",
            stringify!(rational)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).closed_b) as usize - ptr as usize },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HELIX),
            "::",
            stringify!(closed_b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).periodic) as usize - ptr as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HELIX),
            "::",
            stringify!(periodic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).weighted) as usize - ptr as usize },
        83usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HELIX),
            "::",
            stringify!(weighted)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).knot_tol) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HELIX),
            "::",
            stringify!(knot_tol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctrl_tol) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HELIX),
            "::",
            stringify!(ctrl_tol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_fit_pts) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HELIX),
            "::",
            stringify!(num_fit_pts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fit_pts) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HELIX),
            "::",
            stringify!(fit_pts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_knots) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HELIX),
            "::",
            stringify!(num_knots)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).knots) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HELIX),
            "::",
            stringify!(knots)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_ctrl_pts) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HELIX),
            "::",
            stringify!(num_ctrl_pts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctrl_pts) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HELIX),
            "::",
            stringify!(ctrl_pts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major_version) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HELIX),
            "::",
            stringify!(major_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maint_version) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HELIX),
            "::",
            stringify!(maint_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis_base_pt) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HELIX),
            "::",
            stringify!(axis_base_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_pt) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HELIX),
            "::",
            stringify!(start_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis_vector) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HELIX),
            "::",
            stringify!(axis_vector)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).radius) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HELIX),
            "::",
            stringify!(radius)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).turns) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HELIX),
            "::",
            stringify!(turns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).turn_height) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HELIX),
            "::",
            stringify!(turn_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handedness) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HELIX),
            "::",
            stringify!(handedness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).constraint_type) as usize - ptr as usize },
        257usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_HELIX),
            "::",
            stringify!(constraint_type)
        )
    );
}
#[doc = "Entity HELIX (varies) UNSTABLE\nsubclass of SPLINE"]
pub type Dwg_Entity_HELIX = _dwg_entity_HELIX;
#[doc = "Entity EXTRUDEDSURFACE (varies)\nin DXF encrypted."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_EXTRUDEDSURFACE {
    pub parent: *mut _dwg_object_entity,
    pub acis_empty: BITCODE_B,
    pub unknown: BITCODE_B,
    pub version: BITCODE_BS,
    pub num_blocks: BITCODE_BL,
    pub block_size: *mut BITCODE_BL,
    pub encr_sat_data: *mut *mut ::std::os::raw::c_char,
    pub sab_size: BITCODE_BL,
    pub acis_data: *mut BITCODE_RC,
    pub wireframe_data_present: BITCODE_B,
    pub point_present: BITCODE_B,
    pub point: BITCODE_3BD,
    pub isolines: BITCODE_BL,
    pub isoline_present: BITCODE_B,
    pub num_wires: BITCODE_BL,
    pub wires: *mut Dwg_3DSOLID_wire,
    pub num_silhouettes: BITCODE_BL,
    pub silhouettes: *mut Dwg_3DSOLID_silhouette,
    pub _dxf_sab_converted: BITCODE_B,
    pub acis_empty2: BITCODE_B,
    pub extra_acis_data: *mut _dwg_entity_3DSOLID,
    pub num_materials: BITCODE_BL,
    pub materials: *mut Dwg_3DSOLID_material,
    pub revision_guid: [BITCODE_RC; 39usize],
    pub revision_major: BITCODE_BL,
    pub revision_minor1: BITCODE_BS,
    pub revision_minor2: BITCODE_BS,
    pub revision_bytes: [BITCODE_RC; 9usize],
    pub end_marker: BITCODE_BL,
    pub history_id: BITCODE_H,
    pub has_revision_guid: BITCODE_B,
    pub acis_empty_bit: BITCODE_B,
    #[doc = "< DXF 70"]
    pub modeler_format_version: BITCODE_BS,
    pub bindata_size: BITCODE_BL,
    pub bindata: BITCODE_TF,
    #[doc = "< DXF 71"]
    pub u_isolines: BITCODE_BS,
    #[doc = "< DXF 72"]
    pub v_isolines: BITCODE_BS,
    #[doc = "< DXF 90"]
    pub class_version: BITCODE_BL,
    #[doc = "< DXF 42"]
    pub draft_angle: BITCODE_BD,
    #[doc = "< DXF 43"]
    pub draft_start_distance: BITCODE_BD,
    #[doc = "< DXF 44"]
    pub draft_end_distance: BITCODE_BD,
    #[doc = "< DXF 45"]
    pub twist_angle: BITCODE_BD,
    #[doc = "< DXF 48"]
    pub scale_factor: BITCODE_BD,
    #[doc = "< DXF 49"]
    pub align_angle: BITCODE_BD,
    #[doc = "< DXF 46: 16x BD"]
    pub sweep_entity_transmatrix: *mut BITCODE_BD,
    #[doc = "< DXF 47: 16x BD"]
    pub path_entity_transmatrix: *mut BITCODE_BD,
    #[doc = "< DXF 290"]
    pub is_solid: BITCODE_B,
    #[doc = "< DXF 70. \\\n0=No alignment, 1=Align sweep entity to path, \\\n2=Translate sweep entity to path, \\\n3=Translate path to sweep entity"]
    pub sweep_alignment_flags: BITCODE_BS,
    #[doc = "< DXF 71"]
    pub path_flags: BITCODE_BS,
    #[doc = "< DXF 292"]
    pub align_start: BITCODE_B,
    #[doc = "< DXF 293"]
    pub bank: BITCODE_B,
    #[doc = "< DXF 294"]
    pub base_point_set: BITCODE_B,
    #[doc = "< DXF 295"]
    pub sweep_entity_transform_computed: BITCODE_B,
    #[doc = "< DXF 296"]
    pub path_entity_transform_computed: BITCODE_B,
    #[doc = "< DXF 11"]
    pub reference_vector_for_controlling_twist: BITCODE_3BD,
    pub sweep_entity: BITCODE_H,
    pub path_entity: BITCODE_H,
    #[doc = "< DXF 10"]
    pub sweep_vector: BITCODE_3BD,
    #[doc = "< DXF 40: 16x BD"]
    pub sweep_transmatrix: *mut BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_entity_EXTRUDEDSURFACE() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_EXTRUDEDSURFACE> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_EXTRUDEDSURFACE>(),
        400usize,
        concat!("Size of: ", stringify!(_dwg_entity_EXTRUDEDSURFACE))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_EXTRUDEDSURFACE>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_EXTRUDEDSURFACE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acis_empty) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(acis_empty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(unknown)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_blocks) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(num_blocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(block_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encr_sat_data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(encr_sat_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sab_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(sab_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acis_data) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(acis_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wireframe_data_present) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(wireframe_data_present)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).point_present) as usize - ptr as usize },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(point_present)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).point) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(point)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isolines) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(isolines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isoline_present) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(isoline_present)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_wires) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(num_wires)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wires) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(wires)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_silhouettes) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(num_silhouettes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).silhouettes) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(silhouettes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._dxf_sab_converted) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(_dxf_sab_converted)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acis_empty2) as usize - ptr as usize },
        121usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(acis_empty2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extra_acis_data) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(extra_acis_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_materials) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(num_materials)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).materials) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(materials)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision_guid) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(revision_guid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision_major) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(revision_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision_minor1) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(revision_minor1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision_minor2) as usize - ptr as usize },
        198usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(revision_minor2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision_bytes) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(revision_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_marker) as usize - ptr as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(end_marker)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).history_id) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(history_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_revision_guid) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(has_revision_guid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acis_empty_bit) as usize - ptr as usize },
        225usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(acis_empty_bit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modeler_format_version) as usize - ptr as usize },
        226usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(modeler_format_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bindata_size) as usize - ptr as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(bindata_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bindata) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(bindata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u_isolines) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(u_isolines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_isolines) as usize - ptr as usize },
        242usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(v_isolines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).draft_angle) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(draft_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).draft_start_distance) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(draft_start_distance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).draft_end_distance) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(draft_end_distance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).twist_angle) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(twist_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale_factor) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(scale_factor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).align_angle) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(align_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sweep_entity_transmatrix) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(sweep_entity_transmatrix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path_entity_transmatrix) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(path_entity_transmatrix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_solid) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(is_solid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sweep_alignment_flags) as usize - ptr as usize },
        314usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(sweep_alignment_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path_flags) as usize - ptr as usize },
        316usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(path_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).align_start) as usize - ptr as usize },
        318usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(align_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bank) as usize - ptr as usize },
        319usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(bank)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_point_set) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(base_point_set)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).sweep_entity_transform_computed) as usize - ptr as usize
        },
        321usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(sweep_entity_transform_computed)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).path_entity_transform_computed) as usize - ptr as usize
        },
        322usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(path_entity_transform_computed)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).reference_vector_for_controlling_twist) as usize
                - ptr as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(reference_vector_for_controlling_twist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sweep_entity) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(sweep_entity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path_entity) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(path_entity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sweep_vector) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(sweep_vector)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sweep_transmatrix) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_EXTRUDEDSURFACE),
            "::",
            stringify!(sweep_transmatrix)
        )
    );
}
#[doc = "Entity EXTRUDEDSURFACE (varies)\nin DXF encrypted."]
pub type Dwg_Entity_EXTRUDEDSURFACE = _dwg_entity_EXTRUDEDSURFACE;
#[doc = "Entity SWEPTSURFACE (varies)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_SWEPTSURFACE {
    pub parent: *mut _dwg_object_entity,
    pub acis_empty: BITCODE_B,
    pub unknown: BITCODE_B,
    pub version: BITCODE_BS,
    pub num_blocks: BITCODE_BL,
    pub block_size: *mut BITCODE_BL,
    pub encr_sat_data: *mut *mut ::std::os::raw::c_char,
    pub sab_size: BITCODE_BL,
    pub acis_data: *mut BITCODE_RC,
    pub wireframe_data_present: BITCODE_B,
    pub point_present: BITCODE_B,
    pub point: BITCODE_3BD,
    pub isolines: BITCODE_BL,
    pub isoline_present: BITCODE_B,
    pub num_wires: BITCODE_BL,
    pub wires: *mut Dwg_3DSOLID_wire,
    pub num_silhouettes: BITCODE_BL,
    pub silhouettes: *mut Dwg_3DSOLID_silhouette,
    pub _dxf_sab_converted: BITCODE_B,
    pub acis_empty2: BITCODE_B,
    pub extra_acis_data: *mut _dwg_entity_3DSOLID,
    pub num_materials: BITCODE_BL,
    pub materials: *mut Dwg_3DSOLID_material,
    pub revision_guid: [BITCODE_RC; 39usize],
    pub revision_major: BITCODE_BL,
    pub revision_minor1: BITCODE_BS,
    pub revision_minor2: BITCODE_BS,
    pub revision_bytes: [BITCODE_RC; 9usize],
    pub end_marker: BITCODE_BL,
    pub history_id: BITCODE_H,
    pub has_revision_guid: BITCODE_B,
    pub acis_empty_bit: BITCODE_B,
    #[doc = "< DXF 70"]
    pub modeler_format_version: BITCODE_BS,
    #[doc = "< DXF 71"]
    pub u_isolines: BITCODE_BS,
    #[doc = "< DXF 72"]
    pub v_isolines: BITCODE_BS,
    #[doc = "< DXF 90"]
    pub class_version: BITCODE_BL,
    pub sweep_entity_id: BITCODE_BL,
    pub sweepdata_size: BITCODE_BL,
    pub sweepdata: BITCODE_TF,
    pub path_entity_id: BITCODE_BL,
    pub pathdata_size: BITCODE_BL,
    pub pathdata: BITCODE_TF,
    #[doc = "< DXF 42"]
    pub draft_angle: BITCODE_BD,
    #[doc = "< DXF 43"]
    pub draft_start_distance: BITCODE_BD,
    #[doc = "< DXF 44"]
    pub draft_end_distance: BITCODE_BD,
    #[doc = "< DXF 45"]
    pub twist_angle: BITCODE_BD,
    #[doc = "< DXF 48"]
    pub scale_factor: BITCODE_BD,
    #[doc = "< DXF 49"]
    pub align_angle: BITCODE_BD,
    #[doc = "< DXF 46: 16x BD"]
    pub sweep_entity_transmatrix: *mut BITCODE_BD,
    #[doc = "< DXF 47: 16x BD"]
    pub path_entity_transmatrix: *mut BITCODE_BD,
    #[doc = "< DXF 290"]
    pub is_solid: BITCODE_B,
    #[doc = "< DXF 70. \\\n0=No alignment, 1=Align sweep entity to path, \\\n2=Translate sweep entity to path, \\\n3=Translate path to sweep entity"]
    pub sweep_alignment_flags: BITCODE_BS,
    #[doc = "< DXF 71"]
    pub path_flags: BITCODE_BS,
    #[doc = "< DXF 292"]
    pub align_start: BITCODE_B,
    #[doc = "< DXF 293"]
    pub bank: BITCODE_B,
    #[doc = "< DXF 294"]
    pub base_point_set: BITCODE_B,
    #[doc = "< DXF 295"]
    pub sweep_entity_transform_computed: BITCODE_B,
    #[doc = "< DXF 296"]
    pub path_entity_transform_computed: BITCODE_B,
    #[doc = "< DXF 11"]
    pub reference_vector_for_controlling_twist: BITCODE_3BD,
    pub sweep_entity: BITCODE_H,
    pub path_entity: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_entity_SWEPTSURFACE() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_SWEPTSURFACE> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_SWEPTSURFACE>(),
        392usize,
        concat!("Size of: ", stringify!(_dwg_entity_SWEPTSURFACE))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_SWEPTSURFACE>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_SWEPTSURFACE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acis_empty) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(acis_empty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(unknown)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_blocks) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(num_blocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(block_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encr_sat_data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(encr_sat_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sab_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(sab_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acis_data) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(acis_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wireframe_data_present) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(wireframe_data_present)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).point_present) as usize - ptr as usize },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(point_present)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).point) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(point)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isolines) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(isolines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isoline_present) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(isoline_present)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_wires) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(num_wires)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wires) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(wires)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_silhouettes) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(num_silhouettes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).silhouettes) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(silhouettes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._dxf_sab_converted) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(_dxf_sab_converted)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acis_empty2) as usize - ptr as usize },
        121usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(acis_empty2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extra_acis_data) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(extra_acis_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_materials) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(num_materials)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).materials) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(materials)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision_guid) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(revision_guid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision_major) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(revision_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision_minor1) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(revision_minor1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision_minor2) as usize - ptr as usize },
        198usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(revision_minor2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision_bytes) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(revision_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_marker) as usize - ptr as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(end_marker)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).history_id) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(history_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_revision_guid) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(has_revision_guid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acis_empty_bit) as usize - ptr as usize },
        225usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(acis_empty_bit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modeler_format_version) as usize - ptr as usize },
        226usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(modeler_format_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u_isolines) as usize - ptr as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(u_isolines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_isolines) as usize - ptr as usize },
        230usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(v_isolines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sweep_entity_id) as usize - ptr as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(sweep_entity_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sweepdata_size) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(sweepdata_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sweepdata) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(sweepdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path_entity_id) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(path_entity_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pathdata_size) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(pathdata_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pathdata) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(pathdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).draft_angle) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(draft_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).draft_start_distance) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(draft_start_distance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).draft_end_distance) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(draft_end_distance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).twist_angle) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(twist_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale_factor) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(scale_factor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).align_angle) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(align_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sweep_entity_transmatrix) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(sweep_entity_transmatrix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path_entity_transmatrix) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(path_entity_transmatrix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_solid) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(is_solid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sweep_alignment_flags) as usize - ptr as usize },
        338usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(sweep_alignment_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path_flags) as usize - ptr as usize },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(path_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).align_start) as usize - ptr as usize },
        342usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(align_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bank) as usize - ptr as usize },
        343usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(bank)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_point_set) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(base_point_set)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).sweep_entity_transform_computed) as usize - ptr as usize
        },
        345usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(sweep_entity_transform_computed)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).path_entity_transform_computed) as usize - ptr as usize
        },
        346usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(path_entity_transform_computed)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).reference_vector_for_controlling_twist) as usize
                - ptr as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(reference_vector_for_controlling_twist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sweep_entity) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(sweep_entity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path_entity) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_SWEPTSURFACE),
            "::",
            stringify!(path_entity)
        )
    );
}
#[doc = "Entity SWEPTSURFACE (varies)"]
pub type Dwg_Entity_SWEPTSURFACE = _dwg_entity_SWEPTSURFACE;
#[doc = "Entity LOFTEDSURFACE (varies)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_LOFTEDSURFACE {
    pub parent: *mut _dwg_object_entity,
    pub acis_empty: BITCODE_B,
    pub unknown: BITCODE_B,
    pub version: BITCODE_BS,
    pub num_blocks: BITCODE_BL,
    pub block_size: *mut BITCODE_BL,
    pub encr_sat_data: *mut *mut ::std::os::raw::c_char,
    pub sab_size: BITCODE_BL,
    pub acis_data: *mut BITCODE_RC,
    pub wireframe_data_present: BITCODE_B,
    pub point_present: BITCODE_B,
    pub point: BITCODE_3BD,
    pub isolines: BITCODE_BL,
    pub isoline_present: BITCODE_B,
    pub num_wires: BITCODE_BL,
    pub wires: *mut Dwg_3DSOLID_wire,
    pub num_silhouettes: BITCODE_BL,
    pub silhouettes: *mut Dwg_3DSOLID_silhouette,
    pub _dxf_sab_converted: BITCODE_B,
    pub acis_empty2: BITCODE_B,
    pub extra_acis_data: *mut _dwg_entity_3DSOLID,
    pub num_materials: BITCODE_BL,
    pub materials: *mut Dwg_3DSOLID_material,
    pub revision_guid: [BITCODE_RC; 39usize],
    pub revision_major: BITCODE_BL,
    pub revision_minor1: BITCODE_BS,
    pub revision_minor2: BITCODE_BS,
    pub revision_bytes: [BITCODE_RC; 9usize],
    pub end_marker: BITCODE_BL,
    pub history_id: BITCODE_H,
    pub has_revision_guid: BITCODE_B,
    pub acis_empty_bit: BITCODE_B,
    #[doc = "< DXF 70"]
    pub modeler_format_version: BITCODE_BS,
    #[doc = "< DXF 71"]
    pub u_isolines: BITCODE_BS,
    #[doc = "< DXF 72"]
    pub v_isolines: BITCODE_BS,
    #[doc = "< DXF 40: 16x BD"]
    pub loft_entity_transmatrix: *mut BITCODE_BD,
    #[doc = "< DXF 70"]
    pub plane_normal_lofting_type: BITCODE_BL,
    #[doc = "< DXF 41"]
    pub start_draft_angle: BITCODE_BD,
    #[doc = "< DXF 42"]
    pub end_draft_angle: BITCODE_BD,
    #[doc = "< DXF 43"]
    pub start_draft_magnitude: BITCODE_BD,
    #[doc = "< DXF 44"]
    pub end_draft_magnitude: BITCODE_BD,
    pub arc_length_parameterization: BITCODE_B,
    pub no_twist: BITCODE_B,
    pub align_direction: BITCODE_B,
    pub simple_surfaces: BITCODE_B,
    pub closed_surfaces: BITCODE_B,
    pub solid: BITCODE_B,
    pub ruled_surface: BITCODE_B,
    pub virtual_guide: BITCODE_B,
    pub num_cross_sections: BITCODE_BS,
    pub num_guide_curves: BITCODE_BS,
    pub cross_sections: *mut BITCODE_H,
    pub guide_curves: *mut BITCODE_H,
    pub path_curve: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_entity_LOFTEDSURFACE() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_LOFTEDSURFACE> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_LOFTEDSURFACE>(),
        320usize,
        concat!("Size of: ", stringify!(_dwg_entity_LOFTEDSURFACE))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_LOFTEDSURFACE>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_LOFTEDSURFACE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acis_empty) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(acis_empty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(unknown)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_blocks) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(num_blocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(block_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encr_sat_data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(encr_sat_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sab_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(sab_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acis_data) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(acis_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wireframe_data_present) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(wireframe_data_present)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).point_present) as usize - ptr as usize },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(point_present)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).point) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(point)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isolines) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(isolines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isoline_present) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(isoline_present)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_wires) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(num_wires)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wires) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(wires)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_silhouettes) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(num_silhouettes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).silhouettes) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(silhouettes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._dxf_sab_converted) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(_dxf_sab_converted)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acis_empty2) as usize - ptr as usize },
        121usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(acis_empty2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extra_acis_data) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(extra_acis_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_materials) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(num_materials)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).materials) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(materials)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision_guid) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(revision_guid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision_major) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(revision_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision_minor1) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(revision_minor1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision_minor2) as usize - ptr as usize },
        198usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(revision_minor2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision_bytes) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(revision_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_marker) as usize - ptr as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(end_marker)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).history_id) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(history_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_revision_guid) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(has_revision_guid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acis_empty_bit) as usize - ptr as usize },
        225usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(acis_empty_bit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modeler_format_version) as usize - ptr as usize },
        226usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(modeler_format_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u_isolines) as usize - ptr as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(u_isolines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_isolines) as usize - ptr as usize },
        230usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(v_isolines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loft_entity_transmatrix) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(loft_entity_transmatrix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plane_normal_lofting_type) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(plane_normal_lofting_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_draft_angle) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(start_draft_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_draft_angle) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(end_draft_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_draft_magnitude) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(start_draft_magnitude)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_draft_magnitude) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(end_draft_magnitude)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arc_length_parameterization) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(arc_length_parameterization)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).no_twist) as usize - ptr as usize },
        281usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(no_twist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).align_direction) as usize - ptr as usize },
        282usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(align_direction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).simple_surfaces) as usize - ptr as usize },
        283usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(simple_surfaces)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).closed_surfaces) as usize - ptr as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(closed_surfaces)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).solid) as usize - ptr as usize },
        285usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(solid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ruled_surface) as usize - ptr as usize },
        286usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(ruled_surface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).virtual_guide) as usize - ptr as usize },
        287usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(virtual_guide)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_cross_sections) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(num_cross_sections)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_guide_curves) as usize - ptr as usize },
        290usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(num_guide_curves)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cross_sections) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(cross_sections)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).guide_curves) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(guide_curves)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path_curve) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOFTEDSURFACE),
            "::",
            stringify!(path_curve)
        )
    );
}
#[doc = "Entity LOFTEDSURFACE (varies)"]
pub type Dwg_Entity_LOFTEDSURFACE = _dwg_entity_LOFTEDSURFACE;
#[doc = "Entity NURBSURFACE (varies)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_NURBSURFACE {
    pub parent: *mut _dwg_object_entity,
    pub acis_empty: BITCODE_B,
    pub unknown: BITCODE_B,
    pub version: BITCODE_BS,
    pub num_blocks: BITCODE_BL,
    pub block_size: *mut BITCODE_BL,
    pub encr_sat_data: *mut *mut ::std::os::raw::c_char,
    pub sab_size: BITCODE_BL,
    pub acis_data: *mut BITCODE_RC,
    pub wireframe_data_present: BITCODE_B,
    pub point_present: BITCODE_B,
    pub point: BITCODE_3BD,
    pub isolines: BITCODE_BL,
    pub isoline_present: BITCODE_B,
    pub num_wires: BITCODE_BL,
    pub wires: *mut Dwg_3DSOLID_wire,
    pub num_silhouettes: BITCODE_BL,
    pub silhouettes: *mut Dwg_3DSOLID_silhouette,
    pub _dxf_sab_converted: BITCODE_B,
    pub acis_empty2: BITCODE_B,
    pub extra_acis_data: *mut _dwg_entity_3DSOLID,
    pub num_materials: BITCODE_BL,
    pub materials: *mut Dwg_3DSOLID_material,
    pub revision_guid: [BITCODE_RC; 39usize],
    pub revision_major: BITCODE_BL,
    pub revision_minor1: BITCODE_BS,
    pub revision_minor2: BITCODE_BS,
    pub revision_bytes: [BITCODE_RC; 9usize],
    pub end_marker: BITCODE_BL,
    pub history_id: BITCODE_H,
    pub has_revision_guid: BITCODE_B,
    pub acis_empty_bit: BITCODE_B,
    #[doc = "< DXF 71"]
    pub u_isolines: BITCODE_BS,
    #[doc = "< DXF 72"]
    pub v_isolines: BITCODE_BS,
    pub short170: BITCODE_BS,
    pub cv_hull_display: BITCODE_B,
    pub uvec1: BITCODE_3BD,
    pub vvec1: BITCODE_3BD,
    pub uvec2: BITCODE_3BD,
    pub vvec2: BITCODE_3BD,
}
#[test]
fn bindgen_test_layout__dwg_entity_NURBSURFACE() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_NURBSURFACE> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_NURBSURFACE>(),
        336usize,
        concat!("Size of: ", stringify!(_dwg_entity_NURBSURFACE))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_NURBSURFACE>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_NURBSURFACE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_NURBSURFACE),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acis_empty) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_NURBSURFACE),
            "::",
            stringify!(acis_empty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_NURBSURFACE),
            "::",
            stringify!(unknown)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_NURBSURFACE),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_blocks) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_NURBSURFACE),
            "::",
            stringify!(num_blocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_NURBSURFACE),
            "::",
            stringify!(block_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encr_sat_data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_NURBSURFACE),
            "::",
            stringify!(encr_sat_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sab_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_NURBSURFACE),
            "::",
            stringify!(sab_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acis_data) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_NURBSURFACE),
            "::",
            stringify!(acis_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wireframe_data_present) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_NURBSURFACE),
            "::",
            stringify!(wireframe_data_present)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).point_present) as usize - ptr as usize },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_NURBSURFACE),
            "::",
            stringify!(point_present)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).point) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_NURBSURFACE),
            "::",
            stringify!(point)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isolines) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_NURBSURFACE),
            "::",
            stringify!(isolines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isoline_present) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_NURBSURFACE),
            "::",
            stringify!(isoline_present)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_wires) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_NURBSURFACE),
            "::",
            stringify!(num_wires)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wires) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_NURBSURFACE),
            "::",
            stringify!(wires)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_silhouettes) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_NURBSURFACE),
            "::",
            stringify!(num_silhouettes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).silhouettes) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_NURBSURFACE),
            "::",
            stringify!(silhouettes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._dxf_sab_converted) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_NURBSURFACE),
            "::",
            stringify!(_dxf_sab_converted)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acis_empty2) as usize - ptr as usize },
        121usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_NURBSURFACE),
            "::",
            stringify!(acis_empty2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extra_acis_data) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_NURBSURFACE),
            "::",
            stringify!(extra_acis_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_materials) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_NURBSURFACE),
            "::",
            stringify!(num_materials)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).materials) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_NURBSURFACE),
            "::",
            stringify!(materials)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision_guid) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_NURBSURFACE),
            "::",
            stringify!(revision_guid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision_major) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_NURBSURFACE),
            "::",
            stringify!(revision_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision_minor1) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_NURBSURFACE),
            "::",
            stringify!(revision_minor1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision_minor2) as usize - ptr as usize },
        198usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_NURBSURFACE),
            "::",
            stringify!(revision_minor2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision_bytes) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_NURBSURFACE),
            "::",
            stringify!(revision_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_marker) as usize - ptr as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_NURBSURFACE),
            "::",
            stringify!(end_marker)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).history_id) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_NURBSURFACE),
            "::",
            stringify!(history_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_revision_guid) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_NURBSURFACE),
            "::",
            stringify!(has_revision_guid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acis_empty_bit) as usize - ptr as usize },
        225usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_NURBSURFACE),
            "::",
            stringify!(acis_empty_bit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u_isolines) as usize - ptr as usize },
        226usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_NURBSURFACE),
            "::",
            stringify!(u_isolines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_isolines) as usize - ptr as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_NURBSURFACE),
            "::",
            stringify!(v_isolines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).short170) as usize - ptr as usize },
        230usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_NURBSURFACE),
            "::",
            stringify!(short170)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cv_hull_display) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_NURBSURFACE),
            "::",
            stringify!(cv_hull_display)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uvec1) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_NURBSURFACE),
            "::",
            stringify!(uvec1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vvec1) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_NURBSURFACE),
            "::",
            stringify!(vvec1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uvec2) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_NURBSURFACE),
            "::",
            stringify!(uvec2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vvec2) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_NURBSURFACE),
            "::",
            stringify!(vvec2)
        )
    );
}
#[doc = "Entity NURBSURFACE (varies)"]
pub type Dwg_Entity_NURBSURFACE = _dwg_entity_NURBSURFACE;
#[doc = "Entity PLANESURFACE (varies)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_PLANESURFACE {
    pub parent: *mut _dwg_object_entity,
    pub acis_empty: BITCODE_B,
    pub unknown: BITCODE_B,
    pub version: BITCODE_BS,
    pub num_blocks: BITCODE_BL,
    pub block_size: *mut BITCODE_BL,
    pub encr_sat_data: *mut *mut ::std::os::raw::c_char,
    pub sab_size: BITCODE_BL,
    pub acis_data: *mut BITCODE_RC,
    pub wireframe_data_present: BITCODE_B,
    pub point_present: BITCODE_B,
    pub point: BITCODE_3BD,
    pub isolines: BITCODE_BL,
    pub isoline_present: BITCODE_B,
    pub num_wires: BITCODE_BL,
    pub wires: *mut Dwg_3DSOLID_wire,
    pub num_silhouettes: BITCODE_BL,
    pub silhouettes: *mut Dwg_3DSOLID_silhouette,
    pub _dxf_sab_converted: BITCODE_B,
    pub acis_empty2: BITCODE_B,
    pub extra_acis_data: *mut _dwg_entity_3DSOLID,
    pub num_materials: BITCODE_BL,
    pub materials: *mut Dwg_3DSOLID_material,
    pub revision_guid: [BITCODE_RC; 39usize],
    pub revision_major: BITCODE_BL,
    pub revision_minor1: BITCODE_BS,
    pub revision_minor2: BITCODE_BS,
    pub revision_bytes: [BITCODE_RC; 9usize],
    pub end_marker: BITCODE_BL,
    pub history_id: BITCODE_H,
    pub has_revision_guid: BITCODE_B,
    pub acis_empty_bit: BITCODE_B,
    #[doc = "< DXF 70"]
    pub modeler_format_version: BITCODE_BS,
    #[doc = "< DXF 71"]
    pub u_isolines: BITCODE_BS,
    #[doc = "< DXF 72"]
    pub v_isolines: BITCODE_BS,
    #[doc = "< DXF 90"]
    pub class_version: BITCODE_BL,
}
#[test]
fn bindgen_test_layout__dwg_entity_PLANESURFACE() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_PLANESURFACE> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_PLANESURFACE>(),
        240usize,
        concat!("Size of: ", stringify!(_dwg_entity_PLANESURFACE))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_PLANESURFACE>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_PLANESURFACE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_PLANESURFACE),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acis_empty) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_PLANESURFACE),
            "::",
            stringify!(acis_empty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_PLANESURFACE),
            "::",
            stringify!(unknown)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_PLANESURFACE),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_blocks) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_PLANESURFACE),
            "::",
            stringify!(num_blocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_PLANESURFACE),
            "::",
            stringify!(block_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encr_sat_data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_PLANESURFACE),
            "::",
            stringify!(encr_sat_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sab_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_PLANESURFACE),
            "::",
            stringify!(sab_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acis_data) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_PLANESURFACE),
            "::",
            stringify!(acis_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wireframe_data_present) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_PLANESURFACE),
            "::",
            stringify!(wireframe_data_present)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).point_present) as usize - ptr as usize },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_PLANESURFACE),
            "::",
            stringify!(point_present)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).point) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_PLANESURFACE),
            "::",
            stringify!(point)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isolines) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_PLANESURFACE),
            "::",
            stringify!(isolines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isoline_present) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_PLANESURFACE),
            "::",
            stringify!(isoline_present)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_wires) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_PLANESURFACE),
            "::",
            stringify!(num_wires)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wires) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_PLANESURFACE),
            "::",
            stringify!(wires)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_silhouettes) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_PLANESURFACE),
            "::",
            stringify!(num_silhouettes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).silhouettes) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_PLANESURFACE),
            "::",
            stringify!(silhouettes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._dxf_sab_converted) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_PLANESURFACE),
            "::",
            stringify!(_dxf_sab_converted)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acis_empty2) as usize - ptr as usize },
        121usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_PLANESURFACE),
            "::",
            stringify!(acis_empty2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extra_acis_data) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_PLANESURFACE),
            "::",
            stringify!(extra_acis_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_materials) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_PLANESURFACE),
            "::",
            stringify!(num_materials)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).materials) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_PLANESURFACE),
            "::",
            stringify!(materials)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision_guid) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_PLANESURFACE),
            "::",
            stringify!(revision_guid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision_major) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_PLANESURFACE),
            "::",
            stringify!(revision_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision_minor1) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_PLANESURFACE),
            "::",
            stringify!(revision_minor1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision_minor2) as usize - ptr as usize },
        198usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_PLANESURFACE),
            "::",
            stringify!(revision_minor2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision_bytes) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_PLANESURFACE),
            "::",
            stringify!(revision_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_marker) as usize - ptr as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_PLANESURFACE),
            "::",
            stringify!(end_marker)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).history_id) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_PLANESURFACE),
            "::",
            stringify!(history_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_revision_guid) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_PLANESURFACE),
            "::",
            stringify!(has_revision_guid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acis_empty_bit) as usize - ptr as usize },
        225usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_PLANESURFACE),
            "::",
            stringify!(acis_empty_bit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modeler_format_version) as usize - ptr as usize },
        226usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_PLANESURFACE),
            "::",
            stringify!(modeler_format_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u_isolines) as usize - ptr as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_PLANESURFACE),
            "::",
            stringify!(u_isolines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_isolines) as usize - ptr as usize },
        230usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_PLANESURFACE),
            "::",
            stringify!(v_isolines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_PLANESURFACE),
            "::",
            stringify!(class_version)
        )
    );
}
#[doc = "Entity PLANESURFACE (varies)"]
pub type Dwg_Entity_PLANESURFACE = _dwg_entity_PLANESURFACE;
#[doc = "Entity REVOLVEDSURFACE (varies)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_REVOLVEDSURFACE {
    pub parent: *mut _dwg_object_entity,
    pub acis_empty: BITCODE_B,
    pub unknown: BITCODE_B,
    pub version: BITCODE_BS,
    pub num_blocks: BITCODE_BL,
    pub block_size: *mut BITCODE_BL,
    pub encr_sat_data: *mut *mut ::std::os::raw::c_char,
    pub sab_size: BITCODE_BL,
    pub acis_data: *mut BITCODE_RC,
    pub wireframe_data_present: BITCODE_B,
    pub point_present: BITCODE_B,
    pub point: BITCODE_3BD,
    pub isolines: BITCODE_BL,
    pub isoline_present: BITCODE_B,
    pub num_wires: BITCODE_BL,
    pub wires: *mut Dwg_3DSOLID_wire,
    pub num_silhouettes: BITCODE_BL,
    pub silhouettes: *mut Dwg_3DSOLID_silhouette,
    pub _dxf_sab_converted: BITCODE_B,
    pub acis_empty2: BITCODE_B,
    pub extra_acis_data: *mut _dwg_entity_3DSOLID,
    pub num_materials: BITCODE_BL,
    pub materials: *mut Dwg_3DSOLID_material,
    pub revision_guid: [BITCODE_RC; 39usize],
    pub revision_major: BITCODE_BL,
    pub revision_minor1: BITCODE_BS,
    pub revision_minor2: BITCODE_BS,
    pub revision_bytes: [BITCODE_RC; 9usize],
    pub end_marker: BITCODE_BL,
    pub history_id: BITCODE_H,
    pub has_revision_guid: BITCODE_B,
    pub acis_empty_bit: BITCODE_B,
    #[doc = "< DXF 70"]
    pub modeler_format_version: BITCODE_BS,
    #[doc = "< DXF 71"]
    pub u_isolines: BITCODE_BS,
    #[doc = "< DXF 72"]
    pub v_isolines: BITCODE_BS,
    #[doc = "< DXF 90"]
    pub class_version: BITCODE_BL,
    pub id: BITCODE_BL,
    pub axis_point: BITCODE_3BD,
    pub axis_vector: BITCODE_3BD,
    pub revolve_angle: BITCODE_BD,
    pub start_angle: BITCODE_BD,
    pub revolved_entity_transmatrix: *mut BITCODE_BD,
    pub draft_angle: BITCODE_BD,
    pub draft_start_distance: BITCODE_BD,
    pub draft_end_distance: BITCODE_BD,
    pub twist_angle: BITCODE_BD,
    pub solid: BITCODE_B,
    pub close_to_axis: BITCODE_B,
}
#[test]
fn bindgen_test_layout__dwg_entity_REVOLVEDSURFACE() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_REVOLVEDSURFACE> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_REVOLVEDSURFACE>(),
        352usize,
        concat!("Size of: ", stringify!(_dwg_entity_REVOLVEDSURFACE))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_REVOLVEDSURFACE>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_REVOLVEDSURFACE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_REVOLVEDSURFACE),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acis_empty) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_REVOLVEDSURFACE),
            "::",
            stringify!(acis_empty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_REVOLVEDSURFACE),
            "::",
            stringify!(unknown)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_REVOLVEDSURFACE),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_blocks) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_REVOLVEDSURFACE),
            "::",
            stringify!(num_blocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_REVOLVEDSURFACE),
            "::",
            stringify!(block_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encr_sat_data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_REVOLVEDSURFACE),
            "::",
            stringify!(encr_sat_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sab_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_REVOLVEDSURFACE),
            "::",
            stringify!(sab_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acis_data) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_REVOLVEDSURFACE),
            "::",
            stringify!(acis_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wireframe_data_present) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_REVOLVEDSURFACE),
            "::",
            stringify!(wireframe_data_present)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).point_present) as usize - ptr as usize },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_REVOLVEDSURFACE),
            "::",
            stringify!(point_present)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).point) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_REVOLVEDSURFACE),
            "::",
            stringify!(point)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isolines) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_REVOLVEDSURFACE),
            "::",
            stringify!(isolines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isoline_present) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_REVOLVEDSURFACE),
            "::",
            stringify!(isoline_present)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_wires) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_REVOLVEDSURFACE),
            "::",
            stringify!(num_wires)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wires) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_REVOLVEDSURFACE),
            "::",
            stringify!(wires)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_silhouettes) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_REVOLVEDSURFACE),
            "::",
            stringify!(num_silhouettes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).silhouettes) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_REVOLVEDSURFACE),
            "::",
            stringify!(silhouettes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._dxf_sab_converted) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_REVOLVEDSURFACE),
            "::",
            stringify!(_dxf_sab_converted)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acis_empty2) as usize - ptr as usize },
        121usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_REVOLVEDSURFACE),
            "::",
            stringify!(acis_empty2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extra_acis_data) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_REVOLVEDSURFACE),
            "::",
            stringify!(extra_acis_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_materials) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_REVOLVEDSURFACE),
            "::",
            stringify!(num_materials)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).materials) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_REVOLVEDSURFACE),
            "::",
            stringify!(materials)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision_guid) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_REVOLVEDSURFACE),
            "::",
            stringify!(revision_guid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision_major) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_REVOLVEDSURFACE),
            "::",
            stringify!(revision_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision_minor1) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_REVOLVEDSURFACE),
            "::",
            stringify!(revision_minor1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision_minor2) as usize - ptr as usize },
        198usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_REVOLVEDSURFACE),
            "::",
            stringify!(revision_minor2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision_bytes) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_REVOLVEDSURFACE),
            "::",
            stringify!(revision_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_marker) as usize - ptr as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_REVOLVEDSURFACE),
            "::",
            stringify!(end_marker)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).history_id) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_REVOLVEDSURFACE),
            "::",
            stringify!(history_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_revision_guid) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_REVOLVEDSURFACE),
            "::",
            stringify!(has_revision_guid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acis_empty_bit) as usize - ptr as usize },
        225usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_REVOLVEDSURFACE),
            "::",
            stringify!(acis_empty_bit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modeler_format_version) as usize - ptr as usize },
        226usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_REVOLVEDSURFACE),
            "::",
            stringify!(modeler_format_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u_isolines) as usize - ptr as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_REVOLVEDSURFACE),
            "::",
            stringify!(u_isolines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_isolines) as usize - ptr as usize },
        230usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_REVOLVEDSURFACE),
            "::",
            stringify!(v_isolines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_REVOLVEDSURFACE),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_REVOLVEDSURFACE),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis_point) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_REVOLVEDSURFACE),
            "::",
            stringify!(axis_point)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis_vector) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_REVOLVEDSURFACE),
            "::",
            stringify!(axis_vector)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revolve_angle) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_REVOLVEDSURFACE),
            "::",
            stringify!(revolve_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_angle) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_REVOLVEDSURFACE),
            "::",
            stringify!(start_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revolved_entity_transmatrix) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_REVOLVEDSURFACE),
            "::",
            stringify!(revolved_entity_transmatrix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).draft_angle) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_REVOLVEDSURFACE),
            "::",
            stringify!(draft_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).draft_start_distance) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_REVOLVEDSURFACE),
            "::",
            stringify!(draft_start_distance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).draft_end_distance) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_REVOLVEDSURFACE),
            "::",
            stringify!(draft_end_distance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).twist_angle) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_REVOLVEDSURFACE),
            "::",
            stringify!(twist_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).solid) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_REVOLVEDSURFACE),
            "::",
            stringify!(solid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).close_to_axis) as usize - ptr as usize },
        345usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_REVOLVEDSURFACE),
            "::",
            stringify!(close_to_axis)
        )
    );
}
#[doc = "Entity REVOLVEDSURFACE (varies)"]
pub type Dwg_Entity_REVOLVEDSURFACE = _dwg_entity_REVOLVEDSURFACE;
#[doc = "Entity MESH (varies)\nTypes: Sphere|Cylinder|Cone|Torus|Box|Wedge|Pyramid"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_MESH_edge {
    pub parent: *mut _dwg_entity_MESH,
    pub idxfrom: BITCODE_BL,
    pub idxto: BITCODE_BL,
}
#[test]
fn bindgen_test_layout__dwg_MESH_edge() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_MESH_edge> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_MESH_edge>(),
        16usize,
        concat!("Size of: ", stringify!(_dwg_MESH_edge))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_MESH_edge>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_MESH_edge))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MESH_edge),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idxfrom) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MESH_edge),
            "::",
            stringify!(idxfrom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idxto) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_MESH_edge),
            "::",
            stringify!(idxto)
        )
    );
}
#[doc = "Entity MESH (varies)\nTypes: Sphere|Cylinder|Cone|Torus|Box|Wedge|Pyramid"]
pub type Dwg_MESH_edge = _dwg_MESH_edge;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_MESH {
    pub parent: *mut _dwg_object_entity,
    #[doc = "< DXF 71 (2)"]
    pub dlevel: BITCODE_BS,
    #[doc = "< DXF 72 (0)"]
    pub is_watertight: BITCODE_B,
    #[doc = "< DXF 91 (0)"]
    pub num_subdiv_vertex: BITCODE_BL,
    #[doc = "< DXF 10 ??"]
    pub subdiv_vertex: *mut BITCODE_3DPOINT,
    #[doc = "< DXF 92 (14)"]
    pub num_vertex: BITCODE_BL,
    #[doc = "< DXF 10"]
    pub vertex: *mut BITCODE_3DPOINT,
    #[doc = "< DXF 93 (30)"]
    pub num_faces: BITCODE_BL,
    #[doc = "< DXF 90"]
    pub faces: *mut BITCODE_BL,
    #[doc = "< DXF 94 (19)"]
    pub num_edges: BITCODE_BL,
    #[doc = "< DXF 90"]
    pub edges: *mut Dwg_MESH_edge,
    #[doc = "< DXF 95 (19)"]
    pub num_crease: BITCODE_BL,
    #[doc = "< DXF 140"]
    pub crease: *mut BITCODE_BD,
    pub unknown_b1: BITCODE_B,
    pub unknown_b2: BITCODE_B,
}
#[test]
fn bindgen_test_layout__dwg_entity_MESH() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_MESH> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_MESH>(),
        96usize,
        concat!("Size of: ", stringify!(_dwg_entity_MESH))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_MESH>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_MESH))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MESH),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dlevel) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MESH),
            "::",
            stringify!(dlevel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_watertight) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MESH),
            "::",
            stringify!(is_watertight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_subdiv_vertex) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MESH),
            "::",
            stringify!(num_subdiv_vertex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subdiv_vertex) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MESH),
            "::",
            stringify!(subdiv_vertex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_vertex) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MESH),
            "::",
            stringify!(num_vertex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertex) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MESH),
            "::",
            stringify!(vertex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_faces) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MESH),
            "::",
            stringify!(num_faces)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).faces) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MESH),
            "::",
            stringify!(faces)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_edges) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MESH),
            "::",
            stringify!(num_edges)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edges) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MESH),
            "::",
            stringify!(edges)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_crease) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MESH),
            "::",
            stringify!(num_crease)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).crease) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MESH),
            "::",
            stringify!(crease)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_b1) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MESH),
            "::",
            stringify!(unknown_b1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_b2) as usize - ptr as usize },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_MESH),
            "::",
            stringify!(unknown_b2)
        )
    );
}
pub type Dwg_Entity_MESH = _dwg_entity_MESH;
#[doc = "Object SUN (varies), unstable\nwrongly documented by ACAD DXF as entity"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_SUN {
    pub parent: *mut _dwg_object_object,
    #[doc = "< DXF 90"]
    pub class_version: BITCODE_BL,
    #[doc = "< DXF 290"]
    pub is_on: BITCODE_B,
    #[doc = "< DXF 60, 421"]
    pub color: BITCODE_CMC,
    #[doc = "< DXF 40"]
    pub intensity: BITCODE_BD,
    #[doc = "< DXF 291"]
    pub has_shadow: BITCODE_B,
    #[doc = "< DXF 91"]
    pub julian_day: BITCODE_BL,
    #[doc = "< DXF 92"]
    pub msecs: BITCODE_BL,
    #[doc = "< DXF 292"]
    pub is_dst: BITCODE_B,
    #[doc = "< DXF 70"]
    pub shadow_type: BITCODE_BL,
    #[doc = "< DXF 71"]
    pub shadow_mapsize: BITCODE_BS,
    #[doc = "< DXF 280"]
    pub shadow_softness: BITCODE_RC,
}
#[test]
fn bindgen_test_layout__dwg_object_SUN() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_SUN> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_SUN>(),
        96usize,
        concat!("Size of: ", stringify!(_dwg_object_SUN))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_SUN>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_SUN))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SUN),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SUN),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_on) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SUN),
            "::",
            stringify!(is_on)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SUN),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).intensity) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SUN),
            "::",
            stringify!(intensity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_shadow) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SUN),
            "::",
            stringify!(has_shadow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).julian_day) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SUN),
            "::",
            stringify!(julian_day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msecs) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SUN),
            "::",
            stringify!(msecs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_dst) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SUN),
            "::",
            stringify!(is_dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shadow_type) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SUN),
            "::",
            stringify!(shadow_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shadow_mapsize) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SUN),
            "::",
            stringify!(shadow_mapsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shadow_softness) as usize - ptr as usize },
        94usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SUN),
            "::",
            stringify!(shadow_softness)
        )
    );
}
#[doc = "Object SUN (varies), unstable\nwrongly documented by ACAD DXF as entity"]
pub type Dwg_Object_SUN = _dwg_object_SUN;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_SUNSTUDY_Dates {
    pub julian_day: BITCODE_BL,
    pub msecs: BITCODE_BL,
}
#[test]
fn bindgen_test_layout__dwg_SUNSTUDY_Dates() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_SUNSTUDY_Dates> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_SUNSTUDY_Dates>(),
        8usize,
        concat!("Size of: ", stringify!(_dwg_SUNSTUDY_Dates))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_SUNSTUDY_Dates>(),
        4usize,
        concat!("Alignment of ", stringify!(_dwg_SUNSTUDY_Dates))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).julian_day) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_SUNSTUDY_Dates),
            "::",
            stringify!(julian_day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msecs) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_SUNSTUDY_Dates),
            "::",
            stringify!(msecs)
        )
    );
}
pub type Dwg_SUNSTUDY_Dates = _dwg_SUNSTUDY_Dates;
#[doc = "Object SUNSTUDY (varies)\n--enable-debug only"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_SUNSTUDY {
    pub parent: *mut _dwg_object_object,
    #[doc = "< DXF 90"]
    pub class_version: BITCODE_BL,
    #[doc = "< DXF 1"]
    pub setup_name: BITCODE_TV,
    #[doc = "< DXF 2"]
    pub description: BITCODE_TV,
    #[doc = "< DXF 70"]
    pub output_type: BITCODE_BL,
    #[doc = "< DXF 3"]
    pub sheet_set_name: BITCODE_TV,
    #[doc = "< DXF 290"]
    pub use_subset: BITCODE_B,
    #[doc = "< DXF 3"]
    pub sheet_subset_name: BITCODE_TV,
    #[doc = "< DXF 291"]
    pub select_dates_from_calendar: BITCODE_B,
    #[doc = "< DXF 91"]
    pub num_dates: BITCODE_BL,
    #[doc = "< DXF 90[]"]
    pub dates: *mut Dwg_SUNSTUDY_Dates,
    #[doc = "< DXF 292"]
    pub select_range_of_dates: BITCODE_B,
    #[doc = "< DXF 93"]
    pub start_time: BITCODE_BL,
    #[doc = "< DXF 94"]
    pub end_time: BITCODE_BL,
    #[doc = "< DXF 95"]
    pub interval: BITCODE_BL,
    #[doc = "< DXF 73"]
    pub num_hours: BITCODE_BL,
    #[doc = "< DXF 290"]
    pub hours: *mut BITCODE_B,
    #[doc = "< DXF 74"]
    pub shade_plot_type: BITCODE_BL,
    #[doc = "< DXF 75"]
    pub numvports: BITCODE_BL,
    #[doc = "< DXF 76"]
    pub numrows: BITCODE_BL,
    #[doc = "< DXF 77"]
    pub numcols: BITCODE_BL,
    #[doc = "< DXF 40"]
    pub spacing: BITCODE_BD,
    #[doc = "< DXF 293"]
    pub lock_viewports: BITCODE_B,
    #[doc = "< DXF 294"]
    pub label_viewports: BITCODE_B,
    #[doc = "< 5 DXF 340"]
    pub page_setup_wizard: BITCODE_H,
    #[doc = "< DXF 341"]
    pub view: BITCODE_H,
    #[doc = "< DXF 342"]
    pub visualstyle: BITCODE_H,
    #[doc = "< DXF 343"]
    pub text_style: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_object_SUNSTUDY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_SUNSTUDY> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_SUNSTUDY>(),
        176usize,
        concat!("Size of: ", stringify!(_dwg_object_SUNSTUDY))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_SUNSTUDY>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_SUNSTUDY))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SUNSTUDY),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SUNSTUDY),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setup_name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SUNSTUDY),
            "::",
            stringify!(setup_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).description) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SUNSTUDY),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).output_type) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SUNSTUDY),
            "::",
            stringify!(output_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sheet_set_name) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SUNSTUDY),
            "::",
            stringify!(sheet_set_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_subset) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SUNSTUDY),
            "::",
            stringify!(use_subset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sheet_subset_name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SUNSTUDY),
            "::",
            stringify!(sheet_subset_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).select_dates_from_calendar) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SUNSTUDY),
            "::",
            stringify!(select_dates_from_calendar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_dates) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SUNSTUDY),
            "::",
            stringify!(num_dates)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dates) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SUNSTUDY),
            "::",
            stringify!(dates)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).select_range_of_dates) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SUNSTUDY),
            "::",
            stringify!(select_range_of_dates)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_time) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SUNSTUDY),
            "::",
            stringify!(start_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_time) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SUNSTUDY),
            "::",
            stringify!(end_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interval) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SUNSTUDY),
            "::",
            stringify!(interval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_hours) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SUNSTUDY),
            "::",
            stringify!(num_hours)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hours) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SUNSTUDY),
            "::",
            stringify!(hours)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shade_plot_type) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SUNSTUDY),
            "::",
            stringify!(shade_plot_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numvports) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SUNSTUDY),
            "::",
            stringify!(numvports)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numrows) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SUNSTUDY),
            "::",
            stringify!(numrows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numcols) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SUNSTUDY),
            "::",
            stringify!(numcols)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spacing) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SUNSTUDY),
            "::",
            stringify!(spacing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_viewports) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SUNSTUDY),
            "::",
            stringify!(lock_viewports)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).label_viewports) as usize - ptr as usize },
        137usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SUNSTUDY),
            "::",
            stringify!(label_viewports)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).page_setup_wizard) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SUNSTUDY),
            "::",
            stringify!(page_setup_wizard)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).view) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SUNSTUDY),
            "::",
            stringify!(view)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).visualstyle) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SUNSTUDY),
            "::",
            stringify!(visualstyle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_style) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SUNSTUDY),
            "::",
            stringify!(text_style)
        )
    );
}
#[doc = "Object SUNSTUDY (varies)\n--enable-debug only"]
pub type Dwg_Object_SUNSTUDY = _dwg_object_SUNSTUDY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_DATATABLE_row {
    pub parent: *mut _dwg_DATATABLE_column,
    pub value: Dwg_TABLE_value,
}
#[test]
fn bindgen_test_layout__dwg_DATATABLE_row() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_DATATABLE_row> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_DATATABLE_row>(),
        128usize,
        concat!("Size of: ", stringify!(_dwg_DATATABLE_row))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_DATATABLE_row>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_DATATABLE_row))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_DATATABLE_row),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_DATATABLE_row),
            "::",
            stringify!(value)
        )
    );
}
pub type Dwg_DATATABLE_row = _dwg_DATATABLE_row;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_DATATABLE_column {
    pub parent: *mut _dwg_object_DATATABLE,
    pub type_: BITCODE_BL,
    pub text: BITCODE_TV,
    pub rows: *mut Dwg_DATATABLE_row,
}
#[test]
fn bindgen_test_layout__dwg_DATATABLE_column() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_DATATABLE_column> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_DATATABLE_column>(),
        32usize,
        concat!("Size of: ", stringify!(_dwg_DATATABLE_column))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_DATATABLE_column>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_DATATABLE_column))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_DATATABLE_column),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_DATATABLE_column),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_DATATABLE_column),
            "::",
            stringify!(text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rows) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_DATATABLE_column),
            "::",
            stringify!(rows)
        )
    );
}
pub type Dwg_DATATABLE_column = _dwg_DATATABLE_column;
#[doc = "Object DATATABLE (varies)\n--enable-debug only"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_DATATABLE {
    pub parent: *mut _dwg_object_object,
    pub flags: BITCODE_BS,
    pub num_cols: BITCODE_BL,
    pub num_rows: BITCODE_BL,
    pub table_name: BITCODE_TV,
    pub cols: *mut Dwg_DATATABLE_column,
}
#[test]
fn bindgen_test_layout__dwg_object_DATATABLE() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_DATATABLE> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_DATATABLE>(),
        40usize,
        concat!("Size of: ", stringify!(_dwg_object_DATATABLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_DATATABLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_DATATABLE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DATATABLE),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DATATABLE),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_cols) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DATATABLE),
            "::",
            stringify!(num_cols)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_rows) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DATATABLE),
            "::",
            stringify!(num_rows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).table_name) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DATATABLE),
            "::",
            stringify!(table_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cols) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DATATABLE),
            "::",
            stringify!(cols)
        )
    );
}
#[doc = "Object DATATABLE (varies)\n--enable-debug only"]
pub type Dwg_Object_DATATABLE = _dwg_object_DATATABLE;
#[doc = "Object DATALINK (varies)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_DATALINK_customdata {
    pub parent: *mut _dwg_object_DATALINK,
    pub target: BITCODE_H,
    pub text: BITCODE_TV,
}
#[test]
fn bindgen_test_layout__dwg_DATALINK_customdata() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_DATALINK_customdata> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_DATALINK_customdata>(),
        24usize,
        concat!("Size of: ", stringify!(_dwg_DATALINK_customdata))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_DATALINK_customdata>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_DATALINK_customdata))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_DATALINK_customdata),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_DATALINK_customdata),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_DATALINK_customdata),
            "::",
            stringify!(text)
        )
    );
}
#[doc = "Object DATALINK (varies)"]
pub type Dwg_DATALINK_customdata = _dwg_DATALINK_customdata;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_DATALINK {
    pub parent: *mut _dwg_object_object,
    pub class_version: BITCODE_BS,
    pub data_adapter: BITCODE_TV,
    pub description: BITCODE_TV,
    pub tooltip: BITCODE_TV,
    pub connection_string: BITCODE_TV,
    pub option: BITCODE_BL,
    pub update_option: BITCODE_BL,
    pub bl92: BITCODE_BL,
    pub year: BITCODE_BS,
    pub month: BITCODE_BS,
    pub day: BITCODE_BS,
    pub hour: BITCODE_BS,
    pub minute: BITCODE_BS,
    pub seconds: BITCODE_BS,
    pub msec: BITCODE_BS,
    pub path_option: BITCODE_BS,
    pub bl93: BITCODE_BL,
    pub update_status: BITCODE_TV,
    pub num_customdata: BITCODE_BL,
    pub customdata: *mut Dwg_DATALINK_customdata,
    pub hardowner: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_object_DATALINK() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_DATALINK> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_DATALINK>(),
        112usize,
        concat!("Size of: ", stringify!(_dwg_object_DATALINK))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_DATALINK>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_DATALINK))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DATALINK),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DATALINK),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_adapter) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DATALINK),
            "::",
            stringify!(data_adapter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).description) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DATALINK),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tooltip) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DATALINK),
            "::",
            stringify!(tooltip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection_string) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DATALINK),
            "::",
            stringify!(connection_string)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).option) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DATALINK),
            "::",
            stringify!(option)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).update_option) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DATALINK),
            "::",
            stringify!(update_option)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bl92) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DATALINK),
            "::",
            stringify!(bl92)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DATALINK),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).month) as usize - ptr as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DATALINK),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DATALINK),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DATALINK),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DATALINK),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seconds) as usize - ptr as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DATALINK),
            "::",
            stringify!(seconds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msec) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DATALINK),
            "::",
            stringify!(msec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path_option) as usize - ptr as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DATALINK),
            "::",
            stringify!(path_option)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bl93) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DATALINK),
            "::",
            stringify!(bl93)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).update_status) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DATALINK),
            "::",
            stringify!(update_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_customdata) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DATALINK),
            "::",
            stringify!(num_customdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).customdata) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DATALINK),
            "::",
            stringify!(customdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hardowner) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DATALINK),
            "::",
            stringify!(hardowner)
        )
    );
}
pub type Dwg_Object_DATALINK = _dwg_object_DATALINK;
#[doc = "Object DIMASSOC (varies) DEBUGGING\n--enable-debug only"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_DIMASSOC_Ref {
    pub parent: *mut _dwg_object_DIMASSOC,
    #[doc = "< DXF 1 constant"]
    pub classname: BITCODE_TV,
    #[doc = "< DXF 72"]
    pub osnap_type: BITCODE_RC,
    #[doc = "< DXF 40"]
    pub osnap_dist: BITCODE_BD,
    #[doc = "< DXF 10-30"]
    pub osnap_pt: BITCODE_3BD,
    pub num_xrefs: BITCODE_BS,
    #[doc = "< DXF 331 the geometry objects, 1 or 2"]
    pub xrefs: *mut BITCODE_H,
    #[doc = "< DXF 73"]
    pub main_subent_type: BITCODE_BS,
    #[doc = "< DXF 91"]
    pub main_gsmarker: BITCODE_BL,
    pub num_xrefpaths: BITCODE_BS,
    #[doc = "< DXF 301"]
    pub xrefpaths: *mut BITCODE_TV,
    #[doc = "< DXF 75"]
    pub has_lastpt_ref: BITCODE_B,
    #[doc = "< DXF ??"]
    pub lastpt_ref: BITCODE_3BD,
    #[doc = "< DXF 74"]
    pub num_intsectobj: BITCODE_BL,
    #[doc = "< DXF 332 the intersection objects, 1 or 2"]
    pub intsectobj: *mut BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_DIMASSOC_Ref() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_DIMASSOC_Ref> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_DIMASSOC_Ref>(),
        144usize,
        concat!("Size of: ", stringify!(_dwg_DIMASSOC_Ref))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_DIMASSOC_Ref>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_DIMASSOC_Ref))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_DIMASSOC_Ref),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).classname) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_DIMASSOC_Ref),
            "::",
            stringify!(classname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).osnap_type) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_DIMASSOC_Ref),
            "::",
            stringify!(osnap_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).osnap_dist) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_DIMASSOC_Ref),
            "::",
            stringify!(osnap_dist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).osnap_pt) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_DIMASSOC_Ref),
            "::",
            stringify!(osnap_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_xrefs) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_DIMASSOC_Ref),
            "::",
            stringify!(num_xrefs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xrefs) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_DIMASSOC_Ref),
            "::",
            stringify!(xrefs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).main_subent_type) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_DIMASSOC_Ref),
            "::",
            stringify!(main_subent_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).main_gsmarker) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_DIMASSOC_Ref),
            "::",
            stringify!(main_gsmarker)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_xrefpaths) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_DIMASSOC_Ref),
            "::",
            stringify!(num_xrefpaths)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xrefpaths) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_DIMASSOC_Ref),
            "::",
            stringify!(xrefpaths)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_lastpt_ref) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_DIMASSOC_Ref),
            "::",
            stringify!(has_lastpt_ref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lastpt_ref) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_DIMASSOC_Ref),
            "::",
            stringify!(lastpt_ref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_intsectobj) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_DIMASSOC_Ref),
            "::",
            stringify!(num_intsectobj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).intsectobj) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_DIMASSOC_Ref),
            "::",
            stringify!(intsectobj)
        )
    );
}
#[doc = "Object DIMASSOC (varies) DEBUGGING\n--enable-debug only"]
pub type Dwg_DIMASSOC_Ref = _dwg_DIMASSOC_Ref;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_DIMASSOC {
    pub parent: *mut _dwg_object_object,
    pub dimensionobj: BITCODE_H,
    #[doc = "< DXF 90, bitmask 0-15"]
    pub associativity: BITCODE_BL,
    #[doc = "< DXF 70 boolean"]
    pub trans_space_flag: BITCODE_B,
    #[doc = "< DXF 71"]
    pub rotated_type: BITCODE_RC,
    pub ref_: *mut Dwg_DIMASSOC_Ref,
}
#[test]
fn bindgen_test_layout__dwg_object_DIMASSOC() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_DIMASSOC> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_DIMASSOC>(),
        32usize,
        concat!("Size of: ", stringify!(_dwg_object_DIMASSOC))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_DIMASSOC>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_DIMASSOC))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMASSOC),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dimensionobj) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMASSOC),
            "::",
            stringify!(dimensionobj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).associativity) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMASSOC),
            "::",
            stringify!(associativity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trans_space_flag) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMASSOC),
            "::",
            stringify!(trans_space_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rotated_type) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMASSOC),
            "::",
            stringify!(rotated_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DIMASSOC),
            "::",
            stringify!(ref_)
        )
    );
}
pub type Dwg_Object_DIMASSOC = _dwg_object_DIMASSOC;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_ACTIONBODY {
    pub parent: *mut _dwg_object_ASSOCNETWORK,
    pub evaluatorid: BITCODE_TV,
    pub expression: BITCODE_TV,
    pub value: BITCODE_BL,
}
#[test]
fn bindgen_test_layout__dwg_ACTIONBODY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_ACTIONBODY> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_ACTIONBODY>(),
        32usize,
        concat!("Size of: ", stringify!(_dwg_ACTIONBODY))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_ACTIONBODY>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_ACTIONBODY))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ACTIONBODY),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evaluatorid) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ACTIONBODY),
            "::",
            stringify!(evaluatorid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).expression) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ACTIONBODY),
            "::",
            stringify!(expression)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ACTIONBODY),
            "::",
            stringify!(value)
        )
    );
}
pub type Dwg_ACTIONBODY = _dwg_ACTIONBODY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_EvalVariant {
    pub code: BITCODE_BS,
    pub u: _dwg_EvalVariant__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _dwg_EvalVariant__bindgen_ty_1 {
    pub bd: BITCODE_BD,
    pub bl: BITCODE_BL,
    pub bs: BITCODE_BS,
    pub rc: BITCODE_RC,
    pub text: BITCODE_TV,
    pub handle: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_EvalVariant__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_EvalVariant__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_EvalVariant__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_dwg_EvalVariant__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_EvalVariant__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_EvalVariant__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_EvalVariant__bindgen_ty_1),
            "::",
            stringify!(bd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_EvalVariant__bindgen_ty_1),
            "::",
            stringify!(bl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_EvalVariant__bindgen_ty_1),
            "::",
            stringify!(bs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_EvalVariant__bindgen_ty_1),
            "::",
            stringify!(rc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_EvalVariant__bindgen_ty_1),
            "::",
            stringify!(text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_EvalVariant__bindgen_ty_1),
            "::",
            stringify!(handle)
        )
    );
}
#[test]
fn bindgen_test_layout__dwg_EvalVariant() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_EvalVariant> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_EvalVariant>(),
        16usize,
        concat!("Size of: ", stringify!(_dwg_EvalVariant))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_EvalVariant>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_EvalVariant))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_EvalVariant),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_EvalVariant),
            "::",
            stringify!(u)
        )
    );
}
pub type Dwg_EvalVariant = _dwg_EvalVariant;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_VALUEPARAM_vars {
    pub value: Dwg_EvalVariant,
    pub handle: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_VALUEPARAM_vars() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_VALUEPARAM_vars> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_VALUEPARAM_vars>(),
        24usize,
        concat!("Size of: ", stringify!(_dwg_VALUEPARAM_vars))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_VALUEPARAM_vars>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_VALUEPARAM_vars))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_VALUEPARAM_vars),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_VALUEPARAM_vars),
            "::",
            stringify!(handle)
        )
    );
}
pub type Dwg_VALUEPARAM_vars = _dwg_VALUEPARAM_vars;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_VALUEPARAM {
    pub parent: *mut _dwg_object_object,
    pub class_version: BITCODE_BL,
    pub name: BITCODE_TV,
    pub unit_type: BITCODE_BL,
    pub num_vars: BITCODE_BL,
    pub vars: *mut Dwg_VALUEPARAM_vars,
    pub controlled_objdep: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_VALUEPARAM() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_VALUEPARAM> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_VALUEPARAM>(),
        48usize,
        concat!("Size of: ", stringify!(_dwg_VALUEPARAM))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_VALUEPARAM>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_VALUEPARAM))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_VALUEPARAM),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_VALUEPARAM),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_VALUEPARAM),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unit_type) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_VALUEPARAM),
            "::",
            stringify!(unit_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_vars) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_VALUEPARAM),
            "::",
            stringify!(num_vars)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vars) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_VALUEPARAM),
            "::",
            stringify!(vars)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).controlled_objdep) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_VALUEPARAM),
            "::",
            stringify!(controlled_objdep)
        )
    );
}
pub type Dwg_VALUEPARAM = _dwg_VALUEPARAM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_ASSOCPARAMBASEDACTIONBODY {
    pub parent: *mut _dwg_object_object,
    pub version: BITCODE_BL,
    pub minor: BITCODE_BL,
    pub num_deps: BITCODE_BL,
    pub deps: *mut BITCODE_H,
    pub l4: BITCODE_BL,
    pub l5: BITCODE_BL,
    pub assocdep: BITCODE_H,
    pub num_values: BITCODE_BL,
    pub values: *mut Dwg_VALUEPARAM,
}
#[test]
fn bindgen_test_layout__dwg_ASSOCPARAMBASEDACTIONBODY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_ASSOCPARAMBASEDACTIONBODY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_ASSOCPARAMBASEDACTIONBODY>(),
        64usize,
        concat!("Size of: ", stringify!(_dwg_ASSOCPARAMBASEDACTIONBODY))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_ASSOCPARAMBASEDACTIONBODY>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_ASSOCPARAMBASEDACTIONBODY))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ASSOCPARAMBASEDACTIONBODY),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ASSOCPARAMBASEDACTIONBODY),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ASSOCPARAMBASEDACTIONBODY),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_deps) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ASSOCPARAMBASEDACTIONBODY),
            "::",
            stringify!(num_deps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deps) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ASSOCPARAMBASEDACTIONBODY),
            "::",
            stringify!(deps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l4) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ASSOCPARAMBASEDACTIONBODY),
            "::",
            stringify!(l4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l5) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ASSOCPARAMBASEDACTIONBODY),
            "::",
            stringify!(l5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).assocdep) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ASSOCPARAMBASEDACTIONBODY),
            "::",
            stringify!(assocdep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_values) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ASSOCPARAMBASEDACTIONBODY),
            "::",
            stringify!(num_values)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).values) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ASSOCPARAMBASEDACTIONBODY),
            "::",
            stringify!(values)
        )
    );
}
pub type Dwg_ASSOCPARAMBASEDACTIONBODY = _dwg_ASSOCPARAMBASEDACTIONBODY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_ASSOCACTION_Deps {
    pub parent: *mut _dwg_object_ASSOCACTION,
    pub is_owned: BITCODE_B,
    pub dep: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_ASSOCACTION_Deps() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_ASSOCACTION_Deps> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_ASSOCACTION_Deps>(),
        24usize,
        concat!("Size of: ", stringify!(_dwg_ASSOCACTION_Deps))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_ASSOCACTION_Deps>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_ASSOCACTION_Deps))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ASSOCACTION_Deps),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_owned) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ASSOCACTION_Deps),
            "::",
            stringify!(is_owned)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dep) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ASSOCACTION_Deps),
            "::",
            stringify!(dep)
        )
    );
}
pub type Dwg_ASSOCACTION_Deps = _dwg_ASSOCACTION_Deps;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_ASSOCDEPENDENCY {
    pub parent: *mut _dwg_object_object,
    pub class_version: BITCODE_BS,
    pub status: BITCODE_BL,
    pub is_read_dep: BITCODE_B,
    pub is_write_dep: BITCODE_B,
    pub is_attached_to_object: BITCODE_B,
    pub is_delegating_to_owning_action: BITCODE_B,
    pub order: BITCODE_BLd,
    pub dep_on: BITCODE_H,
    pub has_name: BITCODE_B,
    pub name: BITCODE_TV,
    pub depbodyid: BITCODE_BLd,
    pub readdep: BITCODE_H,
    pub dep_body: BITCODE_H,
    pub node: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_object_ASSOCDEPENDENCY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ASSOCDEPENDENCY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ASSOCDEPENDENCY>(),
        80usize,
        concat!("Size of: ", stringify!(_dwg_object_ASSOCDEPENDENCY))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ASSOCDEPENDENCY>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_ASSOCDEPENDENCY))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCDEPENDENCY),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCDEPENDENCY),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCDEPENDENCY),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_read_dep) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCDEPENDENCY),
            "::",
            stringify!(is_read_dep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_write_dep) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCDEPENDENCY),
            "::",
            stringify!(is_write_dep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_attached_to_object) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCDEPENDENCY),
            "::",
            stringify!(is_attached_to_object)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).is_delegating_to_owning_action) as usize - ptr as usize
        },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCDEPENDENCY),
            "::",
            stringify!(is_delegating_to_owning_action)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).order) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCDEPENDENCY),
            "::",
            stringify!(order)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dep_on) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCDEPENDENCY),
            "::",
            stringify!(dep_on)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCDEPENDENCY),
            "::",
            stringify!(has_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCDEPENDENCY),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depbodyid) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCDEPENDENCY),
            "::",
            stringify!(depbodyid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).readdep) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCDEPENDENCY),
            "::",
            stringify!(readdep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dep_body) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCDEPENDENCY),
            "::",
            stringify!(dep_body)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCDEPENDENCY),
            "::",
            stringify!(node)
        )
    );
}
pub type Dwg_Object_ASSOCDEPENDENCY = _dwg_object_ASSOCDEPENDENCY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_ASSOCVALUEDEPENDENCY {
    pub parent: *mut _dwg_object_object,
    pub assocdep: Dwg_Object_ASSOCDEPENDENCY,
}
#[test]
fn bindgen_test_layout__dwg_object_ASSOCVALUEDEPENDENCY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ASSOCVALUEDEPENDENCY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ASSOCVALUEDEPENDENCY>(),
        88usize,
        concat!("Size of: ", stringify!(_dwg_object_ASSOCVALUEDEPENDENCY))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ASSOCVALUEDEPENDENCY>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_ASSOCVALUEDEPENDENCY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCVALUEDEPENDENCY),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).assocdep) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCVALUEDEPENDENCY),
            "::",
            stringify!(assocdep)
        )
    );
}
pub type Dwg_Object_ASSOCVALUEDEPENDENCY = _dwg_object_ASSOCVALUEDEPENDENCY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_ASSOCGEOMDEPENDENCY {
    pub parent: *mut _dwg_object_object,
    pub assocdep: Dwg_Object_ASSOCDEPENDENCY,
    pub class_version: BITCODE_BS,
    pub enabled: BITCODE_B,
    pub classname: BITCODE_TV,
    pub dependent_on_compound_object: BITCODE_B,
}
#[test]
fn bindgen_test_layout__dwg_object_ASSOCGEOMDEPENDENCY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ASSOCGEOMDEPENDENCY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ASSOCGEOMDEPENDENCY>(),
        112usize,
        concat!("Size of: ", stringify!(_dwg_object_ASSOCGEOMDEPENDENCY))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ASSOCGEOMDEPENDENCY>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_ASSOCGEOMDEPENDENCY))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCGEOMDEPENDENCY),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).assocdep) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCGEOMDEPENDENCY),
            "::",
            stringify!(assocdep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCGEOMDEPENDENCY),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enabled) as usize - ptr as usize },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCGEOMDEPENDENCY),
            "::",
            stringify!(enabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).classname) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCGEOMDEPENDENCY),
            "::",
            stringify!(classname)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).dependent_on_compound_object) as usize - ptr as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCGEOMDEPENDENCY),
            "::",
            stringify!(dependent_on_compound_object)
        )
    );
}
pub type Dwg_Object_ASSOCGEOMDEPENDENCY = _dwg_object_ASSOCGEOMDEPENDENCY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_ASSOCACTION {
    pub parent: *mut _dwg_object_object,
    pub class_version: BITCODE_BS,
    pub geometry_status: BITCODE_BL,
    pub owningnetwork: BITCODE_H,
    pub actionbody: BITCODE_H,
    pub action_index: BITCODE_BL,
    pub max_assoc_dep_index: BITCODE_BL,
    pub num_deps: BITCODE_BL,
    pub deps: *mut Dwg_ASSOCACTION_Deps,
    pub num_owned_params: BITCODE_BL,
    pub owned_params: *mut BITCODE_H,
    pub num_values: BITCODE_BL,
    pub values: *mut Dwg_VALUEPARAM,
}
#[test]
fn bindgen_test_layout__dwg_object_ASSOCACTION() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ASSOCACTION> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ASSOCACTION>(),
        88usize,
        concat!("Size of: ", stringify!(_dwg_object_ASSOCACTION))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ASSOCACTION>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_ASSOCACTION))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCACTION),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCACTION),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geometry_status) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCACTION),
            "::",
            stringify!(geometry_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).owningnetwork) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCACTION),
            "::",
            stringify!(owningnetwork)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actionbody) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCACTION),
            "::",
            stringify!(actionbody)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).action_index) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCACTION),
            "::",
            stringify!(action_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_assoc_dep_index) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCACTION),
            "::",
            stringify!(max_assoc_dep_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_deps) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCACTION),
            "::",
            stringify!(num_deps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deps) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCACTION),
            "::",
            stringify!(deps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_owned_params) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCACTION),
            "::",
            stringify!(num_owned_params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).owned_params) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCACTION),
            "::",
            stringify!(owned_params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_values) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCACTION),
            "::",
            stringify!(num_values)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).values) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCACTION),
            "::",
            stringify!(values)
        )
    );
}
pub type Dwg_Object_ASSOCACTION = _dwg_object_ASSOCACTION;
#[doc = "Object ASSOCNETWORK (varies)\nsubclass of AcDbAssocAction\nObject1 --ReadDep--> Action1 --WriteDep1--> Object2 --ReadDep--> Action2 ...\nextdict: ACAD_ASSOCNETWORK"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_ASSOCNETWORK {
    pub parent: *mut _dwg_object_object,
    pub class_version: BITCODE_BS,
    pub geometry_status: BITCODE_BL,
    pub owningnetwork: BITCODE_H,
    pub actionbody: BITCODE_H,
    pub action_index: BITCODE_BL,
    pub max_assoc_dep_index: BITCODE_BL,
    pub num_deps: BITCODE_BL,
    pub deps: *mut Dwg_ASSOCACTION_Deps,
    pub num_owned_params: BITCODE_BL,
    pub owned_params: *mut BITCODE_H,
    pub num_values: BITCODE_BL,
    pub values: *mut Dwg_VALUEPARAM,
    pub network_version: BITCODE_BS,
    pub network_action_index: BITCODE_BL,
    pub num_actions: BITCODE_BL,
    pub actions: *mut Dwg_ASSOCACTION_Deps,
    pub num_owned_actions: BITCODE_BL,
    pub owned_actions: *mut BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_object_ASSOCNETWORK() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ASSOCNETWORK> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ASSOCNETWORK>(),
        128usize,
        concat!("Size of: ", stringify!(_dwg_object_ASSOCNETWORK))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ASSOCNETWORK>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_ASSOCNETWORK))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCNETWORK),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCNETWORK),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geometry_status) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCNETWORK),
            "::",
            stringify!(geometry_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).owningnetwork) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCNETWORK),
            "::",
            stringify!(owningnetwork)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actionbody) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCNETWORK),
            "::",
            stringify!(actionbody)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).action_index) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCNETWORK),
            "::",
            stringify!(action_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_assoc_dep_index) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCNETWORK),
            "::",
            stringify!(max_assoc_dep_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_deps) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCNETWORK),
            "::",
            stringify!(num_deps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deps) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCNETWORK),
            "::",
            stringify!(deps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_owned_params) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCNETWORK),
            "::",
            stringify!(num_owned_params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).owned_params) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCNETWORK),
            "::",
            stringify!(owned_params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_values) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCNETWORK),
            "::",
            stringify!(num_values)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).values) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCNETWORK),
            "::",
            stringify!(values)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).network_version) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCNETWORK),
            "::",
            stringify!(network_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).network_action_index) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCNETWORK),
            "::",
            stringify!(network_action_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_actions) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCNETWORK),
            "::",
            stringify!(num_actions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actions) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCNETWORK),
            "::",
            stringify!(actions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_owned_actions) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCNETWORK),
            "::",
            stringify!(num_owned_actions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).owned_actions) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCNETWORK),
            "::",
            stringify!(owned_actions)
        )
    );
}
#[doc = "Object ASSOCNETWORK (varies)\nsubclass of AcDbAssocAction\nObject1 --ReadDep--> Action1 --WriteDep1--> Object2 --ReadDep--> Action2 ...\nextdict: ACAD_ASSOCNETWORK"]
pub type Dwg_Object_ASSOCNETWORK = _dwg_object_ASSOCNETWORK;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_CONSTRAINTGROUPNODE {
    pub parent: *mut _dwg_object_ASSOC2DCONSTRAINTGROUP,
    pub nodeid: BITCODE_BL,
    pub status: BITCODE_RC,
    pub num_connections: BITCODE_BL,
    pub connections: *mut BITCODE_BL,
}
#[test]
fn bindgen_test_layout__dwg_CONSTRAINTGROUPNODE() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_CONSTRAINTGROUPNODE> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_CONSTRAINTGROUPNODE>(),
        32usize,
        concat!("Size of: ", stringify!(_dwg_CONSTRAINTGROUPNODE))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_CONSTRAINTGROUPNODE>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_CONSTRAINTGROUPNODE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_CONSTRAINTGROUPNODE),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeid) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_CONSTRAINTGROUPNODE),
            "::",
            stringify!(nodeid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_CONSTRAINTGROUPNODE),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_connections) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_CONSTRAINTGROUPNODE),
            "::",
            stringify!(num_connections)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connections) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_CONSTRAINTGROUPNODE),
            "::",
            stringify!(connections)
        )
    );
}
pub type Dwg_CONSTRAINTGROUPNODE = _dwg_CONSTRAINTGROUPNODE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_ASSOC2DCONSTRAINTGROUP {
    pub parent: *mut _dwg_object_object,
    pub class_version: BITCODE_BS,
    pub geometry_status: BITCODE_BL,
    pub owningnetwork: BITCODE_H,
    pub actionbody: BITCODE_H,
    pub action_index: BITCODE_BL,
    pub max_assoc_dep_index: BITCODE_BL,
    pub num_deps: BITCODE_BL,
    pub deps: *mut Dwg_ASSOCACTION_Deps,
    pub num_owned_params: BITCODE_BL,
    pub owned_params: *mut BITCODE_H,
    pub num_values: BITCODE_BL,
    pub values: *mut Dwg_VALUEPARAM,
    pub version: BITCODE_BL,
    pub b1: BITCODE_B,
    pub workplane: [BITCODE_3BD; 3usize],
    pub h1: BITCODE_H,
    pub num_actions: BITCODE_BL,
    pub actions: *mut BITCODE_H,
    pub num_nodes: BITCODE_BL,
    pub nodes: *mut Dwg_CONSTRAINTGROUPNODE,
}
#[test]
fn bindgen_test_layout__dwg_object_ASSOC2DCONSTRAINTGROUP() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ASSOC2DCONSTRAINTGROUP> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ASSOC2DCONSTRAINTGROUP>(),
        208usize,
        concat!("Size of: ", stringify!(_dwg_object_ASSOC2DCONSTRAINTGROUP))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ASSOC2DCONSTRAINTGROUP>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_ASSOC2DCONSTRAINTGROUP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOC2DCONSTRAINTGROUP),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOC2DCONSTRAINTGROUP),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geometry_status) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOC2DCONSTRAINTGROUP),
            "::",
            stringify!(geometry_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).owningnetwork) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOC2DCONSTRAINTGROUP),
            "::",
            stringify!(owningnetwork)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actionbody) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOC2DCONSTRAINTGROUP),
            "::",
            stringify!(actionbody)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).action_index) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOC2DCONSTRAINTGROUP),
            "::",
            stringify!(action_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_assoc_dep_index) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOC2DCONSTRAINTGROUP),
            "::",
            stringify!(max_assoc_dep_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_deps) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOC2DCONSTRAINTGROUP),
            "::",
            stringify!(num_deps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deps) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOC2DCONSTRAINTGROUP),
            "::",
            stringify!(deps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_owned_params) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOC2DCONSTRAINTGROUP),
            "::",
            stringify!(num_owned_params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).owned_params) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOC2DCONSTRAINTGROUP),
            "::",
            stringify!(owned_params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_values) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOC2DCONSTRAINTGROUP),
            "::",
            stringify!(num_values)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).values) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOC2DCONSTRAINTGROUP),
            "::",
            stringify!(values)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOC2DCONSTRAINTGROUP),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b1) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOC2DCONSTRAINTGROUP),
            "::",
            stringify!(b1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).workplane) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOC2DCONSTRAINTGROUP),
            "::",
            stringify!(workplane)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h1) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOC2DCONSTRAINTGROUP),
            "::",
            stringify!(h1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_actions) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOC2DCONSTRAINTGROUP),
            "::",
            stringify!(num_actions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actions) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOC2DCONSTRAINTGROUP),
            "::",
            stringify!(actions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_nodes) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOC2DCONSTRAINTGROUP),
            "::",
            stringify!(num_nodes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodes) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOC2DCONSTRAINTGROUP),
            "::",
            stringify!(nodes)
        )
    );
}
pub type Dwg_Object_ASSOC2DCONSTRAINTGROUP = _dwg_object_ASSOC2DCONSTRAINTGROUP;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_ASSOCVARIABLE {
    pub parent: *mut _dwg_object_object,
    pub av_class_version: BITCODE_BS,
    pub class_version: BITCODE_BS,
    pub geometry_status: BITCODE_BL,
    pub owningnetwork: BITCODE_H,
    pub actionbody: BITCODE_H,
    pub action_index: BITCODE_BL,
    pub max_assoc_dep_index: BITCODE_BL,
    pub num_deps: BITCODE_BL,
    pub deps: *mut Dwg_ASSOCACTION_Deps,
    pub num_owned_params: BITCODE_BL,
    pub owned_params: *mut BITCODE_H,
    pub num_values: BITCODE_BL,
    pub values: *mut Dwg_VALUEPARAM,
    pub name: BITCODE_TV,
    pub t58: BITCODE_TV,
    pub evaluator: BITCODE_TV,
    pub desc: BITCODE_TV,
    pub value: Dwg_EvalVariant,
    pub has_t78: BITCODE_B,
    pub t78: BITCODE_TV,
    pub b290: BITCODE_B,
}
#[test]
fn bindgen_test_layout__dwg_object_ASSOCVARIABLE() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ASSOCVARIABLE> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ASSOCVARIABLE>(),
        160usize,
        concat!("Size of: ", stringify!(_dwg_object_ASSOCVARIABLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ASSOCVARIABLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_ASSOCVARIABLE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCVARIABLE),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).av_class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCVARIABLE),
            "::",
            stringify!(av_class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCVARIABLE),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geometry_status) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCVARIABLE),
            "::",
            stringify!(geometry_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).owningnetwork) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCVARIABLE),
            "::",
            stringify!(owningnetwork)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actionbody) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCVARIABLE),
            "::",
            stringify!(actionbody)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).action_index) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCVARIABLE),
            "::",
            stringify!(action_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_assoc_dep_index) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCVARIABLE),
            "::",
            stringify!(max_assoc_dep_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_deps) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCVARIABLE),
            "::",
            stringify!(num_deps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deps) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCVARIABLE),
            "::",
            stringify!(deps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_owned_params) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCVARIABLE),
            "::",
            stringify!(num_owned_params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).owned_params) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCVARIABLE),
            "::",
            stringify!(owned_params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_values) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCVARIABLE),
            "::",
            stringify!(num_values)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).values) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCVARIABLE),
            "::",
            stringify!(values)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCVARIABLE),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t58) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCVARIABLE),
            "::",
            stringify!(t58)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evaluator) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCVARIABLE),
            "::",
            stringify!(evaluator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).desc) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCVARIABLE),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCVARIABLE),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_t78) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCVARIABLE),
            "::",
            stringify!(has_t78)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t78) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCVARIABLE),
            "::",
            stringify!(t78)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b290) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCVARIABLE),
            "::",
            stringify!(b290)
        )
    );
}
pub type Dwg_Object_ASSOCVARIABLE = _dwg_object_ASSOCVARIABLE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_EVAL_Node {
    pub parent: *mut _dwg_object_EVALUATION_GRAPH,
    pub id: BITCODE_BL,
    pub edge_flags: BITCODE_BL,
    pub nextid: BITCODE_BLd,
    pub evalexpr: BITCODE_H,
    pub node: [BITCODE_BLd; 4usize],
    pub active_cycles: BITCODE_B,
}
#[test]
fn bindgen_test_layout__dwg_EVAL_Node() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_EVAL_Node> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_EVAL_Node>(),
        56usize,
        concat!("Size of: ", stringify!(_dwg_EVAL_Node))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_EVAL_Node>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_EVAL_Node))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_EVAL_Node),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_EVAL_Node),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_EVAL_Node),
            "::",
            stringify!(edge_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nextid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_EVAL_Node),
            "::",
            stringify!(nextid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_EVAL_Node),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_EVAL_Node),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).active_cycles) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_EVAL_Node),
            "::",
            stringify!(active_cycles)
        )
    );
}
pub type Dwg_EVAL_Node = _dwg_EVAL_Node;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_EVAL_Edge {
    pub parent: *mut _dwg_object_EVALUATION_GRAPH,
    pub id: BITCODE_BL,
    pub nextid: BITCODE_BLd,
    pub e1: BITCODE_BLd,
    pub e2: BITCODE_BLd,
    pub e3: BITCODE_BLd,
    pub out_edge: [BITCODE_BLd; 5usize],
}
#[test]
fn bindgen_test_layout__dwg_EVAL_Edge() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_EVAL_Edge> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_EVAL_Edge>(),
        48usize,
        concat!("Size of: ", stringify!(_dwg_EVAL_Edge))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_EVAL_Edge>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_EVAL_Edge))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_EVAL_Edge),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_EVAL_Edge),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nextid) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_EVAL_Edge),
            "::",
            stringify!(nextid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_EVAL_Edge),
            "::",
            stringify!(e1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e2) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_EVAL_Edge),
            "::",
            stringify!(e2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e3) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_EVAL_Edge),
            "::",
            stringify!(e3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).out_edge) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_EVAL_Edge),
            "::",
            stringify!(out_edge)
        )
    );
}
pub type Dwg_EVAL_Edge = _dwg_EVAL_Edge;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_EVALUATION_GRAPH {
    pub parent: *mut _dwg_object_object,
    pub major: BITCODE_BL,
    pub minor: BITCODE_BL,
    pub first_nodeid: BITCODE_BLd,
    pub first_nodeid_copy: BITCODE_BLd,
    pub num_nodes: BITCODE_BL,
    pub nodes: *mut Dwg_EVAL_Node,
    pub has_graph: BITCODE_B,
    pub num_edges: BITCODE_BL,
    pub edges: *mut Dwg_EVAL_Edge,
}
#[test]
fn bindgen_test_layout__dwg_object_EVALUATION_GRAPH() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_EVALUATION_GRAPH> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_EVALUATION_GRAPH>(),
        56usize,
        concat!("Size of: ", stringify!(_dwg_object_EVALUATION_GRAPH))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_EVALUATION_GRAPH>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_EVALUATION_GRAPH))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_EVALUATION_GRAPH),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_EVALUATION_GRAPH),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_EVALUATION_GRAPH),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).first_nodeid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_EVALUATION_GRAPH),
            "::",
            stringify!(first_nodeid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).first_nodeid_copy) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_EVALUATION_GRAPH),
            "::",
            stringify!(first_nodeid_copy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_nodes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_EVALUATION_GRAPH),
            "::",
            stringify!(num_nodes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodes) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_EVALUATION_GRAPH),
            "::",
            stringify!(nodes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_graph) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_EVALUATION_GRAPH),
            "::",
            stringify!(has_graph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_edges) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_EVALUATION_GRAPH),
            "::",
            stringify!(num_edges)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edges) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_EVALUATION_GRAPH),
            "::",
            stringify!(edges)
        )
    );
}
pub type Dwg_Object_EVALUATION_GRAPH = _dwg_object_EVALUATION_GRAPH;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_DYNAMICBLOCKPURGEPREVENTER {
    pub parent: *mut _dwg_object_object,
    #[doc = "< DXF 70 0"]
    pub flag: BITCODE_BS,
    pub block: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_object_DYNAMICBLOCKPURGEPREVENTER() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_DYNAMICBLOCKPURGEPREVENTER> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_DYNAMICBLOCKPURGEPREVENTER>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_object_DYNAMICBLOCKPURGEPREVENTER)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_DYNAMICBLOCKPURGEPREVENTER>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_DYNAMICBLOCKPURGEPREVENTER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DYNAMICBLOCKPURGEPREVENTER),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DYNAMICBLOCKPURGEPREVENTER),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DYNAMICBLOCKPURGEPREVENTER),
            "::",
            stringify!(block)
        )
    );
}
pub type Dwg_Object_DYNAMICBLOCKPURGEPREVENTER = _dwg_object_DYNAMICBLOCKPURGEPREVENTER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_PERSUBENTMGR {
    pub parent: *mut _dwg_object_object,
    #[doc = "< DXF 90 2"]
    pub class_version: BITCODE_BL,
    #[doc = "< DXF 90 0"]
    pub unknown_0: BITCODE_BL,
    #[doc = "< DXF 90 2"]
    pub unknown_2: BITCODE_BL,
    #[doc = "< DXF 90 3 from ASSOCPERSSUBENTMANAGER"]
    pub numassocsteps: BITCODE_BL,
    #[doc = "< DXF 90 0 from ASSOCPERSSUBENTMANAGER"]
    pub numassocsubents: BITCODE_BL,
    #[doc = "< DXF 90 1"]
    pub num_steps: BITCODE_BL,
    #[doc = "< DXF 90"]
    pub steps: *mut BITCODE_BL,
    #[doc = "< DXF 90"]
    pub num_subents: BITCODE_BL,
    #[doc = "< DXF 90 types/handles?"]
    pub subents: *mut BITCODE_BL,
}
#[test]
fn bindgen_test_layout__dwg_object_PERSUBENTMGR() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_PERSUBENTMGR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_PERSUBENTMGR>(),
        56usize,
        concat!("Size of: ", stringify!(_dwg_object_PERSUBENTMGR))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_PERSUBENTMGR>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_PERSUBENTMGR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PERSUBENTMGR),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PERSUBENTMGR),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_0) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PERSUBENTMGR),
            "::",
            stringify!(unknown_0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PERSUBENTMGR),
            "::",
            stringify!(unknown_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numassocsteps) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PERSUBENTMGR),
            "::",
            stringify!(numassocsteps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numassocsubents) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PERSUBENTMGR),
            "::",
            stringify!(numassocsubents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_steps) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PERSUBENTMGR),
            "::",
            stringify!(num_steps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).steps) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PERSUBENTMGR),
            "::",
            stringify!(steps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_subents) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PERSUBENTMGR),
            "::",
            stringify!(num_subents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subents) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PERSUBENTMGR),
            "::",
            stringify!(subents)
        )
    );
}
pub type Dwg_Object_PERSUBENTMGR = _dwg_object_PERSUBENTMGR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_ASSOCPERSSUBENTMANAGER {
    pub parent: *mut _dwg_object_object,
    #[doc = "< DXF 90 1 or r2013+ 2"]
    pub class_version: BITCODE_BL,
    #[doc = "< DXF 90 always 3"]
    pub unknown_3: BITCODE_BL,
    #[doc = "< DXF 90 always 0"]
    pub unknown_0: BITCODE_BL,
    #[doc = "< DXF 90 always 2"]
    pub unknown_2: BITCODE_BL,
    #[doc = "< DXF 90 3"]
    pub num_steps: BITCODE_BL,
    #[doc = "< DXF 90 5"]
    pub num_subents: BITCODE_BL,
    #[doc = "< DXF 90"]
    pub steps: *mut BITCODE_BL,
    #[doc = "< FIXME: subent struct"]
    pub subents: *mut BITCODE_BL,
    #[doc = "< DXF 90 5"]
    pub unknown_bl6: BITCODE_BL,
    #[doc = "< DXF 90 0"]
    pub unknown_bl6a: BITCODE_BL,
    #[doc = "< DXF 90 3"]
    pub unknown_bl7a: BITCODE_BL,
    #[doc = "< DXF 90 2"]
    pub unknown_bl7: BITCODE_BL,
    #[doc = "< DXF 90 2"]
    pub unknown_bl8: BITCODE_BL,
    #[doc = "< DXF 90 2"]
    pub unknown_bl9: BITCODE_BL,
    #[doc = "< DXF 90 21"]
    pub unknown_bl10: BITCODE_BL,
    #[doc = "< DXF 90 0"]
    pub unknown_bl11: BITCODE_BL,
    #[doc = "< DXF 90 0"]
    pub unknown_bl12: BITCODE_BL,
    #[doc = "< DXF 90 0"]
    pub unknown_bl13: BITCODE_BL,
    #[doc = "< DXF 90 0"]
    pub unknown_bl14: BITCODE_BL,
    #[doc = "< DXF 90 1"]
    pub unknown_bl15: BITCODE_BL,
    #[doc = "< DXF 90 3"]
    pub unknown_bl16: BITCODE_BL,
    #[doc = "< DXF 90 1"]
    pub unknown_bl17: BITCODE_BL,
    #[doc = "< DXF 90 1000000000"]
    pub unknown_bl18: BITCODE_BL,
    #[doc = "< DXF 90 1001"]
    pub unknown_bl19: BITCODE_BL,
    #[doc = "< DXF 90 1"]
    pub unknown_bl20: BITCODE_BL,
    #[doc = "< DXF 90 1000000000"]
    pub unknown_bl21: BITCODE_BL,
    #[doc = "< DXF 90 51001"]
    pub unknown_bl22: BITCODE_BL,
    #[doc = "< DXF 90 1"]
    pub unknown_bl23: BITCODE_BL,
    #[doc = "< DXF 90 1000000000"]
    pub unknown_bl24: BITCODE_BL,
    #[doc = "< DXF 90 351001"]
    pub unknown_bl25: BITCODE_BL,
    #[doc = "< DXF 90 0"]
    pub unknown_bl26: BITCODE_BL,
    #[doc = "< DXF 90 0"]
    pub unknown_bl27: BITCODE_BL,
    #[doc = "< DXF 90 0"]
    pub unknown_bl28: BITCODE_BL,
    #[doc = "< DXF 90 900"]
    pub unknown_bl29: BITCODE_BL,
    #[doc = "< DXF 90 0"]
    pub unknown_bl30: BITCODE_BL,
    #[doc = "< DXF 90 900"]
    pub unknown_bl31: BITCODE_BL,
    #[doc = "< DXF 90 0"]
    pub unknown_bl32: BITCODE_BL,
    #[doc = "< DXF 90 2"]
    pub unknown_bl33: BITCODE_BL,
    #[doc = "< DXF 90 2"]
    pub unknown_bl34: BITCODE_BL,
    #[doc = "< DXF 90 3 0100000011"]
    pub unknown_bl35: BITCODE_BL,
    #[doc = "< DXF 90 0"]
    pub unknown_bl36: BITCODE_BL,
    #[doc = "< DXF 290 0"]
    pub unknown_b37: BITCODE_B,
}
#[test]
fn bindgen_test_layout__dwg_object_ASSOCPERSSUBENTMANAGER() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ASSOCPERSSUBENTMANAGER> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ASSOCPERSSUBENTMANAGER>(),
        184usize,
        concat!("Size of: ", stringify!(_dwg_object_ASSOCPERSSUBENTMANAGER))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ASSOCPERSSUBENTMANAGER>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_ASSOCPERSSUBENTMANAGER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPERSSUBENTMANAGER),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPERSSUBENTMANAGER),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_3) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPERSSUBENTMANAGER),
            "::",
            stringify!(unknown_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_0) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPERSSUBENTMANAGER),
            "::",
            stringify!(unknown_0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_2) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPERSSUBENTMANAGER),
            "::",
            stringify!(unknown_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_steps) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPERSSUBENTMANAGER),
            "::",
            stringify!(num_steps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_subents) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPERSSUBENTMANAGER),
            "::",
            stringify!(num_subents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).steps) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPERSSUBENTMANAGER),
            "::",
            stringify!(steps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subents) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPERSSUBENTMANAGER),
            "::",
            stringify!(subents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bl6) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPERSSUBENTMANAGER),
            "::",
            stringify!(unknown_bl6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bl6a) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPERSSUBENTMANAGER),
            "::",
            stringify!(unknown_bl6a)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bl7a) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPERSSUBENTMANAGER),
            "::",
            stringify!(unknown_bl7a)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bl7) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPERSSUBENTMANAGER),
            "::",
            stringify!(unknown_bl7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bl8) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPERSSUBENTMANAGER),
            "::",
            stringify!(unknown_bl8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bl9) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPERSSUBENTMANAGER),
            "::",
            stringify!(unknown_bl9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bl10) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPERSSUBENTMANAGER),
            "::",
            stringify!(unknown_bl10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bl11) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPERSSUBENTMANAGER),
            "::",
            stringify!(unknown_bl11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bl12) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPERSSUBENTMANAGER),
            "::",
            stringify!(unknown_bl12)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bl13) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPERSSUBENTMANAGER),
            "::",
            stringify!(unknown_bl13)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bl14) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPERSSUBENTMANAGER),
            "::",
            stringify!(unknown_bl14)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bl15) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPERSSUBENTMANAGER),
            "::",
            stringify!(unknown_bl15)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bl16) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPERSSUBENTMANAGER),
            "::",
            stringify!(unknown_bl16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bl17) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPERSSUBENTMANAGER),
            "::",
            stringify!(unknown_bl17)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bl18) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPERSSUBENTMANAGER),
            "::",
            stringify!(unknown_bl18)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bl19) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPERSSUBENTMANAGER),
            "::",
            stringify!(unknown_bl19)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bl20) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPERSSUBENTMANAGER),
            "::",
            stringify!(unknown_bl20)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bl21) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPERSSUBENTMANAGER),
            "::",
            stringify!(unknown_bl21)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bl22) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPERSSUBENTMANAGER),
            "::",
            stringify!(unknown_bl22)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bl23) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPERSSUBENTMANAGER),
            "::",
            stringify!(unknown_bl23)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bl24) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPERSSUBENTMANAGER),
            "::",
            stringify!(unknown_bl24)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bl25) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPERSSUBENTMANAGER),
            "::",
            stringify!(unknown_bl25)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bl26) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPERSSUBENTMANAGER),
            "::",
            stringify!(unknown_bl26)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bl27) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPERSSUBENTMANAGER),
            "::",
            stringify!(unknown_bl27)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bl28) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPERSSUBENTMANAGER),
            "::",
            stringify!(unknown_bl28)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bl29) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPERSSUBENTMANAGER),
            "::",
            stringify!(unknown_bl29)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bl30) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPERSSUBENTMANAGER),
            "::",
            stringify!(unknown_bl30)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bl31) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPERSSUBENTMANAGER),
            "::",
            stringify!(unknown_bl31)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bl32) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPERSSUBENTMANAGER),
            "::",
            stringify!(unknown_bl32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bl33) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPERSSUBENTMANAGER),
            "::",
            stringify!(unknown_bl33)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bl34) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPERSSUBENTMANAGER),
            "::",
            stringify!(unknown_bl34)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bl35) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPERSSUBENTMANAGER),
            "::",
            stringify!(unknown_bl35)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bl36) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPERSSUBENTMANAGER),
            "::",
            stringify!(unknown_bl36)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_b37) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPERSSUBENTMANAGER),
            "::",
            stringify!(unknown_b37)
        )
    );
}
pub type Dwg_Object_ASSOCPERSSUBENTMANAGER = _dwg_object_ASSOCPERSSUBENTMANAGER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_ASSOCACTIONPARAM {
    pub parent: *mut _dwg_object_object,
    pub is_r2013: BITCODE_BS,
    pub aap_version: BITCODE_BL,
    pub name: BITCODE_TV,
}
#[test]
fn bindgen_test_layout__dwg_object_ASSOCACTIONPARAM() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ASSOCACTIONPARAM> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ASSOCACTIONPARAM>(),
        24usize,
        concat!("Size of: ", stringify!(_dwg_object_ASSOCACTIONPARAM))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ASSOCACTIONPARAM>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_ASSOCACTIONPARAM))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCACTIONPARAM),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_r2013) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCACTIONPARAM),
            "::",
            stringify!(is_r2013)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aap_version) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCACTIONPARAM),
            "::",
            stringify!(aap_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCACTIONPARAM),
            "::",
            stringify!(name)
        )
    );
}
pub type Dwg_Object_ASSOCACTIONPARAM = _dwg_object_ASSOCACTIONPARAM;
#[doc = "Object ASSOCOSNAPPOINTREFACTIONPARAM (varies)\nAction parameter that owns other AcDbAssocActionParameters,\nallowing the representation of hierarchical structures of action parameters."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_ASSOCOSNAPPOINTREFACTIONPARAM {
    pub parent: *mut _dwg_object_object,
    pub is_r2013: BITCODE_BS,
    pub aap_version: BITCODE_BL,
    pub name: BITCODE_TV,
    pub class_version: BITCODE_BS,
    pub bs1: BITCODE_BS,
    pub num_params: BITCODE_BL,
    pub params: *mut BITCODE_H,
    pub has_child_param: BITCODE_B,
    pub child_status: BITCODE_BS,
    pub child_id: BITCODE_BL,
    pub child_param: BITCODE_H,
    pub h330_2: BITCODE_H,
    pub bl2: BITCODE_BL,
    pub h330_3: BITCODE_H,
    pub status: BITCODE_BS,
    pub osnap_mode: BITCODE_RC,
    pub param: BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_object_ASSOCOSNAPPOINTREFACTIONPARAM() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ASSOCOSNAPPOINTREFACTIONPARAM> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ASSOCOSNAPPOINTREFACTIONPARAM>(),
        96usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_object_ASSOCOSNAPPOINTREFACTIONPARAM)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ASSOCOSNAPPOINTREFACTIONPARAM>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_ASSOCOSNAPPOINTREFACTIONPARAM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCOSNAPPOINTREFACTIONPARAM),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_r2013) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCOSNAPPOINTREFACTIONPARAM),
            "::",
            stringify!(is_r2013)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aap_version) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCOSNAPPOINTREFACTIONPARAM),
            "::",
            stringify!(aap_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCOSNAPPOINTREFACTIONPARAM),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCOSNAPPOINTREFACTIONPARAM),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bs1) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCOSNAPPOINTREFACTIONPARAM),
            "::",
            stringify!(bs1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_params) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCOSNAPPOINTREFACTIONPARAM),
            "::",
            stringify!(num_params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).params) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCOSNAPPOINTREFACTIONPARAM),
            "::",
            stringify!(params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_child_param) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCOSNAPPOINTREFACTIONPARAM),
            "::",
            stringify!(has_child_param)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).child_status) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCOSNAPPOINTREFACTIONPARAM),
            "::",
            stringify!(child_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).child_id) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCOSNAPPOINTREFACTIONPARAM),
            "::",
            stringify!(child_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).child_param) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCOSNAPPOINTREFACTIONPARAM),
            "::",
            stringify!(child_param)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h330_2) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCOSNAPPOINTREFACTIONPARAM),
            "::",
            stringify!(h330_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bl2) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCOSNAPPOINTREFACTIONPARAM),
            "::",
            stringify!(bl2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h330_3) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCOSNAPPOINTREFACTIONPARAM),
            "::",
            stringify!(h330_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCOSNAPPOINTREFACTIONPARAM),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).osnap_mode) as usize - ptr as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCOSNAPPOINTREFACTIONPARAM),
            "::",
            stringify!(osnap_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCOSNAPPOINTREFACTIONPARAM),
            "::",
            stringify!(param)
        )
    );
}
#[doc = "Object ASSOCOSNAPPOINTREFACTIONPARAM (varies)\nAction parameter that owns other AcDbAssocActionParameters,\nallowing the representation of hierarchical structures of action parameters."]
pub type Dwg_Object_ASSOCOSNAPPOINTREFACTIONPARAM = _dwg_object_ASSOCOSNAPPOINTREFACTIONPARAM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_ASSOCPOINTREFACTIONPARAM {
    pub parent: *mut _dwg_object_object,
    pub is_r2013: BITCODE_BS,
    pub aap_version: BITCODE_BL,
    pub name: BITCODE_TV,
    pub class_version: BITCODE_BS,
    pub bs1: BITCODE_BS,
    pub num_params: BITCODE_BL,
    pub params: *mut BITCODE_H,
    pub has_child_param: BITCODE_B,
    pub child_status: BITCODE_BS,
    pub child_id: BITCODE_BL,
    pub child_param: BITCODE_H,
    pub h330_2: BITCODE_H,
    pub bl2: BITCODE_BL,
    pub h330_3: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_object_ASSOCPOINTREFACTIONPARAM() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ASSOCPOINTREFACTIONPARAM> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ASSOCPOINTREFACTIONPARAM>(),
        80usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_object_ASSOCPOINTREFACTIONPARAM)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ASSOCPOINTREFACTIONPARAM>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_ASSOCPOINTREFACTIONPARAM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPOINTREFACTIONPARAM),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_r2013) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPOINTREFACTIONPARAM),
            "::",
            stringify!(is_r2013)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aap_version) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPOINTREFACTIONPARAM),
            "::",
            stringify!(aap_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPOINTREFACTIONPARAM),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPOINTREFACTIONPARAM),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bs1) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPOINTREFACTIONPARAM),
            "::",
            stringify!(bs1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_params) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPOINTREFACTIONPARAM),
            "::",
            stringify!(num_params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).params) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPOINTREFACTIONPARAM),
            "::",
            stringify!(params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_child_param) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPOINTREFACTIONPARAM),
            "::",
            stringify!(has_child_param)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).child_status) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPOINTREFACTIONPARAM),
            "::",
            stringify!(child_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).child_id) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPOINTREFACTIONPARAM),
            "::",
            stringify!(child_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).child_param) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPOINTREFACTIONPARAM),
            "::",
            stringify!(child_param)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h330_2) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPOINTREFACTIONPARAM),
            "::",
            stringify!(h330_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bl2) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPOINTREFACTIONPARAM),
            "::",
            stringify!(bl2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h330_3) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPOINTREFACTIONPARAM),
            "::",
            stringify!(h330_3)
        )
    );
}
pub type Dwg_Object_ASSOCPOINTREFACTIONPARAM = _dwg_object_ASSOCPOINTREFACTIONPARAM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_ASSOCASMBODYACTIONPARAM {
    pub parent: *mut _dwg_object_object,
    pub is_r2013: BITCODE_BS,
    pub aap_version: BITCODE_BL,
    pub name: BITCODE_TV,
    pub asdap_class_version: BITCODE_BL,
    pub dep: BITCODE_H,
    pub class_version: BITCODE_BL,
    pub acis_empty: BITCODE_B,
    pub unknown: BITCODE_B,
    pub version: BITCODE_BS,
    pub num_blocks: BITCODE_BL,
    pub block_size: *mut BITCODE_BL,
    pub encr_sat_data: *mut *mut ::std::os::raw::c_char,
    pub sab_size: BITCODE_BL,
    pub acis_data: *mut BITCODE_RC,
    pub wireframe_data_present: BITCODE_B,
    pub point_present: BITCODE_B,
    pub point: BITCODE_3BD,
    pub isolines: BITCODE_BL,
    pub isoline_present: BITCODE_B,
    pub num_wires: BITCODE_BL,
    pub wires: *mut Dwg_3DSOLID_wire,
    pub num_silhouettes: BITCODE_BL,
    pub silhouettes: *mut Dwg_3DSOLID_silhouette,
    pub _dxf_sab_converted: BITCODE_B,
    pub acis_empty2: BITCODE_B,
    pub extra_acis_data: *mut _dwg_entity_3DSOLID,
    pub num_materials: BITCODE_BL,
    pub materials: *mut Dwg_3DSOLID_material,
    pub revision_guid: [BITCODE_RC; 39usize],
    pub revision_major: BITCODE_BL,
    pub revision_minor1: BITCODE_BS,
    pub revision_minor2: BITCODE_BS,
    pub revision_bytes: [BITCODE_RC; 9usize],
    pub end_marker: BITCODE_BL,
    pub history_id: BITCODE_H,
    pub has_revision_guid: BITCODE_B,
    pub acis_empty_bit: BITCODE_B,
}
#[test]
fn bindgen_test_layout__dwg_object_ASSOCASMBODYACTIONPARAM() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ASSOCASMBODYACTIONPARAM> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ASSOCASMBODYACTIONPARAM>(),
        272usize,
        concat!("Size of: ", stringify!(_dwg_object_ASSOCASMBODYACTIONPARAM))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ASSOCASMBODYACTIONPARAM>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_ASSOCASMBODYACTIONPARAM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCASMBODYACTIONPARAM),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_r2013) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCASMBODYACTIONPARAM),
            "::",
            stringify!(is_r2013)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aap_version) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCASMBODYACTIONPARAM),
            "::",
            stringify!(aap_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCASMBODYACTIONPARAM),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).asdap_class_version) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCASMBODYACTIONPARAM),
            "::",
            stringify!(asdap_class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dep) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCASMBODYACTIONPARAM),
            "::",
            stringify!(dep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCASMBODYACTIONPARAM),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acis_empty) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCASMBODYACTIONPARAM),
            "::",
            stringify!(acis_empty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown) as usize - ptr as usize },
        45usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCASMBODYACTIONPARAM),
            "::",
            stringify!(unknown)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCASMBODYACTIONPARAM),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_blocks) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCASMBODYACTIONPARAM),
            "::",
            stringify!(num_blocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block_size) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCASMBODYACTIONPARAM),
            "::",
            stringify!(block_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encr_sat_data) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCASMBODYACTIONPARAM),
            "::",
            stringify!(encr_sat_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sab_size) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCASMBODYACTIONPARAM),
            "::",
            stringify!(sab_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acis_data) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCASMBODYACTIONPARAM),
            "::",
            stringify!(acis_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wireframe_data_present) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCASMBODYACTIONPARAM),
            "::",
            stringify!(wireframe_data_present)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).point_present) as usize - ptr as usize },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCASMBODYACTIONPARAM),
            "::",
            stringify!(point_present)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).point) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCASMBODYACTIONPARAM),
            "::",
            stringify!(point)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isolines) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCASMBODYACTIONPARAM),
            "::",
            stringify!(isolines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isoline_present) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCASMBODYACTIONPARAM),
            "::",
            stringify!(isoline_present)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_wires) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCASMBODYACTIONPARAM),
            "::",
            stringify!(num_wires)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wires) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCASMBODYACTIONPARAM),
            "::",
            stringify!(wires)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_silhouettes) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCASMBODYACTIONPARAM),
            "::",
            stringify!(num_silhouettes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).silhouettes) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCASMBODYACTIONPARAM),
            "::",
            stringify!(silhouettes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._dxf_sab_converted) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCASMBODYACTIONPARAM),
            "::",
            stringify!(_dxf_sab_converted)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acis_empty2) as usize - ptr as usize },
        161usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCASMBODYACTIONPARAM),
            "::",
            stringify!(acis_empty2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extra_acis_data) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCASMBODYACTIONPARAM),
            "::",
            stringify!(extra_acis_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_materials) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCASMBODYACTIONPARAM),
            "::",
            stringify!(num_materials)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).materials) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCASMBODYACTIONPARAM),
            "::",
            stringify!(materials)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision_guid) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCASMBODYACTIONPARAM),
            "::",
            stringify!(revision_guid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision_major) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCASMBODYACTIONPARAM),
            "::",
            stringify!(revision_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision_minor1) as usize - ptr as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCASMBODYACTIONPARAM),
            "::",
            stringify!(revision_minor1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision_minor2) as usize - ptr as usize },
        238usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCASMBODYACTIONPARAM),
            "::",
            stringify!(revision_minor2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision_bytes) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCASMBODYACTIONPARAM),
            "::",
            stringify!(revision_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_marker) as usize - ptr as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCASMBODYACTIONPARAM),
            "::",
            stringify!(end_marker)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).history_id) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCASMBODYACTIONPARAM),
            "::",
            stringify!(history_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_revision_guid) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCASMBODYACTIONPARAM),
            "::",
            stringify!(has_revision_guid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acis_empty_bit) as usize - ptr as usize },
        265usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCASMBODYACTIONPARAM),
            "::",
            stringify!(acis_empty_bit)
        )
    );
}
pub type Dwg_Object_ASSOCASMBODYACTIONPARAM = _dwg_object_ASSOCASMBODYACTIONPARAM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_ASSOCCOMPOUNDACTIONPARAM {
    pub parent: *mut _dwg_object_object,
    pub is_r2013: BITCODE_BS,
    pub aap_version: BITCODE_BL,
    pub name: BITCODE_TV,
    pub class_version: BITCODE_BS,
    pub bs1: BITCODE_BS,
    pub num_params: BITCODE_BL,
    pub params: *mut BITCODE_H,
    pub has_child_param: BITCODE_B,
    pub child_status: BITCODE_BS,
    pub child_id: BITCODE_BL,
    pub child_param: BITCODE_H,
    pub h330_2: BITCODE_H,
    pub bl2: BITCODE_BL,
    pub h330_3: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_object_ASSOCCOMPOUNDACTIONPARAM() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ASSOCCOMPOUNDACTIONPARAM> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ASSOCCOMPOUNDACTIONPARAM>(),
        80usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_object_ASSOCCOMPOUNDACTIONPARAM)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ASSOCCOMPOUNDACTIONPARAM>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_ASSOCCOMPOUNDACTIONPARAM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCCOMPOUNDACTIONPARAM),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_r2013) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCCOMPOUNDACTIONPARAM),
            "::",
            stringify!(is_r2013)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aap_version) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCCOMPOUNDACTIONPARAM),
            "::",
            stringify!(aap_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCCOMPOUNDACTIONPARAM),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCCOMPOUNDACTIONPARAM),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bs1) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCCOMPOUNDACTIONPARAM),
            "::",
            stringify!(bs1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_params) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCCOMPOUNDACTIONPARAM),
            "::",
            stringify!(num_params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).params) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCCOMPOUNDACTIONPARAM),
            "::",
            stringify!(params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_child_param) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCCOMPOUNDACTIONPARAM),
            "::",
            stringify!(has_child_param)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).child_status) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCCOMPOUNDACTIONPARAM),
            "::",
            stringify!(child_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).child_id) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCCOMPOUNDACTIONPARAM),
            "::",
            stringify!(child_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).child_param) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCCOMPOUNDACTIONPARAM),
            "::",
            stringify!(child_param)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h330_2) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCCOMPOUNDACTIONPARAM),
            "::",
            stringify!(h330_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bl2) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCCOMPOUNDACTIONPARAM),
            "::",
            stringify!(bl2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h330_3) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCCOMPOUNDACTIONPARAM),
            "::",
            stringify!(h330_3)
        )
    );
}
pub type Dwg_Object_ASSOCCOMPOUNDACTIONPARAM = _dwg_object_ASSOCCOMPOUNDACTIONPARAM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_ASSOCOBJECTACTIONPARAM {
    pub parent: *mut _dwg_object_object,
    pub is_r2013: BITCODE_BS,
    pub aap_version: BITCODE_BL,
    pub name: BITCODE_TV,
    pub asdap_class_version: BITCODE_BL,
    pub dep: BITCODE_H,
    pub class_version: BITCODE_BS,
}
#[test]
fn bindgen_test_layout__dwg_object_ASSOCOBJECTACTIONPARAM() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ASSOCOBJECTACTIONPARAM> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ASSOCOBJECTACTIONPARAM>(),
        48usize,
        concat!("Size of: ", stringify!(_dwg_object_ASSOCOBJECTACTIONPARAM))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ASSOCOBJECTACTIONPARAM>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_ASSOCOBJECTACTIONPARAM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCOBJECTACTIONPARAM),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_r2013) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCOBJECTACTIONPARAM),
            "::",
            stringify!(is_r2013)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aap_version) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCOBJECTACTIONPARAM),
            "::",
            stringify!(aap_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCOBJECTACTIONPARAM),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).asdap_class_version) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCOBJECTACTIONPARAM),
            "::",
            stringify!(asdap_class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dep) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCOBJECTACTIONPARAM),
            "::",
            stringify!(dep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCOBJECTACTIONPARAM),
            "::",
            stringify!(class_version)
        )
    );
}
pub type Dwg_Object_ASSOCOBJECTACTIONPARAM = _dwg_object_ASSOCOBJECTACTIONPARAM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_ASSOCEDGEACTIONPARAM {
    pub parent: *mut _dwg_object_object,
    pub is_r2013: BITCODE_BS,
    pub aap_version: BITCODE_BL,
    pub name: BITCODE_TV,
    pub asdap_class_version: BITCODE_BL,
    pub dep: BITCODE_H,
    pub class_version: BITCODE_BL,
    pub param: BITCODE_H,
    pub has_action: BITCODE_B,
    pub action_type: BITCODE_BL,
    pub subent: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_object_ASSOCEDGEACTIONPARAM() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ASSOCEDGEACTIONPARAM> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ASSOCEDGEACTIONPARAM>(),
        72usize,
        concat!("Size of: ", stringify!(_dwg_object_ASSOCEDGEACTIONPARAM))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ASSOCEDGEACTIONPARAM>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_ASSOCEDGEACTIONPARAM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCEDGEACTIONPARAM),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_r2013) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCEDGEACTIONPARAM),
            "::",
            stringify!(is_r2013)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aap_version) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCEDGEACTIONPARAM),
            "::",
            stringify!(aap_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCEDGEACTIONPARAM),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).asdap_class_version) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCEDGEACTIONPARAM),
            "::",
            stringify!(asdap_class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dep) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCEDGEACTIONPARAM),
            "::",
            stringify!(dep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCEDGEACTIONPARAM),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCEDGEACTIONPARAM),
            "::",
            stringify!(param)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_action) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCEDGEACTIONPARAM),
            "::",
            stringify!(has_action)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).action_type) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCEDGEACTIONPARAM),
            "::",
            stringify!(action_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subent) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCEDGEACTIONPARAM),
            "::",
            stringify!(subent)
        )
    );
}
pub type Dwg_Object_ASSOCEDGEACTIONPARAM = _dwg_object_ASSOCEDGEACTIONPARAM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_ASSOCFACEACTIONPARAM {
    pub parent: *mut _dwg_object_object,
    pub is_r2013: BITCODE_BS,
    pub aap_version: BITCODE_BL,
    pub name: BITCODE_TV,
    pub asdap_class_version: BITCODE_BL,
    pub dep: BITCODE_H,
    pub class_version: BITCODE_BL,
    pub index: BITCODE_BL,
}
#[test]
fn bindgen_test_layout__dwg_object_ASSOCFACEACTIONPARAM() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ASSOCFACEACTIONPARAM> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ASSOCFACEACTIONPARAM>(),
        48usize,
        concat!("Size of: ", stringify!(_dwg_object_ASSOCFACEACTIONPARAM))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ASSOCFACEACTIONPARAM>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_ASSOCFACEACTIONPARAM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCFACEACTIONPARAM),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_r2013) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCFACEACTIONPARAM),
            "::",
            stringify!(is_r2013)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aap_version) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCFACEACTIONPARAM),
            "::",
            stringify!(aap_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCFACEACTIONPARAM),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).asdap_class_version) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCFACEACTIONPARAM),
            "::",
            stringify!(asdap_class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dep) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCFACEACTIONPARAM),
            "::",
            stringify!(dep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCFACEACTIONPARAM),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCFACEACTIONPARAM),
            "::",
            stringify!(index)
        )
    );
}
pub type Dwg_Object_ASSOCFACEACTIONPARAM = _dwg_object_ASSOCFACEACTIONPARAM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_ASSOCPATHACTIONPARAM {
    pub parent: *mut _dwg_object_object,
    pub is_r2013: BITCODE_BS,
    pub aap_version: BITCODE_BL,
    pub name: BITCODE_TV,
    pub class_version: BITCODE_BS,
    pub bs1: BITCODE_BS,
    pub num_params: BITCODE_BL,
    pub params: *mut BITCODE_H,
    pub has_child_param: BITCODE_B,
    pub child_status: BITCODE_BS,
    pub child_id: BITCODE_BL,
    pub child_param: BITCODE_H,
    pub h330_2: BITCODE_H,
    pub bl2: BITCODE_BL,
    pub h330_3: BITCODE_H,
    #[doc = "< DXF 90"]
    pub version: BITCODE_BL,
}
#[test]
fn bindgen_test_layout__dwg_object_ASSOCPATHACTIONPARAM() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ASSOCPATHACTIONPARAM> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ASSOCPATHACTIONPARAM>(),
        88usize,
        concat!("Size of: ", stringify!(_dwg_object_ASSOCPATHACTIONPARAM))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ASSOCPATHACTIONPARAM>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_ASSOCPATHACTIONPARAM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPATHACTIONPARAM),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_r2013) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPATHACTIONPARAM),
            "::",
            stringify!(is_r2013)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aap_version) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPATHACTIONPARAM),
            "::",
            stringify!(aap_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPATHACTIONPARAM),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPATHACTIONPARAM),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bs1) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPATHACTIONPARAM),
            "::",
            stringify!(bs1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_params) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPATHACTIONPARAM),
            "::",
            stringify!(num_params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).params) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPATHACTIONPARAM),
            "::",
            stringify!(params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_child_param) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPATHACTIONPARAM),
            "::",
            stringify!(has_child_param)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).child_status) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPATHACTIONPARAM),
            "::",
            stringify!(child_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).child_id) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPATHACTIONPARAM),
            "::",
            stringify!(child_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).child_param) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPATHACTIONPARAM),
            "::",
            stringify!(child_param)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h330_2) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPATHACTIONPARAM),
            "::",
            stringify!(h330_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bl2) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPATHACTIONPARAM),
            "::",
            stringify!(bl2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h330_3) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPATHACTIONPARAM),
            "::",
            stringify!(h330_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPATHACTIONPARAM),
            "::",
            stringify!(version)
        )
    );
}
pub type Dwg_Object_ASSOCPATHACTIONPARAM = _dwg_object_ASSOCPATHACTIONPARAM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_ASSOCVERTEXACTIONPARAM {
    pub parent: *mut _dwg_object_object,
    pub is_r2013: BITCODE_BS,
    pub aap_version: BITCODE_BL,
    pub name: BITCODE_TV,
    pub asdap_class_version: BITCODE_BL,
    pub dep: BITCODE_H,
    pub class_version: BITCODE_BL,
    pub pt: BITCODE_3BD,
}
#[test]
fn bindgen_test_layout__dwg_object_ASSOCVERTEXACTIONPARAM() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ASSOCVERTEXACTIONPARAM> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ASSOCVERTEXACTIONPARAM>(),
        72usize,
        concat!("Size of: ", stringify!(_dwg_object_ASSOCVERTEXACTIONPARAM))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ASSOCVERTEXACTIONPARAM>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_ASSOCVERTEXACTIONPARAM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCVERTEXACTIONPARAM),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_r2013) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCVERTEXACTIONPARAM),
            "::",
            stringify!(is_r2013)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aap_version) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCVERTEXACTIONPARAM),
            "::",
            stringify!(aap_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCVERTEXACTIONPARAM),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).asdap_class_version) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCVERTEXACTIONPARAM),
            "::",
            stringify!(asdap_class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dep) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCVERTEXACTIONPARAM),
            "::",
            stringify!(dep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCVERTEXACTIONPARAM),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCVERTEXACTIONPARAM),
            "::",
            stringify!(pt)
        )
    );
}
pub type Dwg_Object_ASSOCVERTEXACTIONPARAM = _dwg_object_ASSOCVERTEXACTIONPARAM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_ASSOCARRAYITEM {
    pub parent: *mut _dwg_abstractobject_ASSOCARRAYPARAMETERS,
    pub class_version: BITCODE_BL,
    pub itemloc: [BITCODE_BL; 3usize],
    pub flags: BITCODE_BL,
    pub is_default_transmatrix: ::std::os::raw::c_int,
    pub x_dir: BITCODE_3BD,
    pub transmatrix: *mut BITCODE_BD,
    pub rel_transform: *mut BITCODE_BD,
    pub has_h1: ::std::os::raw::c_int,
    pub h1: BITCODE_H,
    pub h2: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_ASSOCARRAYITEM() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_ASSOCARRAYITEM> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_ASSOCARRAYITEM>(),
        96usize,
        concat!("Size of: ", stringify!(_dwg_ASSOCARRAYITEM))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_ASSOCARRAYITEM>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_ASSOCARRAYITEM))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ASSOCARRAYITEM),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ASSOCARRAYITEM),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).itemloc) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ASSOCARRAYITEM),
            "::",
            stringify!(itemloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ASSOCARRAYITEM),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_default_transmatrix) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ASSOCARRAYITEM),
            "::",
            stringify!(is_default_transmatrix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x_dir) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ASSOCARRAYITEM),
            "::",
            stringify!(x_dir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transmatrix) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ASSOCARRAYITEM),
            "::",
            stringify!(transmatrix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rel_transform) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ASSOCARRAYITEM),
            "::",
            stringify!(rel_transform)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_h1) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ASSOCARRAYITEM),
            "::",
            stringify!(has_h1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h1) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ASSOCARRAYITEM),
            "::",
            stringify!(h1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h2) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ASSOCARRAYITEM),
            "::",
            stringify!(h2)
        )
    );
}
pub type Dwg_ASSOCARRAYITEM = _dwg_ASSOCARRAYITEM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_abstractobject_ASSOCARRAYPARAMETERS {
    pub parent: *mut _dwg_object_object,
    pub aap_version: BITCODE_BL,
    pub num_items: BITCODE_BL,
    pub classname: BITCODE_TV,
    pub items: *mut Dwg_ASSOCARRAYITEM,
    pub numitems: BITCODE_BL,
    pub numrows: BITCODE_BL,
    pub numlevels: BITCODE_BL,
}
#[test]
fn bindgen_test_layout__dwg_abstractobject_ASSOCARRAYPARAMETERS() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_abstractobject_ASSOCARRAYPARAMETERS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_abstractobject_ASSOCARRAYPARAMETERS>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_abstractobject_ASSOCARRAYPARAMETERS)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_abstractobject_ASSOCARRAYPARAMETERS>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_abstractobject_ASSOCARRAYPARAMETERS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_abstractobject_ASSOCARRAYPARAMETERS),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aap_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_abstractobject_ASSOCARRAYPARAMETERS),
            "::",
            stringify!(aap_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_items) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_abstractobject_ASSOCARRAYPARAMETERS),
            "::",
            stringify!(num_items)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).classname) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_abstractobject_ASSOCARRAYPARAMETERS),
            "::",
            stringify!(classname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).items) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_abstractobject_ASSOCARRAYPARAMETERS),
            "::",
            stringify!(items)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numitems) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_abstractobject_ASSOCARRAYPARAMETERS),
            "::",
            stringify!(numitems)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numrows) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_abstractobject_ASSOCARRAYPARAMETERS),
            "::",
            stringify!(numrows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numlevels) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_abstractobject_ASSOCARRAYPARAMETERS),
            "::",
            stringify!(numlevels)
        )
    );
}
pub type Dwg_Object_ASSOCARRAYPARAMETERS = _dwg_abstractobject_ASSOCARRAYPARAMETERS;
pub type Dwg_Object_ASSOCARRAYMODIFYPARAMETERS = _dwg_abstractobject_ASSOCARRAYPARAMETERS;
pub type Dwg_Object_ASSOCARRAYPATHPARAMETERS = _dwg_abstractobject_ASSOCARRAYPARAMETERS;
pub type Dwg_Object_ASSOCARRAYPOLARPARAMETERS = _dwg_abstractobject_ASSOCARRAYPARAMETERS;
pub type Dwg_Object_ASSOCARRAYRECTANGULARPARAMETERS = _dwg_abstractobject_ASSOCARRAYPARAMETERS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_ASSOCRESTOREENTITYSTATEACTIONBODY {
    pub parent: *mut _dwg_object_object,
    pub aab_version: BITCODE_BL,
    pub class_version: BITCODE_BL,
    pub entity: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_object_ASSOCRESTOREENTITYSTATEACTIONBODY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ASSOCRESTOREENTITYSTATEACTIONBODY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ASSOCRESTOREENTITYSTATEACTIONBODY>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_object_ASSOCRESTOREENTITYSTATEACTIONBODY)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ASSOCRESTOREENTITYSTATEACTIONBODY>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_ASSOCRESTOREENTITYSTATEACTIONBODY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCRESTOREENTITYSTATEACTIONBODY),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aab_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCRESTOREENTITYSTATEACTIONBODY),
            "::",
            stringify!(aab_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCRESTOREENTITYSTATEACTIONBODY),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entity) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCRESTOREENTITYSTATEACTIONBODY),
            "::",
            stringify!(entity)
        )
    );
}
pub type Dwg_Object_ASSOCRESTOREENTITYSTATEACTIONBODY =
    _dwg_object_ASSOCRESTOREENTITYSTATEACTIONBODY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_ASSOCSURFACEACTIONBODY {
    pub parent: *mut _dwg_object_object,
    #[doc = "< DXF 90"]
    pub version: BITCODE_BL,
    #[doc = "< DXF 290"]
    pub is_semi_assoc: BITCODE_B,
    #[doc = "< DXF 90"]
    pub l2: BITCODE_BL,
    #[doc = "< DXF 290 is_semi_associativity_satisfied_override"]
    pub is_semi_ovr: BITCODE_B,
    #[doc = "< DXF 70"]
    pub grip_status: BITCODE_BS,
    pub assocdep: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_ASSOCSURFACEACTIONBODY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_ASSOCSURFACEACTIONBODY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_ASSOCSURFACEACTIONBODY>(),
        32usize,
        concat!("Size of: ", stringify!(_dwg_ASSOCSURFACEACTIONBODY))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_ASSOCSURFACEACTIONBODY>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_ASSOCSURFACEACTIONBODY))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ASSOCSURFACEACTIONBODY),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ASSOCSURFACEACTIONBODY),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_semi_assoc) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ASSOCSURFACEACTIONBODY),
            "::",
            stringify!(is_semi_assoc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ASSOCSURFACEACTIONBODY),
            "::",
            stringify!(l2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_semi_ovr) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ASSOCSURFACEACTIONBODY),
            "::",
            stringify!(is_semi_ovr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).grip_status) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ASSOCSURFACEACTIONBODY),
            "::",
            stringify!(grip_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).assocdep) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ASSOCSURFACEACTIONBODY),
            "::",
            stringify!(assocdep)
        )
    );
}
pub type Dwg_ASSOCSURFACEACTIONBODY = _dwg_ASSOCSURFACEACTIONBODY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_ASSOCEXTENDSURFACEACTIONBODY {
    pub parent: *mut _dwg_object_object,
    pub aab_version: BITCODE_BL,
    pub pab: Dwg_ASSOCPARAMBASEDACTIONBODY,
    pub sab: Dwg_ASSOCSURFACEACTIONBODY,
    #[doc = "< DXF 90"]
    pub pbsab_status: BITCODE_BL,
    #[doc = "< DXF 90"]
    pub class_version: BITCODE_BL,
    #[doc = "< DXF 280 edge_extension_type"]
    pub option: BITCODE_RC,
}
#[test]
fn bindgen_test_layout__dwg_object_ASSOCEXTENDSURFACEACTIONBODY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ASSOCEXTENDSURFACEACTIONBODY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ASSOCEXTENDSURFACEACTIONBODY>(),
        128usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_object_ASSOCEXTENDSURFACEACTIONBODY)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ASSOCEXTENDSURFACEACTIONBODY>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_ASSOCEXTENDSURFACEACTIONBODY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCEXTENDSURFACEACTIONBODY),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aab_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCEXTENDSURFACEACTIONBODY),
            "::",
            stringify!(aab_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pab) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCEXTENDSURFACEACTIONBODY),
            "::",
            stringify!(pab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sab) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCEXTENDSURFACEACTIONBODY),
            "::",
            stringify!(sab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pbsab_status) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCEXTENDSURFACEACTIONBODY),
            "::",
            stringify!(pbsab_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCEXTENDSURFACEACTIONBODY),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).option) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCEXTENDSURFACEACTIONBODY),
            "::",
            stringify!(option)
        )
    );
}
pub type Dwg_Object_ASSOCEXTENDSURFACEACTIONBODY = _dwg_object_ASSOCEXTENDSURFACEACTIONBODY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_ASSOCEXTRUDEDSURFACEACTIONBODY {
    pub parent: *mut _dwg_object_object,
    pub aab_version: BITCODE_BL,
    pub pab: Dwg_ASSOCPARAMBASEDACTIONBODY,
    pub sab: Dwg_ASSOCSURFACEACTIONBODY,
    #[doc = "< DXF 90"]
    pub pbsab_status: BITCODE_BL,
    #[doc = "< DXF 90"]
    pub class_version: BITCODE_BL,
}
#[test]
fn bindgen_test_layout__dwg_object_ASSOCEXTRUDEDSURFACEACTIONBODY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ASSOCEXTRUDEDSURFACEACTIONBODY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ASSOCEXTRUDEDSURFACEACTIONBODY>(),
        120usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_object_ASSOCEXTRUDEDSURFACEACTIONBODY)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ASSOCEXTRUDEDSURFACEACTIONBODY>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_ASSOCEXTRUDEDSURFACEACTIONBODY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCEXTRUDEDSURFACEACTIONBODY),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aab_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCEXTRUDEDSURFACEACTIONBODY),
            "::",
            stringify!(aab_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pab) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCEXTRUDEDSURFACEACTIONBODY),
            "::",
            stringify!(pab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sab) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCEXTRUDEDSURFACEACTIONBODY),
            "::",
            stringify!(sab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pbsab_status) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCEXTRUDEDSURFACEACTIONBODY),
            "::",
            stringify!(pbsab_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCEXTRUDEDSURFACEACTIONBODY),
            "::",
            stringify!(class_version)
        )
    );
}
pub type Dwg_Object_ASSOCEXTRUDEDSURFACEACTIONBODY = _dwg_object_ASSOCEXTRUDEDSURFACEACTIONBODY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_ASSOCPLANESURFACEACTIONBODY {
    pub parent: *mut _dwg_object_object,
    pub aab_version: BITCODE_BL,
    pub pab: Dwg_ASSOCPARAMBASEDACTIONBODY,
    pub sab: Dwg_ASSOCSURFACEACTIONBODY,
    #[doc = "< DXF 90"]
    pub pbsab_status: BITCODE_BL,
    #[doc = "< DXF 90"]
    pub class_version: BITCODE_BL,
}
#[test]
fn bindgen_test_layout__dwg_object_ASSOCPLANESURFACEACTIONBODY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ASSOCPLANESURFACEACTIONBODY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ASSOCPLANESURFACEACTIONBODY>(),
        120usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_object_ASSOCPLANESURFACEACTIONBODY)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ASSOCPLANESURFACEACTIONBODY>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_ASSOCPLANESURFACEACTIONBODY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPLANESURFACEACTIONBODY),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aab_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPLANESURFACEACTIONBODY),
            "::",
            stringify!(aab_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pab) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPLANESURFACEACTIONBODY),
            "::",
            stringify!(pab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sab) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPLANESURFACEACTIONBODY),
            "::",
            stringify!(sab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pbsab_status) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPLANESURFACEACTIONBODY),
            "::",
            stringify!(pbsab_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPLANESURFACEACTIONBODY),
            "::",
            stringify!(class_version)
        )
    );
}
pub type Dwg_Object_ASSOCPLANESURFACEACTIONBODY = _dwg_object_ASSOCPLANESURFACEACTIONBODY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_ASSOCLOFTEDSURFACEACTIONBODY {
    pub parent: *mut _dwg_object_object,
    pub aab_version: BITCODE_BL,
    pub pab: Dwg_ASSOCPARAMBASEDACTIONBODY,
    pub sab: Dwg_ASSOCSURFACEACTIONBODY,
    #[doc = "< DXF 90"]
    pub pbsab_status: BITCODE_BL,
    #[doc = "< DXF 90"]
    pub class_version: BITCODE_BL,
}
#[test]
fn bindgen_test_layout__dwg_object_ASSOCLOFTEDSURFACEACTIONBODY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ASSOCLOFTEDSURFACEACTIONBODY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ASSOCLOFTEDSURFACEACTIONBODY>(),
        120usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_object_ASSOCLOFTEDSURFACEACTIONBODY)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ASSOCLOFTEDSURFACEACTIONBODY>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_ASSOCLOFTEDSURFACEACTIONBODY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCLOFTEDSURFACEACTIONBODY),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aab_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCLOFTEDSURFACEACTIONBODY),
            "::",
            stringify!(aab_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pab) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCLOFTEDSURFACEACTIONBODY),
            "::",
            stringify!(pab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sab) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCLOFTEDSURFACEACTIONBODY),
            "::",
            stringify!(sab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pbsab_status) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCLOFTEDSURFACEACTIONBODY),
            "::",
            stringify!(pbsab_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCLOFTEDSURFACEACTIONBODY),
            "::",
            stringify!(class_version)
        )
    );
}
pub type Dwg_Object_ASSOCLOFTEDSURFACEACTIONBODY = _dwg_object_ASSOCLOFTEDSURFACEACTIONBODY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_ASSOCNETWORKSURFACEACTIONBODY {
    pub parent: *mut _dwg_object_object,
    pub aab_version: BITCODE_BL,
    pub pab: Dwg_ASSOCPARAMBASEDACTIONBODY,
    pub sab: Dwg_ASSOCSURFACEACTIONBODY,
    #[doc = "< DXF 90"]
    pub pbsab_status: BITCODE_BL,
    #[doc = "< DXF 90"]
    pub class_version: BITCODE_BL,
}
#[test]
fn bindgen_test_layout__dwg_object_ASSOCNETWORKSURFACEACTIONBODY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ASSOCNETWORKSURFACEACTIONBODY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ASSOCNETWORKSURFACEACTIONBODY>(),
        120usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_object_ASSOCNETWORKSURFACEACTIONBODY)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ASSOCNETWORKSURFACEACTIONBODY>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_ASSOCNETWORKSURFACEACTIONBODY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCNETWORKSURFACEACTIONBODY),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aab_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCNETWORKSURFACEACTIONBODY),
            "::",
            stringify!(aab_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pab) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCNETWORKSURFACEACTIONBODY),
            "::",
            stringify!(pab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sab) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCNETWORKSURFACEACTIONBODY),
            "::",
            stringify!(sab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pbsab_status) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCNETWORKSURFACEACTIONBODY),
            "::",
            stringify!(pbsab_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCNETWORKSURFACEACTIONBODY),
            "::",
            stringify!(class_version)
        )
    );
}
pub type Dwg_Object_ASSOCNETWORKSURFACEACTIONBODY = _dwg_object_ASSOCNETWORKSURFACEACTIONBODY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_ASSOCOFFSETSURFACEACTIONBODY {
    pub parent: *mut _dwg_object_object,
    pub aab_version: BITCODE_BL,
    pub pab: Dwg_ASSOCPARAMBASEDACTIONBODY,
    pub sab: Dwg_ASSOCSURFACEACTIONBODY,
    #[doc = "< DXF 90"]
    pub pbsab_status: BITCODE_BL,
    #[doc = "< DXF 90"]
    pub class_version: BITCODE_BL,
    #[doc = "< DXF 290"]
    pub b1: BITCODE_B,
}
#[test]
fn bindgen_test_layout__dwg_object_ASSOCOFFSETSURFACEACTIONBODY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ASSOCOFFSETSURFACEACTIONBODY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ASSOCOFFSETSURFACEACTIONBODY>(),
        128usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_object_ASSOCOFFSETSURFACEACTIONBODY)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ASSOCOFFSETSURFACEACTIONBODY>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_ASSOCOFFSETSURFACEACTIONBODY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCOFFSETSURFACEACTIONBODY),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aab_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCOFFSETSURFACEACTIONBODY),
            "::",
            stringify!(aab_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pab) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCOFFSETSURFACEACTIONBODY),
            "::",
            stringify!(pab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sab) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCOFFSETSURFACEACTIONBODY),
            "::",
            stringify!(sab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pbsab_status) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCOFFSETSURFACEACTIONBODY),
            "::",
            stringify!(pbsab_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCOFFSETSURFACEACTIONBODY),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b1) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCOFFSETSURFACEACTIONBODY),
            "::",
            stringify!(b1)
        )
    );
}
pub type Dwg_Object_ASSOCOFFSETSURFACEACTIONBODY = _dwg_object_ASSOCOFFSETSURFACEACTIONBODY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_ASSOCREVOLVEDSURFACEACTIONBODY {
    pub parent: *mut _dwg_object_object,
    pub aab_version: BITCODE_BL,
    pub pab: Dwg_ASSOCPARAMBASEDACTIONBODY,
    pub sab: Dwg_ASSOCSURFACEACTIONBODY,
    #[doc = "< DXF 90"]
    pub pbsab_status: BITCODE_BL,
    #[doc = "< DXF 90"]
    pub class_version: BITCODE_BL,
}
#[test]
fn bindgen_test_layout__dwg_object_ASSOCREVOLVEDSURFACEACTIONBODY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ASSOCREVOLVEDSURFACEACTIONBODY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ASSOCREVOLVEDSURFACEACTIONBODY>(),
        120usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_object_ASSOCREVOLVEDSURFACEACTIONBODY)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ASSOCREVOLVEDSURFACEACTIONBODY>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_ASSOCREVOLVEDSURFACEACTIONBODY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCREVOLVEDSURFACEACTIONBODY),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aab_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCREVOLVEDSURFACEACTIONBODY),
            "::",
            stringify!(aab_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pab) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCREVOLVEDSURFACEACTIONBODY),
            "::",
            stringify!(pab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sab) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCREVOLVEDSURFACEACTIONBODY),
            "::",
            stringify!(sab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pbsab_status) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCREVOLVEDSURFACEACTIONBODY),
            "::",
            stringify!(pbsab_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCREVOLVEDSURFACEACTIONBODY),
            "::",
            stringify!(class_version)
        )
    );
}
pub type Dwg_Object_ASSOCREVOLVEDSURFACEACTIONBODY = _dwg_object_ASSOCREVOLVEDSURFACEACTIONBODY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_ASSOCSWEPTSURFACEACTIONBODY {
    pub parent: *mut _dwg_object_object,
    pub aab_version: BITCODE_BL,
    pub pab: Dwg_ASSOCPARAMBASEDACTIONBODY,
    pub sab: Dwg_ASSOCSURFACEACTIONBODY,
    #[doc = "< DXF 90"]
    pub pbsab_status: BITCODE_BL,
    #[doc = "< DXF 90"]
    pub class_version: BITCODE_BL,
}
#[test]
fn bindgen_test_layout__dwg_object_ASSOCSWEPTSURFACEACTIONBODY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ASSOCSWEPTSURFACEACTIONBODY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ASSOCSWEPTSURFACEACTIONBODY>(),
        120usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_object_ASSOCSWEPTSURFACEACTIONBODY)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ASSOCSWEPTSURFACEACTIONBODY>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_ASSOCSWEPTSURFACEACTIONBODY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCSWEPTSURFACEACTIONBODY),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aab_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCSWEPTSURFACEACTIONBODY),
            "::",
            stringify!(aab_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pab) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCSWEPTSURFACEACTIONBODY),
            "::",
            stringify!(pab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sab) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCSWEPTSURFACEACTIONBODY),
            "::",
            stringify!(sab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pbsab_status) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCSWEPTSURFACEACTIONBODY),
            "::",
            stringify!(pbsab_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCSWEPTSURFACEACTIONBODY),
            "::",
            stringify!(class_version)
        )
    );
}
pub type Dwg_Object_ASSOCSWEPTSURFACEACTIONBODY = _dwg_object_ASSOCSWEPTSURFACEACTIONBODY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_ASSOCEDGECHAMFERACTIONBODY {
    pub parent: *mut _dwg_object_object,
    pub aab_version: BITCODE_BL,
    pub pab: Dwg_ASSOCPARAMBASEDACTIONBODY,
    pub sab: Dwg_ASSOCSURFACEACTIONBODY,
    #[doc = "< DXF 90"]
    pub pbsab_status: BITCODE_BL,
}
#[test]
fn bindgen_test_layout__dwg_object_ASSOCEDGECHAMFERACTIONBODY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ASSOCEDGECHAMFERACTIONBODY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ASSOCEDGECHAMFERACTIONBODY>(),
        120usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_object_ASSOCEDGECHAMFERACTIONBODY)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ASSOCEDGECHAMFERACTIONBODY>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_ASSOCEDGECHAMFERACTIONBODY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCEDGECHAMFERACTIONBODY),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aab_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCEDGECHAMFERACTIONBODY),
            "::",
            stringify!(aab_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pab) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCEDGECHAMFERACTIONBODY),
            "::",
            stringify!(pab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sab) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCEDGECHAMFERACTIONBODY),
            "::",
            stringify!(sab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pbsab_status) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCEDGECHAMFERACTIONBODY),
            "::",
            stringify!(pbsab_status)
        )
    );
}
pub type Dwg_Object_ASSOCEDGECHAMFERACTIONBODY = _dwg_object_ASSOCEDGECHAMFERACTIONBODY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_ASSOCEDGEFILLETACTIONBODY {
    pub parent: *mut _dwg_object_object,
    pub aab_version: BITCODE_BL,
    pub pab: Dwg_ASSOCPARAMBASEDACTIONBODY,
    pub sab: Dwg_ASSOCSURFACEACTIONBODY,
    #[doc = "< DXF 90"]
    pub pbsab_status: BITCODE_BL,
}
#[test]
fn bindgen_test_layout__dwg_object_ASSOCEDGEFILLETACTIONBODY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ASSOCEDGEFILLETACTIONBODY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ASSOCEDGEFILLETACTIONBODY>(),
        120usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_object_ASSOCEDGEFILLETACTIONBODY)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ASSOCEDGEFILLETACTIONBODY>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_ASSOCEDGEFILLETACTIONBODY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCEDGEFILLETACTIONBODY),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aab_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCEDGEFILLETACTIONBODY),
            "::",
            stringify!(aab_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pab) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCEDGEFILLETACTIONBODY),
            "::",
            stringify!(pab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sab) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCEDGEFILLETACTIONBODY),
            "::",
            stringify!(sab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pbsab_status) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCEDGEFILLETACTIONBODY),
            "::",
            stringify!(pbsab_status)
        )
    );
}
pub type Dwg_Object_ASSOCEDGEFILLETACTIONBODY = _dwg_object_ASSOCEDGEFILLETACTIONBODY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_ASSOCTRIMSURFACEACTIONBODY {
    pub parent: *mut _dwg_object_object,
    pub aab_version: BITCODE_BL,
    pub pab: Dwg_ASSOCPARAMBASEDACTIONBODY,
    pub sab: Dwg_ASSOCSURFACEACTIONBODY,
    #[doc = "< DXF 90"]
    pub pbsab_status: BITCODE_BL,
    #[doc = "< DXF 90"]
    pub class_version: BITCODE_BL,
    #[doc = "< DXF 290"]
    pub b1: BITCODE_B,
    #[doc = "< DXF 290"]
    pub b2: BITCODE_B,
    #[doc = "< DXF 40"]
    pub distance: BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_object_ASSOCTRIMSURFACEACTIONBODY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ASSOCTRIMSURFACEACTIONBODY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ASSOCTRIMSURFACEACTIONBODY>(),
        136usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_object_ASSOCTRIMSURFACEACTIONBODY)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ASSOCTRIMSURFACEACTIONBODY>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_ASSOCTRIMSURFACEACTIONBODY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCTRIMSURFACEACTIONBODY),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aab_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCTRIMSURFACEACTIONBODY),
            "::",
            stringify!(aab_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pab) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCTRIMSURFACEACTIONBODY),
            "::",
            stringify!(pab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sab) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCTRIMSURFACEACTIONBODY),
            "::",
            stringify!(sab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pbsab_status) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCTRIMSURFACEACTIONBODY),
            "::",
            stringify!(pbsab_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCTRIMSURFACEACTIONBODY),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b1) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCTRIMSURFACEACTIONBODY),
            "::",
            stringify!(b1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b2) as usize - ptr as usize },
        121usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCTRIMSURFACEACTIONBODY),
            "::",
            stringify!(b2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).distance) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCTRIMSURFACEACTIONBODY),
            "::",
            stringify!(distance)
        )
    );
}
pub type Dwg_Object_ASSOCTRIMSURFACEACTIONBODY = _dwg_object_ASSOCTRIMSURFACEACTIONBODY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_ASSOCBLENDSURFACEACTIONBODY {
    pub parent: *mut _dwg_object_object,
    pub aab_version: BITCODE_BL,
    pub pab: Dwg_ASSOCPARAMBASEDACTIONBODY,
    pub sab: Dwg_ASSOCSURFACEACTIONBODY,
    #[doc = "< DXF 90"]
    pub pbsab_status: BITCODE_BL,
    #[doc = "< DXF 90"]
    pub class_version: BITCODE_BL,
    #[doc = "< DXF 290"]
    pub b1: BITCODE_B,
    #[doc = "< DXF 291"]
    pub b2: BITCODE_B,
    #[doc = "< DXF 292"]
    pub b3: BITCODE_B,
    #[doc = "< DXF 293"]
    pub b4: BITCODE_B,
    #[doc = "< DXF 294"]
    pub b5: BITCODE_B,
    #[doc = "< DXF 72"]
    pub blend_options: BITCODE_BS,
    #[doc = "< DXF 73"]
    pub bs2: BITCODE_BS,
}
#[test]
fn bindgen_test_layout__dwg_object_ASSOCBLENDSURFACEACTIONBODY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ASSOCBLENDSURFACEACTIONBODY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ASSOCBLENDSURFACEACTIONBODY>(),
        136usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_object_ASSOCBLENDSURFACEACTIONBODY)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ASSOCBLENDSURFACEACTIONBODY>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_ASSOCBLENDSURFACEACTIONBODY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCBLENDSURFACEACTIONBODY),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aab_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCBLENDSURFACEACTIONBODY),
            "::",
            stringify!(aab_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pab) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCBLENDSURFACEACTIONBODY),
            "::",
            stringify!(pab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sab) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCBLENDSURFACEACTIONBODY),
            "::",
            stringify!(sab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pbsab_status) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCBLENDSURFACEACTIONBODY),
            "::",
            stringify!(pbsab_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCBLENDSURFACEACTIONBODY),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b1) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCBLENDSURFACEACTIONBODY),
            "::",
            stringify!(b1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b2) as usize - ptr as usize },
        121usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCBLENDSURFACEACTIONBODY),
            "::",
            stringify!(b2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b3) as usize - ptr as usize },
        122usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCBLENDSURFACEACTIONBODY),
            "::",
            stringify!(b3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b4) as usize - ptr as usize },
        123usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCBLENDSURFACEACTIONBODY),
            "::",
            stringify!(b4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b5) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCBLENDSURFACEACTIONBODY),
            "::",
            stringify!(b5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blend_options) as usize - ptr as usize },
        126usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCBLENDSURFACEACTIONBODY),
            "::",
            stringify!(blend_options)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bs2) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCBLENDSURFACEACTIONBODY),
            "::",
            stringify!(bs2)
        )
    );
}
pub type Dwg_Object_ASSOCBLENDSURFACEACTIONBODY = _dwg_object_ASSOCBLENDSURFACEACTIONBODY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_ASSOCFILLETSURFACEACTIONBODY {
    pub parent: *mut _dwg_object_object,
    pub aab_version: BITCODE_BL,
    pub pab: Dwg_ASSOCPARAMBASEDACTIONBODY,
    pub sab: Dwg_ASSOCSURFACEACTIONBODY,
    #[doc = "< DXF 90"]
    pub pbsab_status: BITCODE_BL,
    #[doc = "< DXF 90"]
    pub class_version: BITCODE_BL,
    #[doc = "< DXF 70"]
    pub status: BITCODE_BS,
    #[doc = "< DXF 10"]
    pub pt1: BITCODE_2RD,
    #[doc = "< DXF 10"]
    pub pt2: BITCODE_2RD,
}
#[test]
fn bindgen_test_layout__dwg_object_ASSOCFILLETSURFACEACTIONBODY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ASSOCFILLETSURFACEACTIONBODY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ASSOCFILLETSURFACEACTIONBODY>(),
        160usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_object_ASSOCFILLETSURFACEACTIONBODY)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ASSOCFILLETSURFACEACTIONBODY>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_ASSOCFILLETSURFACEACTIONBODY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCFILLETSURFACEACTIONBODY),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aab_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCFILLETSURFACEACTIONBODY),
            "::",
            stringify!(aab_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pab) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCFILLETSURFACEACTIONBODY),
            "::",
            stringify!(pab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sab) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCFILLETSURFACEACTIONBODY),
            "::",
            stringify!(sab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pbsab_status) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCFILLETSURFACEACTIONBODY),
            "::",
            stringify!(pbsab_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCFILLETSURFACEACTIONBODY),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCFILLETSURFACEACTIONBODY),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt1) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCFILLETSURFACEACTIONBODY),
            "::",
            stringify!(pt1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt2) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCFILLETSURFACEACTIONBODY),
            "::",
            stringify!(pt2)
        )
    );
}
pub type Dwg_Object_ASSOCFILLETSURFACEACTIONBODY = _dwg_object_ASSOCFILLETSURFACEACTIONBODY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_ASSOCPATCHSURFACEACTIONBODY {
    pub parent: *mut _dwg_object_object,
    pub aab_version: BITCODE_BL,
    pub pab: Dwg_ASSOCPARAMBASEDACTIONBODY,
    pub sab: Dwg_ASSOCSURFACEACTIONBODY,
    #[doc = "< DXF 90"]
    pub pbsab_status: BITCODE_BL,
    #[doc = "< DXF 90"]
    pub class_version: BITCODE_BL,
}
#[test]
fn bindgen_test_layout__dwg_object_ASSOCPATCHSURFACEACTIONBODY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ASSOCPATCHSURFACEACTIONBODY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ASSOCPATCHSURFACEACTIONBODY>(),
        120usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_object_ASSOCPATCHSURFACEACTIONBODY)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ASSOCPATCHSURFACEACTIONBODY>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_ASSOCPATCHSURFACEACTIONBODY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPATCHSURFACEACTIONBODY),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aab_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPATCHSURFACEACTIONBODY),
            "::",
            stringify!(aab_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pab) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPATCHSURFACEACTIONBODY),
            "::",
            stringify!(pab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sab) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPATCHSURFACEACTIONBODY),
            "::",
            stringify!(sab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pbsab_status) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPATCHSURFACEACTIONBODY),
            "::",
            stringify!(pbsab_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCPATCHSURFACEACTIONBODY),
            "::",
            stringify!(class_version)
        )
    );
}
pub type Dwg_Object_ASSOCPATCHSURFACEACTIONBODY = _dwg_object_ASSOCPATCHSURFACEACTIONBODY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_ASSOCACTIONBODY_action {
    pub parent: *mut _dwg_object_ASSOCMLEADERACTIONBODY,
    pub depid: BITCODE_BL,
    pub dep: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_ASSOCACTIONBODY_action() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_ASSOCACTIONBODY_action> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_ASSOCACTIONBODY_action>(),
        24usize,
        concat!("Size of: ", stringify!(_dwg_ASSOCACTIONBODY_action))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_ASSOCACTIONBODY_action>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_ASSOCACTIONBODY_action))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ASSOCACTIONBODY_action),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depid) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ASSOCACTIONBODY_action),
            "::",
            stringify!(depid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dep) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ASSOCACTIONBODY_action),
            "::",
            stringify!(dep)
        )
    );
}
pub type Dwg_ASSOCACTIONBODY_action = _dwg_ASSOCACTIONBODY_action;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_ASSOCMLEADERACTIONBODY {
    pub parent: *mut _dwg_object_object,
    pub aaab_version: BITCODE_BS,
    pub assoc_dep: BITCODE_H,
    pub aab_version: BITCODE_BS,
    pub actionbody: BITCODE_H,
    pub pab: Dwg_ASSOCPARAMBASEDACTIONBODY,
    pub class_version: BITCODE_BL,
    pub num_actions: BITCODE_BL,
    pub actions: *mut Dwg_ASSOCACTIONBODY_action,
}
#[test]
fn bindgen_test_layout__dwg_object_ASSOCMLEADERACTIONBODY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ASSOCMLEADERACTIONBODY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ASSOCMLEADERACTIONBODY>(),
        120usize,
        concat!("Size of: ", stringify!(_dwg_object_ASSOCMLEADERACTIONBODY))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ASSOCMLEADERACTIONBODY>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_ASSOCMLEADERACTIONBODY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCMLEADERACTIONBODY),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aaab_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCMLEADERACTIONBODY),
            "::",
            stringify!(aaab_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).assoc_dep) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCMLEADERACTIONBODY),
            "::",
            stringify!(assoc_dep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aab_version) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCMLEADERACTIONBODY),
            "::",
            stringify!(aab_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actionbody) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCMLEADERACTIONBODY),
            "::",
            stringify!(actionbody)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pab) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCMLEADERACTIONBODY),
            "::",
            stringify!(pab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCMLEADERACTIONBODY),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_actions) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCMLEADERACTIONBODY),
            "::",
            stringify!(num_actions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actions) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCMLEADERACTIONBODY),
            "::",
            stringify!(actions)
        )
    );
}
pub type Dwg_Object_ASSOCMLEADERACTIONBODY = _dwg_object_ASSOCMLEADERACTIONBODY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_ASSOCALIGNEDDIMACTIONBODY {
    pub parent: *mut _dwg_object_object,
    pub aaab_version: BITCODE_BS,
    pub assoc_dep: BITCODE_H,
    pub aab_version: BITCODE_BS,
    pub actionbody: BITCODE_H,
    pub pab: Dwg_ASSOCPARAMBASEDACTIONBODY,
    pub class_version: BITCODE_BL,
    pub r_node: BITCODE_H,
    pub d_node: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_object_ASSOCALIGNEDDIMACTIONBODY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ASSOCALIGNEDDIMACTIONBODY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ASSOCALIGNEDDIMACTIONBODY>(),
        128usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_object_ASSOCALIGNEDDIMACTIONBODY)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ASSOCALIGNEDDIMACTIONBODY>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_ASSOCALIGNEDDIMACTIONBODY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCALIGNEDDIMACTIONBODY),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aaab_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCALIGNEDDIMACTIONBODY),
            "::",
            stringify!(aaab_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).assoc_dep) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCALIGNEDDIMACTIONBODY),
            "::",
            stringify!(assoc_dep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aab_version) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCALIGNEDDIMACTIONBODY),
            "::",
            stringify!(aab_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actionbody) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCALIGNEDDIMACTIONBODY),
            "::",
            stringify!(actionbody)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pab) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCALIGNEDDIMACTIONBODY),
            "::",
            stringify!(pab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCALIGNEDDIMACTIONBODY),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r_node) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCALIGNEDDIMACTIONBODY),
            "::",
            stringify!(r_node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_node) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCALIGNEDDIMACTIONBODY),
            "::",
            stringify!(d_node)
        )
    );
}
pub type Dwg_Object_ASSOCALIGNEDDIMACTIONBODY = _dwg_object_ASSOCALIGNEDDIMACTIONBODY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_ASSOC3POINTANGULARDIMACTIONBODY {
    pub parent: *mut _dwg_object_object,
    pub aaab_version: BITCODE_BS,
    pub assoc_dep: BITCODE_H,
    pub aab_version: BITCODE_BS,
    pub actionbody: BITCODE_H,
    pub pab: Dwg_ASSOCPARAMBASEDACTIONBODY,
    #[doc = "< DXF 90"]
    pub class_version: BITCODE_BS,
    #[doc = "< DXF 330"]
    pub r_node: BITCODE_H,
    #[doc = "< DXF 330"]
    pub d_node: BITCODE_H,
    #[doc = "< DXF 330"]
    pub assocdep: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_object_ASSOC3POINTANGULARDIMACTIONBODY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ASSOC3POINTANGULARDIMACTIONBODY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ASSOC3POINTANGULARDIMACTIONBODY>(),
        136usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_object_ASSOC3POINTANGULARDIMACTIONBODY)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ASSOC3POINTANGULARDIMACTIONBODY>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_ASSOC3POINTANGULARDIMACTIONBODY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOC3POINTANGULARDIMACTIONBODY),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aaab_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOC3POINTANGULARDIMACTIONBODY),
            "::",
            stringify!(aaab_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).assoc_dep) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOC3POINTANGULARDIMACTIONBODY),
            "::",
            stringify!(assoc_dep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aab_version) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOC3POINTANGULARDIMACTIONBODY),
            "::",
            stringify!(aab_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actionbody) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOC3POINTANGULARDIMACTIONBODY),
            "::",
            stringify!(actionbody)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pab) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOC3POINTANGULARDIMACTIONBODY),
            "::",
            stringify!(pab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOC3POINTANGULARDIMACTIONBODY),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r_node) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOC3POINTANGULARDIMACTIONBODY),
            "::",
            stringify!(r_node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_node) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOC3POINTANGULARDIMACTIONBODY),
            "::",
            stringify!(d_node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).assocdep) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOC3POINTANGULARDIMACTIONBODY),
            "::",
            stringify!(assocdep)
        )
    );
}
pub type Dwg_Object_ASSOC3POINTANGULARDIMACTIONBODY = _dwg_object_ASSOC3POINTANGULARDIMACTIONBODY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_ASSOCORDINATEDIMACTIONBODY {
    pub parent: *mut _dwg_object_object,
    pub aaab_version: BITCODE_BS,
    pub assoc_dep: BITCODE_H,
    pub aab_version: BITCODE_BS,
    pub actionbody: BITCODE_H,
    pub pab: Dwg_ASSOCPARAMBASEDACTIONBODY,
    #[doc = "< DXF 90"]
    pub class_version: BITCODE_BL,
    #[doc = "< DXF 330"]
    pub r_node: BITCODE_H,
    #[doc = "< DXF 330"]
    pub d_node: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_object_ASSOCORDINATEDIMACTIONBODY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ASSOCORDINATEDIMACTIONBODY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ASSOCORDINATEDIMACTIONBODY>(),
        128usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_object_ASSOCORDINATEDIMACTIONBODY)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ASSOCORDINATEDIMACTIONBODY>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_ASSOCORDINATEDIMACTIONBODY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCORDINATEDIMACTIONBODY),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aaab_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCORDINATEDIMACTIONBODY),
            "::",
            stringify!(aaab_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).assoc_dep) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCORDINATEDIMACTIONBODY),
            "::",
            stringify!(assoc_dep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aab_version) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCORDINATEDIMACTIONBODY),
            "::",
            stringify!(aab_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actionbody) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCORDINATEDIMACTIONBODY),
            "::",
            stringify!(actionbody)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pab) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCORDINATEDIMACTIONBODY),
            "::",
            stringify!(pab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCORDINATEDIMACTIONBODY),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r_node) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCORDINATEDIMACTIONBODY),
            "::",
            stringify!(r_node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_node) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCORDINATEDIMACTIONBODY),
            "::",
            stringify!(d_node)
        )
    );
}
pub type Dwg_Object_ASSOCORDINATEDIMACTIONBODY = _dwg_object_ASSOCORDINATEDIMACTIONBODY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_ASSOCROTATEDDIMACTIONBODY {
    pub parent: *mut _dwg_object_object,
    pub aaab_version: BITCODE_BS,
    pub assoc_dep: BITCODE_H,
    pub aab_version: BITCODE_BS,
    pub actionbody: BITCODE_H,
    pub pab: Dwg_ASSOCPARAMBASEDACTIONBODY,
    #[doc = "< DXF 90"]
    pub class_version: BITCODE_BS,
    #[doc = "< DXF 330"]
    pub r_node: BITCODE_H,
    #[doc = "< DXF 330"]
    pub d_node: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_object_ASSOCROTATEDDIMACTIONBODY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ASSOCROTATEDDIMACTIONBODY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ASSOCROTATEDDIMACTIONBODY>(),
        128usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_object_ASSOCROTATEDDIMACTIONBODY)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ASSOCROTATEDDIMACTIONBODY>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_ASSOCROTATEDDIMACTIONBODY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCROTATEDDIMACTIONBODY),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aaab_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCROTATEDDIMACTIONBODY),
            "::",
            stringify!(aaab_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).assoc_dep) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCROTATEDDIMACTIONBODY),
            "::",
            stringify!(assoc_dep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aab_version) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCROTATEDDIMACTIONBODY),
            "::",
            stringify!(aab_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actionbody) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCROTATEDDIMACTIONBODY),
            "::",
            stringify!(actionbody)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pab) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCROTATEDDIMACTIONBODY),
            "::",
            stringify!(pab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCROTATEDDIMACTIONBODY),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r_node) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCROTATEDDIMACTIONBODY),
            "::",
            stringify!(r_node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_node) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCROTATEDDIMACTIONBODY),
            "::",
            stringify!(d_node)
        )
    );
}
pub type Dwg_Object_ASSOCROTATEDDIMACTIONBODY = _dwg_object_ASSOCROTATEDDIMACTIONBODY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_ASSOCDIMDEPENDENCYBODY {
    pub parent: *mut _dwg_object_object,
    pub adb_version: BITCODE_BS,
    pub dimbase_version: BITCODE_BS,
    pub name: BITCODE_TV,
    pub class_version: BITCODE_BS,
}
#[test]
fn bindgen_test_layout__dwg_object_ASSOCDIMDEPENDENCYBODY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ASSOCDIMDEPENDENCYBODY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ASSOCDIMDEPENDENCYBODY>(),
        32usize,
        concat!("Size of: ", stringify!(_dwg_object_ASSOCDIMDEPENDENCYBODY))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ASSOCDIMDEPENDENCYBODY>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_ASSOCDIMDEPENDENCYBODY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCDIMDEPENDENCYBODY),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adb_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCDIMDEPENDENCYBODY),
            "::",
            stringify!(adb_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dimbase_version) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCDIMDEPENDENCYBODY),
            "::",
            stringify!(dimbase_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCDIMDEPENDENCYBODY),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCDIMDEPENDENCYBODY),
            "::",
            stringify!(class_version)
        )
    );
}
pub type Dwg_Object_ASSOCDIMDEPENDENCYBODY = _dwg_object_ASSOCDIMDEPENDENCYBODY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_BLOCKPARAMDEPENDENCYBODY {
    pub parent: *mut _dwg_object_object,
    pub adb_version: BITCODE_BS,
    pub dimbase_version: BITCODE_BS,
    pub name: BITCODE_TV,
    pub class_version: BITCODE_BS,
}
#[test]
fn bindgen_test_layout__dwg_object_BLOCKPARAMDEPENDENCYBODY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_BLOCKPARAMDEPENDENCYBODY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_BLOCKPARAMDEPENDENCYBODY>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_object_BLOCKPARAMDEPENDENCYBODY)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_BLOCKPARAMDEPENDENCYBODY>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_BLOCKPARAMDEPENDENCYBODY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPARAMDEPENDENCYBODY),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adb_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPARAMDEPENDENCYBODY),
            "::",
            stringify!(adb_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dimbase_version) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPARAMDEPENDENCYBODY),
            "::",
            stringify!(dimbase_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPARAMDEPENDENCYBODY),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPARAMDEPENDENCYBODY),
            "::",
            stringify!(class_version)
        )
    );
}
pub type Dwg_Object_BLOCKPARAMDEPENDENCYBODY = _dwg_object_BLOCKPARAMDEPENDENCYBODY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_ARRAYITEMLOCATOR {
    pub parent: *mut _dwg_object_ASSOCARRAYMODIFYACTIONBODY,
    pub itemloc: [BITCODE_BL; 3usize],
}
#[test]
fn bindgen_test_layout__dwg_ARRAYITEMLOCATOR() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_ARRAYITEMLOCATOR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_ARRAYITEMLOCATOR>(),
        24usize,
        concat!("Size of: ", stringify!(_dwg_ARRAYITEMLOCATOR))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_ARRAYITEMLOCATOR>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_ARRAYITEMLOCATOR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ARRAYITEMLOCATOR),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).itemloc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ARRAYITEMLOCATOR),
            "::",
            stringify!(itemloc)
        )
    );
}
pub type Dwg_ARRAYITEMLOCATOR = _dwg_ARRAYITEMLOCATOR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_ASSOCARRAYACTIONBODY {
    pub parent: *mut _dwg_object_object,
    pub aab_version: BITCODE_BL,
    pub pab: Dwg_ASSOCPARAMBASEDACTIONBODY,
    pub aaab_version: BITCODE_BL,
    pub paramblock: BITCODE_TV,
    pub transmatrix: *mut BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_object_ASSOCARRAYACTIONBODY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ASSOCARRAYACTIONBODY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ASSOCARRAYACTIONBODY>(),
        104usize,
        concat!("Size of: ", stringify!(_dwg_object_ASSOCARRAYACTIONBODY))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ASSOCARRAYACTIONBODY>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_ASSOCARRAYACTIONBODY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCARRAYACTIONBODY),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aab_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCARRAYACTIONBODY),
            "::",
            stringify!(aab_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pab) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCARRAYACTIONBODY),
            "::",
            stringify!(pab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aaab_version) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCARRAYACTIONBODY),
            "::",
            stringify!(aaab_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramblock) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCARRAYACTIONBODY),
            "::",
            stringify!(paramblock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transmatrix) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCARRAYACTIONBODY),
            "::",
            stringify!(transmatrix)
        )
    );
}
pub type Dwg_Object_ASSOCARRAYACTIONBODY = _dwg_object_ASSOCARRAYACTIONBODY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_ASSOCARRAYMODIFYACTIONBODY {
    pub parent: *mut _dwg_object_object,
    pub aab_version: BITCODE_BL,
    pub pab: Dwg_ASSOCPARAMBASEDACTIONBODY,
    pub aaab_version: BITCODE_BL,
    pub paramblock: BITCODE_TV,
    pub transmatrix: *mut BITCODE_BD,
    pub status: BITCODE_BS,
    pub num_items: BITCODE_BL,
    pub items: *mut Dwg_ARRAYITEMLOCATOR,
}
#[test]
fn bindgen_test_layout__dwg_object_ASSOCARRAYMODIFYACTIONBODY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ASSOCARRAYMODIFYACTIONBODY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ASSOCARRAYMODIFYACTIONBODY>(),
        120usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_object_ASSOCARRAYMODIFYACTIONBODY)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ASSOCARRAYMODIFYACTIONBODY>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_ASSOCARRAYMODIFYACTIONBODY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCARRAYMODIFYACTIONBODY),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aab_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCARRAYMODIFYACTIONBODY),
            "::",
            stringify!(aab_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pab) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCARRAYMODIFYACTIONBODY),
            "::",
            stringify!(pab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aaab_version) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCARRAYMODIFYACTIONBODY),
            "::",
            stringify!(aaab_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramblock) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCARRAYMODIFYACTIONBODY),
            "::",
            stringify!(paramblock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transmatrix) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCARRAYMODIFYACTIONBODY),
            "::",
            stringify!(transmatrix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCARRAYMODIFYACTIONBODY),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_items) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCARRAYMODIFYACTIONBODY),
            "::",
            stringify!(num_items)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).items) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ASSOCARRAYMODIFYACTIONBODY),
            "::",
            stringify!(items)
        )
    );
}
pub type Dwg_Object_ASSOCARRAYMODIFYACTIONBODY = _dwg_object_ASSOCARRAYMODIFYACTIONBODY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_EvalExpr {
    pub parentid: BITCODE_BLd,
    pub major: BITCODE_BL,
    pub minor: BITCODE_BL,
    pub value_code: BITCODE_BSd,
    pub value: _dwg_EvalExpr__bindgen_ty_1,
    pub nodeid: BITCODE_BL,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _dwg_EvalExpr__bindgen_ty_1 {
    pub num40: BITCODE_BD,
    pub pt2d: BITCODE_2RD,
    pub pt3d: BITCODE_3BD,
    pub text1: BITCODE_TV,
    pub long90: BITCODE_BL,
    pub handle91: BITCODE_H,
    pub short70: BITCODE_BS,
}
#[test]
fn bindgen_test_layout__dwg_EvalExpr__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_EvalExpr__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_EvalExpr__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(_dwg_EvalExpr__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_EvalExpr__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_EvalExpr__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num40) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_EvalExpr__bindgen_ty_1),
            "::",
            stringify!(num40)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt2d) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_EvalExpr__bindgen_ty_1),
            "::",
            stringify!(pt2d)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt3d) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_EvalExpr__bindgen_ty_1),
            "::",
            stringify!(pt3d)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_EvalExpr__bindgen_ty_1),
            "::",
            stringify!(text1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).long90) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_EvalExpr__bindgen_ty_1),
            "::",
            stringify!(long90)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle91) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_EvalExpr__bindgen_ty_1),
            "::",
            stringify!(handle91)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).short70) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_EvalExpr__bindgen_ty_1),
            "::",
            stringify!(short70)
        )
    );
}
#[test]
fn bindgen_test_layout__dwg_EvalExpr() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_EvalExpr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_EvalExpr>(),
        48usize,
        concat!("Size of: ", stringify!(_dwg_EvalExpr))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_EvalExpr>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_EvalExpr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parentid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_EvalExpr),
            "::",
            stringify!(parentid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_EvalExpr),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_EvalExpr),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value_code) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_EvalExpr),
            "::",
            stringify!(value_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_EvalExpr),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeid) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_EvalExpr),
            "::",
            stringify!(nodeid)
        )
    );
}
pub type Dwg_EvalExpr = _dwg_EvalExpr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_ACSH_SubentMaterial {
    pub major: BITCODE_BL,
    pub minor: BITCODE_BL,
    pub reflectance: BITCODE_BL,
    pub displacement: BITCODE_BL,
}
#[test]
fn bindgen_test_layout__dwg_ACSH_SubentMaterial() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_ACSH_SubentMaterial> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_ACSH_SubentMaterial>(),
        16usize,
        concat!("Size of: ", stringify!(_dwg_ACSH_SubentMaterial))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_ACSH_SubentMaterial>(),
        4usize,
        concat!("Alignment of ", stringify!(_dwg_ACSH_SubentMaterial))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ACSH_SubentMaterial),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ACSH_SubentMaterial),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reflectance) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ACSH_SubentMaterial),
            "::",
            stringify!(reflectance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).displacement) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ACSH_SubentMaterial),
            "::",
            stringify!(displacement)
        )
    );
}
pub type Dwg_ACSH_SubentMaterial = _dwg_ACSH_SubentMaterial;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_ACSH_SubentColor {
    pub major: BITCODE_BL,
    pub minor: BITCODE_BL,
    pub transparency: BITCODE_BL,
    pub bl93: BITCODE_BL,
    pub is_face_variable: BITCODE_B,
}
#[test]
fn bindgen_test_layout__dwg_ACSH_SubentColor() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_ACSH_SubentColor> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_ACSH_SubentColor>(),
        20usize,
        concat!("Size of: ", stringify!(_dwg_ACSH_SubentColor))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_ACSH_SubentColor>(),
        4usize,
        concat!("Alignment of ", stringify!(_dwg_ACSH_SubentColor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ACSH_SubentColor),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ACSH_SubentColor),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transparency) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ACSH_SubentColor),
            "::",
            stringify!(transparency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bl93) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ACSH_SubentColor),
            "::",
            stringify!(bl93)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_face_variable) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ACSH_SubentColor),
            "::",
            stringify!(is_face_variable)
        )
    );
}
pub type Dwg_ACSH_SubentColor = _dwg_ACSH_SubentColor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_ACSH_HistoryNode {
    pub major: BITCODE_BL,
    pub minor: BITCODE_BL,
    pub trans: *mut BITCODE_BD,
    #[doc = "< DXF 62"]
    pub color: BITCODE_CMC,
    #[doc = "< DXF 92"]
    pub step_id: BITCODE_BL,
    #[doc = "< DXF 347"]
    pub material: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_ACSH_HistoryNode() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_ACSH_HistoryNode> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_ACSH_HistoryNode>(),
        80usize,
        concat!("Size of: ", stringify!(_dwg_ACSH_HistoryNode))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_ACSH_HistoryNode>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_ACSH_HistoryNode))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ACSH_HistoryNode),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ACSH_HistoryNode),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trans) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ACSH_HistoryNode),
            "::",
            stringify!(trans)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ACSH_HistoryNode),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).step_id) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ACSH_HistoryNode),
            "::",
            stringify!(step_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).material) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ACSH_HistoryNode),
            "::",
            stringify!(material)
        )
    );
}
pub type Dwg_ACSH_HistoryNode = _dwg_ACSH_HistoryNode;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_ACSH_HISTORY_CLASS {
    pub parent: *mut _dwg_object_object,
    pub major: BITCODE_BL,
    pub minor: BITCODE_BL,
    pub owner: BITCODE_H,
    pub h_nodeid: BITCODE_BL,
    pub show_history: BITCODE_B,
    pub record_history: BITCODE_B,
}
#[test]
fn bindgen_test_layout__dwg_object_ACSH_HISTORY_CLASS() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ACSH_HISTORY_CLASS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ACSH_HISTORY_CLASS>(),
        32usize,
        concat!("Size of: ", stringify!(_dwg_object_ACSH_HISTORY_CLASS))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ACSH_HISTORY_CLASS>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_ACSH_HISTORY_CLASS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_HISTORY_CLASS),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_HISTORY_CLASS),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_HISTORY_CLASS),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).owner) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_HISTORY_CLASS),
            "::",
            stringify!(owner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h_nodeid) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_HISTORY_CLASS),
            "::",
            stringify!(h_nodeid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).show_history) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_HISTORY_CLASS),
            "::",
            stringify!(show_history)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).record_history) as usize - ptr as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_HISTORY_CLASS),
            "::",
            stringify!(record_history)
        )
    );
}
pub type Dwg_Object_ACSH_HISTORY_CLASS = _dwg_object_ACSH_HISTORY_CLASS;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_ACSH_BOX_CLASS {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub history_node: Dwg_ACSH_HistoryNode,
    #[doc = "< DXF 90 (33)"]
    pub major: BITCODE_BL,
    #[doc = "< DXF 91 (29)"]
    pub minor: BITCODE_BL,
    #[doc = "< DXF 40 1300.0 (length?)"]
    pub length: BITCODE_BD,
    #[doc = "< DXF 41 20.0 (width?)"]
    pub width: BITCODE_BD,
    #[doc = "< DXF 42 420.0 (height?)"]
    pub height: BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_object_ACSH_BOX_CLASS() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ACSH_BOX_CLASS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ACSH_BOX_CLASS>(),
        168usize,
        concat!("Size of: ", stringify!(_dwg_object_ACSH_BOX_CLASS))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ACSH_BOX_CLASS>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_ACSH_BOX_CLASS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BOX_CLASS),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BOX_CLASS),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).history_node) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BOX_CLASS),
            "::",
            stringify!(history_node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BOX_CLASS),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BOX_CLASS),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BOX_CLASS),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BOX_CLASS),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BOX_CLASS),
            "::",
            stringify!(height)
        )
    );
}
pub type Dwg_Object_ACSH_BOX_CLASS = _dwg_object_ACSH_BOX_CLASS;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_ACSH_WEDGE_CLASS {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub history_node: Dwg_ACSH_HistoryNode,
    #[doc = "< DXF 90 (33)"]
    pub major: BITCODE_BL,
    #[doc = "< DXF 91 (29)"]
    pub minor: BITCODE_BL,
    #[doc = "< DXF 40 1300.0 (length?)"]
    pub length: BITCODE_BD,
    #[doc = "< DXF 41 20.0 (width?)"]
    pub width: BITCODE_BD,
    #[doc = "< DXF 42 420.0 (height?)"]
    pub height: BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_object_ACSH_WEDGE_CLASS() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ACSH_WEDGE_CLASS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ACSH_WEDGE_CLASS>(),
        168usize,
        concat!("Size of: ", stringify!(_dwg_object_ACSH_WEDGE_CLASS))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ACSH_WEDGE_CLASS>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_ACSH_WEDGE_CLASS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_WEDGE_CLASS),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_WEDGE_CLASS),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).history_node) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_WEDGE_CLASS),
            "::",
            stringify!(history_node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_WEDGE_CLASS),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_WEDGE_CLASS),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_WEDGE_CLASS),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_WEDGE_CLASS),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_WEDGE_CLASS),
            "::",
            stringify!(height)
        )
    );
}
pub type Dwg_Object_ACSH_WEDGE_CLASS = _dwg_object_ACSH_WEDGE_CLASS;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_ACSH_BOOLEAN_CLASS {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub history_node: Dwg_ACSH_HistoryNode,
    #[doc = "< DXF 90"]
    pub major: BITCODE_BL,
    #[doc = "< DXF 91"]
    pub minor: BITCODE_BL,
    #[doc = "< DXF 280"]
    pub operation: BITCODE_RCd,
    #[doc = "< DXF 92"]
    pub operand1: BITCODE_BL,
    #[doc = "< DXF 93"]
    pub operand2: BITCODE_BL,
}
#[test]
fn bindgen_test_layout__dwg_object_ACSH_BOOLEAN_CLASS() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ACSH_BOOLEAN_CLASS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ACSH_BOOLEAN_CLASS>(),
        160usize,
        concat!("Size of: ", stringify!(_dwg_object_ACSH_BOOLEAN_CLASS))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ACSH_BOOLEAN_CLASS>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_ACSH_BOOLEAN_CLASS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BOOLEAN_CLASS),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BOOLEAN_CLASS),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).history_node) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BOOLEAN_CLASS),
            "::",
            stringify!(history_node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BOOLEAN_CLASS),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BOOLEAN_CLASS),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).operation) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BOOLEAN_CLASS),
            "::",
            stringify!(operation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).operand1) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BOOLEAN_CLASS),
            "::",
            stringify!(operand1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).operand2) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BOOLEAN_CLASS),
            "::",
            stringify!(operand2)
        )
    );
}
pub type Dwg_Object_ACSH_BOOLEAN_CLASS = _dwg_object_ACSH_BOOLEAN_CLASS;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_ACSH_BREP_CLASS {
    pub parent: *mut _dwg_object_object,
    pub acis_empty: BITCODE_B,
    pub unknown: BITCODE_B,
    pub version: BITCODE_BS,
    pub num_blocks: BITCODE_BL,
    pub block_size: *mut BITCODE_BL,
    pub encr_sat_data: *mut *mut ::std::os::raw::c_char,
    pub sab_size: BITCODE_BL,
    pub acis_data: *mut BITCODE_RC,
    pub wireframe_data_present: BITCODE_B,
    pub point_present: BITCODE_B,
    pub point: BITCODE_3BD,
    pub isolines: BITCODE_BL,
    pub isoline_present: BITCODE_B,
    pub num_wires: BITCODE_BL,
    pub wires: *mut Dwg_3DSOLID_wire,
    pub num_silhouettes: BITCODE_BL,
    pub silhouettes: *mut Dwg_3DSOLID_silhouette,
    pub _dxf_sab_converted: BITCODE_B,
    pub acis_empty2: BITCODE_B,
    pub extra_acis_data: *mut _dwg_entity_3DSOLID,
    pub num_materials: BITCODE_BL,
    pub materials: *mut Dwg_3DSOLID_material,
    pub revision_guid: [BITCODE_RC; 39usize],
    pub revision_major: BITCODE_BL,
    pub revision_minor1: BITCODE_BS,
    pub revision_minor2: BITCODE_BS,
    pub revision_bytes: [BITCODE_RC; 9usize],
    pub end_marker: BITCODE_BL,
    pub history_id: BITCODE_H,
    pub has_revision_guid: BITCODE_B,
    pub acis_empty_bit: BITCODE_B,
    pub evalexpr: Dwg_EvalExpr,
    pub history_node: Dwg_ACSH_HistoryNode,
    #[doc = "< DXF 90"]
    pub major: BITCODE_BL,
    #[doc = "< DXF 91"]
    pub minor: BITCODE_BL,
}
#[test]
fn bindgen_test_layout__dwg_object_ACSH_BREP_CLASS() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ACSH_BREP_CLASS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ACSH_BREP_CLASS>(),
        368usize,
        concat!("Size of: ", stringify!(_dwg_object_ACSH_BREP_CLASS))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ACSH_BREP_CLASS>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_ACSH_BREP_CLASS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BREP_CLASS),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acis_empty) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BREP_CLASS),
            "::",
            stringify!(acis_empty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BREP_CLASS),
            "::",
            stringify!(unknown)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BREP_CLASS),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_blocks) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BREP_CLASS),
            "::",
            stringify!(num_blocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BREP_CLASS),
            "::",
            stringify!(block_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encr_sat_data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BREP_CLASS),
            "::",
            stringify!(encr_sat_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sab_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BREP_CLASS),
            "::",
            stringify!(sab_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acis_data) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BREP_CLASS),
            "::",
            stringify!(acis_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wireframe_data_present) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BREP_CLASS),
            "::",
            stringify!(wireframe_data_present)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).point_present) as usize - ptr as usize },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BREP_CLASS),
            "::",
            stringify!(point_present)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).point) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BREP_CLASS),
            "::",
            stringify!(point)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isolines) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BREP_CLASS),
            "::",
            stringify!(isolines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isoline_present) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BREP_CLASS),
            "::",
            stringify!(isoline_present)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_wires) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BREP_CLASS),
            "::",
            stringify!(num_wires)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wires) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BREP_CLASS),
            "::",
            stringify!(wires)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_silhouettes) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BREP_CLASS),
            "::",
            stringify!(num_silhouettes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).silhouettes) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BREP_CLASS),
            "::",
            stringify!(silhouettes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._dxf_sab_converted) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BREP_CLASS),
            "::",
            stringify!(_dxf_sab_converted)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acis_empty2) as usize - ptr as usize },
        121usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BREP_CLASS),
            "::",
            stringify!(acis_empty2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extra_acis_data) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BREP_CLASS),
            "::",
            stringify!(extra_acis_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_materials) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BREP_CLASS),
            "::",
            stringify!(num_materials)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).materials) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BREP_CLASS),
            "::",
            stringify!(materials)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision_guid) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BREP_CLASS),
            "::",
            stringify!(revision_guid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision_major) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BREP_CLASS),
            "::",
            stringify!(revision_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision_minor1) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BREP_CLASS),
            "::",
            stringify!(revision_minor1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision_minor2) as usize - ptr as usize },
        198usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BREP_CLASS),
            "::",
            stringify!(revision_minor2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision_bytes) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BREP_CLASS),
            "::",
            stringify!(revision_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_marker) as usize - ptr as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BREP_CLASS),
            "::",
            stringify!(end_marker)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).history_id) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BREP_CLASS),
            "::",
            stringify!(history_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_revision_guid) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BREP_CLASS),
            "::",
            stringify!(has_revision_guid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acis_empty_bit) as usize - ptr as usize },
        225usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BREP_CLASS),
            "::",
            stringify!(acis_empty_bit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BREP_CLASS),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).history_node) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BREP_CLASS),
            "::",
            stringify!(history_node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BREP_CLASS),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize },
        364usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_BREP_CLASS),
            "::",
            stringify!(minor)
        )
    );
}
pub type Dwg_Object_ACSH_BREP_CLASS = _dwg_object_ACSH_BREP_CLASS;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_ACSH_SWEEP_CLASS {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub history_node: Dwg_ACSH_HistoryNode,
    #[doc = "< DXF 90"]
    pub major: BITCODE_BL,
    #[doc = "< DXF 91"]
    pub minor: BITCODE_BL,
    #[doc = "< DXF 10"]
    pub direction: BITCODE_3BD,
    #[doc = "< DXF 92"]
    pub bl92: BITCODE_BL,
    #[doc = "< DXF 90"]
    pub shsw_text_size: BITCODE_BL,
    #[doc = "< DXF 310"]
    pub shsw_text: BITCODE_TF,
    #[doc = "< DXF 93"]
    pub shsw_bl93: BITCODE_BL,
    #[doc = "< DXF 90"]
    pub shsw_text2_size: BITCODE_BL,
    #[doc = "< DXF 310"]
    pub shsw_text2: BITCODE_TF,
    #[doc = "< DXF 42 0.0"]
    pub draft_angle: BITCODE_BD,
    #[doc = "< DXF 43 0.0"]
    pub start_draft_dist: BITCODE_BD,
    #[doc = "< DXF 44 0.0"]
    pub end_draft_dist: BITCODE_BD,
    #[doc = "< DXF 45 1.0"]
    pub scale_factor: BITCODE_BD,
    #[doc = "< DXF 48 0.0"]
    pub twist_angle: BITCODE_BD,
    #[doc = "< DXF 49 0.0"]
    pub align_angle: BITCODE_BD,
    #[doc = "< DXF 46 16x"]
    pub sweepentity_transform: *mut BITCODE_BD,
    #[doc = "< DXF 47 16x"]
    pub pathentity_transform: *mut BITCODE_BD,
    #[doc = "< DXF 70 2"]
    pub align_option: BITCODE_RC,
    #[doc = "< DXF 71 2"]
    pub miter_option: BITCODE_RC,
    #[doc = "< DXF 290 1"]
    pub has_align_start: BITCODE_B,
    #[doc = "< DXF 292 1"]
    pub bank: BITCODE_B,
    #[doc = "< DXF 293 0"]
    pub check_intersections: BITCODE_B,
    #[doc = "< DXF 294  1"]
    pub shsw_b294: BITCODE_B,
    #[doc = "< DXF 295  1"]
    pub shsw_b295: BITCODE_B,
    #[doc = "< DXF 296  1"]
    pub shsw_b296: BITCODE_B,
    #[doc = "< DXF 11 0,0,0"]
    pub pt2: BITCODE_3BD,
}
#[test]
fn bindgen_test_layout__dwg_object_ACSH_SWEEP_CLASS() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ACSH_SWEEP_CLASS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ACSH_SWEEP_CLASS>(),
        296usize,
        concat!("Size of: ", stringify!(_dwg_object_ACSH_SWEEP_CLASS))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ACSH_SWEEP_CLASS>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_ACSH_SWEEP_CLASS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_SWEEP_CLASS),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_SWEEP_CLASS),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).history_node) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_SWEEP_CLASS),
            "::",
            stringify!(history_node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_SWEEP_CLASS),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_SWEEP_CLASS),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).direction) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_SWEEP_CLASS),
            "::",
            stringify!(direction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bl92) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_SWEEP_CLASS),
            "::",
            stringify!(bl92)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shsw_text_size) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_SWEEP_CLASS),
            "::",
            stringify!(shsw_text_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shsw_text) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_SWEEP_CLASS),
            "::",
            stringify!(shsw_text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shsw_bl93) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_SWEEP_CLASS),
            "::",
            stringify!(shsw_bl93)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shsw_text2_size) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_SWEEP_CLASS),
            "::",
            stringify!(shsw_text2_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shsw_text2) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_SWEEP_CLASS),
            "::",
            stringify!(shsw_text2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).draft_angle) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_SWEEP_CLASS),
            "::",
            stringify!(draft_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_draft_dist) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_SWEEP_CLASS),
            "::",
            stringify!(start_draft_dist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_draft_dist) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_SWEEP_CLASS),
            "::",
            stringify!(end_draft_dist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale_factor) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_SWEEP_CLASS),
            "::",
            stringify!(scale_factor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).twist_angle) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_SWEEP_CLASS),
            "::",
            stringify!(twist_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).align_angle) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_SWEEP_CLASS),
            "::",
            stringify!(align_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sweepentity_transform) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_SWEEP_CLASS),
            "::",
            stringify!(sweepentity_transform)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pathentity_transform) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_SWEEP_CLASS),
            "::",
            stringify!(pathentity_transform)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).align_option) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_SWEEP_CLASS),
            "::",
            stringify!(align_option)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).miter_option) as usize - ptr as usize },
        265usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_SWEEP_CLASS),
            "::",
            stringify!(miter_option)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_align_start) as usize - ptr as usize },
        266usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_SWEEP_CLASS),
            "::",
            stringify!(has_align_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bank) as usize - ptr as usize },
        267usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_SWEEP_CLASS),
            "::",
            stringify!(bank)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).check_intersections) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_SWEEP_CLASS),
            "::",
            stringify!(check_intersections)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shsw_b294) as usize - ptr as usize },
        269usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_SWEEP_CLASS),
            "::",
            stringify!(shsw_b294)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shsw_b295) as usize - ptr as usize },
        270usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_SWEEP_CLASS),
            "::",
            stringify!(shsw_b295)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shsw_b296) as usize - ptr as usize },
        271usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_SWEEP_CLASS),
            "::",
            stringify!(shsw_b296)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt2) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_SWEEP_CLASS),
            "::",
            stringify!(pt2)
        )
    );
}
pub type Dwg_Object_ACSH_SWEEP_CLASS = _dwg_object_ACSH_SWEEP_CLASS;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_ACSH_EXTRUSION_CLASS {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub history_node: Dwg_ACSH_HistoryNode,
    #[doc = "< DXF 90"]
    pub major: BITCODE_BL,
    #[doc = "< DXF 91"]
    pub minor: BITCODE_BL,
    #[doc = "< DXF 10"]
    pub direction: BITCODE_3BD,
    #[doc = "< DXF 92"]
    pub bl92: BITCODE_BL,
    #[doc = "< DXF 90"]
    pub shsw_text_size: BITCODE_BL,
    #[doc = "< DXF 310"]
    pub shsw_text: BITCODE_TF,
    #[doc = "< DXF 93"]
    pub shsw_bl93: BITCODE_BL,
    #[doc = "< DXF 90"]
    pub shsw_text2_size: BITCODE_BL,
    #[doc = "< DXF 310"]
    pub shsw_text2: BITCODE_TF,
    #[doc = "< DXF 42 0.0"]
    pub draft_angle: BITCODE_BD,
    #[doc = "< DXF 43 0.0"]
    pub start_draft_dist: BITCODE_BD,
    #[doc = "< DXF 44 0.0"]
    pub end_draft_dist: BITCODE_BD,
    #[doc = "< DXF 45 1.0"]
    pub scale_factor: BITCODE_BD,
    #[doc = "< DXF 48 0.0"]
    pub twist_angle: BITCODE_BD,
    #[doc = "< DXF 49 0.0"]
    pub align_angle: BITCODE_BD,
    #[doc = "< DXF 46 16x"]
    pub sweepentity_transform: *mut BITCODE_BD,
    #[doc = "< DXF 47 16x"]
    pub pathentity_transform: *mut BITCODE_BD,
    #[doc = "< DXF 70 2"]
    pub align_option: BITCODE_RC,
    #[doc = "< DXF 71 2"]
    pub miter_option: BITCODE_RC,
    #[doc = "< DXF 290 1"]
    pub has_align_start: BITCODE_B,
    #[doc = "< DXF 292 1"]
    pub bank: BITCODE_B,
    #[doc = "< DXF 293 0"]
    pub check_intersections: BITCODE_B,
    #[doc = "< DXF 294  1"]
    pub shsw_b294: BITCODE_B,
    #[doc = "< DXF 295  1"]
    pub shsw_b295: BITCODE_B,
    #[doc = "< DXF 296  1"]
    pub shsw_b296: BITCODE_B,
    #[doc = "< DXF 11 0,0,0"]
    pub pt2: BITCODE_3BD,
}
#[test]
fn bindgen_test_layout__dwg_object_ACSH_EXTRUSION_CLASS() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ACSH_EXTRUSION_CLASS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ACSH_EXTRUSION_CLASS>(),
        296usize,
        concat!("Size of: ", stringify!(_dwg_object_ACSH_EXTRUSION_CLASS))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ACSH_EXTRUSION_CLASS>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_ACSH_EXTRUSION_CLASS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_EXTRUSION_CLASS),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_EXTRUSION_CLASS),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).history_node) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_EXTRUSION_CLASS),
            "::",
            stringify!(history_node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_EXTRUSION_CLASS),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_EXTRUSION_CLASS),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).direction) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_EXTRUSION_CLASS),
            "::",
            stringify!(direction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bl92) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_EXTRUSION_CLASS),
            "::",
            stringify!(bl92)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shsw_text_size) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_EXTRUSION_CLASS),
            "::",
            stringify!(shsw_text_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shsw_text) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_EXTRUSION_CLASS),
            "::",
            stringify!(shsw_text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shsw_bl93) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_EXTRUSION_CLASS),
            "::",
            stringify!(shsw_bl93)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shsw_text2_size) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_EXTRUSION_CLASS),
            "::",
            stringify!(shsw_text2_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shsw_text2) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_EXTRUSION_CLASS),
            "::",
            stringify!(shsw_text2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).draft_angle) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_EXTRUSION_CLASS),
            "::",
            stringify!(draft_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_draft_dist) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_EXTRUSION_CLASS),
            "::",
            stringify!(start_draft_dist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_draft_dist) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_EXTRUSION_CLASS),
            "::",
            stringify!(end_draft_dist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale_factor) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_EXTRUSION_CLASS),
            "::",
            stringify!(scale_factor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).twist_angle) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_EXTRUSION_CLASS),
            "::",
            stringify!(twist_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).align_angle) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_EXTRUSION_CLASS),
            "::",
            stringify!(align_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sweepentity_transform) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_EXTRUSION_CLASS),
            "::",
            stringify!(sweepentity_transform)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pathentity_transform) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_EXTRUSION_CLASS),
            "::",
            stringify!(pathentity_transform)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).align_option) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_EXTRUSION_CLASS),
            "::",
            stringify!(align_option)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).miter_option) as usize - ptr as usize },
        265usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_EXTRUSION_CLASS),
            "::",
            stringify!(miter_option)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_align_start) as usize - ptr as usize },
        266usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_EXTRUSION_CLASS),
            "::",
            stringify!(has_align_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bank) as usize - ptr as usize },
        267usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_EXTRUSION_CLASS),
            "::",
            stringify!(bank)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).check_intersections) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_EXTRUSION_CLASS),
            "::",
            stringify!(check_intersections)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shsw_b294) as usize - ptr as usize },
        269usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_EXTRUSION_CLASS),
            "::",
            stringify!(shsw_b294)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shsw_b295) as usize - ptr as usize },
        270usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_EXTRUSION_CLASS),
            "::",
            stringify!(shsw_b295)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shsw_b296) as usize - ptr as usize },
        271usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_EXTRUSION_CLASS),
            "::",
            stringify!(shsw_b296)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt2) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_EXTRUSION_CLASS),
            "::",
            stringify!(pt2)
        )
    );
}
pub type Dwg_Object_ACSH_EXTRUSION_CLASS = _dwg_object_ACSH_EXTRUSION_CLASS;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_ACSH_LOFT_CLASS {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub history_node: Dwg_ACSH_HistoryNode,
    #[doc = "< DXF 90"]
    pub major: BITCODE_BL,
    #[doc = "< DXF 91"]
    pub minor: BITCODE_BL,
    #[doc = "< DXF 92"]
    pub num_crosssects: BITCODE_BL,
    pub crosssects: *mut BITCODE_H,
    #[doc = "< DXF 95"]
    pub num_guides: BITCODE_BL,
    pub guides: *mut BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_object_ACSH_LOFT_CLASS() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ACSH_LOFT_CLASS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ACSH_LOFT_CLASS>(),
        176usize,
        concat!("Size of: ", stringify!(_dwg_object_ACSH_LOFT_CLASS))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ACSH_LOFT_CLASS>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_ACSH_LOFT_CLASS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_LOFT_CLASS),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_LOFT_CLASS),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).history_node) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_LOFT_CLASS),
            "::",
            stringify!(history_node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_LOFT_CLASS),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_LOFT_CLASS),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_crosssects) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_LOFT_CLASS),
            "::",
            stringify!(num_crosssects)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).crosssects) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_LOFT_CLASS),
            "::",
            stringify!(crosssects)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_guides) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_LOFT_CLASS),
            "::",
            stringify!(num_guides)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).guides) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_LOFT_CLASS),
            "::",
            stringify!(guides)
        )
    );
}
pub type Dwg_Object_ACSH_LOFT_CLASS = _dwg_object_ACSH_LOFT_CLASS;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_ACSH_FILLET_CLASS {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub history_node: Dwg_ACSH_HistoryNode,
    #[doc = "< DXF 90"]
    pub major: BITCODE_BL,
    #[doc = "< DXF 91"]
    pub minor: BITCODE_BL,
    #[doc = "< DXF 92"]
    pub bl92: BITCODE_BL,
    #[doc = "< DXF 93"]
    pub num_edges: BITCODE_BL,
    #[doc = "< DXF 94"]
    pub edges: *mut BITCODE_BL,
    #[doc = "< DXF 95"]
    pub num_radiuses: BITCODE_BL,
    #[doc = "< DXF 96"]
    pub num_startsetbacks: BITCODE_BL,
    #[doc = "< DXF 97"]
    pub num_endsetbacks: BITCODE_BL,
    #[doc = "< DXF 41"]
    pub radiuses: *mut BITCODE_BD,
    #[doc = "< DXF 42"]
    pub startsetbacks: *mut BITCODE_BD,
    #[doc = "< DXF 43"]
    pub endsetbacks: *mut BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_object_ACSH_FILLET_CLASS() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ACSH_FILLET_CLASS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ACSH_FILLET_CLASS>(),
        200usize,
        concat!("Size of: ", stringify!(_dwg_object_ACSH_FILLET_CLASS))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ACSH_FILLET_CLASS>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_ACSH_FILLET_CLASS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_FILLET_CLASS),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_FILLET_CLASS),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).history_node) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_FILLET_CLASS),
            "::",
            stringify!(history_node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_FILLET_CLASS),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_FILLET_CLASS),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bl92) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_FILLET_CLASS),
            "::",
            stringify!(bl92)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_edges) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_FILLET_CLASS),
            "::",
            stringify!(num_edges)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edges) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_FILLET_CLASS),
            "::",
            stringify!(edges)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_radiuses) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_FILLET_CLASS),
            "::",
            stringify!(num_radiuses)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_startsetbacks) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_FILLET_CLASS),
            "::",
            stringify!(num_startsetbacks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_endsetbacks) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_FILLET_CLASS),
            "::",
            stringify!(num_endsetbacks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).radiuses) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_FILLET_CLASS),
            "::",
            stringify!(radiuses)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).startsetbacks) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_FILLET_CLASS),
            "::",
            stringify!(startsetbacks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endsetbacks) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_FILLET_CLASS),
            "::",
            stringify!(endsetbacks)
        )
    );
}
pub type Dwg_Object_ACSH_FILLET_CLASS = _dwg_object_ACSH_FILLET_CLASS;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_ACSH_CHAMFER_CLASS {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub history_node: Dwg_ACSH_HistoryNode,
    #[doc = "< DXF 90"]
    pub major: BITCODE_BL,
    #[doc = "< DXF 91"]
    pub minor: BITCODE_BL,
    #[doc = "< DXF 92, flat or edge chamfer options?"]
    pub bl92: BITCODE_BL,
    #[doc = "< DXF 41 (left_range?)"]
    pub base_dist: BITCODE_BD,
    #[doc = "< DXF 42 (right_range or -1)?"]
    pub other_dist: BITCODE_BD,
    #[doc = "< DXF 93"]
    pub num_edges: BITCODE_BL,
    #[doc = "< DXF 94"]
    pub edges: *mut BITCODE_BL,
    #[doc = "< DXF 95 probably our nodeid"]
    pub bl95: BITCODE_BL,
}
#[test]
fn bindgen_test_layout__dwg_object_ACSH_CHAMFER_CLASS() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ACSH_CHAMFER_CLASS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ACSH_CHAMFER_CLASS>(),
        192usize,
        concat!("Size of: ", stringify!(_dwg_object_ACSH_CHAMFER_CLASS))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ACSH_CHAMFER_CLASS>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_ACSH_CHAMFER_CLASS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_CHAMFER_CLASS),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_CHAMFER_CLASS),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).history_node) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_CHAMFER_CLASS),
            "::",
            stringify!(history_node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_CHAMFER_CLASS),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_CHAMFER_CLASS),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bl92) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_CHAMFER_CLASS),
            "::",
            stringify!(bl92)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_dist) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_CHAMFER_CLASS),
            "::",
            stringify!(base_dist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).other_dist) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_CHAMFER_CLASS),
            "::",
            stringify!(other_dist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_edges) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_CHAMFER_CLASS),
            "::",
            stringify!(num_edges)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edges) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_CHAMFER_CLASS),
            "::",
            stringify!(edges)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bl95) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_CHAMFER_CLASS),
            "::",
            stringify!(bl95)
        )
    );
}
pub type Dwg_Object_ACSH_CHAMFER_CLASS = _dwg_object_ACSH_CHAMFER_CLASS;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_ACSH_CYLINDER_CLASS {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub history_node: Dwg_ACSH_HistoryNode,
    #[doc = "< DXF 90"]
    pub major: BITCODE_BL,
    #[doc = "< DXF 91"]
    pub minor: BITCODE_BL,
    #[doc = "< DXF 40"]
    pub height: BITCODE_BD,
    #[doc = "< DXF 41"]
    pub major_radius: BITCODE_BD,
    #[doc = "< DXF 42"]
    pub minor_radius: BITCODE_BD,
    #[doc = "< DXF 43"]
    pub x_radius: BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_object_ACSH_CYLINDER_CLASS() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ACSH_CYLINDER_CLASS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ACSH_CYLINDER_CLASS>(),
        176usize,
        concat!("Size of: ", stringify!(_dwg_object_ACSH_CYLINDER_CLASS))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ACSH_CYLINDER_CLASS>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_ACSH_CYLINDER_CLASS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_CYLINDER_CLASS),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_CYLINDER_CLASS),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).history_node) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_CYLINDER_CLASS),
            "::",
            stringify!(history_node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_CYLINDER_CLASS),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_CYLINDER_CLASS),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_CYLINDER_CLASS),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major_radius) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_CYLINDER_CLASS),
            "::",
            stringify!(major_radius)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor_radius) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_CYLINDER_CLASS),
            "::",
            stringify!(minor_radius)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x_radius) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_CYLINDER_CLASS),
            "::",
            stringify!(x_radius)
        )
    );
}
pub type Dwg_Object_ACSH_CYLINDER_CLASS = _dwg_object_ACSH_CYLINDER_CLASS;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_ACSH_CONE_CLASS {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub history_node: Dwg_ACSH_HistoryNode,
    #[doc = "< DXF 90"]
    pub major: BITCODE_BL,
    #[doc = "< DXF 91"]
    pub minor: BITCODE_BL,
    #[doc = "< DXF 40"]
    pub height: BITCODE_BD,
    #[doc = "< DXF 41"]
    pub major_radius: BITCODE_BD,
    #[doc = "< DXF 42"]
    pub minor_radius: BITCODE_BD,
    #[doc = "< DXF 43"]
    pub x_radius: BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_object_ACSH_CONE_CLASS() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ACSH_CONE_CLASS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ACSH_CONE_CLASS>(),
        176usize,
        concat!("Size of: ", stringify!(_dwg_object_ACSH_CONE_CLASS))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ACSH_CONE_CLASS>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_ACSH_CONE_CLASS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_CONE_CLASS),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_CONE_CLASS),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).history_node) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_CONE_CLASS),
            "::",
            stringify!(history_node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_CONE_CLASS),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_CONE_CLASS),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_CONE_CLASS),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major_radius) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_CONE_CLASS),
            "::",
            stringify!(major_radius)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor_radius) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_CONE_CLASS),
            "::",
            stringify!(minor_radius)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x_radius) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_CONE_CLASS),
            "::",
            stringify!(x_radius)
        )
    );
}
pub type Dwg_Object_ACSH_CONE_CLASS = _dwg_object_ACSH_CONE_CLASS;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_ACSH_PYRAMID_CLASS {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub history_node: Dwg_ACSH_HistoryNode,
    #[doc = "< DXF 90"]
    pub major: BITCODE_BL,
    #[doc = "< DXF 91"]
    pub minor: BITCODE_BL,
    #[doc = "< DXF 40"]
    pub height: BITCODE_BD,
    #[doc = "< DXF 92"]
    pub sides: BITCODE_BL,
    #[doc = "< DXF 41"]
    pub radius: BITCODE_BD,
    #[doc = "< DXF 42"]
    pub topradius: BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_object_ACSH_PYRAMID_CLASS() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ACSH_PYRAMID_CLASS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ACSH_PYRAMID_CLASS>(),
        176usize,
        concat!("Size of: ", stringify!(_dwg_object_ACSH_PYRAMID_CLASS))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ACSH_PYRAMID_CLASS>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_ACSH_PYRAMID_CLASS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_PYRAMID_CLASS),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_PYRAMID_CLASS),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).history_node) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_PYRAMID_CLASS),
            "::",
            stringify!(history_node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_PYRAMID_CLASS),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_PYRAMID_CLASS),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_PYRAMID_CLASS),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sides) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_PYRAMID_CLASS),
            "::",
            stringify!(sides)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).radius) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_PYRAMID_CLASS),
            "::",
            stringify!(radius)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).topradius) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_PYRAMID_CLASS),
            "::",
            stringify!(topradius)
        )
    );
}
pub type Dwg_Object_ACSH_PYRAMID_CLASS = _dwg_object_ACSH_PYRAMID_CLASS;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_ACSH_SPHERE_CLASS {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub history_node: Dwg_ACSH_HistoryNode,
    #[doc = "< DXF 90"]
    pub major: BITCODE_BL,
    #[doc = "< DXF 91"]
    pub minor: BITCODE_BL,
    #[doc = "< DXF 40"]
    pub radius: BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_object_ACSH_SPHERE_CLASS() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ACSH_SPHERE_CLASS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ACSH_SPHERE_CLASS>(),
        152usize,
        concat!("Size of: ", stringify!(_dwg_object_ACSH_SPHERE_CLASS))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ACSH_SPHERE_CLASS>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_ACSH_SPHERE_CLASS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_SPHERE_CLASS),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_SPHERE_CLASS),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).history_node) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_SPHERE_CLASS),
            "::",
            stringify!(history_node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_SPHERE_CLASS),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_SPHERE_CLASS),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).radius) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_SPHERE_CLASS),
            "::",
            stringify!(radius)
        )
    );
}
pub type Dwg_Object_ACSH_SPHERE_CLASS = _dwg_object_ACSH_SPHERE_CLASS;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_ACSH_TORUS_CLASS {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub history_node: Dwg_ACSH_HistoryNode,
    #[doc = "< DXF 90"]
    pub major: BITCODE_BL,
    #[doc = "< DXF 91"]
    pub minor: BITCODE_BL,
    #[doc = "< DXF 40"]
    pub major_radius: BITCODE_BD,
    #[doc = "< DXF 41"]
    pub minor_radius: BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_object_ACSH_TORUS_CLASS() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ACSH_TORUS_CLASS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ACSH_TORUS_CLASS>(),
        160usize,
        concat!("Size of: ", stringify!(_dwg_object_ACSH_TORUS_CLASS))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ACSH_TORUS_CLASS>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_ACSH_TORUS_CLASS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_TORUS_CLASS),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_TORUS_CLASS),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).history_node) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_TORUS_CLASS),
            "::",
            stringify!(history_node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_TORUS_CLASS),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_TORUS_CLASS),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major_radius) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_TORUS_CLASS),
            "::",
            stringify!(major_radius)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor_radius) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_TORUS_CLASS),
            "::",
            stringify!(minor_radius)
        )
    );
}
pub type Dwg_Object_ACSH_TORUS_CLASS = _dwg_object_ACSH_TORUS_CLASS;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_ACSH_REVOLVE_CLASS {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub history_node: Dwg_ACSH_HistoryNode,
    #[doc = "< DXF 90"]
    pub major: BITCODE_BL,
    #[doc = "< DXF 91"]
    pub minor: BITCODE_BL,
    #[doc = "< DXF 10"]
    pub axis_pt: BITCODE_3BD,
    #[doc = "< DXF 11"]
    pub direction: BITCODE_2RD,
    #[doc = "< DXF 40"]
    pub revolve_angle: BITCODE_BD,
    #[doc = "< DXF 41"]
    pub start_angle: BITCODE_BD,
    #[doc = "< DXF 43"]
    pub draft_angle: BITCODE_BD,
    #[doc = "< DXF 44"]
    pub bd44: BITCODE_BD,
    #[doc = "< DXF 45"]
    pub bd45: BITCODE_BD,
    #[doc = "< DXF 46"]
    pub twist_angle: BITCODE_BD,
    #[doc = "< DXF 290"]
    pub b290: BITCODE_B,
    #[doc = "< DXF 291"]
    pub is_close_to_axis: BITCODE_B,
    pub sweep_entity: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_object_ACSH_REVOLVE_CLASS() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ACSH_REVOLVE_CLASS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ACSH_REVOLVE_CLASS>(),
        248usize,
        concat!("Size of: ", stringify!(_dwg_object_ACSH_REVOLVE_CLASS))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ACSH_REVOLVE_CLASS>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_ACSH_REVOLVE_CLASS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_REVOLVE_CLASS),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_REVOLVE_CLASS),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).history_node) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_REVOLVE_CLASS),
            "::",
            stringify!(history_node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_REVOLVE_CLASS),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_REVOLVE_CLASS),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis_pt) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_REVOLVE_CLASS),
            "::",
            stringify!(axis_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).direction) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_REVOLVE_CLASS),
            "::",
            stringify!(direction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revolve_angle) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_REVOLVE_CLASS),
            "::",
            stringify!(revolve_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_angle) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_REVOLVE_CLASS),
            "::",
            stringify!(start_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).draft_angle) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_REVOLVE_CLASS),
            "::",
            stringify!(draft_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bd44) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_REVOLVE_CLASS),
            "::",
            stringify!(bd44)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bd45) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_REVOLVE_CLASS),
            "::",
            stringify!(bd45)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).twist_angle) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_REVOLVE_CLASS),
            "::",
            stringify!(twist_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b290) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_REVOLVE_CLASS),
            "::",
            stringify!(b290)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_close_to_axis) as usize - ptr as usize },
        233usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_REVOLVE_CLASS),
            "::",
            stringify!(is_close_to_axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sweep_entity) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACSH_REVOLVE_CLASS),
            "::",
            stringify!(sweep_entity)
        )
    );
}
pub type Dwg_Object_ACSH_REVOLVE_CLASS = _dwg_object_ACSH_REVOLVE_CLASS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_NAVISWORKSMODEL {
    pub parent: *mut _dwg_object_entity,
    #[doc = "< DXF 70"]
    pub flags: BITCODE_BS,
    #[doc = "< DXF 340"]
    pub definition: BITCODE_H,
    #[doc = "< DXF 40"]
    pub transmatrix: *mut BITCODE_BD,
    #[doc = "< DXF 40"]
    pub unitfactor: BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_entity_NAVISWORKSMODEL() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_NAVISWORKSMODEL> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_NAVISWORKSMODEL>(),
        40usize,
        concat!("Size of: ", stringify!(_dwg_entity_NAVISWORKSMODEL))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_NAVISWORKSMODEL>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_NAVISWORKSMODEL))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_NAVISWORKSMODEL),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_NAVISWORKSMODEL),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).definition) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_NAVISWORKSMODEL),
            "::",
            stringify!(definition)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transmatrix) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_NAVISWORKSMODEL),
            "::",
            stringify!(transmatrix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unitfactor) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_NAVISWORKSMODEL),
            "::",
            stringify!(unitfactor)
        )
    );
}
pub type Dwg_Entity_NAVISWORKSMODEL = _dwg_entity_NAVISWORKSMODEL;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_NAVISWORKSMODELDEF {
    pub parent: *mut _dwg_object_object,
    #[doc = "< DXF 70"]
    pub flags: BITCODE_BS,
    #[doc = "< DXF 1"]
    pub path: BITCODE_TV,
    #[doc = "< DXF 290"]
    pub status: BITCODE_B,
    #[doc = "< DXF 10"]
    pub min_extent: BITCODE_3BD,
    #[doc = "< DXF 11"]
    pub max_extent: BITCODE_3BD,
    #[doc = "< DXF 290"]
    pub host_drawing_visibility: BITCODE_B,
}
#[test]
fn bindgen_test_layout__dwg_object_NAVISWORKSMODELDEF() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_NAVISWORKSMODELDEF> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_NAVISWORKSMODELDEF>(),
        88usize,
        concat!("Size of: ", stringify!(_dwg_object_NAVISWORKSMODELDEF))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_NAVISWORKSMODELDEF>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_NAVISWORKSMODELDEF))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_NAVISWORKSMODELDEF),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_NAVISWORKSMODELDEF),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_NAVISWORKSMODELDEF),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_NAVISWORKSMODELDEF),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_extent) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_NAVISWORKSMODELDEF),
            "::",
            stringify!(min_extent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_extent) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_NAVISWORKSMODELDEF),
            "::",
            stringify!(max_extent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).host_drawing_visibility) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_NAVISWORKSMODELDEF),
            "::",
            stringify!(host_drawing_visibility)
        )
    );
}
pub type Dwg_Object_NAVISWORKSMODELDEF = _dwg_object_NAVISWORKSMODELDEF;
#[doc = "Class RENDERSETTINGS (varies)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_RENDERSETTINGS {
    pub parent: *mut _dwg_object_object,
    #[doc = "< DXF 90, default: 1"]
    pub class_version: BITCODE_BL,
    pub name: BITCODE_TV,
    #[doc = "< DXF 290"]
    pub fog_enabled: BITCODE_B,
    #[doc = "< DXF 290"]
    pub fog_background_enabled: BITCODE_B,
    #[doc = "< DXF 290"]
    pub backfaces_enabled: BITCODE_B,
    #[doc = "< DXF 290"]
    pub environ_image_enabled: BITCODE_B,
    pub environ_image_filename: BITCODE_TV,
    pub description: BITCODE_TV,
    #[doc = "< DXF 290"]
    pub display_index: BITCODE_BL,
    #[doc = "< DXF 290, r2013 only"]
    pub has_predefined: BITCODE_B,
}
#[test]
fn bindgen_test_layout__dwg_object_RENDERSETTINGS() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_RENDERSETTINGS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_RENDERSETTINGS>(),
        56usize,
        concat!("Size of: ", stringify!(_dwg_object_RENDERSETTINGS))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_RENDERSETTINGS>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_RENDERSETTINGS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERSETTINGS),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERSETTINGS),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERSETTINGS),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fog_enabled) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERSETTINGS),
            "::",
            stringify!(fog_enabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fog_background_enabled) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERSETTINGS),
            "::",
            stringify!(fog_background_enabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backfaces_enabled) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERSETTINGS),
            "::",
            stringify!(backfaces_enabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).environ_image_enabled) as usize - ptr as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERSETTINGS),
            "::",
            stringify!(environ_image_enabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).environ_image_filename) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERSETTINGS),
            "::",
            stringify!(environ_image_filename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).description) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERSETTINGS),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).display_index) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERSETTINGS),
            "::",
            stringify!(display_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_predefined) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERSETTINGS),
            "::",
            stringify!(has_predefined)
        )
    );
}
#[doc = "Class RENDERSETTINGS (varies)"]
pub type Dwg_Object_RENDERSETTINGS = _dwg_object_RENDERSETTINGS;
#[doc = "Class MENTALRAYRENDERSETTINGS (varies)\nUnstable"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_MENTALRAYRENDERSETTINGS {
    pub parent: *mut _dwg_object_object,
    #[doc = "< DXF 90, default: 1"]
    pub class_version: BITCODE_BL,
    pub name: BITCODE_TV,
    #[doc = "< DXF 290"]
    pub fog_enabled: BITCODE_B,
    #[doc = "< DXF 290"]
    pub fog_background_enabled: BITCODE_B,
    #[doc = "< DXF 290"]
    pub backfaces_enabled: BITCODE_B,
    #[doc = "< DXF 290"]
    pub environ_image_enabled: BITCODE_B,
    pub environ_image_filename: BITCODE_TV,
    pub description: BITCODE_TV,
    #[doc = "< DXF 290"]
    pub display_index: BITCODE_BL,
    #[doc = "< DXF 290, r2013 only"]
    pub has_predefined: BITCODE_B,
    #[doc = "< DXF 90, always 2"]
    pub mr_version: BITCODE_BL,
    #[doc = "< DXF 90"]
    pub sampling1: BITCODE_BL,
    #[doc = "< DXF 90"]
    pub sampling2: BITCODE_BL,
    #[doc = "< DXF 70"]
    pub sampling_mr_filter: BITCODE_BS,
    #[doc = "< DXF 40"]
    pub sampling_filter1: BITCODE_BD,
    #[doc = "< DXF 40"]
    pub sampling_filter2: BITCODE_BD,
    #[doc = "< DXF 40"]
    pub sampling_contrast_color1: BITCODE_BD,
    #[doc = "< DXF 40"]
    pub sampling_contrast_color2: BITCODE_BD,
    #[doc = "< DXF 40"]
    pub sampling_contrast_color3: BITCODE_BD,
    #[doc = "< DXF 40"]
    pub sampling_contrast_color4: BITCODE_BD,
    #[doc = "< DXF 70"]
    pub shadow_mode: BITCODE_BS,
    #[doc = "< DXF 290"]
    pub shadow_maps_enabled: BITCODE_B,
    #[doc = "< DXF 290"]
    pub ray_tracing_enabled: BITCODE_B,
    #[doc = "< DXF 90"]
    pub ray_trace_depth1: BITCODE_BL,
    #[doc = "< DXF 90"]
    pub ray_trace_depth2: BITCODE_BL,
    #[doc = "< DXF 90"]
    pub ray_trace_depth3: BITCODE_BL,
    #[doc = "< DXF 290"]
    pub global_illumination_enabled: BITCODE_B,
    #[doc = "< DXF 90"]
    pub gi_sample_count: BITCODE_BL,
    #[doc = "< DXF 290"]
    pub gi_sample_radius_enabled: BITCODE_B,
    #[doc = "< DXF 40"]
    pub gi_sample_radius: BITCODE_BD,
    #[doc = "< DXF 90"]
    pub gi_photons_per_light: BITCODE_BL,
    #[doc = "< DXF 90"]
    pub photon_trace_depth1: BITCODE_BL,
    #[doc = "< DXF 90"]
    pub photon_trace_depth2: BITCODE_BL,
    #[doc = "< DXF 90"]
    pub photon_trace_depth3: BITCODE_BL,
    #[doc = "< DXF 290"]
    pub final_gathering_enabled: BITCODE_B,
    #[doc = "< DXF 90"]
    pub fg_ray_count: BITCODE_BL,
    #[doc = "< DXF 290"]
    pub fg_sample_radius_state1: BITCODE_B,
    #[doc = "< DXF 290"]
    pub fg_sample_radius_state2: BITCODE_B,
    #[doc = "< DXF 290"]
    pub fg_sample_radius_state3: BITCODE_B,
    #[doc = "< DXF 40"]
    pub fg_sample_radius1: BITCODE_BD,
    #[doc = "< DXF 40"]
    pub fg_sample_radius2: BITCODE_BD,
    #[doc = "< DXF 40"]
    pub light_luminance_scale: BITCODE_BD,
    #[doc = "< DXF 70"]
    pub diagnostics_mode: BITCODE_BS,
    #[doc = "< DXF 70"]
    pub diagnostics_grid_mode: BITCODE_BS,
    #[doc = "< DXF 40"]
    pub diagnostics_grid_float: BITCODE_BD,
    #[doc = "< DXF 70"]
    pub diagnostics_photon_mode: BITCODE_BS,
    #[doc = "< DXF 70"]
    pub diagnostics_bsp_mode: BITCODE_BS,
    #[doc = "< DXF 290"]
    pub export_mi_enabled: BITCODE_B,
    #[doc = "< DXF 1"]
    pub mr_description: BITCODE_TV,
    #[doc = "< DXF 90"]
    pub tile_size: BITCODE_BL,
    #[doc = "< DXF 70"]
    pub tile_order: BITCODE_BS,
    #[doc = "< DXF 90"]
    pub memory_limit: BITCODE_BL,
    #[doc = "< DXF 290"]
    pub diagnostics_samples_mode: BITCODE_B,
    #[doc = "< DXF 40"]
    pub energy_multiplier: BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_object_MENTALRAYRENDERSETTINGS() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_MENTALRAYRENDERSETTINGS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_MENTALRAYRENDERSETTINGS>(),
        272usize,
        concat!("Size of: ", stringify!(_dwg_object_MENTALRAYRENDERSETTINGS))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_MENTALRAYRENDERSETTINGS>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fog_enabled) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(fog_enabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fog_background_enabled) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(fog_background_enabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backfaces_enabled) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(backfaces_enabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).environ_image_enabled) as usize - ptr as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(environ_image_enabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).environ_image_filename) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(environ_image_filename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).description) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).display_index) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(display_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_predefined) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(has_predefined)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mr_version) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(mr_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampling1) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(sampling1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampling2) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(sampling2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampling_mr_filter) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(sampling_mr_filter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampling_filter1) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(sampling_filter1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampling_filter2) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(sampling_filter2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampling_contrast_color1) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(sampling_contrast_color1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampling_contrast_color2) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(sampling_contrast_color2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampling_contrast_color3) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(sampling_contrast_color3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampling_contrast_color4) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(sampling_contrast_color4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shadow_mode) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(shadow_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shadow_maps_enabled) as usize - ptr as usize },
        122usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(shadow_maps_enabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ray_tracing_enabled) as usize - ptr as usize },
        123usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(ray_tracing_enabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ray_trace_depth1) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(ray_trace_depth1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ray_trace_depth2) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(ray_trace_depth2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ray_trace_depth3) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(ray_trace_depth3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).global_illumination_enabled) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(global_illumination_enabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gi_sample_count) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(gi_sample_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gi_sample_radius_enabled) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(gi_sample_radius_enabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gi_sample_radius) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(gi_sample_radius)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gi_photons_per_light) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(gi_photons_per_light)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).photon_trace_depth1) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(photon_trace_depth1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).photon_trace_depth2) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(photon_trace_depth2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).photon_trace_depth3) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(photon_trace_depth3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).final_gathering_enabled) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(final_gathering_enabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fg_ray_count) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(fg_ray_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fg_sample_radius_state1) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(fg_sample_radius_state1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fg_sample_radius_state2) as usize - ptr as usize },
        185usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(fg_sample_radius_state2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fg_sample_radius_state3) as usize - ptr as usize },
        186usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(fg_sample_radius_state3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fg_sample_radius1) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(fg_sample_radius1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fg_sample_radius2) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(fg_sample_radius2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).light_luminance_scale) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(light_luminance_scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).diagnostics_mode) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(diagnostics_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).diagnostics_grid_mode) as usize - ptr as usize },
        218usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(diagnostics_grid_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).diagnostics_grid_float) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(diagnostics_grid_float)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).diagnostics_photon_mode) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(diagnostics_photon_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).diagnostics_bsp_mode) as usize - ptr as usize },
        234usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(diagnostics_bsp_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).export_mi_enabled) as usize - ptr as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(export_mi_enabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mr_description) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(mr_description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tile_size) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(tile_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tile_order) as usize - ptr as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(tile_order)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memory_limit) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(memory_limit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).diagnostics_samples_mode) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(diagnostics_samples_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).energy_multiplier) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MENTALRAYRENDERSETTINGS),
            "::",
            stringify!(energy_multiplier)
        )
    );
}
#[doc = "Class MENTALRAYRENDERSETTINGS (varies)\nUnstable"]
pub type Dwg_Object_MENTALRAYRENDERSETTINGS = _dwg_object_MENTALRAYRENDERSETTINGS;
#[doc = "Class RAPIDRTRENDERSETTINGS (varies)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_RAPIDRTRENDERSETTINGS {
    pub parent: *mut _dwg_object_object,
    #[doc = "< DXF 90, default: 1"]
    pub class_version: BITCODE_BL,
    pub name: BITCODE_TV,
    #[doc = "< DXF 290"]
    pub fog_enabled: BITCODE_B,
    #[doc = "< DXF 290"]
    pub fog_background_enabled: BITCODE_B,
    #[doc = "< DXF 290"]
    pub backfaces_enabled: BITCODE_B,
    #[doc = "< DXF 290"]
    pub environ_image_enabled: BITCODE_B,
    pub environ_image_filename: BITCODE_TV,
    pub description: BITCODE_TV,
    #[doc = "< DXF 290"]
    pub display_index: BITCODE_BL,
    #[doc = "< DXF 290, r2013 only"]
    pub has_predefined: BITCODE_B,
    #[doc = "< DXF 90"]
    pub rapidrt_version: BITCODE_BL,
    #[doc = "< DXF 70"]
    pub render_target: BITCODE_BL,
    #[doc = "< DXF 90"]
    pub render_level: BITCODE_BL,
    #[doc = "< DXF 90"]
    pub render_time: BITCODE_BL,
    #[doc = "< DXF 70"]
    pub lighting_model: BITCODE_BL,
    #[doc = "< DXF 70"]
    pub filter_type: BITCODE_BL,
    #[doc = "< DXF 40"]
    pub filter_width: BITCODE_BD,
    #[doc = "< DXF 40"]
    pub filter_height: BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_object_RAPIDRTRENDERSETTINGS() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_RAPIDRTRENDERSETTINGS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_RAPIDRTRENDERSETTINGS>(),
        96usize,
        concat!("Size of: ", stringify!(_dwg_object_RAPIDRTRENDERSETTINGS))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_RAPIDRTRENDERSETTINGS>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_RAPIDRTRENDERSETTINGS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RAPIDRTRENDERSETTINGS),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RAPIDRTRENDERSETTINGS),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RAPIDRTRENDERSETTINGS),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fog_enabled) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RAPIDRTRENDERSETTINGS),
            "::",
            stringify!(fog_enabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fog_background_enabled) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RAPIDRTRENDERSETTINGS),
            "::",
            stringify!(fog_background_enabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backfaces_enabled) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RAPIDRTRENDERSETTINGS),
            "::",
            stringify!(backfaces_enabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).environ_image_enabled) as usize - ptr as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RAPIDRTRENDERSETTINGS),
            "::",
            stringify!(environ_image_enabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).environ_image_filename) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RAPIDRTRENDERSETTINGS),
            "::",
            stringify!(environ_image_filename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).description) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RAPIDRTRENDERSETTINGS),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).display_index) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RAPIDRTRENDERSETTINGS),
            "::",
            stringify!(display_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_predefined) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RAPIDRTRENDERSETTINGS),
            "::",
            stringify!(has_predefined)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rapidrt_version) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RAPIDRTRENDERSETTINGS),
            "::",
            stringify!(rapidrt_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).render_target) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RAPIDRTRENDERSETTINGS),
            "::",
            stringify!(render_target)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).render_level) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RAPIDRTRENDERSETTINGS),
            "::",
            stringify!(render_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).render_time) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RAPIDRTRENDERSETTINGS),
            "::",
            stringify!(render_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lighting_model) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RAPIDRTRENDERSETTINGS),
            "::",
            stringify!(lighting_model)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filter_type) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RAPIDRTRENDERSETTINGS),
            "::",
            stringify!(filter_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filter_width) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RAPIDRTRENDERSETTINGS),
            "::",
            stringify!(filter_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filter_height) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RAPIDRTRENDERSETTINGS),
            "::",
            stringify!(filter_height)
        )
    );
}
#[doc = "Class RAPIDRTRENDERSETTINGS (varies)"]
pub type Dwg_Object_RAPIDRTRENDERSETTINGS = _dwg_object_RAPIDRTRENDERSETTINGS;
#[doc = "Class RENDERENVIRONMENT (varies)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_RENDERENVIRONMENT {
    pub parent: *mut _dwg_object_object,
    #[doc = "< DXF 90, default: 1"]
    pub class_version: BITCODE_BL,
    #[doc = "< DXF 290"]
    pub fog_enabled: BITCODE_B,
    #[doc = "< DXF 290"]
    pub fog_background_enabled: BITCODE_B,
    #[doc = "< DXF 280"]
    pub fog_color_r: BITCODE_RC,
    #[doc = "< DXF 280"]
    pub fog_color_g: BITCODE_RC,
    #[doc = "< DXF 280"]
    pub fog_color_b: BITCODE_RC,
    #[doc = "< DXF 40"]
    pub fog_density_near: BITCODE_BD,
    #[doc = "< DXF 40"]
    pub fog_density_far: BITCODE_BD,
    #[doc = "< DXF 40"]
    pub fog_distance_near: BITCODE_BD,
    #[doc = "< DXF 40"]
    pub fog_distance_far: BITCODE_BD,
    #[doc = "< DXF 290"]
    pub environ_image_enabled: BITCODE_B,
    #[doc = "< DXF 1"]
    pub environ_image_filename: BITCODE_TV,
}
#[test]
fn bindgen_test_layout__dwg_object_RENDERENVIRONMENT() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_RENDERENVIRONMENT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_RENDERENVIRONMENT>(),
        72usize,
        concat!("Size of: ", stringify!(_dwg_object_RENDERENVIRONMENT))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_RENDERENVIRONMENT>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_RENDERENVIRONMENT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERENVIRONMENT),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERENVIRONMENT),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fog_enabled) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERENVIRONMENT),
            "::",
            stringify!(fog_enabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fog_background_enabled) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERENVIRONMENT),
            "::",
            stringify!(fog_background_enabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fog_color_r) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERENVIRONMENT),
            "::",
            stringify!(fog_color_r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fog_color_g) as usize - ptr as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERENVIRONMENT),
            "::",
            stringify!(fog_color_g)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fog_color_b) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERENVIRONMENT),
            "::",
            stringify!(fog_color_b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fog_density_near) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERENVIRONMENT),
            "::",
            stringify!(fog_density_near)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fog_density_far) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERENVIRONMENT),
            "::",
            stringify!(fog_density_far)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fog_distance_near) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERENVIRONMENT),
            "::",
            stringify!(fog_distance_near)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fog_distance_far) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERENVIRONMENT),
            "::",
            stringify!(fog_distance_far)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).environ_image_enabled) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERENVIRONMENT),
            "::",
            stringify!(environ_image_enabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).environ_image_filename) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERENVIRONMENT),
            "::",
            stringify!(environ_image_filename)
        )
    );
}
#[doc = "Class RENDERENVIRONMENT (varies)"]
pub type Dwg_Object_RENDERENVIRONMENT = _dwg_object_RENDERENVIRONMENT;
#[doc = "Class RENDERGLOBAL (varies)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_RENDERGLOBAL {
    pub parent: *mut _dwg_object_object,
    #[doc = "< DXF 90"]
    pub class_version: BITCODE_BL,
    #[doc = "< DXF 90"]
    pub procedure: BITCODE_BL,
    #[doc = "< DXF 90"]
    pub destination: BITCODE_BL,
    #[doc = "< DXF 290"]
    pub save_enabled: BITCODE_B,
    #[doc = "< DXF 1"]
    pub save_filename: BITCODE_TV,
    #[doc = "< DXF 90"]
    pub image_width: BITCODE_BL,
    #[doc = "< DXF 90"]
    pub image_height: BITCODE_BL,
    #[doc = "< DXF 290"]
    pub predef_presets_first: BITCODE_B,
    #[doc = "< DXF 290"]
    pub highlevel_info: BITCODE_B,
}
#[test]
fn bindgen_test_layout__dwg_object_RENDERGLOBAL() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_RENDERGLOBAL> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_RENDERGLOBAL>(),
        48usize,
        concat!("Size of: ", stringify!(_dwg_object_RENDERGLOBAL))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_RENDERGLOBAL>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_RENDERGLOBAL))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERGLOBAL),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERGLOBAL),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).procedure) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERGLOBAL),
            "::",
            stringify!(procedure)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destination) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERGLOBAL),
            "::",
            stringify!(destination)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).save_enabled) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERGLOBAL),
            "::",
            stringify!(save_enabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).save_filename) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERGLOBAL),
            "::",
            stringify!(save_filename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image_width) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERGLOBAL),
            "::",
            stringify!(image_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image_height) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERGLOBAL),
            "::",
            stringify!(image_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).predef_presets_first) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERGLOBAL),
            "::",
            stringify!(predef_presets_first)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).highlevel_info) as usize - ptr as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERGLOBAL),
            "::",
            stringify!(highlevel_info)
        )
    );
}
#[doc = "Class RENDERGLOBAL (varies)"]
pub type Dwg_Object_RENDERGLOBAL = _dwg_object_RENDERGLOBAL;
#[doc = "Class RENDERENTRY (varies)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_RENDERENTRY {
    pub parent: *mut _dwg_object_object,
    #[doc = "< DXF 90"]
    pub class_version: BITCODE_BL,
    #[doc = "< DXF 1"]
    pub image_file_name: BITCODE_TV,
    #[doc = "< DXF 1"]
    pub preset_name: BITCODE_TV,
    #[doc = "< DXF 1"]
    pub view_name: BITCODE_TV,
    #[doc = "< DXF 90"]
    pub dimension_x: BITCODE_BL,
    #[doc = "< DXF 90"]
    pub dimension_y: BITCODE_BL,
    #[doc = "< DXF 70"]
    pub start_year: BITCODE_BS,
    #[doc = "< DXF 70"]
    pub start_month: BITCODE_BS,
    #[doc = "< DXF 70"]
    pub start_day: BITCODE_BS,
    #[doc = "< DXF 70"]
    pub start_minute: BITCODE_BS,
    #[doc = "< DXF 70"]
    pub start_second: BITCODE_BS,
    #[doc = "< DXF 70"]
    pub start_msec: BITCODE_BS,
    #[doc = "< DXF 40"]
    pub render_time: BITCODE_BD,
    #[doc = "< DXF 90"]
    pub memory_amount: BITCODE_BL,
    #[doc = "< DXF 90"]
    pub material_count: BITCODE_BL,
    #[doc = "< DXF 90"]
    pub light_count: BITCODE_BL,
    #[doc = "< DXF 90"]
    pub triangle_count: BITCODE_BL,
    #[doc = "< DXF 90"]
    pub display_index: BITCODE_BL,
}
#[test]
fn bindgen_test_layout__dwg_object_RENDERENTRY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_RENDERENTRY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_RENDERENTRY>(),
        96usize,
        concat!("Size of: ", stringify!(_dwg_object_RENDERENTRY))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_RENDERENTRY>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_RENDERENTRY))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERENTRY),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERENTRY),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image_file_name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERENTRY),
            "::",
            stringify!(image_file_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).preset_name) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERENTRY),
            "::",
            stringify!(preset_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).view_name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERENTRY),
            "::",
            stringify!(view_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dimension_x) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERENTRY),
            "::",
            stringify!(dimension_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dimension_y) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERENTRY),
            "::",
            stringify!(dimension_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_year) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERENTRY),
            "::",
            stringify!(start_year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_month) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERENTRY),
            "::",
            stringify!(start_month)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_day) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERENTRY),
            "::",
            stringify!(start_day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_minute) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERENTRY),
            "::",
            stringify!(start_minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_second) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERENTRY),
            "::",
            stringify!(start_second)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_msec) as usize - ptr as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERENTRY),
            "::",
            stringify!(start_msec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).render_time) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERENTRY),
            "::",
            stringify!(render_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memory_amount) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERENTRY),
            "::",
            stringify!(memory_amount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).material_count) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERENTRY),
            "::",
            stringify!(material_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).light_count) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERENTRY),
            "::",
            stringify!(light_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).triangle_count) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERENTRY),
            "::",
            stringify!(triangle_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).display_index) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RENDERENTRY),
            "::",
            stringify!(display_index)
        )
    );
}
#[doc = "Class RENDERENTRY (varies)"]
pub type Dwg_Object_RENDERENTRY = _dwg_object_RENDERENTRY;
#[doc = "Class MOTIONPATH (varies)\nMaybe all the Camera paths are under ACAD_NAMEDPATH, but there's also ACAD_MOTION"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_MOTIONPATH {
    pub parent: *mut _dwg_object_object,
    #[doc = "< DXF 90, default: 1"]
    pub class_version: BITCODE_BS,
    #[doc = "< DXF 340"]
    pub camera_path: BITCODE_H,
    #[doc = "< DXF 340"]
    pub target_path: BITCODE_H,
    #[doc = "< DXF 340"]
    pub viewtable: BITCODE_H,
    #[doc = "< DXF 90  number of frames? default 30"]
    pub frames: BITCODE_BS,
    #[doc = "< DXF 90  per second, default 30"]
    pub frame_rate: BITCODE_BS,
    #[doc = "< DXF 290"]
    pub corner_decel: BITCODE_B,
}
#[test]
fn bindgen_test_layout__dwg_object_MOTIONPATH() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_MOTIONPATH> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_MOTIONPATH>(),
        48usize,
        concat!("Size of: ", stringify!(_dwg_object_MOTIONPATH))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_MOTIONPATH>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_MOTIONPATH))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MOTIONPATH),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MOTIONPATH),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).camera_path) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MOTIONPATH),
            "::",
            stringify!(camera_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_path) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MOTIONPATH),
            "::",
            stringify!(target_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewtable) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MOTIONPATH),
            "::",
            stringify!(viewtable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frames) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MOTIONPATH),
            "::",
            stringify!(frames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame_rate) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MOTIONPATH),
            "::",
            stringify!(frame_rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).corner_decel) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MOTIONPATH),
            "::",
            stringify!(corner_decel)
        )
    );
}
#[doc = "Class MOTIONPATH (varies)\nMaybe all the Camera paths are under ACAD_NAMEDPATH, but there's also ACAD_MOTION"]
pub type Dwg_Object_MOTIONPATH = _dwg_object_MOTIONPATH;
#[doc = "Class ACDBCURVEPATH (varies)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_CURVEPATH {
    pub parent: *mut _dwg_object_object,
    #[doc = "< DXF 90, default: 1"]
    pub class_version: BITCODE_BS,
    #[doc = "< DXF 340"]
    pub entity: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_object_CURVEPATH() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_CURVEPATH> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_CURVEPATH>(),
        24usize,
        concat!("Size of: ", stringify!(_dwg_object_CURVEPATH))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_CURVEPATH>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_CURVEPATH))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_CURVEPATH),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_CURVEPATH),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entity) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_CURVEPATH),
            "::",
            stringify!(entity)
        )
    );
}
#[doc = "Class ACDBCURVEPATH (varies)"]
pub type Dwg_Object_CURVEPATH = _dwg_object_CURVEPATH;
#[doc = "Class ACDBPOINTPATH (varies)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_POINTPATH {
    pub parent: *mut _dwg_object_object,
    #[doc = "< DXF 90, default: 1"]
    pub class_version: BITCODE_BS,
    #[doc = "< DXF 10"]
    pub point: BITCODE_3BD,
}
#[test]
fn bindgen_test_layout__dwg_object_POINTPATH() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_POINTPATH> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_POINTPATH>(),
        40usize,
        concat!("Size of: ", stringify!(_dwg_object_POINTPATH))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_POINTPATH>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_POINTPATH))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_POINTPATH),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_POINTPATH),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).point) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_POINTPATH),
            "::",
            stringify!(point)
        )
    );
}
#[doc = "Class ACDBPOINTPATH (varies)"]
pub type Dwg_Object_POINTPATH = _dwg_object_POINTPATH;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_TVDEVICEPROPERTIES {
    pub parent: *mut _dwg_object_object,
    pub flags: BITCODE_BL,
    pub max_regen_threads: BITCODE_BS,
    pub use_lut_palette: BITCODE_BL,
    pub alt_hlt: BITCODE_BLL,
    pub alt_hltcolor: BITCODE_BLL,
    pub geom_shader_usage: BITCODE_BLL,
    pub blending_mode: BITCODE_BL,
    pub antialiasing_level: BITCODE_BD,
    pub bd2: BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_object_TVDEVICEPROPERTIES() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_TVDEVICEPROPERTIES> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_TVDEVICEPROPERTIES>(),
        72usize,
        concat!("Size of: ", stringify!(_dwg_object_TVDEVICEPROPERTIES))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_TVDEVICEPROPERTIES>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_TVDEVICEPROPERTIES))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_TVDEVICEPROPERTIES),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_TVDEVICEPROPERTIES),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_regen_threads) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_TVDEVICEPROPERTIES),
            "::",
            stringify!(max_regen_threads)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_lut_palette) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_TVDEVICEPROPERTIES),
            "::",
            stringify!(use_lut_palette)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt_hlt) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_TVDEVICEPROPERTIES),
            "::",
            stringify!(alt_hlt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt_hltcolor) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_TVDEVICEPROPERTIES),
            "::",
            stringify!(alt_hltcolor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geom_shader_usage) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_TVDEVICEPROPERTIES),
            "::",
            stringify!(geom_shader_usage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blending_mode) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_TVDEVICEPROPERTIES),
            "::",
            stringify!(blending_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).antialiasing_level) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_TVDEVICEPROPERTIES),
            "::",
            stringify!(antialiasing_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bd2) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_TVDEVICEPROPERTIES),
            "::",
            stringify!(bd2)
        )
    );
}
pub type Dwg_Object_TVDEVICEPROPERTIES = _dwg_object_TVDEVICEPROPERTIES;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_SKYLIGHT_BACKGROUND {
    pub parent: *mut _dwg_object_object,
    #[doc = "< DXF 90, default 1"]
    pub class_version: BITCODE_BL,
    #[doc = "< DXF 340"]
    pub sunid: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_object_SKYLIGHT_BACKGROUND() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_SKYLIGHT_BACKGROUND> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_SKYLIGHT_BACKGROUND>(),
        24usize,
        concat!("Size of: ", stringify!(_dwg_object_SKYLIGHT_BACKGROUND))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_SKYLIGHT_BACKGROUND>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_SKYLIGHT_BACKGROUND))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SKYLIGHT_BACKGROUND),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SKYLIGHT_BACKGROUND),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sunid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SKYLIGHT_BACKGROUND),
            "::",
            stringify!(sunid)
        )
    );
}
pub type Dwg_Object_SKYLIGHT_BACKGROUND = _dwg_object_SKYLIGHT_BACKGROUND;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_SOLID_BACKGROUND {
    pub parent: *mut _dwg_object_object,
    #[doc = "< DXF 90, default 1"]
    pub class_version: BITCODE_BL,
    #[doc = "< DXF 90"]
    pub color: BITCODE_BLx,
}
#[test]
fn bindgen_test_layout__dwg_object_SOLID_BACKGROUND() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_SOLID_BACKGROUND> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_SOLID_BACKGROUND>(),
        16usize,
        concat!("Size of: ", stringify!(_dwg_object_SOLID_BACKGROUND))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_SOLID_BACKGROUND>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_SOLID_BACKGROUND))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SOLID_BACKGROUND),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SOLID_BACKGROUND),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SOLID_BACKGROUND),
            "::",
            stringify!(color)
        )
    );
}
pub type Dwg_Object_SOLID_BACKGROUND = _dwg_object_SOLID_BACKGROUND;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_IMAGE_BACKGROUND {
    pub parent: *mut _dwg_object_object,
    #[doc = "< DXF 90, default 1"]
    pub class_version: BITCODE_BL,
    #[doc = "< DXF 300"]
    pub filename: BITCODE_TV,
    #[doc = "< DXF 290"]
    pub fit_to_screen: BITCODE_B,
    #[doc = "< DXF 291"]
    pub maintain_aspect_ratio: BITCODE_B,
    #[doc = "< DXF 292"]
    pub use_tiling: BITCODE_B,
    #[doc = "< DXF 140,141"]
    pub offset: BITCODE_2BD,
    #[doc = "< DXF 142,143"]
    pub scale: BITCODE_2BD,
}
#[test]
fn bindgen_test_layout__dwg_object_IMAGE_BACKGROUND() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_IMAGE_BACKGROUND> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_IMAGE_BACKGROUND>(),
        64usize,
        concat!("Size of: ", stringify!(_dwg_object_IMAGE_BACKGROUND))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_IMAGE_BACKGROUND>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_IMAGE_BACKGROUND))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_IMAGE_BACKGROUND),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_IMAGE_BACKGROUND),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filename) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_IMAGE_BACKGROUND),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fit_to_screen) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_IMAGE_BACKGROUND),
            "::",
            stringify!(fit_to_screen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maintain_aspect_ratio) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_IMAGE_BACKGROUND),
            "::",
            stringify!(maintain_aspect_ratio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_tiling) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_IMAGE_BACKGROUND),
            "::",
            stringify!(use_tiling)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_IMAGE_BACKGROUND),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_IMAGE_BACKGROUND),
            "::",
            stringify!(scale)
        )
    );
}
pub type Dwg_Object_IMAGE_BACKGROUND = _dwg_object_IMAGE_BACKGROUND;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_IBL_BACKGROUND {
    pub parent: *mut _dwg_object_object,
    #[doc = "< DXF 90, default 2"]
    pub class_version: BITCODE_BL,
    #[doc = "< DXF 290"]
    pub enable: BITCODE_B,
    #[doc = "< DXF 1"]
    pub name: BITCODE_TV,
    #[doc = "< DXF 40, normalized -180 +180, in degrees"]
    pub rotation: BITCODE_BD,
    #[doc = "< DXF 290"]
    pub display_image: BITCODE_B,
    #[doc = "< DXF 340"]
    pub secondary_background: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_object_IBL_BACKGROUND() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_IBL_BACKGROUND> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_IBL_BACKGROUND>(),
        48usize,
        concat!("Size of: ", stringify!(_dwg_object_IBL_BACKGROUND))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_IBL_BACKGROUND>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_IBL_BACKGROUND))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_IBL_BACKGROUND),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_IBL_BACKGROUND),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enable) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_IBL_BACKGROUND),
            "::",
            stringify!(enable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_IBL_BACKGROUND),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rotation) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_IBL_BACKGROUND),
            "::",
            stringify!(rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).display_image) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_IBL_BACKGROUND),
            "::",
            stringify!(display_image)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).secondary_background) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_IBL_BACKGROUND),
            "::",
            stringify!(secondary_background)
        )
    );
}
pub type Dwg_Object_IBL_BACKGROUND = _dwg_object_IBL_BACKGROUND;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_GRADIENT_BACKGROUND {
    pub parent: *mut _dwg_object_object,
    #[doc = "< DXF 90, default 1"]
    pub class_version: BITCODE_BL,
    #[doc = "< DXF 90"]
    pub color_top: BITCODE_BLx,
    #[doc = "< DXF 91"]
    pub color_middle: BITCODE_BLx,
    #[doc = "< DXF 91"]
    pub color_bottom: BITCODE_BLx,
    #[doc = "< DXF 140"]
    pub horizon: BITCODE_BD,
    #[doc = "< DXF 141"]
    pub height: BITCODE_BD,
    #[doc = "< DXF 142"]
    pub rotation: BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_object_GRADIENT_BACKGROUND() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_GRADIENT_BACKGROUND> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_GRADIENT_BACKGROUND>(),
        48usize,
        concat!("Size of: ", stringify!(_dwg_object_GRADIENT_BACKGROUND))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_GRADIENT_BACKGROUND>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_GRADIENT_BACKGROUND))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GRADIENT_BACKGROUND),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GRADIENT_BACKGROUND),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color_top) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GRADIENT_BACKGROUND),
            "::",
            stringify!(color_top)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color_middle) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GRADIENT_BACKGROUND),
            "::",
            stringify!(color_middle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color_bottom) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GRADIENT_BACKGROUND),
            "::",
            stringify!(color_bottom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).horizon) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GRADIENT_BACKGROUND),
            "::",
            stringify!(horizon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GRADIENT_BACKGROUND),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rotation) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GRADIENT_BACKGROUND),
            "::",
            stringify!(rotation)
        )
    );
}
pub type Dwg_Object_GRADIENT_BACKGROUND = _dwg_object_GRADIENT_BACKGROUND;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_GROUND_PLANE_BACKGROUND {
    pub parent: *mut _dwg_object_object,
    #[doc = "< DXF 90, default 1"]
    pub class_version: BITCODE_BL,
    #[doc = "< DXF 90"]
    pub color_sky_zenith: BITCODE_BLx,
    #[doc = "< DXF 91"]
    pub color_sky_horizon: BITCODE_BLx,
    #[doc = "< DXF 92"]
    pub color_underground_horizon: BITCODE_BLx,
    #[doc = "< DXF 93"]
    pub color_underground_azimuth: BITCODE_BLx,
    #[doc = "< DXF 94 groundplane"]
    pub color_near: BITCODE_BLx,
    #[doc = "< DXF 95 groundplane"]
    pub color_far: BITCODE_BLx,
}
#[test]
fn bindgen_test_layout__dwg_object_GROUND_PLANE_BACKGROUND() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_GROUND_PLANE_BACKGROUND> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_GROUND_PLANE_BACKGROUND>(),
        40usize,
        concat!("Size of: ", stringify!(_dwg_object_GROUND_PLANE_BACKGROUND))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_GROUND_PLANE_BACKGROUND>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_GROUND_PLANE_BACKGROUND)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GROUND_PLANE_BACKGROUND),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GROUND_PLANE_BACKGROUND),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color_sky_zenith) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GROUND_PLANE_BACKGROUND),
            "::",
            stringify!(color_sky_zenith)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color_sky_horizon) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GROUND_PLANE_BACKGROUND),
            "::",
            stringify!(color_sky_horizon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color_underground_horizon) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GROUND_PLANE_BACKGROUND),
            "::",
            stringify!(color_underground_horizon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color_underground_azimuth) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GROUND_PLANE_BACKGROUND),
            "::",
            stringify!(color_underground_azimuth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color_near) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GROUND_PLANE_BACKGROUND),
            "::",
            stringify!(color_near)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color_far) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_GROUND_PLANE_BACKGROUND),
            "::",
            stringify!(color_far)
        )
    );
}
pub type Dwg_Object_GROUND_PLANE_BACKGROUND = _dwg_object_GROUND_PLANE_BACKGROUND;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_ANNOTSCALEOBJECTCONTEXTDATA {
    pub parent: *mut _dwg_object_object,
    #[doc = "< r2010+ =4, before 3"]
    pub class_version: BITCODE_BS,
    pub is_default: BITCODE_B,
    #[doc = "< DXF 340"]
    pub scale: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_object_ANNOTSCALEOBJECTCONTEXTDATA() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ANNOTSCALEOBJECTCONTEXTDATA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ANNOTSCALEOBJECTCONTEXTDATA>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_object_ANNOTSCALEOBJECTCONTEXTDATA)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ANNOTSCALEOBJECTCONTEXTDATA>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_ANNOTSCALEOBJECTCONTEXTDATA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ANNOTSCALEOBJECTCONTEXTDATA),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ANNOTSCALEOBJECTCONTEXTDATA),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_default) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ANNOTSCALEOBJECTCONTEXTDATA),
            "::",
            stringify!(is_default)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ANNOTSCALEOBJECTCONTEXTDATA),
            "::",
            stringify!(scale)
        )
    );
}
pub type Dwg_Object_ANNOTSCALEOBJECTCONTEXTDATA = _dwg_object_ANNOTSCALEOBJECTCONTEXTDATA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_CONTEXTDATA_dict {
    pub parent: *mut _dwg_CONTEXTDATA_submgr,
    pub text: BITCODE_TV,
    pub itemhandle: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_CONTEXTDATA_dict() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_CONTEXTDATA_dict> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_CONTEXTDATA_dict>(),
        24usize,
        concat!("Size of: ", stringify!(_dwg_CONTEXTDATA_dict))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_CONTEXTDATA_dict>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_CONTEXTDATA_dict))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_CONTEXTDATA_dict),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_CONTEXTDATA_dict),
            "::",
            stringify!(text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).itemhandle) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_CONTEXTDATA_dict),
            "::",
            stringify!(itemhandle)
        )
    );
}
pub type Dwg_CONTEXTDATA_dict = _dwg_CONTEXTDATA_dict;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_CONTEXTDATA_submgr {
    pub parent: *mut _dwg_object_CONTEXTDATAMANAGER,
    pub handle: BITCODE_H,
    pub num_entries: BITCODE_BL,
    pub entries: *mut Dwg_CONTEXTDATA_dict,
}
#[test]
fn bindgen_test_layout__dwg_CONTEXTDATA_submgr() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_CONTEXTDATA_submgr> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_CONTEXTDATA_submgr>(),
        32usize,
        concat!("Size of: ", stringify!(_dwg_CONTEXTDATA_submgr))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_CONTEXTDATA_submgr>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_CONTEXTDATA_submgr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_CONTEXTDATA_submgr),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_CONTEXTDATA_submgr),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_entries) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_CONTEXTDATA_submgr),
            "::",
            stringify!(num_entries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entries) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_CONTEXTDATA_submgr),
            "::",
            stringify!(entries)
        )
    );
}
pub type Dwg_CONTEXTDATA_submgr = _dwg_CONTEXTDATA_submgr;
#[doc = " R2010+\n A special DICTIONARY"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_CONTEXTDATAMANAGER {
    pub parent: *mut _dwg_object_object,
    pub objectcontext: BITCODE_H,
    pub num_submgrs: BITCODE_BL,
    pub submgrs: *mut Dwg_CONTEXTDATA_submgr,
}
#[test]
fn bindgen_test_layout__dwg_object_CONTEXTDATAMANAGER() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_CONTEXTDATAMANAGER> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_CONTEXTDATAMANAGER>(),
        32usize,
        concat!("Size of: ", stringify!(_dwg_object_CONTEXTDATAMANAGER))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_CONTEXTDATAMANAGER>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_CONTEXTDATAMANAGER))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_CONTEXTDATAMANAGER),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objectcontext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_CONTEXTDATAMANAGER),
            "::",
            stringify!(objectcontext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_submgrs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_CONTEXTDATAMANAGER),
            "::",
            stringify!(num_submgrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).submgrs) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_CONTEXTDATAMANAGER),
            "::",
            stringify!(submgrs)
        )
    );
}
#[doc = " R2010+\n A special DICTIONARY"]
pub type Dwg_Object_CONTEXTDATAMANAGER = _dwg_object_CONTEXTDATAMANAGER;
#[doc = " R2010+"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_TEXTOBJECTCONTEXTDATA {
    pub parent: *mut _dwg_object_object,
    #[doc = "< r2010+ =4, before 3"]
    pub class_version: BITCODE_BS,
    pub is_default: BITCODE_B,
    #[doc = "< DXF 340"]
    pub scale: BITCODE_H,
    pub horizontal_mode: BITCODE_BS,
    #[doc = "< DXF 50, default 0.0 or 90.0"]
    pub rotation: BITCODE_BD,
    #[doc = "< DXF 10-20"]
    pub ins_pt: BITCODE_2RD,
    #[doc = "< DXF 11-21"]
    pub alignment_pt: BITCODE_2RD,
}
#[test]
fn bindgen_test_layout__dwg_object_TEXTOBJECTCONTEXTDATA() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_TEXTOBJECTCONTEXTDATA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_TEXTOBJECTCONTEXTDATA>(),
        72usize,
        concat!("Size of: ", stringify!(_dwg_object_TEXTOBJECTCONTEXTDATA))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_TEXTOBJECTCONTEXTDATA>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_TEXTOBJECTCONTEXTDATA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_TEXTOBJECTCONTEXTDATA),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_TEXTOBJECTCONTEXTDATA),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_default) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_TEXTOBJECTCONTEXTDATA),
            "::",
            stringify!(is_default)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_TEXTOBJECTCONTEXTDATA),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).horizontal_mode) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_TEXTOBJECTCONTEXTDATA),
            "::",
            stringify!(horizontal_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rotation) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_TEXTOBJECTCONTEXTDATA),
            "::",
            stringify!(rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ins_pt) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_TEXTOBJECTCONTEXTDATA),
            "::",
            stringify!(ins_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alignment_pt) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_TEXTOBJECTCONTEXTDATA),
            "::",
            stringify!(alignment_pt)
        )
    );
}
#[doc = " R2010+"]
pub type Dwg_Object_TEXTOBJECTCONTEXTDATA = _dwg_object_TEXTOBJECTCONTEXTDATA;
#[doc = " R2010+"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_MTEXTOBJECTCONTEXTDATA {
    pub parent: *mut _dwg_object_object,
    #[doc = "< r2010+ =4, before 3"]
    pub class_version: BITCODE_BS,
    pub is_default: BITCODE_B,
    #[doc = "< DXF 340"]
    pub scale: BITCODE_H,
    pub attachment: BITCODE_BL,
    #[doc = "< DXF 10"]
    pub ins_pt: BITCODE_3BD,
    #[doc = "< DXF 11"]
    pub x_axis_dir: BITCODE_3BD,
    #[doc = "< DXF 40"]
    pub rect_height: BITCODE_BD,
    #[doc = "< DXF 41"]
    pub rect_width: BITCODE_BD,
    #[doc = "< DXF 42"]
    pub extents_width: BITCODE_BD,
    #[doc = "< DXF 43"]
    pub extents_height: BITCODE_BD,
    #[doc = "< DXF 71 0: none, 1: static, 2: dynamic. Note: BS in MTEXT!"]
    pub column_type: BITCODE_BL,
    #[doc = "< DXF 44"]
    pub column_width: BITCODE_BD,
    #[doc = "< DXF 45"]
    pub gutter: BITCODE_BD,
    #[doc = "< DXF 73"]
    pub auto_height: BITCODE_B,
    #[doc = "< DXF 74"]
    pub flow_reversed: BITCODE_B,
    #[doc = "< DXF 72 or numfragments"]
    pub num_column_heights: BITCODE_BL,
    #[doc = "< DXF 46 if dynamic and not auto_height"]
    pub column_heights: *mut BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_object_MTEXTOBJECTCONTEXTDATA() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_MTEXTOBJECTCONTEXTDATA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_MTEXTOBJECTCONTEXTDATA>(),
        152usize,
        concat!("Size of: ", stringify!(_dwg_object_MTEXTOBJECTCONTEXTDATA))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_MTEXTOBJECTCONTEXTDATA>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_MTEXTOBJECTCONTEXTDATA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MTEXTOBJECTCONTEXTDATA),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MTEXTOBJECTCONTEXTDATA),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_default) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MTEXTOBJECTCONTEXTDATA),
            "::",
            stringify!(is_default)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MTEXTOBJECTCONTEXTDATA),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attachment) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MTEXTOBJECTCONTEXTDATA),
            "::",
            stringify!(attachment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ins_pt) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MTEXTOBJECTCONTEXTDATA),
            "::",
            stringify!(ins_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x_axis_dir) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MTEXTOBJECTCONTEXTDATA),
            "::",
            stringify!(x_axis_dir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rect_height) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MTEXTOBJECTCONTEXTDATA),
            "::",
            stringify!(rect_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rect_width) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MTEXTOBJECTCONTEXTDATA),
            "::",
            stringify!(rect_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extents_width) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MTEXTOBJECTCONTEXTDATA),
            "::",
            stringify!(extents_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extents_height) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MTEXTOBJECTCONTEXTDATA),
            "::",
            stringify!(extents_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).column_type) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MTEXTOBJECTCONTEXTDATA),
            "::",
            stringify!(column_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).column_width) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MTEXTOBJECTCONTEXTDATA),
            "::",
            stringify!(column_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gutter) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MTEXTOBJECTCONTEXTDATA),
            "::",
            stringify!(gutter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).auto_height) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MTEXTOBJECTCONTEXTDATA),
            "::",
            stringify!(auto_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flow_reversed) as usize - ptr as usize },
        137usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MTEXTOBJECTCONTEXTDATA),
            "::",
            stringify!(flow_reversed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_column_heights) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MTEXTOBJECTCONTEXTDATA),
            "::",
            stringify!(num_column_heights)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).column_heights) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MTEXTOBJECTCONTEXTDATA),
            "::",
            stringify!(column_heights)
        )
    );
}
#[doc = " R2010+"]
pub type Dwg_Object_MTEXTOBJECTCONTEXTDATA = _dwg_object_MTEXTOBJECTCONTEXTDATA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_OCD_Dimension {
    #[doc = "< DXF 293"]
    pub b293: BITCODE_B,
    #[doc = "< DXF 10-30"]
    pub def_pt: BITCODE_2RD,
    pub is_def_textloc: BITCODE_B,
    #[doc = "< DXF 140"]
    pub text_rotation: BITCODE_BD,
    #[doc = "< DXF 2"]
    pub block: BITCODE_H,
    #[doc = "< DXF 298"]
    pub dimtofl: BITCODE_B,
    #[doc = "< DXF 291"]
    pub dimosxd: BITCODE_B,
    #[doc = "< DXF 70"]
    pub dimatfit: BITCODE_B,
    #[doc = "< DXF 292"]
    pub dimtix: BITCODE_B,
    #[doc = "< DXF 71"]
    pub dimtmove: BITCODE_B,
    #[doc = "< DXF 280"]
    pub override_code: BITCODE_RC,
    #[doc = "< DXF 295"]
    pub has_arrow2: BITCODE_B,
    #[doc = "< DXF 296"]
    pub flip_arrow2: BITCODE_B,
    #[doc = "< DXF 297"]
    pub flip_arrow1: BITCODE_B,
}
#[test]
fn bindgen_test_layout__dwg_OCD_Dimension() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_OCD_Dimension> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_OCD_Dimension>(),
        64usize,
        concat!("Size of: ", stringify!(_dwg_OCD_Dimension))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_OCD_Dimension>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_OCD_Dimension))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b293) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_OCD_Dimension),
            "::",
            stringify!(b293)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_pt) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_OCD_Dimension),
            "::",
            stringify!(def_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_def_textloc) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_OCD_Dimension),
            "::",
            stringify!(is_def_textloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_rotation) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_OCD_Dimension),
            "::",
            stringify!(text_rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_OCD_Dimension),
            "::",
            stringify!(block)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dimtofl) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_OCD_Dimension),
            "::",
            stringify!(dimtofl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dimosxd) as usize - ptr as usize },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_OCD_Dimension),
            "::",
            stringify!(dimosxd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dimatfit) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_OCD_Dimension),
            "::",
            stringify!(dimatfit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dimtix) as usize - ptr as usize },
        51usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_OCD_Dimension),
            "::",
            stringify!(dimtix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dimtmove) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_OCD_Dimension),
            "::",
            stringify!(dimtmove)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).override_code) as usize - ptr as usize },
        53usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_OCD_Dimension),
            "::",
            stringify!(override_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_arrow2) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_OCD_Dimension),
            "::",
            stringify!(has_arrow2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flip_arrow2) as usize - ptr as usize },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_OCD_Dimension),
            "::",
            stringify!(flip_arrow2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flip_arrow1) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_OCD_Dimension),
            "::",
            stringify!(flip_arrow1)
        )
    );
}
pub type Dwg_OCD_Dimension = _dwg_OCD_Dimension;
#[doc = " for ALDIM (AlignedDimension)\n R2010+"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_ALDIMOBJECTCONTEXTDATA {
    pub parent: *mut _dwg_object_object,
    #[doc = "< r2010+ =4, before 3"]
    pub class_version: BITCODE_BS,
    pub is_default: BITCODE_B,
    #[doc = "< DXF 340"]
    pub scale: BITCODE_H,
    pub dimension: Dwg_OCD_Dimension,
    #[doc = "< DXF 11-31"]
    pub dimline_pt: BITCODE_3BD,
}
#[test]
fn bindgen_test_layout__dwg_object_ALDIMOBJECTCONTEXTDATA() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ALDIMOBJECTCONTEXTDATA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ALDIMOBJECTCONTEXTDATA>(),
        112usize,
        concat!("Size of: ", stringify!(_dwg_object_ALDIMOBJECTCONTEXTDATA))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ALDIMOBJECTCONTEXTDATA>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_ALDIMOBJECTCONTEXTDATA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ALDIMOBJECTCONTEXTDATA),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ALDIMOBJECTCONTEXTDATA),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_default) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ALDIMOBJECTCONTEXTDATA),
            "::",
            stringify!(is_default)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ALDIMOBJECTCONTEXTDATA),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dimension) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ALDIMOBJECTCONTEXTDATA),
            "::",
            stringify!(dimension)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dimline_pt) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ALDIMOBJECTCONTEXTDATA),
            "::",
            stringify!(dimline_pt)
        )
    );
}
#[doc = " for ALDIM (AlignedDimension)\n R2010+"]
pub type Dwg_Object_ALDIMOBJECTCONTEXTDATA = _dwg_object_ALDIMOBJECTCONTEXTDATA;
#[doc = " for ANGDIM (AngularDimension)\n R2010+"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_ANGDIMOBJECTCONTEXTDATA {
    pub parent: *mut _dwg_object_object,
    #[doc = "< r2010+ =4, before 3"]
    pub class_version: BITCODE_BS,
    pub is_default: BITCODE_B,
    #[doc = "< DXF 340"]
    pub scale: BITCODE_H,
    pub dimension: Dwg_OCD_Dimension,
    #[doc = "< DXF 11-31"]
    pub arc_pt: BITCODE_3BD,
}
#[test]
fn bindgen_test_layout__dwg_object_ANGDIMOBJECTCONTEXTDATA() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ANGDIMOBJECTCONTEXTDATA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ANGDIMOBJECTCONTEXTDATA>(),
        112usize,
        concat!("Size of: ", stringify!(_dwg_object_ANGDIMOBJECTCONTEXTDATA))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ANGDIMOBJECTCONTEXTDATA>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_ANGDIMOBJECTCONTEXTDATA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ANGDIMOBJECTCONTEXTDATA),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ANGDIMOBJECTCONTEXTDATA),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_default) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ANGDIMOBJECTCONTEXTDATA),
            "::",
            stringify!(is_default)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ANGDIMOBJECTCONTEXTDATA),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dimension) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ANGDIMOBJECTCONTEXTDATA),
            "::",
            stringify!(dimension)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arc_pt) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ANGDIMOBJECTCONTEXTDATA),
            "::",
            stringify!(arc_pt)
        )
    );
}
#[doc = " for ANGDIM (AngularDimension)\n R2010+"]
pub type Dwg_Object_ANGDIMOBJECTCONTEXTDATA = _dwg_object_ANGDIMOBJECTCONTEXTDATA;
#[doc = " for DMDIM (DiametricDimension)\n R2010+"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_DMDIMOBJECTCONTEXTDATA {
    pub parent: *mut _dwg_object_object,
    #[doc = "< r2010+ =4, before 3"]
    pub class_version: BITCODE_BS,
    pub is_default: BITCODE_B,
    #[doc = "< DXF 340"]
    pub scale: BITCODE_H,
    pub dimension: Dwg_OCD_Dimension,
    #[doc = "< DXF 11-31"]
    pub first_arc_pt: BITCODE_3BD,
    #[doc = "< DXF 12-32"]
    pub def_pt: BITCODE_3BD,
}
#[test]
fn bindgen_test_layout__dwg_object_DMDIMOBJECTCONTEXTDATA() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_DMDIMOBJECTCONTEXTDATA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_DMDIMOBJECTCONTEXTDATA>(),
        136usize,
        concat!("Size of: ", stringify!(_dwg_object_DMDIMOBJECTCONTEXTDATA))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_DMDIMOBJECTCONTEXTDATA>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_DMDIMOBJECTCONTEXTDATA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DMDIMOBJECTCONTEXTDATA),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DMDIMOBJECTCONTEXTDATA),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_default) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DMDIMOBJECTCONTEXTDATA),
            "::",
            stringify!(is_default)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DMDIMOBJECTCONTEXTDATA),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dimension) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DMDIMOBJECTCONTEXTDATA),
            "::",
            stringify!(dimension)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).first_arc_pt) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DMDIMOBJECTCONTEXTDATA),
            "::",
            stringify!(first_arc_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_pt) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DMDIMOBJECTCONTEXTDATA),
            "::",
            stringify!(def_pt)
        )
    );
}
#[doc = " for DMDIM (DiametricDimension)\n R2010+"]
pub type Dwg_Object_DMDIMOBJECTCONTEXTDATA = _dwg_object_DMDIMOBJECTCONTEXTDATA;
#[doc = " for ORDDIM (OrdinateDimension)\n R2010+"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_ORDDIMOBJECTCONTEXTDATA {
    pub parent: *mut _dwg_object_object,
    #[doc = "< r2010+ =4, before 3"]
    pub class_version: BITCODE_BS,
    pub is_default: BITCODE_B,
    #[doc = "< DXF 340"]
    pub scale: BITCODE_H,
    pub dimension: Dwg_OCD_Dimension,
    #[doc = "< DXF 11-31 = origin"]
    pub feature_location_pt: BITCODE_3BD,
    #[doc = "< DXF 12-32"]
    pub leader_endpt: BITCODE_3BD,
}
#[test]
fn bindgen_test_layout__dwg_object_ORDDIMOBJECTCONTEXTDATA() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ORDDIMOBJECTCONTEXTDATA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ORDDIMOBJECTCONTEXTDATA>(),
        136usize,
        concat!("Size of: ", stringify!(_dwg_object_ORDDIMOBJECTCONTEXTDATA))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ORDDIMOBJECTCONTEXTDATA>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_ORDDIMOBJECTCONTEXTDATA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ORDDIMOBJECTCONTEXTDATA),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ORDDIMOBJECTCONTEXTDATA),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_default) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ORDDIMOBJECTCONTEXTDATA),
            "::",
            stringify!(is_default)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ORDDIMOBJECTCONTEXTDATA),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dimension) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ORDDIMOBJECTCONTEXTDATA),
            "::",
            stringify!(dimension)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).feature_location_pt) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ORDDIMOBJECTCONTEXTDATA),
            "::",
            stringify!(feature_location_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).leader_endpt) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ORDDIMOBJECTCONTEXTDATA),
            "::",
            stringify!(leader_endpt)
        )
    );
}
#[doc = " for ORDDIM (OrdinateDimension)\n R2010+"]
pub type Dwg_Object_ORDDIMOBJECTCONTEXTDATA = _dwg_object_ORDDIMOBJECTCONTEXTDATA;
#[doc = " for RADIM (Radial Dimension)\n R2010+"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_RADIMOBJECTCONTEXTDATA {
    pub parent: *mut _dwg_object_object,
    #[doc = "< r2010+ =4, before 3"]
    pub class_version: BITCODE_BS,
    pub is_default: BITCODE_B,
    #[doc = "< DXF 340"]
    pub scale: BITCODE_H,
    pub dimension: Dwg_OCD_Dimension,
    #[doc = "< DXF 11-31"]
    pub first_arc_pt: BITCODE_3BD,
}
#[test]
fn bindgen_test_layout__dwg_object_RADIMOBJECTCONTEXTDATA() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_RADIMOBJECTCONTEXTDATA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_RADIMOBJECTCONTEXTDATA>(),
        112usize,
        concat!("Size of: ", stringify!(_dwg_object_RADIMOBJECTCONTEXTDATA))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_RADIMOBJECTCONTEXTDATA>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_RADIMOBJECTCONTEXTDATA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RADIMOBJECTCONTEXTDATA),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RADIMOBJECTCONTEXTDATA),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_default) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RADIMOBJECTCONTEXTDATA),
            "::",
            stringify!(is_default)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RADIMOBJECTCONTEXTDATA),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dimension) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RADIMOBJECTCONTEXTDATA),
            "::",
            stringify!(dimension)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).first_arc_pt) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RADIMOBJECTCONTEXTDATA),
            "::",
            stringify!(first_arc_pt)
        )
    );
}
#[doc = " for RADIM (Radial Dimension)\n R2010+"]
pub type Dwg_Object_RADIMOBJECTCONTEXTDATA = _dwg_object_RADIMOBJECTCONTEXTDATA;
#[doc = " for RADIMLG (Large Radial Dimension)\n R2010+"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_RADIMLGOBJECTCONTEXTDATA {
    pub parent: *mut _dwg_object_object,
    #[doc = "< r2010+ =4, before 3"]
    pub class_version: BITCODE_BS,
    pub is_default: BITCODE_B,
    #[doc = "< DXF 340"]
    pub scale: BITCODE_H,
    pub dimension: Dwg_OCD_Dimension,
    #[doc = "< DXF 12-32"]
    pub ovr_center: BITCODE_3BD,
    #[doc = "< DXF 13-33"]
    pub jog_point: BITCODE_3BD,
}
#[test]
fn bindgen_test_layout__dwg_object_RADIMLGOBJECTCONTEXTDATA() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_RADIMLGOBJECTCONTEXTDATA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_RADIMLGOBJECTCONTEXTDATA>(),
        136usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_object_RADIMLGOBJECTCONTEXTDATA)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_RADIMLGOBJECTCONTEXTDATA>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_RADIMLGOBJECTCONTEXTDATA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RADIMLGOBJECTCONTEXTDATA),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RADIMLGOBJECTCONTEXTDATA),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_default) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RADIMLGOBJECTCONTEXTDATA),
            "::",
            stringify!(is_default)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RADIMLGOBJECTCONTEXTDATA),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dimension) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RADIMLGOBJECTCONTEXTDATA),
            "::",
            stringify!(dimension)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ovr_center) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RADIMLGOBJECTCONTEXTDATA),
            "::",
            stringify!(ovr_center)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jog_point) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_RADIMLGOBJECTCONTEXTDATA),
            "::",
            stringify!(jog_point)
        )
    );
}
#[doc = " for RADIMLG (Large Radial Dimension)\n R2010+"]
pub type Dwg_Object_RADIMLGOBJECTCONTEXTDATA = _dwg_object_RADIMLGOBJECTCONTEXTDATA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_MTEXTATTRIBUTEOBJECTCONTEXTDATA {
    pub parent: *mut _dwg_object_object,
    #[doc = "< r2010+ =4, before 3"]
    pub class_version: BITCODE_BS,
    pub is_default: BITCODE_B,
    #[doc = "< DXF 340"]
    pub scale: BITCODE_H,
    pub horizontal_mode: BITCODE_BS,
    #[doc = "< DXF 50, default 0.0 or 90.0"]
    pub rotation: BITCODE_BD,
    #[doc = "< DXF 10-20"]
    pub ins_pt: BITCODE_2RD,
    #[doc = "< DXF 11-21"]
    pub alignment_pt: BITCODE_2RD,
    pub enable_context: BITCODE_B,
    pub context: Dwg_Object_SCALE,
}
#[test]
fn bindgen_test_layout__dwg_object_MTEXTATTRIBUTEOBJECTCONTEXTDATA() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_MTEXTATTRIBUTEOBJECTCONTEXTDATA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_MTEXTATTRIBUTEOBJECTCONTEXTDATA>(),
        128usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_object_MTEXTATTRIBUTEOBJECTCONTEXTDATA)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_MTEXTATTRIBUTEOBJECTCONTEXTDATA>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_MTEXTATTRIBUTEOBJECTCONTEXTDATA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MTEXTATTRIBUTEOBJECTCONTEXTDATA),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MTEXTATTRIBUTEOBJECTCONTEXTDATA),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_default) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MTEXTATTRIBUTEOBJECTCONTEXTDATA),
            "::",
            stringify!(is_default)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MTEXTATTRIBUTEOBJECTCONTEXTDATA),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).horizontal_mode) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MTEXTATTRIBUTEOBJECTCONTEXTDATA),
            "::",
            stringify!(horizontal_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rotation) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MTEXTATTRIBUTEOBJECTCONTEXTDATA),
            "::",
            stringify!(rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ins_pt) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MTEXTATTRIBUTEOBJECTCONTEXTDATA),
            "::",
            stringify!(ins_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alignment_pt) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MTEXTATTRIBUTEOBJECTCONTEXTDATA),
            "::",
            stringify!(alignment_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enable_context) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MTEXTATTRIBUTEOBJECTCONTEXTDATA),
            "::",
            stringify!(enable_context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MTEXTATTRIBUTEOBJECTCONTEXTDATA),
            "::",
            stringify!(context)
        )
    );
}
pub type Dwg_Object_MTEXTATTRIBUTEOBJECTCONTEXTDATA = _dwg_object_MTEXTATTRIBUTEOBJECTCONTEXTDATA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_MLEADEROBJECTCONTEXTDATA {
    pub parent: *mut _dwg_object_object,
    #[doc = "< r2010+ =4, before 3"]
    pub class_version: BITCODE_BS,
    pub is_default: BITCODE_B,
    #[doc = "< DXF 340"]
    pub scale: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_object_MLEADEROBJECTCONTEXTDATA() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_MLEADEROBJECTCONTEXTDATA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_MLEADEROBJECTCONTEXTDATA>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_object_MLEADEROBJECTCONTEXTDATA)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_MLEADEROBJECTCONTEXTDATA>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_MLEADEROBJECTCONTEXTDATA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLEADEROBJECTCONTEXTDATA),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLEADEROBJECTCONTEXTDATA),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_default) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLEADEROBJECTCONTEXTDATA),
            "::",
            stringify!(is_default)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_MLEADEROBJECTCONTEXTDATA),
            "::",
            stringify!(scale)
        )
    );
}
pub type Dwg_Object_MLEADEROBJECTCONTEXTDATA = _dwg_object_MLEADEROBJECTCONTEXTDATA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_LEADEROBJECTCONTEXTDATA {
    pub parent: *mut _dwg_object_object,
    #[doc = "< r2010+ =4, before 3"]
    pub class_version: BITCODE_BS,
    pub is_default: BITCODE_B,
    #[doc = "< DXF 340"]
    pub scale: BITCODE_H,
    pub num_points: BITCODE_BL,
    #[doc = "< DXF 10"]
    pub points: *mut BITCODE_3DPOINT,
    #[doc = "< DXF 290"]
    pub b290: BITCODE_B,
    #[doc = "< DXF 11"]
    pub x_direction: BITCODE_3DPOINT,
    #[doc = "< DXF 12"]
    pub inspt_offset: BITCODE_3DPOINT,
    #[doc = "< DXF 13"]
    pub endptproj: BITCODE_3DPOINT,
}
#[test]
fn bindgen_test_layout__dwg_object_LEADEROBJECTCONTEXTDATA() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_LEADEROBJECTCONTEXTDATA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_LEADEROBJECTCONTEXTDATA>(),
        120usize,
        concat!("Size of: ", stringify!(_dwg_object_LEADEROBJECTCONTEXTDATA))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_LEADEROBJECTCONTEXTDATA>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_LEADEROBJECTCONTEXTDATA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LEADEROBJECTCONTEXTDATA),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LEADEROBJECTCONTEXTDATA),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_default) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LEADEROBJECTCONTEXTDATA),
            "::",
            stringify!(is_default)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LEADEROBJECTCONTEXTDATA),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_points) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LEADEROBJECTCONTEXTDATA),
            "::",
            stringify!(num_points)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).points) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LEADEROBJECTCONTEXTDATA),
            "::",
            stringify!(points)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b290) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LEADEROBJECTCONTEXTDATA),
            "::",
            stringify!(b290)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x_direction) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LEADEROBJECTCONTEXTDATA),
            "::",
            stringify!(x_direction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inspt_offset) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LEADEROBJECTCONTEXTDATA),
            "::",
            stringify!(inspt_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endptproj) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LEADEROBJECTCONTEXTDATA),
            "::",
            stringify!(endptproj)
        )
    );
}
pub type Dwg_Object_LEADEROBJECTCONTEXTDATA = _dwg_object_LEADEROBJECTCONTEXTDATA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_BLKREFOBJECTCONTEXTDATA {
    pub parent: *mut _dwg_object_object,
    #[doc = "< r2010+ =4, before 3"]
    pub class_version: BITCODE_BS,
    pub is_default: BITCODE_B,
    #[doc = "< DXF 340"]
    pub scale: BITCODE_H,
    pub rotation: BITCODE_BD,
    pub ins_pt: BITCODE_3BD,
    pub scale_factor: BITCODE_3BD,
}
#[test]
fn bindgen_test_layout__dwg_object_BLKREFOBJECTCONTEXTDATA() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_BLKREFOBJECTCONTEXTDATA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_BLKREFOBJECTCONTEXTDATA>(),
        80usize,
        concat!("Size of: ", stringify!(_dwg_object_BLKREFOBJECTCONTEXTDATA))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_BLKREFOBJECTCONTEXTDATA>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_BLKREFOBJECTCONTEXTDATA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLKREFOBJECTCONTEXTDATA),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLKREFOBJECTCONTEXTDATA),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_default) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLKREFOBJECTCONTEXTDATA),
            "::",
            stringify!(is_default)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLKREFOBJECTCONTEXTDATA),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rotation) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLKREFOBJECTCONTEXTDATA),
            "::",
            stringify!(rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ins_pt) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLKREFOBJECTCONTEXTDATA),
            "::",
            stringify!(ins_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale_factor) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLKREFOBJECTCONTEXTDATA),
            "::",
            stringify!(scale_factor)
        )
    );
}
pub type Dwg_Object_BLKREFOBJECTCONTEXTDATA = _dwg_object_BLKREFOBJECTCONTEXTDATA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_FCFOBJECTCONTEXTDATA {
    pub parent: *mut _dwg_object_object,
    #[doc = "< r2010+ =4, before 3"]
    pub class_version: BITCODE_BS,
    pub is_default: BITCODE_B,
    #[doc = "< DXF 340"]
    pub scale: BITCODE_H,
    #[doc = "< DXF 10-30"]
    pub location: BITCODE_3BD,
    #[doc = "< DXF 11-31"]
    pub horiz_dir: BITCODE_3BD,
}
#[test]
fn bindgen_test_layout__dwg_object_FCFOBJECTCONTEXTDATA() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_FCFOBJECTCONTEXTDATA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_FCFOBJECTCONTEXTDATA>(),
        72usize,
        concat!("Size of: ", stringify!(_dwg_object_FCFOBJECTCONTEXTDATA))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_FCFOBJECTCONTEXTDATA>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_FCFOBJECTCONTEXTDATA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_FCFOBJECTCONTEXTDATA),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_FCFOBJECTCONTEXTDATA),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_default) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_FCFOBJECTCONTEXTDATA),
            "::",
            stringify!(is_default)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_FCFOBJECTCONTEXTDATA),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).location) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_FCFOBJECTCONTEXTDATA),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).horiz_dir) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_FCFOBJECTCONTEXTDATA),
            "::",
            stringify!(horiz_dir)
        )
    );
}
pub type Dwg_Object_FCFOBJECTCONTEXTDATA = _dwg_object_FCFOBJECTCONTEXTDATA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_DETAILVIEWSTYLE {
    pub parent: *mut _dwg_object_object,
    #[doc = "< DXF 70 0"]
    pub mdoc_class_version: BITCODE_BS,
    pub desc: BITCODE_TV,
    pub is_modified_for_recompute: BITCODE_B,
    pub display_name: BITCODE_TV,
    pub viewstyle_flags: BITCODE_BL,
    #[doc = "< DXF 70 0"]
    pub class_version: BITCODE_BS,
    pub flags: BITCODE_BL,
    pub identifier_style: BITCODE_H,
    pub identifier_color: BITCODE_CMC,
    pub identifier_height: BITCODE_BD,
    pub identifier_exclude_characters: BITCODE_TV,
    pub identifier_offset: BITCODE_BD,
    pub identifier_placement: BITCODE_RC,
    pub arrow_symbol: BITCODE_H,
    pub arrow_symbol_color: BITCODE_CMC,
    pub arrow_symbol_size: BITCODE_BD,
    pub boundary_ltype: BITCODE_H,
    pub boundary_linewt: BITCODE_BLd,
    pub boundary_line_color: BITCODE_CMC,
    pub viewlabel_text_style: BITCODE_H,
    pub viewlabel_text_color: BITCODE_CMC,
    pub viewlabel_text_height: BITCODE_BD,
    pub viewlabel_attachment: BITCODE_BL,
    pub viewlabel_offset: BITCODE_BD,
    pub viewlabel_alignment: BITCODE_BL,
    pub viewlabel_pattern: BITCODE_TV,
    pub connection_ltype: BITCODE_H,
    pub connection_linewt: BITCODE_BLd,
    pub connection_line_color: BITCODE_CMC,
    pub borderline_ltype: BITCODE_H,
    pub borderline_linewt: BITCODE_BLd,
    pub borderline_color: BITCODE_CMC,
    pub model_edge: BITCODE_RC,
}
#[test]
fn bindgen_test_layout__dwg_object_DETAILVIEWSTYLE() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_DETAILVIEWSTYLE> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_DETAILVIEWSTYLE>(),
        504usize,
        concat!("Size of: ", stringify!(_dwg_object_DETAILVIEWSTYLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_DETAILVIEWSTYLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_DETAILVIEWSTYLE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DETAILVIEWSTYLE),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mdoc_class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DETAILVIEWSTYLE),
            "::",
            stringify!(mdoc_class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).desc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DETAILVIEWSTYLE),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_modified_for_recompute) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DETAILVIEWSTYLE),
            "::",
            stringify!(is_modified_for_recompute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).display_name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DETAILVIEWSTYLE),
            "::",
            stringify!(display_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewstyle_flags) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DETAILVIEWSTYLE),
            "::",
            stringify!(viewstyle_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DETAILVIEWSTYLE),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DETAILVIEWSTYLE),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identifier_style) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DETAILVIEWSTYLE),
            "::",
            stringify!(identifier_style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identifier_color) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DETAILVIEWSTYLE),
            "::",
            stringify!(identifier_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identifier_height) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DETAILVIEWSTYLE),
            "::",
            stringify!(identifier_height)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).identifier_exclude_characters) as usize - ptr as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DETAILVIEWSTYLE),
            "::",
            stringify!(identifier_exclude_characters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identifier_offset) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DETAILVIEWSTYLE),
            "::",
            stringify!(identifier_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identifier_placement) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DETAILVIEWSTYLE),
            "::",
            stringify!(identifier_placement)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arrow_symbol) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DETAILVIEWSTYLE),
            "::",
            stringify!(arrow_symbol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arrow_symbol_color) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DETAILVIEWSTYLE),
            "::",
            stringify!(arrow_symbol_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arrow_symbol_size) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DETAILVIEWSTYLE),
            "::",
            stringify!(arrow_symbol_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).boundary_ltype) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DETAILVIEWSTYLE),
            "::",
            stringify!(boundary_ltype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).boundary_linewt) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DETAILVIEWSTYLE),
            "::",
            stringify!(boundary_linewt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).boundary_line_color) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DETAILVIEWSTYLE),
            "::",
            stringify!(boundary_line_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewlabel_text_style) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DETAILVIEWSTYLE),
            "::",
            stringify!(viewlabel_text_style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewlabel_text_color) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DETAILVIEWSTYLE),
            "::",
            stringify!(viewlabel_text_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewlabel_text_height) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DETAILVIEWSTYLE),
            "::",
            stringify!(viewlabel_text_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewlabel_attachment) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DETAILVIEWSTYLE),
            "::",
            stringify!(viewlabel_attachment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewlabel_offset) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DETAILVIEWSTYLE),
            "::",
            stringify!(viewlabel_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewlabel_alignment) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DETAILVIEWSTYLE),
            "::",
            stringify!(viewlabel_alignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewlabel_pattern) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DETAILVIEWSTYLE),
            "::",
            stringify!(viewlabel_pattern)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection_ltype) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DETAILVIEWSTYLE),
            "::",
            stringify!(connection_ltype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection_linewt) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DETAILVIEWSTYLE),
            "::",
            stringify!(connection_linewt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection_line_color) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DETAILVIEWSTYLE),
            "::",
            stringify!(connection_line_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).borderline_ltype) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DETAILVIEWSTYLE),
            "::",
            stringify!(borderline_ltype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).borderline_linewt) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DETAILVIEWSTYLE),
            "::",
            stringify!(borderline_linewt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).borderline_color) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DETAILVIEWSTYLE),
            "::",
            stringify!(borderline_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).model_edge) as usize - ptr as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DETAILVIEWSTYLE),
            "::",
            stringify!(model_edge)
        )
    );
}
pub type Dwg_Object_DETAILVIEWSTYLE = _dwg_object_DETAILVIEWSTYLE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_SECTIONVIEWSTYLE {
    pub parent: *mut _dwg_object_object,
    #[doc = "< DXF 70 0"]
    pub mdoc_class_version: BITCODE_BS,
    pub desc: BITCODE_TV,
    pub is_modified_for_recompute: BITCODE_B,
    pub display_name: BITCODE_TV,
    pub viewstyle_flags: BITCODE_BL,
    #[doc = "< DXF 70 0"]
    pub class_version: BITCODE_BS,
    pub flags: BITCODE_BL,
    pub identifier_style: BITCODE_H,
    pub identifier_color: BITCODE_CMC,
    pub identifier_height: BITCODE_BD,
    pub arrow_start_symbol: BITCODE_H,
    pub arrow_end_symbol: BITCODE_H,
    pub arrow_symbol_color: BITCODE_CMC,
    pub arrow_symbol_size: BITCODE_BD,
    pub identifier_exclude_characters: BITCODE_TV,
    pub identifier_position: BITCODE_BLd,
    pub identifier_offset: BITCODE_BD,
    pub arrow_position: BITCODE_BLd,
    pub arrow_symbol_extension_length: BITCODE_BD,
    pub plane_ltype: BITCODE_H,
    pub plane_linewt: BITCODE_BLd,
    pub plane_line_color: BITCODE_CMC,
    pub bend_ltype: BITCODE_H,
    pub bend_linewt: BITCODE_BLd,
    pub bend_line_color: BITCODE_CMC,
    pub bend_line_length: BITCODE_BD,
    pub end_line_overshoot: BITCODE_BD,
    pub end_line_length: BITCODE_BD,
    pub viewlabel_text_style: BITCODE_H,
    pub viewlabel_text_color: BITCODE_CMC,
    pub viewlabel_text_height: BITCODE_BD,
    pub viewlabel_attachment: BITCODE_BL,
    pub viewlabel_offset: BITCODE_BD,
    pub viewlabel_alignment: BITCODE_BL,
    pub viewlabel_pattern: BITCODE_TV,
    pub hatch_color: BITCODE_CMC,
    pub hatch_bg_color: BITCODE_CMC,
    pub hatch_pattern: BITCODE_TV,
    pub hatch_scale: BITCODE_BD,
    pub hatch_transparency: BITCODE_BLd,
    pub unknown_b1: BITCODE_B,
    pub unknown_b2: BITCODE_B,
    pub num_hatch_angles: BITCODE_BL,
    pub hatch_angles: *mut BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_object_SECTIONVIEWSTYLE() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_SECTIONVIEWSTYLE> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_SECTIONVIEWSTYLE>(),
        616usize,
        concat!("Size of: ", stringify!(_dwg_object_SECTIONVIEWSTYLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_SECTIONVIEWSTYLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_SECTIONVIEWSTYLE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTIONVIEWSTYLE),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mdoc_class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTIONVIEWSTYLE),
            "::",
            stringify!(mdoc_class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).desc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTIONVIEWSTYLE),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_modified_for_recompute) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTIONVIEWSTYLE),
            "::",
            stringify!(is_modified_for_recompute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).display_name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTIONVIEWSTYLE),
            "::",
            stringify!(display_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewstyle_flags) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTIONVIEWSTYLE),
            "::",
            stringify!(viewstyle_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTIONVIEWSTYLE),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTIONVIEWSTYLE),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identifier_style) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTIONVIEWSTYLE),
            "::",
            stringify!(identifier_style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identifier_color) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTIONVIEWSTYLE),
            "::",
            stringify!(identifier_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identifier_height) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTIONVIEWSTYLE),
            "::",
            stringify!(identifier_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arrow_start_symbol) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTIONVIEWSTYLE),
            "::",
            stringify!(arrow_start_symbol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arrow_end_symbol) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTIONVIEWSTYLE),
            "::",
            stringify!(arrow_end_symbol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arrow_symbol_color) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTIONVIEWSTYLE),
            "::",
            stringify!(arrow_symbol_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arrow_symbol_size) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTIONVIEWSTYLE),
            "::",
            stringify!(arrow_symbol_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).identifier_exclude_characters) as usize - ptr as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTIONVIEWSTYLE),
            "::",
            stringify!(identifier_exclude_characters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identifier_position) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTIONVIEWSTYLE),
            "::",
            stringify!(identifier_position)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identifier_offset) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTIONVIEWSTYLE),
            "::",
            stringify!(identifier_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arrow_position) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTIONVIEWSTYLE),
            "::",
            stringify!(arrow_position)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).arrow_symbol_extension_length) as usize - ptr as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTIONVIEWSTYLE),
            "::",
            stringify!(arrow_symbol_extension_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plane_ltype) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTIONVIEWSTYLE),
            "::",
            stringify!(plane_ltype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plane_linewt) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTIONVIEWSTYLE),
            "::",
            stringify!(plane_linewt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plane_line_color) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTIONVIEWSTYLE),
            "::",
            stringify!(plane_line_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bend_ltype) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTIONVIEWSTYLE),
            "::",
            stringify!(bend_ltype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bend_linewt) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTIONVIEWSTYLE),
            "::",
            stringify!(bend_linewt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bend_line_color) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTIONVIEWSTYLE),
            "::",
            stringify!(bend_line_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bend_line_length) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTIONVIEWSTYLE),
            "::",
            stringify!(bend_line_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_line_overshoot) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTIONVIEWSTYLE),
            "::",
            stringify!(end_line_overshoot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_line_length) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTIONVIEWSTYLE),
            "::",
            stringify!(end_line_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewlabel_text_style) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTIONVIEWSTYLE),
            "::",
            stringify!(viewlabel_text_style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewlabel_text_color) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTIONVIEWSTYLE),
            "::",
            stringify!(viewlabel_text_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewlabel_text_height) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTIONVIEWSTYLE),
            "::",
            stringify!(viewlabel_text_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewlabel_attachment) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTIONVIEWSTYLE),
            "::",
            stringify!(viewlabel_attachment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewlabel_offset) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTIONVIEWSTYLE),
            "::",
            stringify!(viewlabel_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewlabel_alignment) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTIONVIEWSTYLE),
            "::",
            stringify!(viewlabel_alignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewlabel_pattern) as usize - ptr as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTIONVIEWSTYLE),
            "::",
            stringify!(viewlabel_pattern)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hatch_color) as usize - ptr as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTIONVIEWSTYLE),
            "::",
            stringify!(hatch_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hatch_bg_color) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTIONVIEWSTYLE),
            "::",
            stringify!(hatch_bg_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hatch_pattern) as usize - ptr as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTIONVIEWSTYLE),
            "::",
            stringify!(hatch_pattern)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hatch_scale) as usize - ptr as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTIONVIEWSTYLE),
            "::",
            stringify!(hatch_scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hatch_transparency) as usize - ptr as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTIONVIEWSTYLE),
            "::",
            stringify!(hatch_transparency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_b1) as usize - ptr as usize },
        596usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTIONVIEWSTYLE),
            "::",
            stringify!(unknown_b1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_b2) as usize - ptr as usize },
        597usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTIONVIEWSTYLE),
            "::",
            stringify!(unknown_b2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_hatch_angles) as usize - ptr as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTIONVIEWSTYLE),
            "::",
            stringify!(num_hatch_angles)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hatch_angles) as usize - ptr as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTIONVIEWSTYLE),
            "::",
            stringify!(hatch_angles)
        )
    );
}
pub type Dwg_Object_SECTIONVIEWSTYLE = _dwg_object_SECTIONVIEWSTYLE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_SECTION_MANAGER {
    pub parent: *mut _dwg_object_object,
    #[doc = "< DXF 70"]
    pub is_live: BITCODE_B,
    #[doc = "< DXF 90"]
    pub num_sections: BITCODE_BS,
    #[doc = "< DXF 330"]
    pub sections: *mut BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_object_SECTION_MANAGER() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_SECTION_MANAGER> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_SECTION_MANAGER>(),
        24usize,
        concat!("Size of: ", stringify!(_dwg_object_SECTION_MANAGER))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_SECTION_MANAGER>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_SECTION_MANAGER))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTION_MANAGER),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_live) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTION_MANAGER),
            "::",
            stringify!(is_live)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_sections) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTION_MANAGER),
            "::",
            stringify!(num_sections)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sections) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTION_MANAGER),
            "::",
            stringify!(sections)
        )
    );
}
pub type Dwg_Object_SECTION_MANAGER = _dwg_object_SECTION_MANAGER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_SECTION_geometrysettings {
    pub parent: *mut _dwg_SECTION_typesettings,
    pub num_geoms: BITCODE_BL,
    pub hexindex: BITCODE_BL,
    pub flags: BITCODE_BL,
    pub color: BITCODE_CMC,
    pub layer: BITCODE_TV,
    pub ltype: BITCODE_TV,
    pub ltype_scale: BITCODE_BD,
    pub plotstyle: BITCODE_TV,
    pub linewt: BITCODE_BLd,
    pub face_transparency: BITCODE_BS,
    pub edge_transparency: BITCODE_BS,
    pub hatch_type: BITCODE_BS,
    pub hatch_pattern: BITCODE_TV,
    pub hatch_angle: BITCODE_BD,
    pub hatch_spacing: BITCODE_BD,
    pub hatch_scale: BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_SECTION_geometrysettings() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_SECTION_geometrysettings> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_SECTION_geometrysettings>(),
        152usize,
        concat!("Size of: ", stringify!(_dwg_SECTION_geometrysettings))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_SECTION_geometrysettings>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_SECTION_geometrysettings))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_SECTION_geometrysettings),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_geoms) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_SECTION_geometrysettings),
            "::",
            stringify!(num_geoms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hexindex) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_SECTION_geometrysettings),
            "::",
            stringify!(hexindex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_SECTION_geometrysettings),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_SECTION_geometrysettings),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layer) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_SECTION_geometrysettings),
            "::",
            stringify!(layer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ltype) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_SECTION_geometrysettings),
            "::",
            stringify!(ltype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ltype_scale) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_SECTION_geometrysettings),
            "::",
            stringify!(ltype_scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plotstyle) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_SECTION_geometrysettings),
            "::",
            stringify!(plotstyle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).linewt) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_SECTION_geometrysettings),
            "::",
            stringify!(linewt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).face_transparency) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_SECTION_geometrysettings),
            "::",
            stringify!(face_transparency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_transparency) as usize - ptr as usize },
        110usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_SECTION_geometrysettings),
            "::",
            stringify!(edge_transparency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hatch_type) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_SECTION_geometrysettings),
            "::",
            stringify!(hatch_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hatch_pattern) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_SECTION_geometrysettings),
            "::",
            stringify!(hatch_pattern)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hatch_angle) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_SECTION_geometrysettings),
            "::",
            stringify!(hatch_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hatch_spacing) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_SECTION_geometrysettings),
            "::",
            stringify!(hatch_spacing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hatch_scale) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_SECTION_geometrysettings),
            "::",
            stringify!(hatch_scale)
        )
    );
}
pub type Dwg_SECTION_geometrysettings = _dwg_SECTION_geometrysettings;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_SECTION_typesettings {
    pub parent: *mut _dwg_object_SECTION_SETTINGS,
    #[doc = "< DXF 90: type: live=1, 2d=2, 3d=4"]
    pub type_: BITCODE_BS,
    #[doc = "< DXF 91: source and destination flags.\nsourceall=1, sourceselected=2.\ndestnewblock=16, destreplaceblock=32, destfile=64"]
    pub generation: BITCODE_BS,
    pub num_sources: BITCODE_BL,
    pub sources: *mut BITCODE_H,
    pub destblock: BITCODE_H,
    pub destfile: BITCODE_TV,
    pub num_geom: BITCODE_BL,
    pub geom: *mut Dwg_SECTION_geometrysettings,
}
#[test]
fn bindgen_test_layout__dwg_SECTION_typesettings() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_SECTION_typesettings> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_SECTION_typesettings>(),
        56usize,
        concat!("Size of: ", stringify!(_dwg_SECTION_typesettings))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_SECTION_typesettings>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_SECTION_typesettings))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_SECTION_typesettings),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_SECTION_typesettings),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).generation) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_SECTION_typesettings),
            "::",
            stringify!(generation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_sources) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_SECTION_typesettings),
            "::",
            stringify!(num_sources)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sources) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_SECTION_typesettings),
            "::",
            stringify!(sources)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destblock) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_SECTION_typesettings),
            "::",
            stringify!(destblock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destfile) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_SECTION_typesettings),
            "::",
            stringify!(destfile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_geom) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_SECTION_typesettings),
            "::",
            stringify!(num_geom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geom) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_SECTION_typesettings),
            "::",
            stringify!(geom)
        )
    );
}
pub type Dwg_SECTION_typesettings = _dwg_SECTION_typesettings;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_SECTION_SETTINGS {
    pub parent: *mut _dwg_object_object,
    pub curr_type: BITCODE_BS,
    pub num_types: BITCODE_BL,
    pub types: *mut Dwg_SECTION_typesettings,
}
#[test]
fn bindgen_test_layout__dwg_object_SECTION_SETTINGS() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_SECTION_SETTINGS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_SECTION_SETTINGS>(),
        24usize,
        concat!("Size of: ", stringify!(_dwg_object_SECTION_SETTINGS))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_SECTION_SETTINGS>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_SECTION_SETTINGS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTION_SETTINGS),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).curr_type) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTION_SETTINGS),
            "::",
            stringify!(curr_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_types) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTION_SETTINGS),
            "::",
            stringify!(num_types)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).types) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_SECTION_SETTINGS),
            "::",
            stringify!(types)
        )
    );
}
pub type Dwg_Object_SECTION_SETTINGS = _dwg_object_SECTION_SETTINGS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_LAYERFILTER {
    pub parent: *mut _dwg_object_object,
    pub num_names: BITCODE_BL,
    pub names: *mut BITCODE_TV,
}
#[test]
fn bindgen_test_layout__dwg_object_LAYERFILTER() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_LAYERFILTER> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_LAYERFILTER>(),
        24usize,
        concat!("Size of: ", stringify!(_dwg_object_LAYERFILTER))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_LAYERFILTER>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_LAYERFILTER))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYERFILTER),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_names) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYERFILTER),
            "::",
            stringify!(num_names)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).names) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_LAYERFILTER),
            "::",
            stringify!(names)
        )
    );
}
pub type Dwg_Object_LAYERFILTER = _dwg_object_LAYERFILTER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_ARCALIGNEDTEXT {
    pub parent: *mut _dwg_object_entity,
    #[doc = "< DXF 42"]
    pub text_size: BITCODE_D2T,
    #[doc = "< DXF 41"]
    pub xscale: BITCODE_D2T,
    #[doc = "< DXF 43"]
    pub char_spacing: BITCODE_D2T,
    #[doc = "< DXF 7"]
    pub style: BITCODE_TV,
    #[doc = "< DXF 2"]
    pub t2: BITCODE_TV,
    #[doc = "< DXF 3"]
    pub t3: BITCODE_TV,
    #[doc = "< DXF 1"]
    pub text_value: BITCODE_TV,
    #[doc = "< DXF 44"]
    pub offset_from_arc: BITCODE_D2T,
    #[doc = "< DXF 45"]
    pub right_offset: BITCODE_D2T,
    #[doc = "< DXF 46"]
    pub left_offset: BITCODE_D2T,
    #[doc = "< DXF 10"]
    pub center: BITCODE_3BD,
    #[doc = "< DXF 40"]
    pub radius: BITCODE_BD,
    #[doc = "< DXF 50"]
    pub start_angle: BITCODE_BD,
    #[doc = "< DXF 51"]
    pub end_angle: BITCODE_BD,
    #[doc = "< DXF 210"]
    pub extrusion: BITCODE_3BD,
    #[doc = "< DXF 90"]
    pub color: BITCODE_BL,
    #[doc = "< DXF 70"]
    pub is_reverse: BITCODE_BS,
    #[doc = "< DXF 71"]
    pub text_direction: BITCODE_BS,
    #[doc = "< DXF 72"]
    pub alignment: BITCODE_BS,
    #[doc = "< DXF 73"]
    pub text_position: BITCODE_BS,
    #[doc = "< DXF 74"]
    pub font_19: BITCODE_BS,
    #[doc = "< DXF 75"]
    pub bs2: BITCODE_BS,
    #[doc = "< DXF 76"]
    pub is_underlined: BITCODE_BS,
    #[doc = "< DXF 77"]
    pub bs1: BITCODE_BS,
    #[doc = "< DXF 78"]
    pub font: BITCODE_BS,
    #[doc = "< DXF 79"]
    pub is_shx: BITCODE_BS,
    #[doc = "< DXF 280"]
    pub wizard_flag: BITCODE_BS,
    #[doc = "< DXF 330"]
    pub arc_handle: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_entity_ARCALIGNEDTEXT() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_ARCALIGNEDTEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_ARCALIGNEDTEXT>(),
        200usize,
        concat!("Size of: ", stringify!(_dwg_entity_ARCALIGNEDTEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_ARCALIGNEDTEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_ARCALIGNEDTEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARCALIGNEDTEXT),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARCALIGNEDTEXT),
            "::",
            stringify!(text_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xscale) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARCALIGNEDTEXT),
            "::",
            stringify!(xscale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).char_spacing) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARCALIGNEDTEXT),
            "::",
            stringify!(char_spacing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).style) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARCALIGNEDTEXT),
            "::",
            stringify!(style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t2) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARCALIGNEDTEXT),
            "::",
            stringify!(t2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t3) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARCALIGNEDTEXT),
            "::",
            stringify!(t3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_value) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARCALIGNEDTEXT),
            "::",
            stringify!(text_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset_from_arc) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARCALIGNEDTEXT),
            "::",
            stringify!(offset_from_arc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right_offset) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARCALIGNEDTEXT),
            "::",
            stringify!(right_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).left_offset) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARCALIGNEDTEXT),
            "::",
            stringify!(left_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).center) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARCALIGNEDTEXT),
            "::",
            stringify!(center)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).radius) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARCALIGNEDTEXT),
            "::",
            stringify!(radius)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_angle) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARCALIGNEDTEXT),
            "::",
            stringify!(start_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_angle) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARCALIGNEDTEXT),
            "::",
            stringify!(end_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extrusion) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARCALIGNEDTEXT),
            "::",
            stringify!(extrusion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARCALIGNEDTEXT),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_reverse) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARCALIGNEDTEXT),
            "::",
            stringify!(is_reverse)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_direction) as usize - ptr as usize },
        166usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARCALIGNEDTEXT),
            "::",
            stringify!(text_direction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alignment) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARCALIGNEDTEXT),
            "::",
            stringify!(alignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_position) as usize - ptr as usize },
        170usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARCALIGNEDTEXT),
            "::",
            stringify!(text_position)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).font_19) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARCALIGNEDTEXT),
            "::",
            stringify!(font_19)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bs2) as usize - ptr as usize },
        174usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARCALIGNEDTEXT),
            "::",
            stringify!(bs2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_underlined) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARCALIGNEDTEXT),
            "::",
            stringify!(is_underlined)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bs1) as usize - ptr as usize },
        178usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARCALIGNEDTEXT),
            "::",
            stringify!(bs1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).font) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARCALIGNEDTEXT),
            "::",
            stringify!(font)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_shx) as usize - ptr as usize },
        182usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARCALIGNEDTEXT),
            "::",
            stringify!(is_shx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wizard_flag) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARCALIGNEDTEXT),
            "::",
            stringify!(wizard_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arc_handle) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ARCALIGNEDTEXT),
            "::",
            stringify!(arc_handle)
        )
    );
}
pub type Dwg_Entity_ARCALIGNEDTEXT = _dwg_entity_ARCALIGNEDTEXT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_RTEXT {
    pub parent: *mut _dwg_object_entity,
    #[doc = "< DXF 10"]
    pub pt: BITCODE_3BD,
    #[doc = "< DXF 210"]
    pub extrusion: BITCODE_BE,
    #[doc = "< DXF 50"]
    pub rotation: BITCODE_BD,
    #[doc = "< DXF 50"]
    pub height: BITCODE_BD,
    #[doc = "< DXF 70"]
    pub flags: BITCODE_BS,
    #[doc = "< DXF 1"]
    pub text_value: BITCODE_TV,
    #[doc = "< DXF 7"]
    pub style: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_entity_RTEXT() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_RTEXT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_RTEXT>(),
        96usize,
        concat!("Size of: ", stringify!(_dwg_entity_RTEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_RTEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_RTEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_RTEXT),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_RTEXT),
            "::",
            stringify!(pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extrusion) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_RTEXT),
            "::",
            stringify!(extrusion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rotation) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_RTEXT),
            "::",
            stringify!(rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_RTEXT),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_RTEXT),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_value) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_RTEXT),
            "::",
            stringify!(text_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).style) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_RTEXT),
            "::",
            stringify!(style)
        )
    );
}
pub type Dwg_Entity_RTEXT = _dwg_entity_RTEXT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_LAYOUTPRINTCONFIG {
    pub parent: *mut _dwg_object_entity,
    pub class_version: BITCODE_BS,
    #[doc = "< DXF 93 0"]
    pub flag: BITCODE_BS,
}
#[test]
fn bindgen_test_layout__dwg_entity_LAYOUTPRINTCONFIG() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_LAYOUTPRINTCONFIG> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_LAYOUTPRINTCONFIG>(),
        16usize,
        concat!("Size of: ", stringify!(_dwg_entity_LAYOUTPRINTCONFIG))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_LAYOUTPRINTCONFIG>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_LAYOUTPRINTCONFIG))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LAYOUTPRINTCONFIG),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LAYOUTPRINTCONFIG),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LAYOUTPRINTCONFIG),
            "::",
            stringify!(flag)
        )
    );
}
pub type Dwg_Entity_LAYOUTPRINTCONFIG = _dwg_entity_LAYOUTPRINTCONFIG;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_ACMECOMMANDHISTORY {
    pub parent: *mut _dwg_object_object,
    pub class_version: BITCODE_BS,
}
#[test]
fn bindgen_test_layout__dwg_object_ACMECOMMANDHISTORY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ACMECOMMANDHISTORY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ACMECOMMANDHISTORY>(),
        16usize,
        concat!("Size of: ", stringify!(_dwg_object_ACMECOMMANDHISTORY))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ACMECOMMANDHISTORY>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_ACMECOMMANDHISTORY))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACMECOMMANDHISTORY),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACMECOMMANDHISTORY),
            "::",
            stringify!(class_version)
        )
    );
}
pub type Dwg_Object_ACMECOMMANDHISTORY = _dwg_object_ACMECOMMANDHISTORY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_ACMESCOPE {
    pub parent: *mut _dwg_object_object,
    pub class_version: BITCODE_BS,
}
#[test]
fn bindgen_test_layout__dwg_object_ACMESCOPE() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ACMESCOPE> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ACMESCOPE>(),
        16usize,
        concat!("Size of: ", stringify!(_dwg_object_ACMESCOPE))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ACMESCOPE>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_ACMESCOPE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACMESCOPE),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACMESCOPE),
            "::",
            stringify!(class_version)
        )
    );
}
pub type Dwg_Object_ACMESCOPE = _dwg_object_ACMESCOPE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_ACMESTATEMGR {
    pub parent: *mut _dwg_object_object,
    pub class_version: BITCODE_BS,
}
#[test]
fn bindgen_test_layout__dwg_object_ACMESTATEMGR() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_ACMESTATEMGR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_ACMESTATEMGR>(),
        16usize,
        concat!("Size of: ", stringify!(_dwg_object_ACMESTATEMGR))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_ACMESTATEMGR>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_ACMESTATEMGR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACMESTATEMGR),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_ACMESTATEMGR),
            "::",
            stringify!(class_version)
        )
    );
}
pub type Dwg_Object_ACMESTATEMGR = _dwg_object_ACMESTATEMGR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_CSACDOCUMENTOPTIONS {
    pub parent: *mut _dwg_object_object,
    pub class_version: BITCODE_BS,
}
#[test]
fn bindgen_test_layout__dwg_object_CSACDOCUMENTOPTIONS() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_CSACDOCUMENTOPTIONS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_CSACDOCUMENTOPTIONS>(),
        16usize,
        concat!("Size of: ", stringify!(_dwg_object_CSACDOCUMENTOPTIONS))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_CSACDOCUMENTOPTIONS>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_CSACDOCUMENTOPTIONS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_CSACDOCUMENTOPTIONS),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_CSACDOCUMENTOPTIONS),
            "::",
            stringify!(class_version)
        )
    );
}
pub type Dwg_Object_CSACDOCUMENTOPTIONS = _dwg_object_CSACDOCUMENTOPTIONS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_BLOCKPARAMETER_connection {
    pub code: BITCODE_BL,
    pub name: BITCODE_TV,
}
#[test]
fn bindgen_test_layout__dwg_BLOCKPARAMETER_connection() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_BLOCKPARAMETER_connection> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_BLOCKPARAMETER_connection>(),
        16usize,
        concat!("Size of: ", stringify!(_dwg_BLOCKPARAMETER_connection))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_BLOCKPARAMETER_connection>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_BLOCKPARAMETER_connection))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_BLOCKPARAMETER_connection),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_BLOCKPARAMETER_connection),
            "::",
            stringify!(name)
        )
    );
}
pub type Dwg_BLOCKPARAMETER_connection = _dwg_BLOCKPARAMETER_connection;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_BLOCKPARAMETER_PropInfo {
    pub num_connections: BITCODE_BL,
    pub connections: *mut Dwg_BLOCKPARAMETER_connection,
}
#[test]
fn bindgen_test_layout__dwg_BLOCKPARAMETER_PropInfo() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_BLOCKPARAMETER_PropInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_BLOCKPARAMETER_PropInfo>(),
        16usize,
        concat!("Size of: ", stringify!(_dwg_BLOCKPARAMETER_PropInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_BLOCKPARAMETER_PropInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_BLOCKPARAMETER_PropInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_connections) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_BLOCKPARAMETER_PropInfo),
            "::",
            stringify!(num_connections)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connections) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_BLOCKPARAMETER_PropInfo),
            "::",
            stringify!(connections)
        )
    );
}
pub type Dwg_BLOCKPARAMETER_PropInfo = _dwg_BLOCKPARAMETER_PropInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_BLOCKPARAMVALUESET {
    pub desc: BITCODE_TV,
    pub flags: BITCODE_BL,
    pub minimum: BITCODE_BD,
    pub maximum: BITCODE_BD,
    pub increment: BITCODE_BD,
    pub num_valuelist: BITCODE_BS,
    pub valuelist: *mut BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_BLOCKPARAMVALUESET() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_BLOCKPARAMVALUESET> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_BLOCKPARAMVALUESET>(),
        56usize,
        concat!("Size of: ", stringify!(_dwg_BLOCKPARAMVALUESET))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_BLOCKPARAMVALUESET>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_BLOCKPARAMVALUESET))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).desc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_BLOCKPARAMVALUESET),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_BLOCKPARAMVALUESET),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minimum) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_BLOCKPARAMVALUESET),
            "::",
            stringify!(minimum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maximum) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_BLOCKPARAMVALUESET),
            "::",
            stringify!(maximum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).increment) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_BLOCKPARAMVALUESET),
            "::",
            stringify!(increment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_valuelist) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_BLOCKPARAMVALUESET),
            "::",
            stringify!(num_valuelist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).valuelist) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_BLOCKPARAMVALUESET),
            "::",
            stringify!(valuelist)
        )
    );
}
pub type Dwg_BLOCKPARAMVALUESET = _dwg_BLOCKPARAMVALUESET;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_BLOCKACTION_connectionpts {
    pub code: BITCODE_BL,
    pub name: BITCODE_TV,
}
#[test]
fn bindgen_test_layout__dwg_BLOCKACTION_connectionpts() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_BLOCKACTION_connectionpts> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_BLOCKACTION_connectionpts>(),
        16usize,
        concat!("Size of: ", stringify!(_dwg_BLOCKACTION_connectionpts))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_BLOCKACTION_connectionpts>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_BLOCKACTION_connectionpts))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_BLOCKACTION_connectionpts),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_BLOCKACTION_connectionpts),
            "::",
            stringify!(name)
        )
    );
}
pub type Dwg_BLOCKACTION_connectionpts = _dwg_BLOCKACTION_connectionpts;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_BLOCKVISIBILITYPARAMETER_state {
    pub parent: *mut _dwg_object_BLOCKVISIBILITYPARAMETER,
    pub name: BITCODE_TV,
    pub num_blocks: BITCODE_BL,
    pub blocks: *mut BITCODE_H,
    pub num_params: BITCODE_BL,
    pub params: *mut BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_BLOCKVISIBILITYPARAMETER_state() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_BLOCKVISIBILITYPARAMETER_state> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_BLOCKVISIBILITYPARAMETER_state>(),
        48usize,
        concat!("Size of: ", stringify!(_dwg_BLOCKVISIBILITYPARAMETER_state))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_BLOCKVISIBILITYPARAMETER_state>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_BLOCKVISIBILITYPARAMETER_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_BLOCKVISIBILITYPARAMETER_state),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_BLOCKVISIBILITYPARAMETER_state),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_blocks) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_BLOCKVISIBILITYPARAMETER_state),
            "::",
            stringify!(num_blocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blocks) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_BLOCKVISIBILITYPARAMETER_state),
            "::",
            stringify!(blocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_params) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_BLOCKVISIBILITYPARAMETER_state),
            "::",
            stringify!(num_params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).params) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_BLOCKVISIBILITYPARAMETER_state),
            "::",
            stringify!(params)
        )
    );
}
pub type Dwg_BLOCKVISIBILITYPARAMETER_state = _dwg_BLOCKVISIBILITYPARAMETER_state;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_BLOCKVISIBILITYPARAMETER {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub name: BITCODE_TV,
    pub be_major: BITCODE_BL,
    pub be_minor: BITCODE_BL,
    pub eed1071: BITCODE_BL,
    pub show_properties: BITCODE_B,
    pub chain_actions: BITCODE_B,
    pub def_pt: BITCODE_3BD,
    pub num_propinfos: BITCODE_BL,
    pub prop1: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop2: Dwg_BLOCKPARAMETER_PropInfo,
    pub is_initialized: BITCODE_B,
    pub unknown_bool: BITCODE_B,
    pub blockvisi_name: BITCODE_TV,
    pub blockvisi_desc: BITCODE_TV,
    pub num_blocks: BITCODE_BL,
    pub blocks: *mut BITCODE_H,
    pub num_states: BITCODE_BL,
    pub states: *mut Dwg_BLOCKVISIBILITYPARAMETER_state,
}
#[test]
fn bindgen_test_layout__dwg_object_BLOCKVISIBILITYPARAMETER() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_BLOCKVISIBILITYPARAMETER> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_BLOCKVISIBILITYPARAMETER>(),
        200usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_object_BLOCKVISIBILITYPARAMETER)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_BLOCKVISIBILITYPARAMETER>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_BLOCKVISIBILITYPARAMETER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVISIBILITYPARAMETER),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVISIBILITYPARAMETER),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVISIBILITYPARAMETER),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_major) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVISIBILITYPARAMETER),
            "::",
            stringify!(be_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_minor) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVISIBILITYPARAMETER),
            "::",
            stringify!(be_minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eed1071) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVISIBILITYPARAMETER),
            "::",
            stringify!(eed1071)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).show_properties) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVISIBILITYPARAMETER),
            "::",
            stringify!(show_properties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chain_actions) as usize - ptr as usize },
        77usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVISIBILITYPARAMETER),
            "::",
            stringify!(chain_actions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_pt) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVISIBILITYPARAMETER),
            "::",
            stringify!(def_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_propinfos) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVISIBILITYPARAMETER),
            "::",
            stringify!(num_propinfos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop1) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVISIBILITYPARAMETER),
            "::",
            stringify!(prop1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop2) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVISIBILITYPARAMETER),
            "::",
            stringify!(prop2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_initialized) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVISIBILITYPARAMETER),
            "::",
            stringify!(is_initialized)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bool) as usize - ptr as usize },
        145usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVISIBILITYPARAMETER),
            "::",
            stringify!(unknown_bool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blockvisi_name) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVISIBILITYPARAMETER),
            "::",
            stringify!(blockvisi_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blockvisi_desc) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVISIBILITYPARAMETER),
            "::",
            stringify!(blockvisi_desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_blocks) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVISIBILITYPARAMETER),
            "::",
            stringify!(num_blocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blocks) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVISIBILITYPARAMETER),
            "::",
            stringify!(blocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_states) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVISIBILITYPARAMETER),
            "::",
            stringify!(num_states)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).states) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVISIBILITYPARAMETER),
            "::",
            stringify!(states)
        )
    );
}
pub type Dwg_Object_BLOCKVISIBILITYPARAMETER = _dwg_object_BLOCKVISIBILITYPARAMETER;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_BLOCKVISIBILITYGRIP {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub name: BITCODE_TV,
    pub be_major: BITCODE_BL,
    pub be_minor: BITCODE_BL,
    pub eed1071: BITCODE_BL,
    pub bg_bl91: BITCODE_BL,
    pub bg_bl92: BITCODE_BL,
    pub bg_location: BITCODE_3BD,
    pub bg_insert_cycling: BITCODE_B,
    pub bg_insert_cycling_weight: BITCODE_BLd,
}
#[test]
fn bindgen_test_layout__dwg_object_BLOCKVISIBILITYGRIP() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_BLOCKVISIBILITYGRIP> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_BLOCKVISIBILITYGRIP>(),
        120usize,
        concat!("Size of: ", stringify!(_dwg_object_BLOCKVISIBILITYGRIP))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_BLOCKVISIBILITYGRIP>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_BLOCKVISIBILITYGRIP))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVISIBILITYGRIP),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVISIBILITYGRIP),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVISIBILITYGRIP),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_major) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVISIBILITYGRIP),
            "::",
            stringify!(be_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_minor) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVISIBILITYGRIP),
            "::",
            stringify!(be_minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eed1071) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVISIBILITYGRIP),
            "::",
            stringify!(eed1071)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_bl91) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVISIBILITYGRIP),
            "::",
            stringify!(bg_bl91)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_bl92) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVISIBILITYGRIP),
            "::",
            stringify!(bg_bl92)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_location) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVISIBILITYGRIP),
            "::",
            stringify!(bg_location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_insert_cycling) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVISIBILITYGRIP),
            "::",
            stringify!(bg_insert_cycling)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_insert_cycling_weight) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVISIBILITYGRIP),
            "::",
            stringify!(bg_insert_cycling_weight)
        )
    );
}
pub type Dwg_Object_BLOCKVISIBILITYGRIP = _dwg_object_BLOCKVISIBILITYGRIP;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_BLOCKGRIPLOCATIONCOMPONENT {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub grip_type: BITCODE_BL,
    pub grip_expr: BITCODE_TV,
}
#[test]
fn bindgen_test_layout__dwg_object_BLOCKGRIPLOCATIONCOMPONENT() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_BLOCKGRIPLOCATIONCOMPONENT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_BLOCKGRIPLOCATIONCOMPONENT>(),
        72usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_object_BLOCKGRIPLOCATIONCOMPONENT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_BLOCKGRIPLOCATIONCOMPONENT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_BLOCKGRIPLOCATIONCOMPONENT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKGRIPLOCATIONCOMPONENT),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKGRIPLOCATIONCOMPONENT),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).grip_type) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKGRIPLOCATIONCOMPONENT),
            "::",
            stringify!(grip_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).grip_expr) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKGRIPLOCATIONCOMPONENT),
            "::",
            stringify!(grip_expr)
        )
    );
}
pub type Dwg_Object_BLOCKGRIPLOCATIONCOMPONENT = _dwg_object_BLOCKGRIPLOCATIONCOMPONENT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_BREAKDATA {
    pub parent: *mut _dwg_object_object,
    pub num_pointrefs: BITCODE_BL,
    pub pointrefs: *mut BITCODE_H,
    pub dimref: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_object_BREAKDATA() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_BREAKDATA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_BREAKDATA>(),
        32usize,
        concat!("Size of: ", stringify!(_dwg_object_BREAKDATA))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_BREAKDATA>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_BREAKDATA))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BREAKDATA),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_pointrefs) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BREAKDATA),
            "::",
            stringify!(num_pointrefs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pointrefs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BREAKDATA),
            "::",
            stringify!(pointrefs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dimref) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BREAKDATA),
            "::",
            stringify!(dimref)
        )
    );
}
pub type Dwg_Object_BREAKDATA = _dwg_object_BREAKDATA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_BREAKPOINTREF {
    pub parent: *mut _dwg_object_object,
}
#[test]
fn bindgen_test_layout__dwg_object_BREAKPOINTREF() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_BREAKPOINTREF> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_BREAKPOINTREF>(),
        8usize,
        concat!("Size of: ", stringify!(_dwg_object_BREAKPOINTREF))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_BREAKPOINTREF>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_BREAKPOINTREF))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BREAKPOINTREF),
            "::",
            stringify!(parent)
        )
    );
}
pub type Dwg_Object_BREAKPOINTREF = _dwg_object_BREAKPOINTREF;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_FLIPGRIPENTITY {
    pub parent: *mut _dwg_object_entity,
}
#[test]
fn bindgen_test_layout__dwg_entity_FLIPGRIPENTITY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_FLIPGRIPENTITY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_FLIPGRIPENTITY>(),
        8usize,
        concat!("Size of: ", stringify!(_dwg_entity_FLIPGRIPENTITY))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_FLIPGRIPENTITY>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_FLIPGRIPENTITY))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_FLIPGRIPENTITY),
            "::",
            stringify!(parent)
        )
    );
}
pub type Dwg_Entity_FLIPGRIPENTITY = _dwg_entity_FLIPGRIPENTITY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_LINEARGRIPENTITY {
    pub parent: *mut _dwg_object_entity,
}
#[test]
fn bindgen_test_layout__dwg_entity_LINEARGRIPENTITY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_LINEARGRIPENTITY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_LINEARGRIPENTITY>(),
        8usize,
        concat!("Size of: ", stringify!(_dwg_entity_LINEARGRIPENTITY))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_LINEARGRIPENTITY>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_LINEARGRIPENTITY))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LINEARGRIPENTITY),
            "::",
            stringify!(parent)
        )
    );
}
pub type Dwg_Entity_LINEARGRIPENTITY = _dwg_entity_LINEARGRIPENTITY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_POLARGRIPENTITY {
    pub parent: *mut _dwg_object_entity,
}
#[test]
fn bindgen_test_layout__dwg_entity_POLARGRIPENTITY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_POLARGRIPENTITY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_POLARGRIPENTITY>(),
        8usize,
        concat!("Size of: ", stringify!(_dwg_entity_POLARGRIPENTITY))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_POLARGRIPENTITY>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_POLARGRIPENTITY))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POLARGRIPENTITY),
            "::",
            stringify!(parent)
        )
    );
}
pub type Dwg_Entity_POLARGRIPENTITY = _dwg_entity_POLARGRIPENTITY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_ROTATIONGRIPENTITY {
    pub parent: *mut _dwg_object_entity,
}
#[test]
fn bindgen_test_layout__dwg_entity_ROTATIONGRIPENTITY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_ROTATIONGRIPENTITY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_ROTATIONGRIPENTITY>(),
        8usize,
        concat!("Size of: ", stringify!(_dwg_entity_ROTATIONGRIPENTITY))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_ROTATIONGRIPENTITY>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_ROTATIONGRIPENTITY))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ROTATIONGRIPENTITY),
            "::",
            stringify!(parent)
        )
    );
}
pub type Dwg_Entity_ROTATIONGRIPENTITY = _dwg_entity_ROTATIONGRIPENTITY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_VISIBILITYGRIPENTITY {
    pub parent: *mut _dwg_object_entity,
}
#[test]
fn bindgen_test_layout__dwg_entity_VISIBILITYGRIPENTITY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_VISIBILITYGRIPENTITY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_VISIBILITYGRIPENTITY>(),
        8usize,
        concat!("Size of: ", stringify!(_dwg_entity_VISIBILITYGRIPENTITY))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_VISIBILITYGRIPENTITY>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_entity_VISIBILITYGRIPENTITY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VISIBILITYGRIPENTITY),
            "::",
            stringify!(parent)
        )
    );
}
pub type Dwg_Entity_VISIBILITYGRIPENTITY = _dwg_entity_VISIBILITYGRIPENTITY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_XYGRIPENTITY {
    pub parent: *mut _dwg_object_entity,
}
#[test]
fn bindgen_test_layout__dwg_entity_XYGRIPENTITY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_XYGRIPENTITY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_XYGRIPENTITY>(),
        8usize,
        concat!("Size of: ", stringify!(_dwg_entity_XYGRIPENTITY))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_XYGRIPENTITY>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_XYGRIPENTITY))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_XYGRIPENTITY),
            "::",
            stringify!(parent)
        )
    );
}
pub type Dwg_Entity_XYGRIPENTITY = _dwg_entity_XYGRIPENTITY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_ALIGNMENTPARAMETERENTITY {
    pub parent: *mut _dwg_object_entity,
}
#[test]
fn bindgen_test_layout__dwg_entity_ALIGNMENTPARAMETERENTITY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_ALIGNMENTPARAMETERENTITY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_ALIGNMENTPARAMETERENTITY>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_entity_ALIGNMENTPARAMETERENTITY)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_ALIGNMENTPARAMETERENTITY>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_entity_ALIGNMENTPARAMETERENTITY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ALIGNMENTPARAMETERENTITY),
            "::",
            stringify!(parent)
        )
    );
}
pub type Dwg_Entity_ALIGNMENTPARAMETERENTITY = _dwg_entity_ALIGNMENTPARAMETERENTITY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_BASEPOINTPARAMETERENTITY {
    pub parent: *mut _dwg_object_entity,
}
#[test]
fn bindgen_test_layout__dwg_entity_BASEPOINTPARAMETERENTITY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_BASEPOINTPARAMETERENTITY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_BASEPOINTPARAMETERENTITY>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_entity_BASEPOINTPARAMETERENTITY)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_BASEPOINTPARAMETERENTITY>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_entity_BASEPOINTPARAMETERENTITY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_BASEPOINTPARAMETERENTITY),
            "::",
            stringify!(parent)
        )
    );
}
pub type Dwg_Entity_BASEPOINTPARAMETERENTITY = _dwg_entity_BASEPOINTPARAMETERENTITY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_FLIPPARAMETERENTITY {
    pub parent: *mut _dwg_object_entity,
}
#[test]
fn bindgen_test_layout__dwg_entity_FLIPPARAMETERENTITY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_FLIPPARAMETERENTITY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_FLIPPARAMETERENTITY>(),
        8usize,
        concat!("Size of: ", stringify!(_dwg_entity_FLIPPARAMETERENTITY))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_FLIPPARAMETERENTITY>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_FLIPPARAMETERENTITY))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_FLIPPARAMETERENTITY),
            "::",
            stringify!(parent)
        )
    );
}
pub type Dwg_Entity_FLIPPARAMETERENTITY = _dwg_entity_FLIPPARAMETERENTITY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_LINEARPARAMETERENTITY {
    pub parent: *mut _dwg_object_entity,
}
#[test]
fn bindgen_test_layout__dwg_entity_LINEARPARAMETERENTITY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_LINEARPARAMETERENTITY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_LINEARPARAMETERENTITY>(),
        8usize,
        concat!("Size of: ", stringify!(_dwg_entity_LINEARPARAMETERENTITY))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_LINEARPARAMETERENTITY>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_entity_LINEARPARAMETERENTITY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LINEARPARAMETERENTITY),
            "::",
            stringify!(parent)
        )
    );
}
pub type Dwg_Entity_LINEARPARAMETERENTITY = _dwg_entity_LINEARPARAMETERENTITY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_POINTPARAMETERENTITY {
    pub parent: *mut _dwg_object_entity,
}
#[test]
fn bindgen_test_layout__dwg_entity_POINTPARAMETERENTITY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_POINTPARAMETERENTITY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_POINTPARAMETERENTITY>(),
        8usize,
        concat!("Size of: ", stringify!(_dwg_entity_POINTPARAMETERENTITY))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_POINTPARAMETERENTITY>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_entity_POINTPARAMETERENTITY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTPARAMETERENTITY),
            "::",
            stringify!(parent)
        )
    );
}
pub type Dwg_Entity_POINTPARAMETERENTITY = _dwg_entity_POINTPARAMETERENTITY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_ROTATIONPARAMETERENTITY {
    pub parent: *mut _dwg_object_entity,
}
#[test]
fn bindgen_test_layout__dwg_entity_ROTATIONPARAMETERENTITY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_ROTATIONPARAMETERENTITY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_ROTATIONPARAMETERENTITY>(),
        8usize,
        concat!("Size of: ", stringify!(_dwg_entity_ROTATIONPARAMETERENTITY))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_ROTATIONPARAMETERENTITY>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_entity_ROTATIONPARAMETERENTITY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ROTATIONPARAMETERENTITY),
            "::",
            stringify!(parent)
        )
    );
}
pub type Dwg_Entity_ROTATIONPARAMETERENTITY = _dwg_entity_ROTATIONPARAMETERENTITY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_VISIBILITYPARAMETERENTITY {
    pub parent: *mut _dwg_object_entity,
}
#[test]
fn bindgen_test_layout__dwg_entity_VISIBILITYPARAMETERENTITY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_VISIBILITYPARAMETERENTITY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_VISIBILITYPARAMETERENTITY>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_entity_VISIBILITYPARAMETERENTITY)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_VISIBILITYPARAMETERENTITY>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_entity_VISIBILITYPARAMETERENTITY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_VISIBILITYPARAMETERENTITY),
            "::",
            stringify!(parent)
        )
    );
}
pub type Dwg_Entity_VISIBILITYPARAMETERENTITY = _dwg_entity_VISIBILITYPARAMETERENTITY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_XYPARAMETERENTITY {
    pub parent: *mut _dwg_object_entity,
}
#[test]
fn bindgen_test_layout__dwg_entity_XYPARAMETERENTITY() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_XYPARAMETERENTITY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_XYPARAMETERENTITY>(),
        8usize,
        concat!("Size of: ", stringify!(_dwg_entity_XYPARAMETERENTITY))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_XYPARAMETERENTITY>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_XYPARAMETERENTITY))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_XYPARAMETERENTITY),
            "::",
            stringify!(parent)
        )
    );
}
pub type Dwg_Entity_XYPARAMETERENTITY = _dwg_entity_XYPARAMETERENTITY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_BLOCKALIGNMENTGRIP {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub name: BITCODE_TV,
    pub be_major: BITCODE_BL,
    pub be_minor: BITCODE_BL,
    pub eed1071: BITCODE_BL,
    pub bg_bl91: BITCODE_BL,
    pub bg_bl92: BITCODE_BL,
    pub bg_location: BITCODE_3BD,
    pub bg_insert_cycling: BITCODE_B,
    pub bg_insert_cycling_weight: BITCODE_BLd,
    pub orientation: BITCODE_3BD,
}
#[test]
fn bindgen_test_layout__dwg_object_BLOCKALIGNMENTGRIP() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_BLOCKALIGNMENTGRIP> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_BLOCKALIGNMENTGRIP>(),
        144usize,
        concat!("Size of: ", stringify!(_dwg_object_BLOCKALIGNMENTGRIP))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_BLOCKALIGNMENTGRIP>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_BLOCKALIGNMENTGRIP))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNMENTGRIP),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNMENTGRIP),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNMENTGRIP),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_major) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNMENTGRIP),
            "::",
            stringify!(be_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_minor) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNMENTGRIP),
            "::",
            stringify!(be_minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eed1071) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNMENTGRIP),
            "::",
            stringify!(eed1071)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_bl91) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNMENTGRIP),
            "::",
            stringify!(bg_bl91)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_bl92) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNMENTGRIP),
            "::",
            stringify!(bg_bl92)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_location) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNMENTGRIP),
            "::",
            stringify!(bg_location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_insert_cycling) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNMENTGRIP),
            "::",
            stringify!(bg_insert_cycling)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_insert_cycling_weight) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNMENTGRIP),
            "::",
            stringify!(bg_insert_cycling_weight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).orientation) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNMENTGRIP),
            "::",
            stringify!(orientation)
        )
    );
}
pub type Dwg_Object_BLOCKALIGNMENTGRIP = _dwg_object_BLOCKALIGNMENTGRIP;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_BLOCKALIGNMENTPARAMETER {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub name: BITCODE_TV,
    pub be_major: BITCODE_BL,
    pub be_minor: BITCODE_BL,
    pub eed1071: BITCODE_BL,
    pub show_properties: BITCODE_B,
    pub chain_actions: BITCODE_B,
    pub def_basept: BITCODE_3BD,
    pub def_endpt: BITCODE_3BD,
    pub prop1: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop2: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop3: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop4: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop_states: *mut BITCODE_BL,
    pub parameter_base_location: BITCODE_BS,
    pub upd_basept: BITCODE_3BD,
    pub basept: BITCODE_3BD,
    pub upd_endpt: BITCODE_3BD,
    pub endpt: BITCODE_3BD,
    pub align_perpendicular: BITCODE_B,
}
#[test]
fn bindgen_test_layout__dwg_object_BLOCKALIGNMENTPARAMETER() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_BLOCKALIGNMENTPARAMETER> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_BLOCKALIGNMENTPARAMETER>(),
        312usize,
        concat!("Size of: ", stringify!(_dwg_object_BLOCKALIGNMENTPARAMETER))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_BLOCKALIGNMENTPARAMETER>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_BLOCKALIGNMENTPARAMETER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNMENTPARAMETER),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNMENTPARAMETER),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNMENTPARAMETER),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_major) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNMENTPARAMETER),
            "::",
            stringify!(be_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_minor) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNMENTPARAMETER),
            "::",
            stringify!(be_minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eed1071) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNMENTPARAMETER),
            "::",
            stringify!(eed1071)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).show_properties) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNMENTPARAMETER),
            "::",
            stringify!(show_properties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chain_actions) as usize - ptr as usize },
        77usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNMENTPARAMETER),
            "::",
            stringify!(chain_actions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_basept) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNMENTPARAMETER),
            "::",
            stringify!(def_basept)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_endpt) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNMENTPARAMETER),
            "::",
            stringify!(def_endpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop1) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNMENTPARAMETER),
            "::",
            stringify!(prop1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop2) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNMENTPARAMETER),
            "::",
            stringify!(prop2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop3) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNMENTPARAMETER),
            "::",
            stringify!(prop3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop4) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNMENTPARAMETER),
            "::",
            stringify!(prop4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop_states) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNMENTPARAMETER),
            "::",
            stringify!(prop_states)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parameter_base_location) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNMENTPARAMETER),
            "::",
            stringify!(parameter_base_location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upd_basept) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNMENTPARAMETER),
            "::",
            stringify!(upd_basept)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).basept) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNMENTPARAMETER),
            "::",
            stringify!(basept)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upd_endpt) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNMENTPARAMETER),
            "::",
            stringify!(upd_endpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endpt) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNMENTPARAMETER),
            "::",
            stringify!(endpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).align_perpendicular) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNMENTPARAMETER),
            "::",
            stringify!(align_perpendicular)
        )
    );
}
pub type Dwg_Object_BLOCKALIGNMENTPARAMETER = _dwg_object_BLOCKALIGNMENTPARAMETER;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_BLOCKANGULARCONSTRAINTPARAMETER {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub name: BITCODE_TV,
    pub be_major: BITCODE_BL,
    pub be_minor: BITCODE_BL,
    pub eed1071: BITCODE_BL,
    pub show_properties: BITCODE_B,
    pub chain_actions: BITCODE_B,
    pub def_basept: BITCODE_3BD,
    pub def_endpt: BITCODE_3BD,
    pub prop1: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop2: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop3: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop4: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop_states: *mut BITCODE_BL,
    pub parameter_base_location: BITCODE_BS,
    pub upd_basept: BITCODE_3BD,
    pub basept: BITCODE_3BD,
    pub upd_endpt: BITCODE_3BD,
    pub endpt: BITCODE_3BD,
    pub dependency: BITCODE_H,
    pub center_pt: BITCODE_3BD,
    pub end_pt: BITCODE_3BD,
    pub expr_name: BITCODE_TV,
    pub expr_description: BITCODE_TV,
    pub angle: BITCODE_BD,
    pub orientation_on_both_grips: BITCODE_B,
    pub value_set: Dwg_BLOCKPARAMVALUESET,
}
#[test]
fn bindgen_test_layout__dwg_object_BLOCKANGULARCONSTRAINTPARAMETER() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_BLOCKANGULARCONSTRAINTPARAMETER> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_BLOCKANGULARCONSTRAINTPARAMETER>(),
        448usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_object_BLOCKANGULARCONSTRAINTPARAMETER)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_BLOCKANGULARCONSTRAINTPARAMETER>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_BLOCKANGULARCONSTRAINTPARAMETER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKANGULARCONSTRAINTPARAMETER),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKANGULARCONSTRAINTPARAMETER),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKANGULARCONSTRAINTPARAMETER),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_major) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKANGULARCONSTRAINTPARAMETER),
            "::",
            stringify!(be_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_minor) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKANGULARCONSTRAINTPARAMETER),
            "::",
            stringify!(be_minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eed1071) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKANGULARCONSTRAINTPARAMETER),
            "::",
            stringify!(eed1071)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).show_properties) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKANGULARCONSTRAINTPARAMETER),
            "::",
            stringify!(show_properties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chain_actions) as usize - ptr as usize },
        77usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKANGULARCONSTRAINTPARAMETER),
            "::",
            stringify!(chain_actions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_basept) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKANGULARCONSTRAINTPARAMETER),
            "::",
            stringify!(def_basept)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_endpt) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKANGULARCONSTRAINTPARAMETER),
            "::",
            stringify!(def_endpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop1) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKANGULARCONSTRAINTPARAMETER),
            "::",
            stringify!(prop1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop2) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKANGULARCONSTRAINTPARAMETER),
            "::",
            stringify!(prop2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop3) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKANGULARCONSTRAINTPARAMETER),
            "::",
            stringify!(prop3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop4) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKANGULARCONSTRAINTPARAMETER),
            "::",
            stringify!(prop4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop_states) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKANGULARCONSTRAINTPARAMETER),
            "::",
            stringify!(prop_states)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parameter_base_location) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKANGULARCONSTRAINTPARAMETER),
            "::",
            stringify!(parameter_base_location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upd_basept) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKANGULARCONSTRAINTPARAMETER),
            "::",
            stringify!(upd_basept)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).basept) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKANGULARCONSTRAINTPARAMETER),
            "::",
            stringify!(basept)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upd_endpt) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKANGULARCONSTRAINTPARAMETER),
            "::",
            stringify!(upd_endpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endpt) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKANGULARCONSTRAINTPARAMETER),
            "::",
            stringify!(endpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dependency) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKANGULARCONSTRAINTPARAMETER),
            "::",
            stringify!(dependency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).center_pt) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKANGULARCONSTRAINTPARAMETER),
            "::",
            stringify!(center_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_pt) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKANGULARCONSTRAINTPARAMETER),
            "::",
            stringify!(end_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).expr_name) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKANGULARCONSTRAINTPARAMETER),
            "::",
            stringify!(expr_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).expr_description) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKANGULARCONSTRAINTPARAMETER),
            "::",
            stringify!(expr_description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).angle) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKANGULARCONSTRAINTPARAMETER),
            "::",
            stringify!(angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).orientation_on_both_grips) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKANGULARCONSTRAINTPARAMETER),
            "::",
            stringify!(orientation_on_both_grips)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value_set) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKANGULARCONSTRAINTPARAMETER),
            "::",
            stringify!(value_set)
        )
    );
}
pub type Dwg_Object_BLOCKANGULARCONSTRAINTPARAMETER = _dwg_object_BLOCKANGULARCONSTRAINTPARAMETER;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_BLOCKDIAMETRICCONSTRAINTPARAMETER {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub name: BITCODE_TV,
    pub be_major: BITCODE_BL,
    pub be_minor: BITCODE_BL,
    pub eed1071: BITCODE_BL,
    pub show_properties: BITCODE_B,
    pub chain_actions: BITCODE_B,
    pub def_basept: BITCODE_3BD,
    pub def_endpt: BITCODE_3BD,
    pub prop1: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop2: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop3: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop4: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop_states: *mut BITCODE_BL,
    pub parameter_base_location: BITCODE_BS,
    pub upd_basept: BITCODE_3BD,
    pub basept: BITCODE_3BD,
    pub upd_endpt: BITCODE_3BD,
    pub endpt: BITCODE_3BD,
    pub dependency: BITCODE_H,
    pub expr_name: BITCODE_TV,
    pub expr_description: BITCODE_TV,
    pub distance: BITCODE_BD,
    pub orientation_on_both_grips: BITCODE_B,
    pub value_set: Dwg_BLOCKPARAMVALUESET,
}
#[test]
fn bindgen_test_layout__dwg_object_BLOCKDIAMETRICCONSTRAINTPARAMETER() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_BLOCKDIAMETRICCONSTRAINTPARAMETER> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_BLOCKDIAMETRICCONSTRAINTPARAMETER>(),
        400usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_object_BLOCKDIAMETRICCONSTRAINTPARAMETER)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_BLOCKDIAMETRICCONSTRAINTPARAMETER>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_BLOCKDIAMETRICCONSTRAINTPARAMETER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKDIAMETRICCONSTRAINTPARAMETER),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKDIAMETRICCONSTRAINTPARAMETER),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKDIAMETRICCONSTRAINTPARAMETER),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_major) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKDIAMETRICCONSTRAINTPARAMETER),
            "::",
            stringify!(be_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_minor) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKDIAMETRICCONSTRAINTPARAMETER),
            "::",
            stringify!(be_minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eed1071) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKDIAMETRICCONSTRAINTPARAMETER),
            "::",
            stringify!(eed1071)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).show_properties) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKDIAMETRICCONSTRAINTPARAMETER),
            "::",
            stringify!(show_properties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chain_actions) as usize - ptr as usize },
        77usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKDIAMETRICCONSTRAINTPARAMETER),
            "::",
            stringify!(chain_actions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_basept) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKDIAMETRICCONSTRAINTPARAMETER),
            "::",
            stringify!(def_basept)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_endpt) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKDIAMETRICCONSTRAINTPARAMETER),
            "::",
            stringify!(def_endpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop1) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKDIAMETRICCONSTRAINTPARAMETER),
            "::",
            stringify!(prop1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop2) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKDIAMETRICCONSTRAINTPARAMETER),
            "::",
            stringify!(prop2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop3) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKDIAMETRICCONSTRAINTPARAMETER),
            "::",
            stringify!(prop3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop4) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKDIAMETRICCONSTRAINTPARAMETER),
            "::",
            stringify!(prop4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop_states) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKDIAMETRICCONSTRAINTPARAMETER),
            "::",
            stringify!(prop_states)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parameter_base_location) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKDIAMETRICCONSTRAINTPARAMETER),
            "::",
            stringify!(parameter_base_location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upd_basept) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKDIAMETRICCONSTRAINTPARAMETER),
            "::",
            stringify!(upd_basept)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).basept) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKDIAMETRICCONSTRAINTPARAMETER),
            "::",
            stringify!(basept)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upd_endpt) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKDIAMETRICCONSTRAINTPARAMETER),
            "::",
            stringify!(upd_endpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endpt) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKDIAMETRICCONSTRAINTPARAMETER),
            "::",
            stringify!(endpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dependency) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKDIAMETRICCONSTRAINTPARAMETER),
            "::",
            stringify!(dependency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).expr_name) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKDIAMETRICCONSTRAINTPARAMETER),
            "::",
            stringify!(expr_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).expr_description) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKDIAMETRICCONSTRAINTPARAMETER),
            "::",
            stringify!(expr_description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).distance) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKDIAMETRICCONSTRAINTPARAMETER),
            "::",
            stringify!(distance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).orientation_on_both_grips) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKDIAMETRICCONSTRAINTPARAMETER),
            "::",
            stringify!(orientation_on_both_grips)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value_set) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKDIAMETRICCONSTRAINTPARAMETER),
            "::",
            stringify!(value_set)
        )
    );
}
pub type Dwg_Object_BLOCKDIAMETRICCONSTRAINTPARAMETER =
    _dwg_object_BLOCKDIAMETRICCONSTRAINTPARAMETER;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_BLOCKRADIALCONSTRAINTPARAMETER {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub name: BITCODE_TV,
    pub be_major: BITCODE_BL,
    pub be_minor: BITCODE_BL,
    pub eed1071: BITCODE_BL,
    pub show_properties: BITCODE_B,
    pub chain_actions: BITCODE_B,
    pub def_basept: BITCODE_3BD,
    pub def_endpt: BITCODE_3BD,
    pub prop1: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop2: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop3: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop4: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop_states: *mut BITCODE_BL,
    pub parameter_base_location: BITCODE_BS,
    pub upd_basept: BITCODE_3BD,
    pub basept: BITCODE_3BD,
    pub upd_endpt: BITCODE_3BD,
    pub endpt: BITCODE_3BD,
    pub dependency: BITCODE_H,
    pub expr_name: BITCODE_TV,
    pub expr_description: BITCODE_TV,
    pub distance: BITCODE_BD,
    pub value_set: Dwg_BLOCKPARAMVALUESET,
}
#[test]
fn bindgen_test_layout__dwg_object_BLOCKRADIALCONSTRAINTPARAMETER() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_BLOCKRADIALCONSTRAINTPARAMETER> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_BLOCKRADIALCONSTRAINTPARAMETER>(),
        392usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_object_BLOCKRADIALCONSTRAINTPARAMETER)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_BLOCKRADIALCONSTRAINTPARAMETER>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_BLOCKRADIALCONSTRAINTPARAMETER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKRADIALCONSTRAINTPARAMETER),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKRADIALCONSTRAINTPARAMETER),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKRADIALCONSTRAINTPARAMETER),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_major) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKRADIALCONSTRAINTPARAMETER),
            "::",
            stringify!(be_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_minor) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKRADIALCONSTRAINTPARAMETER),
            "::",
            stringify!(be_minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eed1071) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKRADIALCONSTRAINTPARAMETER),
            "::",
            stringify!(eed1071)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).show_properties) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKRADIALCONSTRAINTPARAMETER),
            "::",
            stringify!(show_properties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chain_actions) as usize - ptr as usize },
        77usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKRADIALCONSTRAINTPARAMETER),
            "::",
            stringify!(chain_actions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_basept) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKRADIALCONSTRAINTPARAMETER),
            "::",
            stringify!(def_basept)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_endpt) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKRADIALCONSTRAINTPARAMETER),
            "::",
            stringify!(def_endpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop1) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKRADIALCONSTRAINTPARAMETER),
            "::",
            stringify!(prop1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop2) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKRADIALCONSTRAINTPARAMETER),
            "::",
            stringify!(prop2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop3) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKRADIALCONSTRAINTPARAMETER),
            "::",
            stringify!(prop3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop4) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKRADIALCONSTRAINTPARAMETER),
            "::",
            stringify!(prop4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop_states) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKRADIALCONSTRAINTPARAMETER),
            "::",
            stringify!(prop_states)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parameter_base_location) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKRADIALCONSTRAINTPARAMETER),
            "::",
            stringify!(parameter_base_location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upd_basept) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKRADIALCONSTRAINTPARAMETER),
            "::",
            stringify!(upd_basept)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).basept) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKRADIALCONSTRAINTPARAMETER),
            "::",
            stringify!(basept)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upd_endpt) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKRADIALCONSTRAINTPARAMETER),
            "::",
            stringify!(upd_endpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endpt) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKRADIALCONSTRAINTPARAMETER),
            "::",
            stringify!(endpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dependency) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKRADIALCONSTRAINTPARAMETER),
            "::",
            stringify!(dependency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).expr_name) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKRADIALCONSTRAINTPARAMETER),
            "::",
            stringify!(expr_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).expr_description) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKRADIALCONSTRAINTPARAMETER),
            "::",
            stringify!(expr_description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).distance) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKRADIALCONSTRAINTPARAMETER),
            "::",
            stringify!(distance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value_set) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKRADIALCONSTRAINTPARAMETER),
            "::",
            stringify!(value_set)
        )
    );
}
pub type Dwg_Object_BLOCKRADIALCONSTRAINTPARAMETER = _dwg_object_BLOCKRADIALCONSTRAINTPARAMETER;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_BLOCKARRAYACTION {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub name: BITCODE_TV,
    pub be_major: BITCODE_BL,
    pub be_minor: BITCODE_BL,
    pub eed1071: BITCODE_BL,
    pub display_location: BITCODE_3BD,
    pub num_actions: BITCODE_BL,
    pub actions: *mut BITCODE_BL,
    pub num_deps: BITCODE_BL,
    pub deps: *mut BITCODE_H,
    #[doc = "< DXF 92-95, 301-304"]
    pub conn_pts: [Dwg_BLOCKACTION_connectionpts; 4usize],
    #[doc = "< DXF 140"]
    pub column_offset: BITCODE_BD,
    #[doc = "< DXF 141"]
    pub row_offset: BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_object_BLOCKARRAYACTION() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_BLOCKARRAYACTION> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_BLOCKARRAYACTION>(),
        216usize,
        concat!("Size of: ", stringify!(_dwg_object_BLOCKARRAYACTION))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_BLOCKARRAYACTION>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_BLOCKARRAYACTION))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKARRAYACTION),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKARRAYACTION),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKARRAYACTION),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_major) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKARRAYACTION),
            "::",
            stringify!(be_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_minor) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKARRAYACTION),
            "::",
            stringify!(be_minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eed1071) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKARRAYACTION),
            "::",
            stringify!(eed1071)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).display_location) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKARRAYACTION),
            "::",
            stringify!(display_location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_actions) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKARRAYACTION),
            "::",
            stringify!(num_actions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actions) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKARRAYACTION),
            "::",
            stringify!(actions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_deps) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKARRAYACTION),
            "::",
            stringify!(num_deps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deps) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKARRAYACTION),
            "::",
            stringify!(deps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).conn_pts) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKARRAYACTION),
            "::",
            stringify!(conn_pts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).column_offset) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKARRAYACTION),
            "::",
            stringify!(column_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).row_offset) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKARRAYACTION),
            "::",
            stringify!(row_offset)
        )
    );
}
pub type Dwg_Object_BLOCKARRAYACTION = _dwg_object_BLOCKARRAYACTION;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_BLOCKBASEPOINTPARAMETER {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub name: BITCODE_TV,
    pub be_major: BITCODE_BL,
    pub be_minor: BITCODE_BL,
    pub eed1071: BITCODE_BL,
    pub show_properties: BITCODE_B,
    pub chain_actions: BITCODE_B,
    pub def_pt: BITCODE_3BD,
    pub num_propinfos: BITCODE_BL,
    pub prop1: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop2: Dwg_BLOCKPARAMETER_PropInfo,
    pub pt: BITCODE_3BD,
    pub base_pt: BITCODE_3BD,
}
#[test]
fn bindgen_test_layout__dwg_object_BLOCKBASEPOINTPARAMETER() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_BLOCKBASEPOINTPARAMETER> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_BLOCKBASEPOINTPARAMETER>(),
        192usize,
        concat!("Size of: ", stringify!(_dwg_object_BLOCKBASEPOINTPARAMETER))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_BLOCKBASEPOINTPARAMETER>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_BLOCKBASEPOINTPARAMETER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKBASEPOINTPARAMETER),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKBASEPOINTPARAMETER),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKBASEPOINTPARAMETER),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_major) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKBASEPOINTPARAMETER),
            "::",
            stringify!(be_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_minor) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKBASEPOINTPARAMETER),
            "::",
            stringify!(be_minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eed1071) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKBASEPOINTPARAMETER),
            "::",
            stringify!(eed1071)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).show_properties) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKBASEPOINTPARAMETER),
            "::",
            stringify!(show_properties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chain_actions) as usize - ptr as usize },
        77usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKBASEPOINTPARAMETER),
            "::",
            stringify!(chain_actions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_pt) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKBASEPOINTPARAMETER),
            "::",
            stringify!(def_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_propinfos) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKBASEPOINTPARAMETER),
            "::",
            stringify!(num_propinfos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop1) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKBASEPOINTPARAMETER),
            "::",
            stringify!(prop1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop2) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKBASEPOINTPARAMETER),
            "::",
            stringify!(prop2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKBASEPOINTPARAMETER),
            "::",
            stringify!(pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_pt) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKBASEPOINTPARAMETER),
            "::",
            stringify!(base_pt)
        )
    );
}
pub type Dwg_Object_BLOCKBASEPOINTPARAMETER = _dwg_object_BLOCKBASEPOINTPARAMETER;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_BLOCKFLIPACTION {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub name: BITCODE_TV,
    pub be_major: BITCODE_BL,
    pub be_minor: BITCODE_BL,
    pub eed1071: BITCODE_BL,
    pub display_location: BITCODE_3BD,
    pub num_actions: BITCODE_BL,
    pub actions: *mut BITCODE_BL,
    pub num_deps: BITCODE_BL,
    pub deps: *mut BITCODE_H,
    #[doc = "< DXF 92-95, 301-304"]
    pub conn_pts: [Dwg_BLOCKACTION_connectionpts; 4usize],
    pub action_offset_x: BITCODE_BD,
    pub action_offset_y: BITCODE_BD,
    pub angle_offset: BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_object_BLOCKFLIPACTION() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_BLOCKFLIPACTION> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_BLOCKFLIPACTION>(),
        224usize,
        concat!("Size of: ", stringify!(_dwg_object_BLOCKFLIPACTION))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_BLOCKFLIPACTION>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_BLOCKFLIPACTION))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPACTION),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPACTION),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPACTION),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_major) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPACTION),
            "::",
            stringify!(be_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_minor) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPACTION),
            "::",
            stringify!(be_minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eed1071) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPACTION),
            "::",
            stringify!(eed1071)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).display_location) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPACTION),
            "::",
            stringify!(display_location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_actions) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPACTION),
            "::",
            stringify!(num_actions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actions) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPACTION),
            "::",
            stringify!(actions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_deps) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPACTION),
            "::",
            stringify!(num_deps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deps) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPACTION),
            "::",
            stringify!(deps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).conn_pts) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPACTION),
            "::",
            stringify!(conn_pts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).action_offset_x) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPACTION),
            "::",
            stringify!(action_offset_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).action_offset_y) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPACTION),
            "::",
            stringify!(action_offset_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).angle_offset) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPACTION),
            "::",
            stringify!(angle_offset)
        )
    );
}
pub type Dwg_Object_BLOCKFLIPACTION = _dwg_object_BLOCKFLIPACTION;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_BLOCKFLIPGRIP {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub name: BITCODE_TV,
    pub be_major: BITCODE_BL,
    pub be_minor: BITCODE_BL,
    pub eed1071: BITCODE_BL,
    pub bg_bl91: BITCODE_BL,
    pub bg_bl92: BITCODE_BL,
    pub bg_location: BITCODE_3BD,
    pub bg_insert_cycling: BITCODE_B,
    pub bg_insert_cycling_weight: BITCODE_BLd,
    pub combined_state: BITCODE_BL,
    pub orientation: BITCODE_3BD,
    pub upd_state: BITCODE_BS,
    pub state: BITCODE_BS,
}
#[test]
fn bindgen_test_layout__dwg_object_BLOCKFLIPGRIP() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_BLOCKFLIPGRIP> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_BLOCKFLIPGRIP>(),
        160usize,
        concat!("Size of: ", stringify!(_dwg_object_BLOCKFLIPGRIP))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_BLOCKFLIPGRIP>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_BLOCKFLIPGRIP))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPGRIP),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPGRIP),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPGRIP),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_major) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPGRIP),
            "::",
            stringify!(be_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_minor) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPGRIP),
            "::",
            stringify!(be_minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eed1071) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPGRIP),
            "::",
            stringify!(eed1071)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_bl91) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPGRIP),
            "::",
            stringify!(bg_bl91)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_bl92) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPGRIP),
            "::",
            stringify!(bg_bl92)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_location) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPGRIP),
            "::",
            stringify!(bg_location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_insert_cycling) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPGRIP),
            "::",
            stringify!(bg_insert_cycling)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_insert_cycling_weight) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPGRIP),
            "::",
            stringify!(bg_insert_cycling_weight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).combined_state) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPGRIP),
            "::",
            stringify!(combined_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).orientation) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPGRIP),
            "::",
            stringify!(orientation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upd_state) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPGRIP),
            "::",
            stringify!(upd_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        154usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPGRIP),
            "::",
            stringify!(state)
        )
    );
}
pub type Dwg_Object_BLOCKFLIPGRIP = _dwg_object_BLOCKFLIPGRIP;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_BLOCKFLIPPARAMETER {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub name: BITCODE_TV,
    pub be_major: BITCODE_BL,
    pub be_minor: BITCODE_BL,
    pub eed1071: BITCODE_BL,
    pub show_properties: BITCODE_B,
    pub chain_actions: BITCODE_B,
    pub def_basept: BITCODE_3BD,
    pub def_endpt: BITCODE_3BD,
    pub prop1: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop2: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop3: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop4: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop_states: *mut BITCODE_BL,
    pub parameter_base_location: BITCODE_BS,
    pub upd_basept: BITCODE_3BD,
    pub basept: BITCODE_3BD,
    pub upd_endpt: BITCODE_3BD,
    pub endpt: BITCODE_3BD,
    #[doc = "< DXF 305"]
    pub flip_label: BITCODE_TV,
    #[doc = "< DXF 306"]
    pub flip_label_desc: BITCODE_TV,
    #[doc = "< DXF 307"]
    pub base_state_label: BITCODE_TV,
    #[doc = "< DXF 308"]
    pub flipped_state_label: BITCODE_TV,
    #[doc = "< DXF 1012"]
    pub def_label_pt: BITCODE_3BD,
    #[doc = "< DXF 96"]
    pub bl96: BITCODE_BL,
    #[doc = "< DXF 309"]
    pub tooltip: BITCODE_TV,
}
#[test]
fn bindgen_test_layout__dwg_object_BLOCKFLIPPARAMETER() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_BLOCKFLIPPARAMETER> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_BLOCKFLIPPARAMETER>(),
        376usize,
        concat!("Size of: ", stringify!(_dwg_object_BLOCKFLIPPARAMETER))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_BLOCKFLIPPARAMETER>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_BLOCKFLIPPARAMETER))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPPARAMETER),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPPARAMETER),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPPARAMETER),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_major) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPPARAMETER),
            "::",
            stringify!(be_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_minor) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPPARAMETER),
            "::",
            stringify!(be_minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eed1071) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPPARAMETER),
            "::",
            stringify!(eed1071)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).show_properties) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPPARAMETER),
            "::",
            stringify!(show_properties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chain_actions) as usize - ptr as usize },
        77usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPPARAMETER),
            "::",
            stringify!(chain_actions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_basept) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPPARAMETER),
            "::",
            stringify!(def_basept)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_endpt) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPPARAMETER),
            "::",
            stringify!(def_endpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop1) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPPARAMETER),
            "::",
            stringify!(prop1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop2) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPPARAMETER),
            "::",
            stringify!(prop2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop3) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPPARAMETER),
            "::",
            stringify!(prop3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop4) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPPARAMETER),
            "::",
            stringify!(prop4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop_states) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPPARAMETER),
            "::",
            stringify!(prop_states)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parameter_base_location) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPPARAMETER),
            "::",
            stringify!(parameter_base_location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upd_basept) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPPARAMETER),
            "::",
            stringify!(upd_basept)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).basept) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPPARAMETER),
            "::",
            stringify!(basept)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upd_endpt) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPPARAMETER),
            "::",
            stringify!(upd_endpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endpt) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPPARAMETER),
            "::",
            stringify!(endpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flip_label) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPPARAMETER),
            "::",
            stringify!(flip_label)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flip_label_desc) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPPARAMETER),
            "::",
            stringify!(flip_label_desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_state_label) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPPARAMETER),
            "::",
            stringify!(base_state_label)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flipped_state_label) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPPARAMETER),
            "::",
            stringify!(flipped_state_label)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_label_pt) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPPARAMETER),
            "::",
            stringify!(def_label_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bl96) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPPARAMETER),
            "::",
            stringify!(bl96)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tooltip) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKFLIPPARAMETER),
            "::",
            stringify!(tooltip)
        )
    );
}
pub type Dwg_Object_BLOCKFLIPPARAMETER = _dwg_object_BLOCKFLIPPARAMETER;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_BLOCKALIGNEDCONSTRAINTPARAMETER {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub name: BITCODE_TV,
    pub be_major: BITCODE_BL,
    pub be_minor: BITCODE_BL,
    pub eed1071: BITCODE_BL,
    pub show_properties: BITCODE_B,
    pub chain_actions: BITCODE_B,
    pub def_basept: BITCODE_3BD,
    pub def_endpt: BITCODE_3BD,
    pub prop1: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop2: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop3: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop4: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop_states: *mut BITCODE_BL,
    pub parameter_base_location: BITCODE_BS,
    pub upd_basept: BITCODE_3BD,
    pub basept: BITCODE_3BD,
    pub upd_endpt: BITCODE_3BD,
    pub endpt: BITCODE_3BD,
    pub dependency: BITCODE_H,
    pub expr_name: BITCODE_TV,
    pub expr_description: BITCODE_TV,
    pub value: BITCODE_BD,
    pub value_set: Dwg_BLOCKPARAMVALUESET,
}
#[test]
fn bindgen_test_layout__dwg_object_BLOCKALIGNEDCONSTRAINTPARAMETER() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_BLOCKALIGNEDCONSTRAINTPARAMETER> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_BLOCKALIGNEDCONSTRAINTPARAMETER>(),
        392usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_object_BLOCKALIGNEDCONSTRAINTPARAMETER)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_BLOCKALIGNEDCONSTRAINTPARAMETER>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_BLOCKALIGNEDCONSTRAINTPARAMETER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNEDCONSTRAINTPARAMETER),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNEDCONSTRAINTPARAMETER),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNEDCONSTRAINTPARAMETER),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_major) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNEDCONSTRAINTPARAMETER),
            "::",
            stringify!(be_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_minor) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNEDCONSTRAINTPARAMETER),
            "::",
            stringify!(be_minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eed1071) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNEDCONSTRAINTPARAMETER),
            "::",
            stringify!(eed1071)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).show_properties) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNEDCONSTRAINTPARAMETER),
            "::",
            stringify!(show_properties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chain_actions) as usize - ptr as usize },
        77usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNEDCONSTRAINTPARAMETER),
            "::",
            stringify!(chain_actions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_basept) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNEDCONSTRAINTPARAMETER),
            "::",
            stringify!(def_basept)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_endpt) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNEDCONSTRAINTPARAMETER),
            "::",
            stringify!(def_endpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop1) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNEDCONSTRAINTPARAMETER),
            "::",
            stringify!(prop1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop2) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNEDCONSTRAINTPARAMETER),
            "::",
            stringify!(prop2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop3) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNEDCONSTRAINTPARAMETER),
            "::",
            stringify!(prop3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop4) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNEDCONSTRAINTPARAMETER),
            "::",
            stringify!(prop4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop_states) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNEDCONSTRAINTPARAMETER),
            "::",
            stringify!(prop_states)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parameter_base_location) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNEDCONSTRAINTPARAMETER),
            "::",
            stringify!(parameter_base_location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upd_basept) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNEDCONSTRAINTPARAMETER),
            "::",
            stringify!(upd_basept)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).basept) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNEDCONSTRAINTPARAMETER),
            "::",
            stringify!(basept)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upd_endpt) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNEDCONSTRAINTPARAMETER),
            "::",
            stringify!(upd_endpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endpt) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNEDCONSTRAINTPARAMETER),
            "::",
            stringify!(endpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dependency) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNEDCONSTRAINTPARAMETER),
            "::",
            stringify!(dependency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).expr_name) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNEDCONSTRAINTPARAMETER),
            "::",
            stringify!(expr_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).expr_description) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNEDCONSTRAINTPARAMETER),
            "::",
            stringify!(expr_description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNEDCONSTRAINTPARAMETER),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value_set) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKALIGNEDCONSTRAINTPARAMETER),
            "::",
            stringify!(value_set)
        )
    );
}
pub type Dwg_Object_BLOCKALIGNEDCONSTRAINTPARAMETER = _dwg_object_BLOCKALIGNEDCONSTRAINTPARAMETER;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_BLOCKLINEARCONSTRAINTPARAMETER {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub name: BITCODE_TV,
    pub be_major: BITCODE_BL,
    pub be_minor: BITCODE_BL,
    pub eed1071: BITCODE_BL,
    pub show_properties: BITCODE_B,
    pub chain_actions: BITCODE_B,
    pub def_basept: BITCODE_3BD,
    pub def_endpt: BITCODE_3BD,
    pub prop1: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop2: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop3: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop4: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop_states: *mut BITCODE_BL,
    pub parameter_base_location: BITCODE_BS,
    pub upd_basept: BITCODE_3BD,
    pub basept: BITCODE_3BD,
    pub upd_endpt: BITCODE_3BD,
    pub endpt: BITCODE_3BD,
    pub dependency: BITCODE_H,
    pub expr_name: BITCODE_TV,
    pub expr_description: BITCODE_TV,
    pub value: BITCODE_BD,
    pub value_set: Dwg_BLOCKPARAMVALUESET,
}
#[test]
fn bindgen_test_layout__dwg_object_BLOCKLINEARCONSTRAINTPARAMETER() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_BLOCKLINEARCONSTRAINTPARAMETER> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_BLOCKLINEARCONSTRAINTPARAMETER>(),
        392usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_object_BLOCKLINEARCONSTRAINTPARAMETER)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_BLOCKLINEARCONSTRAINTPARAMETER>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_BLOCKLINEARCONSTRAINTPARAMETER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARCONSTRAINTPARAMETER),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARCONSTRAINTPARAMETER),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARCONSTRAINTPARAMETER),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_major) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARCONSTRAINTPARAMETER),
            "::",
            stringify!(be_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_minor) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARCONSTRAINTPARAMETER),
            "::",
            stringify!(be_minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eed1071) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARCONSTRAINTPARAMETER),
            "::",
            stringify!(eed1071)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).show_properties) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARCONSTRAINTPARAMETER),
            "::",
            stringify!(show_properties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chain_actions) as usize - ptr as usize },
        77usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARCONSTRAINTPARAMETER),
            "::",
            stringify!(chain_actions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_basept) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARCONSTRAINTPARAMETER),
            "::",
            stringify!(def_basept)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_endpt) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARCONSTRAINTPARAMETER),
            "::",
            stringify!(def_endpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop1) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARCONSTRAINTPARAMETER),
            "::",
            stringify!(prop1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop2) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARCONSTRAINTPARAMETER),
            "::",
            stringify!(prop2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop3) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARCONSTRAINTPARAMETER),
            "::",
            stringify!(prop3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop4) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARCONSTRAINTPARAMETER),
            "::",
            stringify!(prop4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop_states) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARCONSTRAINTPARAMETER),
            "::",
            stringify!(prop_states)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parameter_base_location) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARCONSTRAINTPARAMETER),
            "::",
            stringify!(parameter_base_location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upd_basept) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARCONSTRAINTPARAMETER),
            "::",
            stringify!(upd_basept)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).basept) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARCONSTRAINTPARAMETER),
            "::",
            stringify!(basept)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upd_endpt) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARCONSTRAINTPARAMETER),
            "::",
            stringify!(upd_endpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endpt) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARCONSTRAINTPARAMETER),
            "::",
            stringify!(endpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dependency) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARCONSTRAINTPARAMETER),
            "::",
            stringify!(dependency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).expr_name) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARCONSTRAINTPARAMETER),
            "::",
            stringify!(expr_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).expr_description) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARCONSTRAINTPARAMETER),
            "::",
            stringify!(expr_description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARCONSTRAINTPARAMETER),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value_set) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARCONSTRAINTPARAMETER),
            "::",
            stringify!(value_set)
        )
    );
}
pub type Dwg_Object_BLOCKLINEARCONSTRAINTPARAMETER = _dwg_object_BLOCKLINEARCONSTRAINTPARAMETER;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_BLOCKHORIZONTALCONSTRAINTPARAMETER {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub name: BITCODE_TV,
    pub be_major: BITCODE_BL,
    pub be_minor: BITCODE_BL,
    pub eed1071: BITCODE_BL,
    pub show_properties: BITCODE_B,
    pub chain_actions: BITCODE_B,
    pub def_basept: BITCODE_3BD,
    pub def_endpt: BITCODE_3BD,
    pub prop1: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop2: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop3: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop4: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop_states: *mut BITCODE_BL,
    pub parameter_base_location: BITCODE_BS,
    pub upd_basept: BITCODE_3BD,
    pub basept: BITCODE_3BD,
    pub upd_endpt: BITCODE_3BD,
    pub endpt: BITCODE_3BD,
    pub dependency: BITCODE_H,
    pub expr_name: BITCODE_TV,
    pub expr_description: BITCODE_TV,
    pub value: BITCODE_BD,
    pub value_set: Dwg_BLOCKPARAMVALUESET,
}
#[test]
fn bindgen_test_layout__dwg_object_BLOCKHORIZONTALCONSTRAINTPARAMETER() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_BLOCKHORIZONTALCONSTRAINTPARAMETER> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_BLOCKHORIZONTALCONSTRAINTPARAMETER>(),
        392usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_object_BLOCKHORIZONTALCONSTRAINTPARAMETER)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_BLOCKHORIZONTALCONSTRAINTPARAMETER>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_BLOCKHORIZONTALCONSTRAINTPARAMETER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKHORIZONTALCONSTRAINTPARAMETER),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKHORIZONTALCONSTRAINTPARAMETER),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKHORIZONTALCONSTRAINTPARAMETER),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_major) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKHORIZONTALCONSTRAINTPARAMETER),
            "::",
            stringify!(be_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_minor) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKHORIZONTALCONSTRAINTPARAMETER),
            "::",
            stringify!(be_minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eed1071) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKHORIZONTALCONSTRAINTPARAMETER),
            "::",
            stringify!(eed1071)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).show_properties) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKHORIZONTALCONSTRAINTPARAMETER),
            "::",
            stringify!(show_properties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chain_actions) as usize - ptr as usize },
        77usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKHORIZONTALCONSTRAINTPARAMETER),
            "::",
            stringify!(chain_actions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_basept) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKHORIZONTALCONSTRAINTPARAMETER),
            "::",
            stringify!(def_basept)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_endpt) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKHORIZONTALCONSTRAINTPARAMETER),
            "::",
            stringify!(def_endpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop1) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKHORIZONTALCONSTRAINTPARAMETER),
            "::",
            stringify!(prop1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop2) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKHORIZONTALCONSTRAINTPARAMETER),
            "::",
            stringify!(prop2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop3) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKHORIZONTALCONSTRAINTPARAMETER),
            "::",
            stringify!(prop3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop4) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKHORIZONTALCONSTRAINTPARAMETER),
            "::",
            stringify!(prop4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop_states) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKHORIZONTALCONSTRAINTPARAMETER),
            "::",
            stringify!(prop_states)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parameter_base_location) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKHORIZONTALCONSTRAINTPARAMETER),
            "::",
            stringify!(parameter_base_location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upd_basept) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKHORIZONTALCONSTRAINTPARAMETER),
            "::",
            stringify!(upd_basept)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).basept) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKHORIZONTALCONSTRAINTPARAMETER),
            "::",
            stringify!(basept)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upd_endpt) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKHORIZONTALCONSTRAINTPARAMETER),
            "::",
            stringify!(upd_endpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endpt) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKHORIZONTALCONSTRAINTPARAMETER),
            "::",
            stringify!(endpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dependency) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKHORIZONTALCONSTRAINTPARAMETER),
            "::",
            stringify!(dependency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).expr_name) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKHORIZONTALCONSTRAINTPARAMETER),
            "::",
            stringify!(expr_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).expr_description) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKHORIZONTALCONSTRAINTPARAMETER),
            "::",
            stringify!(expr_description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKHORIZONTALCONSTRAINTPARAMETER),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value_set) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKHORIZONTALCONSTRAINTPARAMETER),
            "::",
            stringify!(value_set)
        )
    );
}
pub type Dwg_Object_BLOCKHORIZONTALCONSTRAINTPARAMETER =
    _dwg_object_BLOCKHORIZONTALCONSTRAINTPARAMETER;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_BLOCKVERTICALCONSTRAINTPARAMETER {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub name: BITCODE_TV,
    pub be_major: BITCODE_BL,
    pub be_minor: BITCODE_BL,
    pub eed1071: BITCODE_BL,
    pub show_properties: BITCODE_B,
    pub chain_actions: BITCODE_B,
    pub def_basept: BITCODE_3BD,
    pub def_endpt: BITCODE_3BD,
    pub prop1: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop2: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop3: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop4: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop_states: *mut BITCODE_BL,
    pub parameter_base_location: BITCODE_BS,
    pub upd_basept: BITCODE_3BD,
    pub basept: BITCODE_3BD,
    pub upd_endpt: BITCODE_3BD,
    pub endpt: BITCODE_3BD,
    pub dependency: BITCODE_H,
    pub expr_name: BITCODE_TV,
    pub expr_description: BITCODE_TV,
    pub value: BITCODE_BD,
    pub value_set: Dwg_BLOCKPARAMVALUESET,
}
#[test]
fn bindgen_test_layout__dwg_object_BLOCKVERTICALCONSTRAINTPARAMETER() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_BLOCKVERTICALCONSTRAINTPARAMETER> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_BLOCKVERTICALCONSTRAINTPARAMETER>(),
        392usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_object_BLOCKVERTICALCONSTRAINTPARAMETER)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_BLOCKVERTICALCONSTRAINTPARAMETER>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_BLOCKVERTICALCONSTRAINTPARAMETER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVERTICALCONSTRAINTPARAMETER),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVERTICALCONSTRAINTPARAMETER),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVERTICALCONSTRAINTPARAMETER),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_major) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVERTICALCONSTRAINTPARAMETER),
            "::",
            stringify!(be_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_minor) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVERTICALCONSTRAINTPARAMETER),
            "::",
            stringify!(be_minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eed1071) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVERTICALCONSTRAINTPARAMETER),
            "::",
            stringify!(eed1071)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).show_properties) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVERTICALCONSTRAINTPARAMETER),
            "::",
            stringify!(show_properties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chain_actions) as usize - ptr as usize },
        77usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVERTICALCONSTRAINTPARAMETER),
            "::",
            stringify!(chain_actions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_basept) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVERTICALCONSTRAINTPARAMETER),
            "::",
            stringify!(def_basept)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_endpt) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVERTICALCONSTRAINTPARAMETER),
            "::",
            stringify!(def_endpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop1) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVERTICALCONSTRAINTPARAMETER),
            "::",
            stringify!(prop1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop2) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVERTICALCONSTRAINTPARAMETER),
            "::",
            stringify!(prop2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop3) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVERTICALCONSTRAINTPARAMETER),
            "::",
            stringify!(prop3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop4) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVERTICALCONSTRAINTPARAMETER),
            "::",
            stringify!(prop4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop_states) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVERTICALCONSTRAINTPARAMETER),
            "::",
            stringify!(prop_states)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parameter_base_location) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVERTICALCONSTRAINTPARAMETER),
            "::",
            stringify!(parameter_base_location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upd_basept) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVERTICALCONSTRAINTPARAMETER),
            "::",
            stringify!(upd_basept)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).basept) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVERTICALCONSTRAINTPARAMETER),
            "::",
            stringify!(basept)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upd_endpt) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVERTICALCONSTRAINTPARAMETER),
            "::",
            stringify!(upd_endpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endpt) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVERTICALCONSTRAINTPARAMETER),
            "::",
            stringify!(endpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dependency) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVERTICALCONSTRAINTPARAMETER),
            "::",
            stringify!(dependency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).expr_name) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVERTICALCONSTRAINTPARAMETER),
            "::",
            stringify!(expr_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).expr_description) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVERTICALCONSTRAINTPARAMETER),
            "::",
            stringify!(expr_description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVERTICALCONSTRAINTPARAMETER),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value_set) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKVERTICALCONSTRAINTPARAMETER),
            "::",
            stringify!(value_set)
        )
    );
}
pub type Dwg_Object_BLOCKVERTICALCONSTRAINTPARAMETER = _dwg_object_BLOCKVERTICALCONSTRAINTPARAMETER;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_BLOCKLINEARGRIP {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub name: BITCODE_TV,
    pub be_major: BITCODE_BL,
    pub be_minor: BITCODE_BL,
    pub eed1071: BITCODE_BL,
    pub bg_bl91: BITCODE_BL,
    pub bg_bl92: BITCODE_BL,
    pub bg_location: BITCODE_3BD,
    pub bg_insert_cycling: BITCODE_B,
    pub bg_insert_cycling_weight: BITCODE_BLd,
    pub orientation: BITCODE_3BD,
}
#[test]
fn bindgen_test_layout__dwg_object_BLOCKLINEARGRIP() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_BLOCKLINEARGRIP> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_BLOCKLINEARGRIP>(),
        144usize,
        concat!("Size of: ", stringify!(_dwg_object_BLOCKLINEARGRIP))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_BLOCKLINEARGRIP>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_BLOCKLINEARGRIP))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARGRIP),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARGRIP),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARGRIP),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_major) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARGRIP),
            "::",
            stringify!(be_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_minor) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARGRIP),
            "::",
            stringify!(be_minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eed1071) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARGRIP),
            "::",
            stringify!(eed1071)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_bl91) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARGRIP),
            "::",
            stringify!(bg_bl91)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_bl92) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARGRIP),
            "::",
            stringify!(bg_bl92)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_location) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARGRIP),
            "::",
            stringify!(bg_location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_insert_cycling) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARGRIP),
            "::",
            stringify!(bg_insert_cycling)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_insert_cycling_weight) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARGRIP),
            "::",
            stringify!(bg_insert_cycling_weight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).orientation) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARGRIP),
            "::",
            stringify!(orientation)
        )
    );
}
pub type Dwg_Object_BLOCKLINEARGRIP = _dwg_object_BLOCKLINEARGRIP;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_BLOCKLINEARPARAMETER {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub name: BITCODE_TV,
    pub be_major: BITCODE_BL,
    pub be_minor: BITCODE_BL,
    pub eed1071: BITCODE_BL,
    pub show_properties: BITCODE_B,
    pub chain_actions: BITCODE_B,
    pub def_basept: BITCODE_3BD,
    pub def_endpt: BITCODE_3BD,
    pub prop1: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop2: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop3: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop4: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop_states: *mut BITCODE_BL,
    pub parameter_base_location: BITCODE_BS,
    pub upd_basept: BITCODE_3BD,
    pub basept: BITCODE_3BD,
    pub upd_endpt: BITCODE_3BD,
    pub endpt: BITCODE_3BD,
    #[doc = "< DXF 305"]
    pub distance_name: BITCODE_TV,
    #[doc = "< DXF 306"]
    pub distance_desc: BITCODE_TV,
    #[doc = "< DXF 306"]
    pub distance: BITCODE_BD,
    pub value_set: Dwg_BLOCKPARAMVALUESET,
}
#[test]
fn bindgen_test_layout__dwg_object_BLOCKLINEARPARAMETER() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_BLOCKLINEARPARAMETER> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_BLOCKLINEARPARAMETER>(),
        384usize,
        concat!("Size of: ", stringify!(_dwg_object_BLOCKLINEARPARAMETER))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_BLOCKLINEARPARAMETER>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_BLOCKLINEARPARAMETER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARPARAMETER),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARPARAMETER),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARPARAMETER),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_major) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARPARAMETER),
            "::",
            stringify!(be_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_minor) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARPARAMETER),
            "::",
            stringify!(be_minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eed1071) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARPARAMETER),
            "::",
            stringify!(eed1071)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).show_properties) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARPARAMETER),
            "::",
            stringify!(show_properties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chain_actions) as usize - ptr as usize },
        77usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARPARAMETER),
            "::",
            stringify!(chain_actions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_basept) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARPARAMETER),
            "::",
            stringify!(def_basept)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_endpt) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARPARAMETER),
            "::",
            stringify!(def_endpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop1) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARPARAMETER),
            "::",
            stringify!(prop1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop2) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARPARAMETER),
            "::",
            stringify!(prop2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop3) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARPARAMETER),
            "::",
            stringify!(prop3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop4) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARPARAMETER),
            "::",
            stringify!(prop4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop_states) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARPARAMETER),
            "::",
            stringify!(prop_states)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parameter_base_location) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARPARAMETER),
            "::",
            stringify!(parameter_base_location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upd_basept) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARPARAMETER),
            "::",
            stringify!(upd_basept)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).basept) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARPARAMETER),
            "::",
            stringify!(basept)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upd_endpt) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARPARAMETER),
            "::",
            stringify!(upd_endpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endpt) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARPARAMETER),
            "::",
            stringify!(endpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).distance_name) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARPARAMETER),
            "::",
            stringify!(distance_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).distance_desc) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARPARAMETER),
            "::",
            stringify!(distance_desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).distance) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARPARAMETER),
            "::",
            stringify!(distance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value_set) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLINEARPARAMETER),
            "::",
            stringify!(value_set)
        )
    );
}
pub type Dwg_Object_BLOCKLINEARPARAMETER = _dwg_object_BLOCKLINEARPARAMETER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_BLOCKLOOKUPACTION_lut {
    pub parent: *mut _dwg_object_BLOCKLOOKUPACTION,
    #[doc = "< DXF 94-96, 303-305"]
    pub conn_pts: [Dwg_BLOCKACTION_connectionpts; 3usize],
    pub b282: BITCODE_B,
    pub b281: BITCODE_B,
}
#[test]
fn bindgen_test_layout__dwg_BLOCKLOOKUPACTION_lut() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_BLOCKLOOKUPACTION_lut> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_BLOCKLOOKUPACTION_lut>(),
        64usize,
        concat!("Size of: ", stringify!(_dwg_BLOCKLOOKUPACTION_lut))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_BLOCKLOOKUPACTION_lut>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_BLOCKLOOKUPACTION_lut))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_BLOCKLOOKUPACTION_lut),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).conn_pts) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_BLOCKLOOKUPACTION_lut),
            "::",
            stringify!(conn_pts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b282) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_BLOCKLOOKUPACTION_lut),
            "::",
            stringify!(b282)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b281) as usize - ptr as usize },
        57usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_BLOCKLOOKUPACTION_lut),
            "::",
            stringify!(b281)
        )
    );
}
pub type Dwg_BLOCKLOOKUPACTION_lut = _dwg_BLOCKLOOKUPACTION_lut;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_BLOCKLOOKUPACTION {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub name: BITCODE_TV,
    pub be_major: BITCODE_BL,
    pub be_minor: BITCODE_BL,
    pub eed1071: BITCODE_BL,
    pub display_location: BITCODE_3BD,
    pub num_actions: BITCODE_BL,
    pub actions: *mut BITCODE_BL,
    pub num_deps: BITCODE_BL,
    pub deps: *mut BITCODE_H,
    pub numelems: BITCODE_BL,
    pub numrows: BITCODE_BL,
    pub numcols: BITCODE_BL,
    pub lut: *mut Dwg_BLOCKLOOKUPACTION_lut,
    pub exprs: *mut BITCODE_TV,
    pub b280: BITCODE_B,
}
#[test]
fn bindgen_test_layout__dwg_object_BLOCKLOOKUPACTION() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_BLOCKLOOKUPACTION> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_BLOCKLOOKUPACTION>(),
        176usize,
        concat!("Size of: ", stringify!(_dwg_object_BLOCKLOOKUPACTION))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_BLOCKLOOKUPACTION>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_BLOCKLOOKUPACTION))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLOOKUPACTION),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLOOKUPACTION),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLOOKUPACTION),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_major) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLOOKUPACTION),
            "::",
            stringify!(be_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_minor) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLOOKUPACTION),
            "::",
            stringify!(be_minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eed1071) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLOOKUPACTION),
            "::",
            stringify!(eed1071)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).display_location) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLOOKUPACTION),
            "::",
            stringify!(display_location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_actions) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLOOKUPACTION),
            "::",
            stringify!(num_actions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actions) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLOOKUPACTION),
            "::",
            stringify!(actions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_deps) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLOOKUPACTION),
            "::",
            stringify!(num_deps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deps) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLOOKUPACTION),
            "::",
            stringify!(deps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numelems) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLOOKUPACTION),
            "::",
            stringify!(numelems)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numrows) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLOOKUPACTION),
            "::",
            stringify!(numrows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numcols) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLOOKUPACTION),
            "::",
            stringify!(numcols)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lut) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLOOKUPACTION),
            "::",
            stringify!(lut)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exprs) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLOOKUPACTION),
            "::",
            stringify!(exprs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b280) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLOOKUPACTION),
            "::",
            stringify!(b280)
        )
    );
}
pub type Dwg_Object_BLOCKLOOKUPACTION = _dwg_object_BLOCKLOOKUPACTION;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_BLOCKLOOKUPGRIP {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub name: BITCODE_TV,
    pub be_major: BITCODE_BL,
    pub be_minor: BITCODE_BL,
    pub eed1071: BITCODE_BL,
    pub bg_bl91: BITCODE_BL,
    pub bg_bl92: BITCODE_BL,
    pub bg_location: BITCODE_3BD,
    pub bg_insert_cycling: BITCODE_B,
    pub bg_insert_cycling_weight: BITCODE_BLd,
}
#[test]
fn bindgen_test_layout__dwg_object_BLOCKLOOKUPGRIP() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_BLOCKLOOKUPGRIP> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_BLOCKLOOKUPGRIP>(),
        120usize,
        concat!("Size of: ", stringify!(_dwg_object_BLOCKLOOKUPGRIP))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_BLOCKLOOKUPGRIP>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_BLOCKLOOKUPGRIP))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLOOKUPGRIP),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLOOKUPGRIP),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLOOKUPGRIP),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_major) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLOOKUPGRIP),
            "::",
            stringify!(be_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_minor) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLOOKUPGRIP),
            "::",
            stringify!(be_minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eed1071) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLOOKUPGRIP),
            "::",
            stringify!(eed1071)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_bl91) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLOOKUPGRIP),
            "::",
            stringify!(bg_bl91)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_bl92) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLOOKUPGRIP),
            "::",
            stringify!(bg_bl92)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_location) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLOOKUPGRIP),
            "::",
            stringify!(bg_location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_insert_cycling) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLOOKUPGRIP),
            "::",
            stringify!(bg_insert_cycling)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_insert_cycling_weight) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLOOKUPGRIP),
            "::",
            stringify!(bg_insert_cycling_weight)
        )
    );
}
pub type Dwg_Object_BLOCKLOOKUPGRIP = _dwg_object_BLOCKLOOKUPGRIP;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_BLOCKLOOKUPPARAMETER {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub name: BITCODE_TV,
    pub be_major: BITCODE_BL,
    pub be_minor: BITCODE_BL,
    pub eed1071: BITCODE_BL,
    pub show_properties: BITCODE_B,
    pub chain_actions: BITCODE_B,
    pub def_pt: BITCODE_3BD,
    pub num_propinfos: BITCODE_BL,
    pub prop1: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop2: Dwg_BLOCKPARAMETER_PropInfo,
    #[doc = "< DXF 303"]
    pub lookup_name: BITCODE_TV,
    #[doc = "< DXF 304"]
    pub lookup_desc: BITCODE_TV,
    #[doc = "< DXF 94 ??"]
    pub index: BITCODE_BL,
    pub unknown_t: BITCODE_TV,
}
#[test]
fn bindgen_test_layout__dwg_object_BLOCKLOOKUPPARAMETER() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_BLOCKLOOKUPPARAMETER> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_BLOCKLOOKUPPARAMETER>(),
        176usize,
        concat!("Size of: ", stringify!(_dwg_object_BLOCKLOOKUPPARAMETER))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_BLOCKLOOKUPPARAMETER>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_BLOCKLOOKUPPARAMETER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLOOKUPPARAMETER),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLOOKUPPARAMETER),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLOOKUPPARAMETER),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_major) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLOOKUPPARAMETER),
            "::",
            stringify!(be_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_minor) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLOOKUPPARAMETER),
            "::",
            stringify!(be_minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eed1071) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLOOKUPPARAMETER),
            "::",
            stringify!(eed1071)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).show_properties) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLOOKUPPARAMETER),
            "::",
            stringify!(show_properties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chain_actions) as usize - ptr as usize },
        77usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLOOKUPPARAMETER),
            "::",
            stringify!(chain_actions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_pt) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLOOKUPPARAMETER),
            "::",
            stringify!(def_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_propinfos) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLOOKUPPARAMETER),
            "::",
            stringify!(num_propinfos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop1) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLOOKUPPARAMETER),
            "::",
            stringify!(prop1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop2) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLOOKUPPARAMETER),
            "::",
            stringify!(prop2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lookup_name) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLOOKUPPARAMETER),
            "::",
            stringify!(lookup_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lookup_desc) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLOOKUPPARAMETER),
            "::",
            stringify!(lookup_desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLOOKUPPARAMETER),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_t) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKLOOKUPPARAMETER),
            "::",
            stringify!(unknown_t)
        )
    );
}
pub type Dwg_Object_BLOCKLOOKUPPARAMETER = _dwg_object_BLOCKLOOKUPPARAMETER;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_BLOCKMOVEACTION {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub name: BITCODE_TV,
    pub be_major: BITCODE_BL,
    pub be_minor: BITCODE_BL,
    pub eed1071: BITCODE_BL,
    pub display_location: BITCODE_3BD,
    pub num_actions: BITCODE_BL,
    pub actions: *mut BITCODE_BL,
    pub num_deps: BITCODE_BL,
    pub deps: *mut BITCODE_H,
    #[doc = "< DXF 92-93, 301-302"]
    pub conn_pts: [Dwg_BLOCKACTION_connectionpts; 2usize],
    pub action_offset_x: BITCODE_BD,
    pub action_offset_y: BITCODE_BD,
    pub angle_offset: BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_object_BLOCKMOVEACTION() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_BLOCKMOVEACTION> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_BLOCKMOVEACTION>(),
        192usize,
        concat!("Size of: ", stringify!(_dwg_object_BLOCKMOVEACTION))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_BLOCKMOVEACTION>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_BLOCKMOVEACTION))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKMOVEACTION),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKMOVEACTION),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKMOVEACTION),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_major) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKMOVEACTION),
            "::",
            stringify!(be_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_minor) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKMOVEACTION),
            "::",
            stringify!(be_minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eed1071) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKMOVEACTION),
            "::",
            stringify!(eed1071)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).display_location) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKMOVEACTION),
            "::",
            stringify!(display_location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_actions) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKMOVEACTION),
            "::",
            stringify!(num_actions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actions) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKMOVEACTION),
            "::",
            stringify!(actions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_deps) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKMOVEACTION),
            "::",
            stringify!(num_deps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deps) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKMOVEACTION),
            "::",
            stringify!(deps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).conn_pts) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKMOVEACTION),
            "::",
            stringify!(conn_pts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).action_offset_x) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKMOVEACTION),
            "::",
            stringify!(action_offset_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).action_offset_y) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKMOVEACTION),
            "::",
            stringify!(action_offset_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).angle_offset) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKMOVEACTION),
            "::",
            stringify!(angle_offset)
        )
    );
}
pub type Dwg_Object_BLOCKMOVEACTION = _dwg_object_BLOCKMOVEACTION;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_BLOCKPOINTPARAMETER {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub name: BITCODE_TV,
    pub be_major: BITCODE_BL,
    pub be_minor: BITCODE_BL,
    pub eed1071: BITCODE_BL,
    pub show_properties: BITCODE_B,
    pub chain_actions: BITCODE_B,
    pub def_pt: BITCODE_3BD,
    pub num_propinfos: BITCODE_BL,
    pub prop1: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop2: Dwg_BLOCKPARAMETER_PropInfo,
    pub position_name: BITCODE_TV,
    pub position_desc: BITCODE_TV,
    pub def_label_pt: BITCODE_3BD,
}
#[test]
fn bindgen_test_layout__dwg_object_BLOCKPOINTPARAMETER() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_BLOCKPOINTPARAMETER> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_BLOCKPOINTPARAMETER>(),
        184usize,
        concat!("Size of: ", stringify!(_dwg_object_BLOCKPOINTPARAMETER))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_BLOCKPOINTPARAMETER>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_BLOCKPOINTPARAMETER))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOINTPARAMETER),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOINTPARAMETER),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOINTPARAMETER),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_major) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOINTPARAMETER),
            "::",
            stringify!(be_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_minor) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOINTPARAMETER),
            "::",
            stringify!(be_minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eed1071) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOINTPARAMETER),
            "::",
            stringify!(eed1071)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).show_properties) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOINTPARAMETER),
            "::",
            stringify!(show_properties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chain_actions) as usize - ptr as usize },
        77usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOINTPARAMETER),
            "::",
            stringify!(chain_actions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_pt) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOINTPARAMETER),
            "::",
            stringify!(def_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_propinfos) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOINTPARAMETER),
            "::",
            stringify!(num_propinfos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop1) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOINTPARAMETER),
            "::",
            stringify!(prop1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop2) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOINTPARAMETER),
            "::",
            stringify!(prop2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).position_name) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOINTPARAMETER),
            "::",
            stringify!(position_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).position_desc) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOINTPARAMETER),
            "::",
            stringify!(position_desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_label_pt) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOINTPARAMETER),
            "::",
            stringify!(def_label_pt)
        )
    );
}
pub type Dwg_Object_BLOCKPOINTPARAMETER = _dwg_object_BLOCKPOINTPARAMETER;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_BLOCKPOLARGRIP {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub name: BITCODE_TV,
    pub be_major: BITCODE_BL,
    pub be_minor: BITCODE_BL,
    pub eed1071: BITCODE_BL,
    pub bg_bl91: BITCODE_BL,
    pub bg_bl92: BITCODE_BL,
    pub bg_location: BITCODE_3BD,
    pub bg_insert_cycling: BITCODE_B,
    pub bg_insert_cycling_weight: BITCODE_BLd,
}
#[test]
fn bindgen_test_layout__dwg_object_BLOCKPOLARGRIP() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_BLOCKPOLARGRIP> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_BLOCKPOLARGRIP>(),
        120usize,
        concat!("Size of: ", stringify!(_dwg_object_BLOCKPOLARGRIP))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_BLOCKPOLARGRIP>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_BLOCKPOLARGRIP))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARGRIP),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARGRIP),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARGRIP),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_major) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARGRIP),
            "::",
            stringify!(be_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_minor) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARGRIP),
            "::",
            stringify!(be_minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eed1071) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARGRIP),
            "::",
            stringify!(eed1071)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_bl91) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARGRIP),
            "::",
            stringify!(bg_bl91)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_bl92) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARGRIP),
            "::",
            stringify!(bg_bl92)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_location) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARGRIP),
            "::",
            stringify!(bg_location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_insert_cycling) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARGRIP),
            "::",
            stringify!(bg_insert_cycling)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_insert_cycling_weight) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARGRIP),
            "::",
            stringify!(bg_insert_cycling_weight)
        )
    );
}
pub type Dwg_Object_BLOCKPOLARGRIP = _dwg_object_BLOCKPOLARGRIP;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_BLOCKPOLARPARAMETER {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub name: BITCODE_TV,
    pub be_major: BITCODE_BL,
    pub be_minor: BITCODE_BL,
    pub eed1071: BITCODE_BL,
    pub show_properties: BITCODE_B,
    pub chain_actions: BITCODE_B,
    pub def_basept: BITCODE_3BD,
    pub def_endpt: BITCODE_3BD,
    pub prop1: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop2: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop3: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop4: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop_states: *mut BITCODE_BL,
    pub parameter_base_location: BITCODE_BS,
    pub upd_basept: BITCODE_3BD,
    pub basept: BITCODE_3BD,
    pub upd_endpt: BITCODE_3BD,
    pub endpt: BITCODE_3BD,
    #[doc = "< DXF 305"]
    pub angle_name: BITCODE_TV,
    #[doc = "< DXF 306"]
    pub angle_desc: BITCODE_TV,
    #[doc = "< DXF 305"]
    pub distance_name: BITCODE_TV,
    #[doc = "< DXF 306"]
    pub distance_desc: BITCODE_TV,
    #[doc = "< DXF 140"]
    pub offset: BITCODE_BD,
    pub angle_value_set: Dwg_BLOCKPARAMVALUESET,
    pub distance_value_set: Dwg_BLOCKPARAMVALUESET,
}
#[test]
fn bindgen_test_layout__dwg_object_BLOCKPOLARPARAMETER() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_BLOCKPOLARPARAMETER> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_BLOCKPOLARPARAMETER>(),
        456usize,
        concat!("Size of: ", stringify!(_dwg_object_BLOCKPOLARPARAMETER))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_BLOCKPOLARPARAMETER>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_BLOCKPOLARPARAMETER))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARPARAMETER),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARPARAMETER),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARPARAMETER),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_major) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARPARAMETER),
            "::",
            stringify!(be_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_minor) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARPARAMETER),
            "::",
            stringify!(be_minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eed1071) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARPARAMETER),
            "::",
            stringify!(eed1071)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).show_properties) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARPARAMETER),
            "::",
            stringify!(show_properties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chain_actions) as usize - ptr as usize },
        77usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARPARAMETER),
            "::",
            stringify!(chain_actions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_basept) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARPARAMETER),
            "::",
            stringify!(def_basept)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_endpt) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARPARAMETER),
            "::",
            stringify!(def_endpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop1) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARPARAMETER),
            "::",
            stringify!(prop1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop2) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARPARAMETER),
            "::",
            stringify!(prop2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop3) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARPARAMETER),
            "::",
            stringify!(prop3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop4) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARPARAMETER),
            "::",
            stringify!(prop4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop_states) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARPARAMETER),
            "::",
            stringify!(prop_states)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parameter_base_location) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARPARAMETER),
            "::",
            stringify!(parameter_base_location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upd_basept) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARPARAMETER),
            "::",
            stringify!(upd_basept)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).basept) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARPARAMETER),
            "::",
            stringify!(basept)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upd_endpt) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARPARAMETER),
            "::",
            stringify!(upd_endpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endpt) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARPARAMETER),
            "::",
            stringify!(endpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).angle_name) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARPARAMETER),
            "::",
            stringify!(angle_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).angle_desc) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARPARAMETER),
            "::",
            stringify!(angle_desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).distance_name) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARPARAMETER),
            "::",
            stringify!(distance_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).distance_desc) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARPARAMETER),
            "::",
            stringify!(distance_desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARPARAMETER),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).angle_value_set) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARPARAMETER),
            "::",
            stringify!(angle_value_set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).distance_value_set) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARPARAMETER),
            "::",
            stringify!(distance_value_set)
        )
    );
}
pub type Dwg_Object_BLOCKPOLARPARAMETER = _dwg_object_BLOCKPOLARPARAMETER;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_BLOCKPOLARSTRETCHACTION {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub name: BITCODE_TV,
    pub be_major: BITCODE_BL,
    pub be_minor: BITCODE_BL,
    pub eed1071: BITCODE_BL,
    pub display_location: BITCODE_3BD,
    pub num_actions: BITCODE_BL,
    pub actions: *mut BITCODE_BL,
    pub num_deps: BITCODE_BL,
    pub deps: *mut BITCODE_H,
    #[doc = "< DXF 92-97, 301-306"]
    pub conn_pts: [Dwg_BLOCKACTION_connectionpts; 6usize],
    pub num_pts: BITCODE_BL,
    pub pts: *mut BITCODE_2RD,
    pub num_hdls: BITCODE_BL,
    pub hdls: *mut BITCODE_H,
    pub shorts: *mut BITCODE_BS,
    pub num_codes: BITCODE_BL,
    pub codes: *mut BITCODE_BL,
}
#[test]
fn bindgen_test_layout__dwg_object_BLOCKPOLARSTRETCHACTION() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_BLOCKPOLARSTRETCHACTION> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_BLOCKPOLARSTRETCHACTION>(),
        288usize,
        concat!("Size of: ", stringify!(_dwg_object_BLOCKPOLARSTRETCHACTION))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_BLOCKPOLARSTRETCHACTION>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_BLOCKPOLARSTRETCHACTION)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARSTRETCHACTION),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARSTRETCHACTION),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARSTRETCHACTION),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_major) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARSTRETCHACTION),
            "::",
            stringify!(be_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_minor) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARSTRETCHACTION),
            "::",
            stringify!(be_minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eed1071) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARSTRETCHACTION),
            "::",
            stringify!(eed1071)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).display_location) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARSTRETCHACTION),
            "::",
            stringify!(display_location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_actions) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARSTRETCHACTION),
            "::",
            stringify!(num_actions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actions) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARSTRETCHACTION),
            "::",
            stringify!(actions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_deps) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARSTRETCHACTION),
            "::",
            stringify!(num_deps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deps) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARSTRETCHACTION),
            "::",
            stringify!(deps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).conn_pts) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARSTRETCHACTION),
            "::",
            stringify!(conn_pts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_pts) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARSTRETCHACTION),
            "::",
            stringify!(num_pts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pts) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARSTRETCHACTION),
            "::",
            stringify!(pts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_hdls) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARSTRETCHACTION),
            "::",
            stringify!(num_hdls)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdls) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARSTRETCHACTION),
            "::",
            stringify!(hdls)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shorts) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARSTRETCHACTION),
            "::",
            stringify!(shorts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_codes) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARSTRETCHACTION),
            "::",
            stringify!(num_codes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).codes) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPOLARSTRETCHACTION),
            "::",
            stringify!(codes)
        )
    );
}
pub type Dwg_Object_BLOCKPOLARSTRETCHACTION = _dwg_object_BLOCKPOLARSTRETCHACTION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_BLOCKPROPERTIESTABLE {
    pub parent: *mut _dwg_object_object,
}
#[test]
fn bindgen_test_layout__dwg_object_BLOCKPROPERTIESTABLE() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_BLOCKPROPERTIESTABLE> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_BLOCKPROPERTIESTABLE>(),
        8usize,
        concat!("Size of: ", stringify!(_dwg_object_BLOCKPROPERTIESTABLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_BLOCKPROPERTIESTABLE>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_BLOCKPROPERTIESTABLE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPROPERTIESTABLE),
            "::",
            stringify!(parent)
        )
    );
}
pub type Dwg_Object_BLOCKPROPERTIESTABLE = _dwg_object_BLOCKPROPERTIESTABLE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_BLOCKPROPERTIESTABLEGRIP {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub name: BITCODE_TV,
    pub be_major: BITCODE_BL,
    pub be_minor: BITCODE_BL,
    pub eed1071: BITCODE_BL,
    pub bg_bl91: BITCODE_BL,
    pub bg_bl92: BITCODE_BL,
    pub bg_location: BITCODE_3BD,
    pub bg_insert_cycling: BITCODE_B,
    pub bg_insert_cycling_weight: BITCODE_BLd,
}
#[test]
fn bindgen_test_layout__dwg_object_BLOCKPROPERTIESTABLEGRIP() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_BLOCKPROPERTIESTABLEGRIP> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_BLOCKPROPERTIESTABLEGRIP>(),
        120usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_object_BLOCKPROPERTIESTABLEGRIP)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_BLOCKPROPERTIESTABLEGRIP>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_BLOCKPROPERTIESTABLEGRIP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPROPERTIESTABLEGRIP),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPROPERTIESTABLEGRIP),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPROPERTIESTABLEGRIP),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_major) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPROPERTIESTABLEGRIP),
            "::",
            stringify!(be_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_minor) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPROPERTIESTABLEGRIP),
            "::",
            stringify!(be_minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eed1071) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPROPERTIESTABLEGRIP),
            "::",
            stringify!(eed1071)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_bl91) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPROPERTIESTABLEGRIP),
            "::",
            stringify!(bg_bl91)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_bl92) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPROPERTIESTABLEGRIP),
            "::",
            stringify!(bg_bl92)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_location) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPROPERTIESTABLEGRIP),
            "::",
            stringify!(bg_location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_insert_cycling) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPROPERTIESTABLEGRIP),
            "::",
            stringify!(bg_insert_cycling)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_insert_cycling_weight) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKPROPERTIESTABLEGRIP),
            "::",
            stringify!(bg_insert_cycling_weight)
        )
    );
}
pub type Dwg_Object_BLOCKPROPERTIESTABLEGRIP = _dwg_object_BLOCKPROPERTIESTABLEGRIP;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_BLOCKREPRESENTATION {
    pub parent: *mut _dwg_object_object,
    pub flag: BITCODE_BS,
    pub block: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_object_BLOCKREPRESENTATION() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_BLOCKREPRESENTATION> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_BLOCKREPRESENTATION>(),
        24usize,
        concat!("Size of: ", stringify!(_dwg_object_BLOCKREPRESENTATION))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_BLOCKREPRESENTATION>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_BLOCKREPRESENTATION))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKREPRESENTATION),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKREPRESENTATION),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKREPRESENTATION),
            "::",
            stringify!(block)
        )
    );
}
pub type Dwg_Object_BLOCKREPRESENTATION = _dwg_object_BLOCKREPRESENTATION;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_BLOCKROTATEACTION {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub name: BITCODE_TV,
    pub be_major: BITCODE_BL,
    pub be_minor: BITCODE_BL,
    pub eed1071: BITCODE_BL,
    pub display_location: BITCODE_3BD,
    pub num_actions: BITCODE_BL,
    pub actions: *mut BITCODE_BL,
    pub num_deps: BITCODE_BL,
    pub deps: *mut BITCODE_H,
    pub offset: BITCODE_3BD,
    pub conn_pts: [Dwg_BLOCKACTION_connectionpts; 3usize],
    pub dependent: BITCODE_B,
    pub base_pt: BITCODE_3BD,
}
#[test]
fn bindgen_test_layout__dwg_object_BLOCKROTATEACTION() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_BLOCKROTATEACTION> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_BLOCKROTATEACTION>(),
        240usize,
        concat!("Size of: ", stringify!(_dwg_object_BLOCKROTATEACTION))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_BLOCKROTATEACTION>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_BLOCKROTATEACTION))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATEACTION),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATEACTION),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATEACTION),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_major) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATEACTION),
            "::",
            stringify!(be_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_minor) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATEACTION),
            "::",
            stringify!(be_minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eed1071) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATEACTION),
            "::",
            stringify!(eed1071)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).display_location) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATEACTION),
            "::",
            stringify!(display_location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_actions) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATEACTION),
            "::",
            stringify!(num_actions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actions) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATEACTION),
            "::",
            stringify!(actions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_deps) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATEACTION),
            "::",
            stringify!(num_deps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deps) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATEACTION),
            "::",
            stringify!(deps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATEACTION),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).conn_pts) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATEACTION),
            "::",
            stringify!(conn_pts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dependent) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATEACTION),
            "::",
            stringify!(dependent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_pt) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATEACTION),
            "::",
            stringify!(base_pt)
        )
    );
}
pub type Dwg_Object_BLOCKROTATEACTION = _dwg_object_BLOCKROTATEACTION;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_BLOCKROTATIONGRIP {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub name: BITCODE_TV,
    pub be_major: BITCODE_BL,
    pub be_minor: BITCODE_BL,
    pub eed1071: BITCODE_BL,
    pub bg_bl91: BITCODE_BL,
    pub bg_bl92: BITCODE_BL,
    pub bg_location: BITCODE_3BD,
    pub bg_insert_cycling: BITCODE_B,
    pub bg_insert_cycling_weight: BITCODE_BLd,
}
#[test]
fn bindgen_test_layout__dwg_object_BLOCKROTATIONGRIP() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_BLOCKROTATIONGRIP> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_BLOCKROTATIONGRIP>(),
        120usize,
        concat!("Size of: ", stringify!(_dwg_object_BLOCKROTATIONGRIP))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_BLOCKROTATIONGRIP>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_BLOCKROTATIONGRIP))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATIONGRIP),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATIONGRIP),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATIONGRIP),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_major) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATIONGRIP),
            "::",
            stringify!(be_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_minor) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATIONGRIP),
            "::",
            stringify!(be_minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eed1071) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATIONGRIP),
            "::",
            stringify!(eed1071)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_bl91) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATIONGRIP),
            "::",
            stringify!(bg_bl91)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_bl92) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATIONGRIP),
            "::",
            stringify!(bg_bl92)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_location) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATIONGRIP),
            "::",
            stringify!(bg_location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_insert_cycling) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATIONGRIP),
            "::",
            stringify!(bg_insert_cycling)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_insert_cycling_weight) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATIONGRIP),
            "::",
            stringify!(bg_insert_cycling_weight)
        )
    );
}
pub type Dwg_Object_BLOCKROTATIONGRIP = _dwg_object_BLOCKROTATIONGRIP;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_BLOCKROTATIONPARAMETER {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub name: BITCODE_TV,
    pub be_major: BITCODE_BL,
    pub be_minor: BITCODE_BL,
    pub eed1071: BITCODE_BL,
    pub show_properties: BITCODE_B,
    pub chain_actions: BITCODE_B,
    pub def_basept: BITCODE_3BD,
    pub def_endpt: BITCODE_3BD,
    pub prop1: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop2: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop3: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop4: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop_states: *mut BITCODE_BL,
    pub parameter_base_location: BITCODE_BS,
    pub upd_basept: BITCODE_3BD,
    pub basept: BITCODE_3BD,
    pub upd_endpt: BITCODE_3BD,
    pub endpt: BITCODE_3BD,
    pub def_base_angle_pt: BITCODE_3BD,
    #[doc = "< DXF 305"]
    pub angle_name: BITCODE_TV,
    #[doc = "< DXF 306"]
    pub angle_desc: BITCODE_TV,
    #[doc = "< DXF 306"]
    pub angle: BITCODE_BD,
    pub angle_value_set: Dwg_BLOCKPARAMVALUESET,
}
#[test]
fn bindgen_test_layout__dwg_object_BLOCKROTATIONPARAMETER() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_BLOCKROTATIONPARAMETER> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_BLOCKROTATIONPARAMETER>(),
        408usize,
        concat!("Size of: ", stringify!(_dwg_object_BLOCKROTATIONPARAMETER))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_BLOCKROTATIONPARAMETER>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_BLOCKROTATIONPARAMETER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATIONPARAMETER),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATIONPARAMETER),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATIONPARAMETER),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_major) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATIONPARAMETER),
            "::",
            stringify!(be_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_minor) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATIONPARAMETER),
            "::",
            stringify!(be_minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eed1071) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATIONPARAMETER),
            "::",
            stringify!(eed1071)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).show_properties) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATIONPARAMETER),
            "::",
            stringify!(show_properties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chain_actions) as usize - ptr as usize },
        77usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATIONPARAMETER),
            "::",
            stringify!(chain_actions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_basept) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATIONPARAMETER),
            "::",
            stringify!(def_basept)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_endpt) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATIONPARAMETER),
            "::",
            stringify!(def_endpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop1) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATIONPARAMETER),
            "::",
            stringify!(prop1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop2) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATIONPARAMETER),
            "::",
            stringify!(prop2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop3) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATIONPARAMETER),
            "::",
            stringify!(prop3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop4) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATIONPARAMETER),
            "::",
            stringify!(prop4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop_states) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATIONPARAMETER),
            "::",
            stringify!(prop_states)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parameter_base_location) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATIONPARAMETER),
            "::",
            stringify!(parameter_base_location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upd_basept) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATIONPARAMETER),
            "::",
            stringify!(upd_basept)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).basept) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATIONPARAMETER),
            "::",
            stringify!(basept)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upd_endpt) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATIONPARAMETER),
            "::",
            stringify!(upd_endpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endpt) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATIONPARAMETER),
            "::",
            stringify!(endpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_base_angle_pt) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATIONPARAMETER),
            "::",
            stringify!(def_base_angle_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).angle_name) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATIONPARAMETER),
            "::",
            stringify!(angle_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).angle_desc) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATIONPARAMETER),
            "::",
            stringify!(angle_desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).angle) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATIONPARAMETER),
            "::",
            stringify!(angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).angle_value_set) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKROTATIONPARAMETER),
            "::",
            stringify!(angle_value_set)
        )
    );
}
pub type Dwg_Object_BLOCKROTATIONPARAMETER = _dwg_object_BLOCKROTATIONPARAMETER;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_BLOCKSCALEACTION {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub name: BITCODE_TV,
    pub be_major: BITCODE_BL,
    pub be_minor: BITCODE_BL,
    pub eed1071: BITCODE_BL,
    pub display_location: BITCODE_3BD,
    pub num_actions: BITCODE_BL,
    pub actions: *mut BITCODE_BL,
    pub num_deps: BITCODE_BL,
    pub deps: *mut BITCODE_H,
    pub offset: BITCODE_3BD,
    pub conn_pts: [Dwg_BLOCKACTION_connectionpts; 5usize],
    pub dependent: BITCODE_B,
    pub base_pt: BITCODE_3BD,
}
#[test]
fn bindgen_test_layout__dwg_object_BLOCKSCALEACTION() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_BLOCKSCALEACTION> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_BLOCKSCALEACTION>(),
        272usize,
        concat!("Size of: ", stringify!(_dwg_object_BLOCKSCALEACTION))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_BLOCKSCALEACTION>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_BLOCKSCALEACTION))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKSCALEACTION),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKSCALEACTION),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKSCALEACTION),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_major) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKSCALEACTION),
            "::",
            stringify!(be_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_minor) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKSCALEACTION),
            "::",
            stringify!(be_minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eed1071) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKSCALEACTION),
            "::",
            stringify!(eed1071)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).display_location) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKSCALEACTION),
            "::",
            stringify!(display_location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_actions) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKSCALEACTION),
            "::",
            stringify!(num_actions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actions) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKSCALEACTION),
            "::",
            stringify!(actions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_deps) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKSCALEACTION),
            "::",
            stringify!(num_deps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deps) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKSCALEACTION),
            "::",
            stringify!(deps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKSCALEACTION),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).conn_pts) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKSCALEACTION),
            "::",
            stringify!(conn_pts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dependent) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKSCALEACTION),
            "::",
            stringify!(dependent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_pt) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKSCALEACTION),
            "::",
            stringify!(base_pt)
        )
    );
}
pub type Dwg_Object_BLOCKSCALEACTION = _dwg_object_BLOCKSCALEACTION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_BLOCKSTRETCHACTION_handles {
    pub parent: *mut _dwg_object_BLOCKSTRETCHACTION,
    pub hdl: BITCODE_H,
    pub shrt: BITCODE_BS,
    pub long1: BITCODE_BL,
    pub long2: BITCODE_BL,
}
#[test]
fn bindgen_test_layout__dwg_BLOCKSTRETCHACTION_handles() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_BLOCKSTRETCHACTION_handles> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_BLOCKSTRETCHACTION_handles>(),
        32usize,
        concat!("Size of: ", stringify!(_dwg_BLOCKSTRETCHACTION_handles))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_BLOCKSTRETCHACTION_handles>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_BLOCKSTRETCHACTION_handles))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_BLOCKSTRETCHACTION_handles),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdl) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_BLOCKSTRETCHACTION_handles),
            "::",
            stringify!(hdl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shrt) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_BLOCKSTRETCHACTION_handles),
            "::",
            stringify!(shrt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).long1) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_BLOCKSTRETCHACTION_handles),
            "::",
            stringify!(long1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).long2) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_BLOCKSTRETCHACTION_handles),
            "::",
            stringify!(long2)
        )
    );
}
pub type Dwg_BLOCKSTRETCHACTION_handles = _dwg_BLOCKSTRETCHACTION_handles;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_BLOCKSTRETCHACTION_codes {
    pub parent: *mut _dwg_object_BLOCKSTRETCHACTION,
    pub bl95: BITCODE_BL,
    pub bs76: BITCODE_BS,
    pub bl94: BITCODE_BL,
}
#[test]
fn bindgen_test_layout__dwg_BLOCKSTRETCHACTION_codes() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_BLOCKSTRETCHACTION_codes> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_BLOCKSTRETCHACTION_codes>(),
        24usize,
        concat!("Size of: ", stringify!(_dwg_BLOCKSTRETCHACTION_codes))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_BLOCKSTRETCHACTION_codes>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_BLOCKSTRETCHACTION_codes))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_BLOCKSTRETCHACTION_codes),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bl95) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_BLOCKSTRETCHACTION_codes),
            "::",
            stringify!(bl95)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bs76) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_BLOCKSTRETCHACTION_codes),
            "::",
            stringify!(bs76)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bl94) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_BLOCKSTRETCHACTION_codes),
            "::",
            stringify!(bl94)
        )
    );
}
pub type Dwg_BLOCKSTRETCHACTION_codes = _dwg_BLOCKSTRETCHACTION_codes;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_BLOCKSTRETCHACTION {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub name: BITCODE_TV,
    pub be_major: BITCODE_BL,
    pub be_minor: BITCODE_BL,
    pub eed1071: BITCODE_BL,
    pub display_location: BITCODE_3BD,
    pub num_actions: BITCODE_BL,
    pub actions: *mut BITCODE_BL,
    pub num_deps: BITCODE_BL,
    pub deps: *mut BITCODE_H,
    #[doc = "< DXF 92-93, 301-302"]
    pub conn_pts: [Dwg_BLOCKACTION_connectionpts; 2usize],
    pub num_pts: BITCODE_BL,
    pub pts: *mut BITCODE_2RD,
    pub num_hdls: BITCODE_BL,
    #[doc = "< DXF 331, 74, 94, 94"]
    pub hdls: *mut Dwg_BLOCKSTRETCHACTION_handles,
    pub num_codes: BITCODE_BL,
    #[doc = "< DXF 95, 76, 94"]
    pub codes: *mut Dwg_BLOCKSTRETCHACTION_codes,
    pub action_offset_x: BITCODE_BD,
    pub action_offset_y: BITCODE_BD,
    pub angle_offset: BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_object_BLOCKSTRETCHACTION() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_BLOCKSTRETCHACTION> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_BLOCKSTRETCHACTION>(),
        240usize,
        concat!("Size of: ", stringify!(_dwg_object_BLOCKSTRETCHACTION))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_BLOCKSTRETCHACTION>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_BLOCKSTRETCHACTION))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKSTRETCHACTION),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKSTRETCHACTION),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKSTRETCHACTION),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_major) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKSTRETCHACTION),
            "::",
            stringify!(be_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_minor) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKSTRETCHACTION),
            "::",
            stringify!(be_minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eed1071) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKSTRETCHACTION),
            "::",
            stringify!(eed1071)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).display_location) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKSTRETCHACTION),
            "::",
            stringify!(display_location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_actions) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKSTRETCHACTION),
            "::",
            stringify!(num_actions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actions) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKSTRETCHACTION),
            "::",
            stringify!(actions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_deps) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKSTRETCHACTION),
            "::",
            stringify!(num_deps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deps) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKSTRETCHACTION),
            "::",
            stringify!(deps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).conn_pts) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKSTRETCHACTION),
            "::",
            stringify!(conn_pts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_pts) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKSTRETCHACTION),
            "::",
            stringify!(num_pts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pts) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKSTRETCHACTION),
            "::",
            stringify!(pts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_hdls) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKSTRETCHACTION),
            "::",
            stringify!(num_hdls)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdls) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKSTRETCHACTION),
            "::",
            stringify!(hdls)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_codes) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKSTRETCHACTION),
            "::",
            stringify!(num_codes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).codes) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKSTRETCHACTION),
            "::",
            stringify!(codes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).action_offset_x) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKSTRETCHACTION),
            "::",
            stringify!(action_offset_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).action_offset_y) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKSTRETCHACTION),
            "::",
            stringify!(action_offset_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).angle_offset) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKSTRETCHACTION),
            "::",
            stringify!(angle_offset)
        )
    );
}
pub type Dwg_Object_BLOCKSTRETCHACTION = _dwg_object_BLOCKSTRETCHACTION;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_BLOCKUSERPARAMETER {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub name: BITCODE_TV,
    pub be_major: BITCODE_BL,
    pub be_minor: BITCODE_BL,
    pub eed1071: BITCODE_BL,
    pub show_properties: BITCODE_B,
    pub chain_actions: BITCODE_B,
    pub def_pt: BITCODE_3BD,
    pub num_propinfos: BITCODE_BL,
    pub prop1: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop2: Dwg_BLOCKPARAMETER_PropInfo,
    #[doc = "< DXF 90"]
    pub flag: BITCODE_BS,
    #[doc = "< DXF 305"]
    pub assocvariable: BITCODE_H,
    #[doc = "< DXF 301"]
    pub expr: BITCODE_TV,
    pub value: Dwg_EvalVariant,
    #[doc = "< DXF 170 (already value.code)?"]
    pub type_: BITCODE_BS,
}
#[test]
fn bindgen_test_layout__dwg_object_BLOCKUSERPARAMETER() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_BLOCKUSERPARAMETER> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_BLOCKUSERPARAMETER>(),
        192usize,
        concat!("Size of: ", stringify!(_dwg_object_BLOCKUSERPARAMETER))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_BLOCKUSERPARAMETER>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_BLOCKUSERPARAMETER))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKUSERPARAMETER),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKUSERPARAMETER),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKUSERPARAMETER),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_major) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKUSERPARAMETER),
            "::",
            stringify!(be_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_minor) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKUSERPARAMETER),
            "::",
            stringify!(be_minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eed1071) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKUSERPARAMETER),
            "::",
            stringify!(eed1071)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).show_properties) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKUSERPARAMETER),
            "::",
            stringify!(show_properties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chain_actions) as usize - ptr as usize },
        77usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKUSERPARAMETER),
            "::",
            stringify!(chain_actions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_pt) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKUSERPARAMETER),
            "::",
            stringify!(def_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_propinfos) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKUSERPARAMETER),
            "::",
            stringify!(num_propinfos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop1) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKUSERPARAMETER),
            "::",
            stringify!(prop1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop2) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKUSERPARAMETER),
            "::",
            stringify!(prop2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKUSERPARAMETER),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).assocvariable) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKUSERPARAMETER),
            "::",
            stringify!(assocvariable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).expr) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKUSERPARAMETER),
            "::",
            stringify!(expr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKUSERPARAMETER),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKUSERPARAMETER),
            "::",
            stringify!(type_)
        )
    );
}
pub type Dwg_Object_BLOCKUSERPARAMETER = _dwg_object_BLOCKUSERPARAMETER;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_BLOCKXYGRIP {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub name: BITCODE_TV,
    pub be_major: BITCODE_BL,
    pub be_minor: BITCODE_BL,
    pub eed1071: BITCODE_BL,
    pub bg_bl91: BITCODE_BL,
    pub bg_bl92: BITCODE_BL,
    pub bg_location: BITCODE_3BD,
    pub bg_insert_cycling: BITCODE_B,
    pub bg_insert_cycling_weight: BITCODE_BLd,
}
#[test]
fn bindgen_test_layout__dwg_object_BLOCKXYGRIP() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_BLOCKXYGRIP> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_BLOCKXYGRIP>(),
        120usize,
        concat!("Size of: ", stringify!(_dwg_object_BLOCKXYGRIP))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_BLOCKXYGRIP>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_BLOCKXYGRIP))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKXYGRIP),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKXYGRIP),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKXYGRIP),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_major) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKXYGRIP),
            "::",
            stringify!(be_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_minor) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKXYGRIP),
            "::",
            stringify!(be_minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eed1071) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKXYGRIP),
            "::",
            stringify!(eed1071)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_bl91) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKXYGRIP),
            "::",
            stringify!(bg_bl91)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_bl92) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKXYGRIP),
            "::",
            stringify!(bg_bl92)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_location) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKXYGRIP),
            "::",
            stringify!(bg_location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_insert_cycling) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKXYGRIP),
            "::",
            stringify!(bg_insert_cycling)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_insert_cycling_weight) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKXYGRIP),
            "::",
            stringify!(bg_insert_cycling_weight)
        )
    );
}
pub type Dwg_Object_BLOCKXYGRIP = _dwg_object_BLOCKXYGRIP;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_BLOCKXYPARAMETER {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
    pub name: BITCODE_TV,
    pub be_major: BITCODE_BL,
    pub be_minor: BITCODE_BL,
    pub eed1071: BITCODE_BL,
    pub show_properties: BITCODE_B,
    pub chain_actions: BITCODE_B,
    pub def_basept: BITCODE_3BD,
    pub def_endpt: BITCODE_3BD,
    pub prop1: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop2: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop3: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop4: Dwg_BLOCKPARAMETER_PropInfo,
    pub prop_states: *mut BITCODE_BL,
    pub parameter_base_location: BITCODE_BS,
    pub upd_basept: BITCODE_3BD,
    pub basept: BITCODE_3BD,
    pub upd_endpt: BITCODE_3BD,
    pub endpt: BITCODE_3BD,
    pub x_label: BITCODE_TV,
    pub x_label_desc: BITCODE_TV,
    pub y_label: BITCODE_TV,
    pub y_label_desc: BITCODE_TV,
    pub x_value: BITCODE_BD,
    pub y_value: BITCODE_BD,
    pub x_value_set: Dwg_BLOCKPARAMVALUESET,
    pub y_value_set: Dwg_BLOCKPARAMVALUESET,
}
#[test]
fn bindgen_test_layout__dwg_object_BLOCKXYPARAMETER() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_BLOCKXYPARAMETER> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_BLOCKXYPARAMETER>(),
        464usize,
        concat!("Size of: ", stringify!(_dwg_object_BLOCKXYPARAMETER))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_BLOCKXYPARAMETER>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_BLOCKXYPARAMETER))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKXYPARAMETER),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKXYPARAMETER),
            "::",
            stringify!(evalexpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKXYPARAMETER),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_major) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKXYPARAMETER),
            "::",
            stringify!(be_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).be_minor) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKXYPARAMETER),
            "::",
            stringify!(be_minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eed1071) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKXYPARAMETER),
            "::",
            stringify!(eed1071)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).show_properties) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKXYPARAMETER),
            "::",
            stringify!(show_properties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chain_actions) as usize - ptr as usize },
        77usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKXYPARAMETER),
            "::",
            stringify!(chain_actions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_basept) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKXYPARAMETER),
            "::",
            stringify!(def_basept)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_endpt) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKXYPARAMETER),
            "::",
            stringify!(def_endpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop1) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKXYPARAMETER),
            "::",
            stringify!(prop1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop2) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKXYPARAMETER),
            "::",
            stringify!(prop2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop3) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKXYPARAMETER),
            "::",
            stringify!(prop3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop4) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKXYPARAMETER),
            "::",
            stringify!(prop4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop_states) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKXYPARAMETER),
            "::",
            stringify!(prop_states)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parameter_base_location) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKXYPARAMETER),
            "::",
            stringify!(parameter_base_location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upd_basept) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKXYPARAMETER),
            "::",
            stringify!(upd_basept)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).basept) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKXYPARAMETER),
            "::",
            stringify!(basept)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upd_endpt) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKXYPARAMETER),
            "::",
            stringify!(upd_endpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endpt) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKXYPARAMETER),
            "::",
            stringify!(endpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x_label) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKXYPARAMETER),
            "::",
            stringify!(x_label)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x_label_desc) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKXYPARAMETER),
            "::",
            stringify!(x_label_desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y_label) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKXYPARAMETER),
            "::",
            stringify!(y_label)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y_label_desc) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKXYPARAMETER),
            "::",
            stringify!(y_label_desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x_value) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKXYPARAMETER),
            "::",
            stringify!(x_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y_value) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKXYPARAMETER),
            "::",
            stringify!(y_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x_value_set) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKXYPARAMETER),
            "::",
            stringify!(x_value_set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y_value_set) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_BLOCKXYPARAMETER),
            "::",
            stringify!(y_value_set)
        )
    );
}
pub type Dwg_Object_BLOCKXYPARAMETER = _dwg_object_BLOCKXYPARAMETER;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_DYNAMICBLOCKPROXYNODE {
    pub parent: *mut _dwg_object_object,
    pub evalexpr: Dwg_EvalExpr,
}
#[test]
fn bindgen_test_layout__dwg_object_DYNAMICBLOCKPROXYNODE() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_DYNAMICBLOCKPROXYNODE> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_DYNAMICBLOCKPROXYNODE>(),
        56usize,
        concat!("Size of: ", stringify!(_dwg_object_DYNAMICBLOCKPROXYNODE))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_DYNAMICBLOCKPROXYNODE>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_DYNAMICBLOCKPROXYNODE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DYNAMICBLOCKPROXYNODE),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evalexpr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_DYNAMICBLOCKPROXYNODE),
            "::",
            stringify!(evalexpr)
        )
    );
}
pub type Dwg_Object_DYNAMICBLOCKPROXYNODE = _dwg_object_DYNAMICBLOCKPROXYNODE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_POINTCLOUD_IntensityStyle {
    pub parent: *mut _dwg_entity_POINTCLOUD,
    pub min_intensity: BITCODE_BD,
    pub max_intensity: BITCODE_BD,
    pub intensity_low_treshold: BITCODE_BD,
    pub intensity_high_treshold: BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_POINTCLOUD_IntensityStyle() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_POINTCLOUD_IntensityStyle> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_POINTCLOUD_IntensityStyle>(),
        40usize,
        concat!("Size of: ", stringify!(_dwg_POINTCLOUD_IntensityStyle))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_POINTCLOUD_IntensityStyle>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_POINTCLOUD_IntensityStyle))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_POINTCLOUD_IntensityStyle),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_intensity) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_POINTCLOUD_IntensityStyle),
            "::",
            stringify!(min_intensity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_intensity) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_POINTCLOUD_IntensityStyle),
            "::",
            stringify!(max_intensity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).intensity_low_treshold) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_POINTCLOUD_IntensityStyle),
            "::",
            stringify!(intensity_low_treshold)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).intensity_high_treshold) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_POINTCLOUD_IntensityStyle),
            "::",
            stringify!(intensity_high_treshold)
        )
    );
}
pub type Dwg_POINTCLOUD_IntensityStyle = _dwg_POINTCLOUD_IntensityStyle;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_POINTCLOUD_Clippings {
    pub parent: *mut _dwg_entity_POINTCLOUD,
    pub is_inverted: BITCODE_B,
    pub type_: BITCODE_BS,
    pub num_vertices: BITCODE_BL,
    pub vertices: *mut BITCODE_2RD,
    pub z_min: BITCODE_BD,
    pub z_max: BITCODE_BD,
}
#[test]
fn bindgen_test_layout__dwg_POINTCLOUD_Clippings() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_POINTCLOUD_Clippings> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_POINTCLOUD_Clippings>(),
        40usize,
        concat!("Size of: ", stringify!(_dwg_POINTCLOUD_Clippings))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_POINTCLOUD_Clippings>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_POINTCLOUD_Clippings))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_POINTCLOUD_Clippings),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_inverted) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_POINTCLOUD_Clippings),
            "::",
            stringify!(is_inverted)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_POINTCLOUD_Clippings),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_vertices) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_POINTCLOUD_Clippings),
            "::",
            stringify!(num_vertices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertices) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_POINTCLOUD_Clippings),
            "::",
            stringify!(vertices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z_min) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_POINTCLOUD_Clippings),
            "::",
            stringify!(z_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z_max) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_POINTCLOUD_Clippings),
            "::",
            stringify!(z_max)
        )
    );
}
pub type Dwg_POINTCLOUD_Clippings = _dwg_POINTCLOUD_Clippings;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_POINTCLOUDEX_Croppings {
    pub parent: *mut _dwg_entity_POINTCLOUDEX,
    pub type_: BITCODE_BS,
    pub is_inside: BITCODE_B,
    pub is_inverted: BITCODE_B,
    pub crop_plane: BITCODE_3BD,
    pub crop_x_dir: BITCODE_3BD,
    pub crop_y_dir: BITCODE_3BD,
    pub num_pts: BITCODE_BL,
    pub pts: *mut BITCODE_3BD,
}
#[test]
fn bindgen_test_layout__dwg_POINTCLOUDEX_Croppings() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_POINTCLOUDEX_Croppings> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_POINTCLOUDEX_Croppings>(),
        104usize,
        concat!("Size of: ", stringify!(_dwg_POINTCLOUDEX_Croppings))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_POINTCLOUDEX_Croppings>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_POINTCLOUDEX_Croppings))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_POINTCLOUDEX_Croppings),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_POINTCLOUDEX_Croppings),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_inside) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_POINTCLOUDEX_Croppings),
            "::",
            stringify!(is_inside)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_inverted) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_POINTCLOUDEX_Croppings),
            "::",
            stringify!(is_inverted)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).crop_plane) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_POINTCLOUDEX_Croppings),
            "::",
            stringify!(crop_plane)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).crop_x_dir) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_POINTCLOUDEX_Croppings),
            "::",
            stringify!(crop_x_dir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).crop_y_dir) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_POINTCLOUDEX_Croppings),
            "::",
            stringify!(crop_y_dir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_pts) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_POINTCLOUDEX_Croppings),
            "::",
            stringify!(num_pts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pts) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_POINTCLOUDEX_Croppings),
            "::",
            stringify!(pts)
        )
    );
}
pub type Dwg_POINTCLOUDEX_Croppings = _dwg_POINTCLOUDEX_Croppings;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_POINTCLOUD {
    pub parent: *mut _dwg_object_entity,
    pub class_version: BITCODE_BS,
    #[doc = "< DXF 10"]
    pub origin: BITCODE_3BD,
    pub saved_filename: BITCODE_TV,
    pub num_source_files: BITCODE_BL,
    #[doc = "< DXF 2"]
    pub source_files: *mut BITCODE_TV,
    #[doc = "< DXF 11"]
    pub extents_min: BITCODE_3BD,
    #[doc = "< DXF 12"]
    pub extents_max: BITCODE_3BD,
    #[doc = "< DXF 92"]
    pub numpoints: BITCODE_RLL,
    #[doc = "< DXF 3"]
    pub ucs_name: BITCODE_TV,
    #[doc = "< DXF 13"]
    pub ucs_origin: BITCODE_3BD,
    #[doc = "< DXF 210"]
    pub ucs_x_dir: BITCODE_3BD,
    #[doc = "< DXF 211"]
    pub ucs_y_dir: BITCODE_3BD,
    #[doc = "< DXF 212"]
    pub ucs_z_dir: BITCODE_3BD,
    #[doc = "< DXF 330"]
    pub pointclouddef: BITCODE_H,
    #[doc = "< DXF 360"]
    pub reactor: BITCODE_H,
    #[doc = "< DXF ?"]
    pub show_intensity: BITCODE_B,
    #[doc = "< DXF 71"]
    pub intensity_scheme: BITCODE_BS,
    pub intensity_style: Dwg_POINTCLOUD_IntensityStyle,
    #[doc = "< DXF ?"]
    pub show_clipping: BITCODE_B,
    #[doc = "< DXF ?"]
    pub num_clippings: BITCODE_BL,
    pub clippings: *mut Dwg_POINTCLOUD_Clippings,
}
#[test]
fn bindgen_test_layout__dwg_entity_POINTCLOUD() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_POINTCLOUD> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_POINTCLOUD>(),
        304usize,
        concat!("Size of: ", stringify!(_dwg_entity_POINTCLOUD))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_POINTCLOUD>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_POINTCLOUD))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUD),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUD),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).origin) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUD),
            "::",
            stringify!(origin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).saved_filename) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUD),
            "::",
            stringify!(saved_filename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_source_files) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUD),
            "::",
            stringify!(num_source_files)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).source_files) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUD),
            "::",
            stringify!(source_files)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extents_min) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUD),
            "::",
            stringify!(extents_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extents_max) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUD),
            "::",
            stringify!(extents_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numpoints) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUD),
            "::",
            stringify!(numpoints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ucs_name) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUD),
            "::",
            stringify!(ucs_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ucs_origin) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUD),
            "::",
            stringify!(ucs_origin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ucs_x_dir) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUD),
            "::",
            stringify!(ucs_x_dir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ucs_y_dir) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUD),
            "::",
            stringify!(ucs_y_dir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ucs_z_dir) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUD),
            "::",
            stringify!(ucs_z_dir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pointclouddef) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUD),
            "::",
            stringify!(pointclouddef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reactor) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUD),
            "::",
            stringify!(reactor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).show_intensity) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUD),
            "::",
            stringify!(show_intensity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).intensity_scheme) as usize - ptr as usize },
        242usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUD),
            "::",
            stringify!(intensity_scheme)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).intensity_style) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUD),
            "::",
            stringify!(intensity_style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).show_clipping) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUD),
            "::",
            stringify!(show_clipping)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_clippings) as usize - ptr as usize },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUD),
            "::",
            stringify!(num_clippings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clippings) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUD),
            "::",
            stringify!(clippings)
        )
    );
}
pub type Dwg_Entity_POINTCLOUD = _dwg_entity_POINTCLOUD;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_POINTCLOUDEX {
    pub parent: *mut _dwg_object_entity,
    pub class_version: BITCODE_BS,
    #[doc = "< DXF 10"]
    pub extents_min: BITCODE_3BD,
    #[doc = "< DXF 11"]
    pub extents_max: BITCODE_3BD,
    #[doc = "< DXF 13"]
    pub ucs_origin: BITCODE_3BD,
    #[doc = "< DXF 210"]
    pub ucs_x_dir: BITCODE_3BD,
    #[doc = "< DXF 211"]
    pub ucs_y_dir: BITCODE_3BD,
    #[doc = "< DXF 212"]
    pub ucs_z_dir: BITCODE_3BD,
    #[doc = "< DXF 290"]
    pub is_locked: BITCODE_B,
    #[doc = "< DXF 330"]
    pub pointclouddefex: BITCODE_H,
    #[doc = "< DXF 360"]
    pub reactor: BITCODE_H,
    pub name: BITCODE_TV,
    #[doc = "< DXF 291"]
    pub show_intensity: BITCODE_B,
    #[doc = "< DXF 71"]
    pub stylization_type: BITCODE_BS,
    #[doc = "< ? DXF 1"]
    pub intensity_colorscheme: BITCODE_TV,
    #[doc = "< DXF 1"]
    pub cur_colorscheme: BITCODE_TV,
    #[doc = "< ? DXF 1"]
    pub classification_colorscheme: BITCODE_TV,
    pub elevation_min: BITCODE_BD,
    pub elevation_max: BITCODE_BD,
    pub intensity_min: BITCODE_BL,
    pub intensity_max: BITCODE_BL,
    pub intensity_out_of_range_behavior: BITCODE_BS,
    pub elevation_out_of_range_behavior: BITCODE_BS,
    pub elevation_apply_to_fixed_range: BITCODE_B,
    pub intensity_as_gradient: BITCODE_B,
    pub elevation_as_gradient: BITCODE_B,
    #[doc = "< DXF 295"]
    pub show_cropping: BITCODE_B,
    #[doc = "< ? DXF 93"]
    pub unknown_bl0: BITCODE_BL,
    #[doc = "< ? DXF 93"]
    pub unknown_bl1: BITCODE_BL,
    #[doc = "< DXF 92"]
    pub num_croppings: BITCODE_BL,
    pub croppings: *mut Dwg_POINTCLOUDEX_Croppings,
}
#[test]
fn bindgen_test_layout__dwg_entity_POINTCLOUDEX() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_POINTCLOUDEX> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_POINTCLOUDEX>(),
        280usize,
        concat!("Size of: ", stringify!(_dwg_entity_POINTCLOUDEX))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_POINTCLOUDEX>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_POINTCLOUDEX))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUDEX),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUDEX),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extents_min) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUDEX),
            "::",
            stringify!(extents_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extents_max) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUDEX),
            "::",
            stringify!(extents_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ucs_origin) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUDEX),
            "::",
            stringify!(ucs_origin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ucs_x_dir) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUDEX),
            "::",
            stringify!(ucs_x_dir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ucs_y_dir) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUDEX),
            "::",
            stringify!(ucs_y_dir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ucs_z_dir) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUDEX),
            "::",
            stringify!(ucs_z_dir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_locked) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUDEX),
            "::",
            stringify!(is_locked)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pointclouddefex) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUDEX),
            "::",
            stringify!(pointclouddefex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reactor) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUDEX),
            "::",
            stringify!(reactor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUDEX),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).show_intensity) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUDEX),
            "::",
            stringify!(show_intensity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stylization_type) as usize - ptr as usize },
        194usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUDEX),
            "::",
            stringify!(stylization_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).intensity_colorscheme) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUDEX),
            "::",
            stringify!(intensity_colorscheme)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cur_colorscheme) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUDEX),
            "::",
            stringify!(cur_colorscheme)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).classification_colorscheme) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUDEX),
            "::",
            stringify!(classification_colorscheme)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elevation_min) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUDEX),
            "::",
            stringify!(elevation_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elevation_max) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUDEX),
            "::",
            stringify!(elevation_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).intensity_min) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUDEX),
            "::",
            stringify!(intensity_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).intensity_max) as usize - ptr as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUDEX),
            "::",
            stringify!(intensity_max)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).intensity_out_of_range_behavior) as usize - ptr as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUDEX),
            "::",
            stringify!(intensity_out_of_range_behavior)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).elevation_out_of_range_behavior) as usize - ptr as usize
        },
        250usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUDEX),
            "::",
            stringify!(elevation_out_of_range_behavior)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).elevation_apply_to_fixed_range) as usize - ptr as usize
        },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUDEX),
            "::",
            stringify!(elevation_apply_to_fixed_range)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).intensity_as_gradient) as usize - ptr as usize },
        253usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUDEX),
            "::",
            stringify!(intensity_as_gradient)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elevation_as_gradient) as usize - ptr as usize },
        254usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUDEX),
            "::",
            stringify!(elevation_as_gradient)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).show_cropping) as usize - ptr as usize },
        255usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUDEX),
            "::",
            stringify!(show_cropping)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bl0) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUDEX),
            "::",
            stringify!(unknown_bl0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bl1) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUDEX),
            "::",
            stringify!(unknown_bl1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_croppings) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUDEX),
            "::",
            stringify!(num_croppings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).croppings) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_POINTCLOUDEX),
            "::",
            stringify!(croppings)
        )
    );
}
pub type Dwg_Entity_POINTCLOUDEX = _dwg_entity_POINTCLOUDEX;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_POINTCLOUDDEF {
    pub parent: *mut _dwg_object_object,
    pub class_version: BITCODE_BL,
    pub source_filename: BITCODE_TV,
    pub is_loaded: BITCODE_B,
    #[doc = "< DXF 91 (hi) + 92 (lo) / 160"]
    pub numpoints: BITCODE_RLL,
    #[doc = "< DXF 10"]
    pub extents_min: BITCODE_3BD,
    #[doc = "< DXF 11"]
    pub extents_max: BITCODE_3BD,
}
#[test]
fn bindgen_test_layout__dwg_object_POINTCLOUDDEF() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_POINTCLOUDDEF> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_POINTCLOUDDEF>(),
        88usize,
        concat!("Size of: ", stringify!(_dwg_object_POINTCLOUDDEF))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_POINTCLOUDDEF>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_POINTCLOUDDEF))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_POINTCLOUDDEF),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_POINTCLOUDDEF),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).source_filename) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_POINTCLOUDDEF),
            "::",
            stringify!(source_filename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_loaded) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_POINTCLOUDDEF),
            "::",
            stringify!(is_loaded)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numpoints) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_POINTCLOUDDEF),
            "::",
            stringify!(numpoints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extents_min) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_POINTCLOUDDEF),
            "::",
            stringify!(extents_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extents_max) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_POINTCLOUDDEF),
            "::",
            stringify!(extents_max)
        )
    );
}
pub type Dwg_Object_POINTCLOUDDEF = _dwg_object_POINTCLOUDDEF;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_POINTCLOUDDEFEX {
    pub parent: *mut _dwg_object_object,
    pub class_version: BITCODE_BL,
    pub source_filename: BITCODE_TV,
    pub is_loaded: BITCODE_B,
    #[doc = "< DXF 169"]
    pub numpoints: BITCODE_RLL,
    #[doc = "< DXF 10"]
    pub extents_min: BITCODE_3BD,
    #[doc = "< DXF 11"]
    pub extents_max: BITCODE_3BD,
}
#[test]
fn bindgen_test_layout__dwg_object_POINTCLOUDDEFEX() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_POINTCLOUDDEFEX> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_POINTCLOUDDEFEX>(),
        88usize,
        concat!("Size of: ", stringify!(_dwg_object_POINTCLOUDDEFEX))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_POINTCLOUDDEFEX>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_POINTCLOUDDEFEX))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_POINTCLOUDDEFEX),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_POINTCLOUDDEFEX),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).source_filename) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_POINTCLOUDDEFEX),
            "::",
            stringify!(source_filename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_loaded) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_POINTCLOUDDEFEX),
            "::",
            stringify!(is_loaded)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numpoints) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_POINTCLOUDDEFEX),
            "::",
            stringify!(numpoints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extents_min) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_POINTCLOUDDEFEX),
            "::",
            stringify!(extents_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extents_max) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_POINTCLOUDDEFEX),
            "::",
            stringify!(extents_max)
        )
    );
}
pub type Dwg_Object_POINTCLOUDDEFEX = _dwg_object_POINTCLOUDDEFEX;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_POINTCLOUDDEF_REACTOR {
    pub parent: *mut _dwg_object_object,
    pub class_version: BITCODE_BL,
}
#[test]
fn bindgen_test_layout__dwg_object_POINTCLOUDDEF_REACTOR() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_POINTCLOUDDEF_REACTOR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_POINTCLOUDDEF_REACTOR>(),
        16usize,
        concat!("Size of: ", stringify!(_dwg_object_POINTCLOUDDEF_REACTOR))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_POINTCLOUDDEF_REACTOR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_POINTCLOUDDEF_REACTOR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_POINTCLOUDDEF_REACTOR),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_POINTCLOUDDEF_REACTOR),
            "::",
            stringify!(class_version)
        )
    );
}
pub type Dwg_Object_POINTCLOUDDEF_REACTOR = _dwg_object_POINTCLOUDDEF_REACTOR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_POINTCLOUDDEF_REACTOR_EX {
    pub parent: *mut _dwg_object_object,
    pub class_version: BITCODE_BL,
}
#[test]
fn bindgen_test_layout__dwg_object_POINTCLOUDDEF_REACTOR_EX() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_POINTCLOUDDEF_REACTOR_EX> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_POINTCLOUDDEF_REACTOR_EX>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_object_POINTCLOUDDEF_REACTOR_EX)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_POINTCLOUDDEF_REACTOR_EX>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_POINTCLOUDDEF_REACTOR_EX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_POINTCLOUDDEF_REACTOR_EX),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_POINTCLOUDDEF_REACTOR_EX),
            "::",
            stringify!(class_version)
        )
    );
}
pub type Dwg_Object_POINTCLOUDDEF_REACTOR_EX = _dwg_object_POINTCLOUDDEF_REACTOR_EX;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_ColorRamp {
    pub parent: *mut _dwg_POINTCLOUDCOLORMAP_Ramp,
    pub colorscheme: BITCODE_TV,
    #[doc = " or"]
    pub unknown_bl: BITCODE_BL,
    pub unknown_b: BITCODE_B,
}
#[test]
fn bindgen_test_layout__dwg_ColorRamp() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_ColorRamp> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_ColorRamp>(),
        24usize,
        concat!("Size of: ", stringify!(_dwg_ColorRamp))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_ColorRamp>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_ColorRamp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ColorRamp),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colorscheme) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ColorRamp),
            "::",
            stringify!(colorscheme)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bl) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ColorRamp),
            "::",
            stringify!(unknown_bl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_b) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_ColorRamp),
            "::",
            stringify!(unknown_b)
        )
    );
}
pub type Dwg_ColorRamp = _dwg_ColorRamp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_POINTCLOUDCOLORMAP_Ramp {
    pub parent: *mut _dwg_object_POINTCLOUDCOLORMAP,
    pub class_version: BITCODE_BS,
    pub num_ramps: BITCODE_BL,
    pub ramps: *mut Dwg_ColorRamp,
}
#[test]
fn bindgen_test_layout__dwg_POINTCLOUDCOLORMAP_Ramp() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_POINTCLOUDCOLORMAP_Ramp> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_POINTCLOUDCOLORMAP_Ramp>(),
        24usize,
        concat!("Size of: ", stringify!(_dwg_POINTCLOUDCOLORMAP_Ramp))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_POINTCLOUDCOLORMAP_Ramp>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_POINTCLOUDCOLORMAP_Ramp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_POINTCLOUDCOLORMAP_Ramp),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_POINTCLOUDCOLORMAP_Ramp),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_ramps) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_POINTCLOUDCOLORMAP_Ramp),
            "::",
            stringify!(num_ramps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ramps) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_POINTCLOUDCOLORMAP_Ramp),
            "::",
            stringify!(ramps)
        )
    );
}
pub type Dwg_POINTCLOUDCOLORMAP_Ramp = _dwg_POINTCLOUDCOLORMAP_Ramp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_POINTCLOUDCOLORMAP {
    pub parent: *mut _dwg_object_object,
    pub class_version: BITCODE_BS,
    #[doc = "< DXF 1"]
    pub def_intensity_colorscheme: BITCODE_TV,
    #[doc = "< DXF 1"]
    pub def_elevation_colorscheme: BITCODE_TV,
    #[doc = "< DXF 1"]
    pub def_classification_colorscheme: BITCODE_TV,
    pub num_colorramps: BITCODE_BL,
    pub colorramps: *mut Dwg_POINTCLOUDCOLORMAP_Ramp,
    pub num_classification_colorramps: BITCODE_BL,
    pub classification_colorramps: *mut Dwg_POINTCLOUDCOLORMAP_Ramp,
}
#[test]
fn bindgen_test_layout__dwg_object_POINTCLOUDCOLORMAP() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_POINTCLOUDCOLORMAP> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_POINTCLOUDCOLORMAP>(),
        72usize,
        concat!("Size of: ", stringify!(_dwg_object_POINTCLOUDCOLORMAP))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_POINTCLOUDCOLORMAP>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_POINTCLOUDCOLORMAP))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_POINTCLOUDCOLORMAP),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_POINTCLOUDCOLORMAP),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_intensity_colorscheme) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_POINTCLOUDCOLORMAP),
            "::",
            stringify!(def_intensity_colorscheme)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_elevation_colorscheme) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_POINTCLOUDCOLORMAP),
            "::",
            stringify!(def_elevation_colorscheme)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).def_classification_colorscheme) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_POINTCLOUDCOLORMAP),
            "::",
            stringify!(def_classification_colorscheme)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_colorramps) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_POINTCLOUDCOLORMAP),
            "::",
            stringify!(num_colorramps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colorramps) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_POINTCLOUDCOLORMAP),
            "::",
            stringify!(colorramps)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).num_classification_colorramps) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_POINTCLOUDCOLORMAP),
            "::",
            stringify!(num_classification_colorramps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).classification_colorramps) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_POINTCLOUDCOLORMAP),
            "::",
            stringify!(classification_colorramps)
        )
    );
}
pub type Dwg_Object_POINTCLOUDCOLORMAP = _dwg_object_POINTCLOUDCOLORMAP;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_COMPOUNDOBJECTID {
    pub parent: *mut _dwg_object_object,
    pub has_object: BITCODE_B,
    pub name: BITCODE_TV,
    pub object: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_COMPOUNDOBJECTID() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_COMPOUNDOBJECTID> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_COMPOUNDOBJECTID>(),
        32usize,
        concat!("Size of: ", stringify!(_dwg_COMPOUNDOBJECTID))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_COMPOUNDOBJECTID>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_COMPOUNDOBJECTID))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_COMPOUNDOBJECTID),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_object) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_COMPOUNDOBJECTID),
            "::",
            stringify!(has_object)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_COMPOUNDOBJECTID),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_COMPOUNDOBJECTID),
            "::",
            stringify!(object)
        )
    );
}
pub type Dwg_COMPOUNDOBJECTID = _dwg_COMPOUNDOBJECTID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_PARTIAL_VIEWING_INDEX_Entry {
    pub parent: *mut _dwg_object_PARTIAL_VIEWING_INDEX,
    pub extents_min: BITCODE_3BD,
    pub extents_max: BITCODE_3BD,
    pub object: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_PARTIAL_VIEWING_INDEX_Entry() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_PARTIAL_VIEWING_INDEX_Entry> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_PARTIAL_VIEWING_INDEX_Entry>(),
        64usize,
        concat!("Size of: ", stringify!(_dwg_PARTIAL_VIEWING_INDEX_Entry))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_PARTIAL_VIEWING_INDEX_Entry>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_PARTIAL_VIEWING_INDEX_Entry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_PARTIAL_VIEWING_INDEX_Entry),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extents_min) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_PARTIAL_VIEWING_INDEX_Entry),
            "::",
            stringify!(extents_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extents_max) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_PARTIAL_VIEWING_INDEX_Entry),
            "::",
            stringify!(extents_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_PARTIAL_VIEWING_INDEX_Entry),
            "::",
            stringify!(object)
        )
    );
}
pub type Dwg_PARTIAL_VIEWING_INDEX_Entry = _dwg_PARTIAL_VIEWING_INDEX_Entry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_PARTIAL_VIEWING_INDEX {
    pub parent: *mut _dwg_object_object,
    pub num_entries: BITCODE_BL,
    pub has_entries: BITCODE_B,
    pub entries: *mut Dwg_PARTIAL_VIEWING_INDEX_Entry,
}
#[test]
fn bindgen_test_layout__dwg_object_PARTIAL_VIEWING_INDEX() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_PARTIAL_VIEWING_INDEX> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_PARTIAL_VIEWING_INDEX>(),
        24usize,
        concat!("Size of: ", stringify!(_dwg_object_PARTIAL_VIEWING_INDEX))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_PARTIAL_VIEWING_INDEX>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_PARTIAL_VIEWING_INDEX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PARTIAL_VIEWING_INDEX),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_entries) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PARTIAL_VIEWING_INDEX),
            "::",
            stringify!(num_entries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_entries) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PARTIAL_VIEWING_INDEX),
            "::",
            stringify!(has_entries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entries) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_PARTIAL_VIEWING_INDEX),
            "::",
            stringify!(entries)
        )
    );
}
pub type Dwg_Object_PARTIAL_VIEWING_INDEX = _dwg_object_PARTIAL_VIEWING_INDEX;
#[doc = "Unknown Class entity, a blob"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_UNKNOWN_ENT {
    pub parent: *mut _dwg_object_entity,
}
#[test]
fn bindgen_test_layout__dwg_entity_UNKNOWN_ENT() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_UNKNOWN_ENT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_UNKNOWN_ENT>(),
        8usize,
        concat!("Size of: ", stringify!(_dwg_entity_UNKNOWN_ENT))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_UNKNOWN_ENT>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_UNKNOWN_ENT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_UNKNOWN_ENT),
            "::",
            stringify!(parent)
        )
    );
}
#[doc = "Unknown Class entity, a blob"]
pub type Dwg_Entity_UNKNOWN_ENT = _dwg_entity_UNKNOWN_ENT;
#[doc = "Unknown Class object, a blob"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_object_UNKNOWN_OBJ {
    pub parent: *mut _dwg_object_object,
}
#[test]
fn bindgen_test_layout__dwg_object_UNKNOWN_OBJ() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_UNKNOWN_OBJ> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_UNKNOWN_OBJ>(),
        8usize,
        concat!("Size of: ", stringify!(_dwg_object_UNKNOWN_OBJ))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_UNKNOWN_OBJ>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_UNKNOWN_OBJ))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_UNKNOWN_OBJ),
            "::",
            stringify!(parent)
        )
    );
}
#[doc = "Unknown Class object, a blob"]
pub type Dwg_Object_UNKNOWN_OBJ = _dwg_object_UNKNOWN_OBJ;
#[doc = "REPEAT (none/5) entity"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_REPEAT {
    pub parent: *mut _dwg_object_entity,
}
#[test]
fn bindgen_test_layout__dwg_entity_REPEAT() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_REPEAT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_REPEAT>(),
        8usize,
        concat!("Size of: ", stringify!(_dwg_entity_REPEAT))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_REPEAT>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_REPEAT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_REPEAT),
            "::",
            stringify!(parent)
        )
    );
}
#[doc = "REPEAT (none/5) entity"]
pub type Dwg_Entity_REPEAT = _dwg_entity_REPEAT;
#[doc = "ENDREP (none/6) entity"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_ENDREP {
    pub parent: *mut _dwg_object_entity,
    pub numcols: BITCODE_RS,
    pub numrows: BITCODE_RS,
    pub colspacing: BITCODE_RD,
    pub rowspacing: BITCODE_RD,
}
#[test]
fn bindgen_test_layout__dwg_entity_ENDREP() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_ENDREP> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_ENDREP>(),
        32usize,
        concat!("Size of: ", stringify!(_dwg_entity_ENDREP))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_ENDREP>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_ENDREP))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ENDREP),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numcols) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ENDREP),
            "::",
            stringify!(numcols)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numrows) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ENDREP),
            "::",
            stringify!(numrows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colspacing) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ENDREP),
            "::",
            stringify!(colspacing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rowspacing) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_ENDREP),
            "::",
            stringify!(rowspacing)
        )
    );
}
#[doc = "ENDREP (none/6) entity"]
pub type Dwg_Entity_ENDREP = _dwg_entity_ENDREP;
#[doc = "LOAD (none/10) entity"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_LOAD {
    pub parent: *mut _dwg_object_entity,
    pub file_name: BITCODE_TV,
}
#[test]
fn bindgen_test_layout__dwg_entity_LOAD() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_LOAD> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_LOAD>(),
        16usize,
        concat!("Size of: ", stringify!(_dwg_entity_LOAD))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_LOAD>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_LOAD))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOAD),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file_name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_LOAD),
            "::",
            stringify!(file_name)
        )
    );
}
#[doc = "LOAD (none/10) entity"]
pub type Dwg_Entity_LOAD = _dwg_entity_LOAD;
#[doc = "JUMP (none/18) entity"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_JUMP {
    pub parent: *mut _dwg_object_entity,
    pub jump_address_raw: BITCODE_RL,
    pub jump_address: BITCODE_RL,
    pub jump_entity_section: Dwg_Entity_Sections,
}
#[test]
fn bindgen_test_layout__dwg_entity_JUMP() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_JUMP> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_JUMP>(),
        24usize,
        concat!("Size of: ", stringify!(_dwg_entity_JUMP))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_JUMP>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_JUMP))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_JUMP),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jump_address_raw) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_JUMP),
            "::",
            stringify!(jump_address_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jump_address) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_JUMP),
            "::",
            stringify!(jump_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jump_entity_section) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_JUMP),
            "::",
            stringify!(jump_entity_section)
        )
    );
}
#[doc = "JUMP (none/18) entity"]
pub type Dwg_Entity_JUMP = _dwg_entity_JUMP;
#[doc = "3DLINE (none/21) entity"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_3DLINE {
    pub parent: *mut _dwg_object_entity,
    pub start: BITCODE_3RD,
    pub end: BITCODE_3RD,
    pub extrusion: BITCODE_3RD,
    pub thickness: BITCODE_RD,
}
#[test]
fn bindgen_test_layout__dwg_entity_3DLINE() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_3DLINE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_3DLINE>(),
        88usize,
        concat!("Size of: ", stringify!(_dwg_entity_3DLINE))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_3DLINE>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_3DLINE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_3DLINE),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_3DLINE),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_3DLINE),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extrusion) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_3DLINE),
            "::",
            stringify!(extrusion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thickness) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_3DLINE),
            "::",
            stringify!(thickness)
        )
    );
}
#[doc = "3DLINE (none/21) entity"]
pub type Dwg_Entity__3DLINE = _dwg_entity_3DLINE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_entity_eed_data {
    pub code: BITCODE_RC,
    pub u: _dwg_entity_eed_data_eed_data_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _dwg_entity_eed_data_eed_data_t {
    pub eed_0: _dwg_entity_eed_data_eed_data_t__bindgen_ty_1,
    pub eed_0_r2007: _dwg_entity_eed_data_eed_data_t__bindgen_ty_2,
    pub eed_1: _dwg_entity_eed_data_eed_data_t__bindgen_ty_3,
    pub eed_2: _dwg_entity_eed_data_eed_data_t__bindgen_ty_4,
    pub eed_3: _dwg_entity_eed_data_eed_data_t__bindgen_ty_5,
    pub eed_4: _dwg_entity_eed_data_eed_data_t__bindgen_ty_6,
    pub eed_5: _dwg_entity_eed_data_eed_data_t__bindgen_ty_7,
    pub eed_10: _dwg_entity_eed_data_eed_data_t__bindgen_ty_8,
    pub eed_40: _dwg_entity_eed_data_eed_data_t__bindgen_ty_9,
    pub eed_70: _dwg_entity_eed_data_eed_data_t__bindgen_ty_10,
    pub eed_71: _dwg_entity_eed_data_eed_data_t__bindgen_ty_11,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_eed_data_eed_data_t__bindgen_ty_1 {
    pub length: BITCODE_RS,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub string: [::std::os::raw::c_char; 1usize],
}
#[test]
fn bindgen_test_layout__dwg_entity_eed_data_eed_data_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_eed_data_eed_data_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_eed_data_eed_data_t__bindgen_ty_1>(),
        5usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_entity_eed_data_eed_data_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_eed_data_eed_data_t__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_entity_eed_data_eed_data_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_eed_data_eed_data_t__bindgen_ty_1),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_eed_data_eed_data_t__bindgen_ty_1),
            "::",
            stringify!(string)
        )
    );
}
impl _dwg_entity_eed_data_eed_data_t__bindgen_ty_1 {
    #[inline]
    pub fn codepage(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 15u8) as u16) }
    }
    #[inline]
    pub fn set_codepage(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 15u8, val as u64)
        }
    }
    #[inline]
    pub fn is_tu(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_is_tu(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        codepage: ::std::os::raw::c_ushort,
        is_tu: ::std::os::raw::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 15u8, {
            let codepage: u16 = unsafe { ::std::mem::transmute(codepage) };
            codepage as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let is_tu: u16 = unsafe { ::std::mem::transmute(is_tu) };
            is_tu as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_eed_data_eed_data_t__bindgen_ty_2 {
    pub length: BITCODE_RS,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub string: [dwg_wchar_t; 1usize],
}
#[test]
fn bindgen_test_layout__dwg_entity_eed_data_eed_data_t__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_eed_data_eed_data_t__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_eed_data_eed_data_t__bindgen_ty_2>(),
        6usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_entity_eed_data_eed_data_t__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_eed_data_eed_data_t__bindgen_ty_2>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_entity_eed_data_eed_data_t__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_eed_data_eed_data_t__bindgen_ty_2),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_eed_data_eed_data_t__bindgen_ty_2),
            "::",
            stringify!(string)
        )
    );
}
impl _dwg_entity_eed_data_eed_data_t__bindgen_ty_2 {
    #[inline]
    pub fn _padding(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 15u8) as u16) }
    }
    #[inline]
    pub fn set__padding(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 15u8, val as u64)
        }
    }
    #[inline]
    pub fn is_tu(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_is_tu(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        _padding: ::std::os::raw::c_ushort,
        is_tu: ::std::os::raw::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 15u8, {
            let _padding: u16 = unsafe { ::std::mem::transmute(_padding) };
            _padding as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let is_tu: u16 = unsafe { ::std::mem::transmute(is_tu) };
            is_tu as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_eed_data_eed_data_t__bindgen_ty_3 {
    pub invalid: [::std::os::raw::c_char; 1usize],
    pub appid_index: BITCODE_RS,
}
#[test]
fn bindgen_test_layout__dwg_entity_eed_data_eed_data_t__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_eed_data_eed_data_t__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_eed_data_eed_data_t__bindgen_ty_3>(),
        3usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_entity_eed_data_eed_data_t__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_eed_data_eed_data_t__bindgen_ty_3>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_entity_eed_data_eed_data_t__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).invalid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_eed_data_eed_data_t__bindgen_ty_3),
            "::",
            stringify!(invalid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).appid_index) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_eed_data_eed_data_t__bindgen_ty_3),
            "::",
            stringify!(appid_index)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_eed_data_eed_data_t__bindgen_ty_4 {
    pub close: BITCODE_RC,
}
#[test]
fn bindgen_test_layout__dwg_entity_eed_data_eed_data_t__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_eed_data_eed_data_t__bindgen_ty_4> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_eed_data_eed_data_t__bindgen_ty_4>(),
        1usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_entity_eed_data_eed_data_t__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_eed_data_eed_data_t__bindgen_ty_4>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_entity_eed_data_eed_data_t__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).close) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_eed_data_eed_data_t__bindgen_ty_4),
            "::",
            stringify!(close)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_eed_data_eed_data_t__bindgen_ty_5 {
    pub layer: BITCODE_RLL,
}
#[test]
fn bindgen_test_layout__dwg_entity_eed_data_eed_data_t__bindgen_ty_5() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_eed_data_eed_data_t__bindgen_ty_5> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_eed_data_eed_data_t__bindgen_ty_5>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_entity_eed_data_eed_data_t__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_eed_data_eed_data_t__bindgen_ty_5>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_entity_eed_data_eed_data_t__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_eed_data_eed_data_t__bindgen_ty_5),
            "::",
            stringify!(layer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_eed_data_eed_data_t__bindgen_ty_6 {
    pub length: BITCODE_RC,
    pub data: [::std::os::raw::c_uchar; 1usize],
}
#[test]
fn bindgen_test_layout__dwg_entity_eed_data_eed_data_t__bindgen_ty_6() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_eed_data_eed_data_t__bindgen_ty_6> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_eed_data_eed_data_t__bindgen_ty_6>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_entity_eed_data_eed_data_t__bindgen_ty_6)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_eed_data_eed_data_t__bindgen_ty_6>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_entity_eed_data_eed_data_t__bindgen_ty_6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_eed_data_eed_data_t__bindgen_ty_6),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_eed_data_eed_data_t__bindgen_ty_6),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_eed_data_eed_data_t__bindgen_ty_7 {
    pub entity: BITCODE_RLL,
}
#[test]
fn bindgen_test_layout__dwg_entity_eed_data_eed_data_t__bindgen_ty_7() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_eed_data_eed_data_t__bindgen_ty_7> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_eed_data_eed_data_t__bindgen_ty_7>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_entity_eed_data_eed_data_t__bindgen_ty_7)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_eed_data_eed_data_t__bindgen_ty_7>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_entity_eed_data_eed_data_t__bindgen_ty_7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entity) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_eed_data_eed_data_t__bindgen_ty_7),
            "::",
            stringify!(entity)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_eed_data_eed_data_t__bindgen_ty_8 {
    pub point: BITCODE_3RD,
}
#[test]
fn bindgen_test_layout__dwg_entity_eed_data_eed_data_t__bindgen_ty_8() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_eed_data_eed_data_t__bindgen_ty_8> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_eed_data_eed_data_t__bindgen_ty_8>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_entity_eed_data_eed_data_t__bindgen_ty_8)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_eed_data_eed_data_t__bindgen_ty_8>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_entity_eed_data_eed_data_t__bindgen_ty_8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).point) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_eed_data_eed_data_t__bindgen_ty_8),
            "::",
            stringify!(point)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_eed_data_eed_data_t__bindgen_ty_9 {
    pub real: BITCODE_RD,
}
#[test]
fn bindgen_test_layout__dwg_entity_eed_data_eed_data_t__bindgen_ty_9() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_eed_data_eed_data_t__bindgen_ty_9> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_eed_data_eed_data_t__bindgen_ty_9>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_entity_eed_data_eed_data_t__bindgen_ty_9)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_eed_data_eed_data_t__bindgen_ty_9>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_entity_eed_data_eed_data_t__bindgen_ty_9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).real) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_eed_data_eed_data_t__bindgen_ty_9),
            "::",
            stringify!(real)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_eed_data_eed_data_t__bindgen_ty_10 {
    pub rs: BITCODE_RS,
}
#[test]
fn bindgen_test_layout__dwg_entity_eed_data_eed_data_t__bindgen_ty_10() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_eed_data_eed_data_t__bindgen_ty_10> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_eed_data_eed_data_t__bindgen_ty_10>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_entity_eed_data_eed_data_t__bindgen_ty_10)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_eed_data_eed_data_t__bindgen_ty_10>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_entity_eed_data_eed_data_t__bindgen_ty_10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_eed_data_eed_data_t__bindgen_ty_10),
            "::",
            stringify!(rs)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_eed_data_eed_data_t__bindgen_ty_11 {
    pub rl: BITCODE_RL,
}
#[test]
fn bindgen_test_layout__dwg_entity_eed_data_eed_data_t__bindgen_ty_11() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_eed_data_eed_data_t__bindgen_ty_11> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_eed_data_eed_data_t__bindgen_ty_11>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(_dwg_entity_eed_data_eed_data_t__bindgen_ty_11)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_eed_data_eed_data_t__bindgen_ty_11>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_entity_eed_data_eed_data_t__bindgen_ty_11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_eed_data_eed_data_t__bindgen_ty_11),
            "::",
            stringify!(rl)
        )
    );
}
#[test]
fn bindgen_test_layout__dwg_entity_eed_data_eed_data_t() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_eed_data_eed_data_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_eed_data_eed_data_t>(),
        24usize,
        concat!("Size of: ", stringify!(_dwg_entity_eed_data_eed_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_eed_data_eed_data_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_dwg_entity_eed_data_eed_data_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eed_0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_eed_data_eed_data_t),
            "::",
            stringify!(eed_0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eed_0_r2007) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_eed_data_eed_data_t),
            "::",
            stringify!(eed_0_r2007)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eed_1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_eed_data_eed_data_t),
            "::",
            stringify!(eed_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eed_2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_eed_data_eed_data_t),
            "::",
            stringify!(eed_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eed_3) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_eed_data_eed_data_t),
            "::",
            stringify!(eed_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eed_4) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_eed_data_eed_data_t),
            "::",
            stringify!(eed_4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eed_5) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_eed_data_eed_data_t),
            "::",
            stringify!(eed_5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eed_10) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_eed_data_eed_data_t),
            "::",
            stringify!(eed_10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eed_40) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_eed_data_eed_data_t),
            "::",
            stringify!(eed_40)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eed_70) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_eed_data_eed_data_t),
            "::",
            stringify!(eed_70)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eed_71) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_eed_data_eed_data_t),
            "::",
            stringify!(eed_71)
        )
    );
}
#[test]
fn bindgen_test_layout__dwg_entity_eed_data() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_eed_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_eed_data>(),
        25usize,
        concat!("Size of: ", stringify!(_dwg_entity_eed_data))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_eed_data>(),
        1usize,
        concat!("Alignment of ", stringify!(_dwg_entity_eed_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_eed_data),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_eed_data),
            "::",
            stringify!(u)
        )
    );
}
pub type Dwg_Eed_Data = _dwg_entity_eed_data;
#[doc = "Extended entity data"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_eed {
    pub size: BITCODE_BS,
    pub handle: Dwg_Handle,
    pub data: *mut Dwg_Eed_Data,
    pub raw: BITCODE_TF,
}
#[test]
fn bindgen_test_layout__dwg_entity_eed() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_entity_eed> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_entity_eed>(),
        48usize,
        concat!("Size of: ", stringify!(_dwg_entity_eed))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_entity_eed>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_entity_eed))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_eed),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_eed),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_eed),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_entity_eed),
            "::",
            stringify!(raw)
        )
    );
}
#[doc = "Extended entity data"]
pub type Dwg_Eed = _dwg_entity_eed;
pub const EXTRA_R11_UNKNOWN_1: _bindgen_ty_5 = 1;
pub const EXTRA_R11_HAS_EED: _bindgen_ty_5 = 2;
pub const EXTRA_R11_HAS_VIEWPORT: _bindgen_ty_5 = 4;
pub const EXTRA_R11_UNKNOWN_8: _bindgen_ty_5 = 8;
pub const EXTRA_R11_UNKNOWN_16: _bindgen_ty_5 = 16;
pub const EXTRA_R11_UNKNOWN_32: _bindgen_ty_5 = 32;
pub const EXTRA_R11_UNKNOWN_64: _bindgen_ty_5 = 64;
pub const EXTRA_R11_UNKNOWN_128: _bindgen_ty_5 = 128;
pub type _bindgen_ty_5 = ::std::os::raw::c_int;
pub const FLAG_R11_HAS_COLOR: _bindgen_ty_6 = 1;
pub const FLAG_R11_HAS_LTYPE: _bindgen_ty_6 = 2;
pub const FLAG_R11_HAS_ELEVATION: _bindgen_ty_6 = 4;
pub const FLAG_R11_HAS_THICKNESS: _bindgen_ty_6 = 8;
pub const FLAG_R11_HAS_UNKNOWN_16: _bindgen_ty_6 = 16;
pub const FLAG_R11_HAS_HANDLING: _bindgen_ty_6 = 32;
pub const FLAG_R11_HAS_PSPACE: _bindgen_ty_6 = 64;
pub const FLAG_R11_HAS_ATTRIBS: _bindgen_ty_6 = 128;
pub type _bindgen_ty_6 = ::std::os::raw::c_int;
pub const FLAG_R11_DIMENSION_LINEAR: _bindgen_ty_7 = 0;
pub const FLAG_R11_DIMENSION_ALIGNED: _bindgen_ty_7 = 1;
pub const FLAG_R11_DIMENSION_ANG2LN: _bindgen_ty_7 = 2;
pub const FLAG_R11_DIMENSION_DIAMETER: _bindgen_ty_7 = 3;
pub const FLAG_R11_DIMENSION_RADIUS: _bindgen_ty_7 = 4;
pub const FLAG_R11_DIMENSION_ANG3PT: _bindgen_ty_7 = 5;
pub const FLAG_R11_DIMENSION_ORDINATE: _bindgen_ty_7 = 6;
pub const FLAG_R11_DIMENSION_ORDINATE_TYPE: _bindgen_ty_7 = 64;
pub const FLAG_R11_DIMENSION_TEXT_POSITIONED: _bindgen_ty_7 = 128;
pub type _bindgen_ty_7 = ::std::os::raw::c_int;
pub const OPTS_R11_XREF_DEP: _bindgen_ty_8 = 16;
pub const OPTS_R11_XREF_REF: _bindgen_ty_8 = 32;
pub const OPTS_R11_XREF_RESOLVED: _bindgen_ty_8 = 64;
pub const OPTS_R11_XDATA: _bindgen_ty_8 = 128;
pub type _bindgen_ty_8 = ::std::os::raw::c_int;
pub const OPTS_R11_3DFACE_HAS_Z_FIRST: _bindgen_ty_9 = 1;
pub const OPTS_R11_3DFACE_HAS_Z_SECOND: _bindgen_ty_9 = 2;
pub const OPTS_R11_3DFACE_HAS_Z_THIRD: _bindgen_ty_9 = 4;
pub const OPTS_R11_3DFACE_HAS_Z_FOURTH: _bindgen_ty_9 = 8;
pub type _bindgen_ty_9 = ::std::os::raw::c_int;
pub const OPTS_R11_3DLINE_HAS_Z_FIRST: _bindgen_ty_10 = 1;
pub const OPTS_R11_3DLINE_HAS_Z_SECOND: _bindgen_ty_10 = 2;
pub type _bindgen_ty_10 = ::std::os::raw::c_int;
pub const OPTS_R11_ARC_HAS_EXTRUSION: _bindgen_ty_11 = 1;
pub type _bindgen_ty_11 = ::std::os::raw::c_int;
pub const OPTS_R11_ATTDEF_UNKNOWN_1: _bindgen_ty_12 = 1;
pub const OPTS_R11_ATTDEF_HAS_ROTATION: _bindgen_ty_12 = 2;
pub const OPTS_R11_ATTDEF_HAS_WIDTH_FACTOR: _bindgen_ty_12 = 4;
pub const OPTS_R11_ATTDEF_HAS_OBLIQUE_ANGLE: _bindgen_ty_12 = 8;
pub const OPTS_R11_ATTDEF_HAS_STYLE: _bindgen_ty_12 = 16;
pub const OPTS_R11_ATTDEF_HAS_GENERATION: _bindgen_ty_12 = 32;
pub const OPTS_R11_ATTDEF_HAS_HORIZ_ALIGNMENT: _bindgen_ty_12 = 64;
pub const OPTS_R11_ATTDEF_HAS_ALIGNMENT_POINT: _bindgen_ty_12 = 128;
pub const OPTS_R11_ATTDEF_HAS_EXTRUSION: _bindgen_ty_12 = 256;
pub const OPTS_R11_ATTDEF_HAS_VERT_ALIGNMENT: _bindgen_ty_12 = 512;
pub type _bindgen_ty_12 = ::std::os::raw::c_int;
pub const OPTS_R11_ATTRIB_UNKNOWN_1: _bindgen_ty_13 = 1;
pub const OPTS_R11_ATTRIB_HAS_ROTATION: _bindgen_ty_13 = 2;
pub const OPTS_R11_ATTRIB_HAS_WIDTH_FACTOR: _bindgen_ty_13 = 4;
pub const OPTS_R11_ATTRIB_HAS_OBLIQUE_ANGLE: _bindgen_ty_13 = 8;
pub const OPTS_R11_ATTRIB_HAS_STYLE: _bindgen_ty_13 = 16;
pub const OPTS_R11_ATTRIB_HAS_GENERATION: _bindgen_ty_13 = 32;
pub const OPTS_R11_ATTRIB_HAS_HORIZ_ALIGNMENT: _bindgen_ty_13 = 64;
pub const OPTS_R11_ATTRIB_HAS_ALIGNMENT_POINT: _bindgen_ty_13 = 128;
pub const OPTS_R11_ATTRIB_HAS_EXTRUSION: _bindgen_ty_13 = 256;
pub const OPTS_R11_ATTRIB_HAS_VERT_ALIGNMENT: _bindgen_ty_13 = 512;
pub type _bindgen_ty_13 = ::std::os::raw::c_int;
pub const OPTS_R11_BLOCK_UNKNOWN_1: _bindgen_ty_14 = 1;
pub const OPTS_R11_BLOCK_HAS_XREF_PNAME: _bindgen_ty_14 = 2;
pub const OPTS_R11_BLOCK_HAS_BLOCK_NAME: _bindgen_ty_14 = 4;
pub type _bindgen_ty_14 = ::std::os::raw::c_int;
pub const OPTS_R11_CIRCLE_HAS_EXTRUSION: _bindgen_ty_15 = 1;
pub type _bindgen_ty_15 = ::std::os::raw::c_int;
pub const OPTS_R11_DIMENSION_HAS_DXF12: _bindgen_ty_16 = 1;
pub const OPTS_R11_DIMENSION_HAS_FLAG: _bindgen_ty_16 = 2;
pub const OPTS_R11_DIMENSION_HAS_TEXT: _bindgen_ty_16 = 4;
pub const OPTS_R11_DIMENSION_HAS_DXF13: _bindgen_ty_16 = 8;
pub const OPTS_R11_DIMENSION_HAS_DXF14: _bindgen_ty_16 = 16;
pub const OPTS_R11_DIMENSION_HAS_DXF15: _bindgen_ty_16 = 32;
pub const OPTS_R11_DIMENSION_HAS_ANGLES: _bindgen_ty_16 = 64;
pub const OPTS_R11_DIMENSION_HAS_DXF40: _bindgen_ty_16 = 128;
pub const OPTS_R11_DIMENSION_HAS_ROTATION: _bindgen_ty_16 = 256;
pub const OPTS_R11_DIMENSION_UNKNOWN_512: _bindgen_ty_16 = 512;
pub const OPTS_R11_DIMENSION_HAS_DXF53: _bindgen_ty_16 = 1024;
pub const OPTS_R11_DIMENSION_UNKNOWN_2048: _bindgen_ty_16 = 2048;
pub const OPTS_R11_DIMENSION_UNKNOWN_4096: _bindgen_ty_16 = 4096;
pub const OPTS_R11_DIMENSION_UNKNOWN_8192: _bindgen_ty_16 = 8192;
pub const OPTS_R11_DIMENSION_HAS_EXTRUSION: _bindgen_ty_16 = 16384;
pub const OPTS_R11_DIMENSION_HAS_DIMSTYLE: _bindgen_ty_16 = 32768;
pub type _bindgen_ty_16 = ::std::os::raw::c_int;
pub const OPTS_R11_INSERT_HAS_SCALE_X: _bindgen_ty_17 = 1;
pub const OPTS_R11_INSERT_HAS_SCALE_Y: _bindgen_ty_17 = 2;
pub const OPTS_R11_INSERT_HAS_ROTATION: _bindgen_ty_17 = 4;
pub const OPTS_R11_INSERT_HAS_SCALE_Z: _bindgen_ty_17 = 8;
pub const OPTS_R11_INSERT_HAS_NUM_COLS: _bindgen_ty_17 = 16;
pub const OPTS_R11_INSERT_HAS_NUM_ROWS: _bindgen_ty_17 = 32;
pub const OPTS_R11_INSERT_HAS_COL_SPACING: _bindgen_ty_17 = 64;
pub const OPTS_R11_INSERT_HAS_ROW_SPACING: _bindgen_ty_17 = 128;
pub const OPTS_R11_INSERT_HAS_EXTRUSION: _bindgen_ty_17 = 256;
pub type _bindgen_ty_17 = ::std::os::raw::c_int;
pub const OPTS_R11_LINE_HAS_EXTRUSION: _bindgen_ty_18 = 1;
pub type _bindgen_ty_18 = ::std::os::raw::c_int;
pub const OPTS_R11_POINT_HAS_EXTRUSION: _bindgen_ty_19 = 1;
pub const OPTS_R11_POINT_HAS_X_ANG: _bindgen_ty_19 = 2;
pub type _bindgen_ty_19 = ::std::os::raw::c_int;
pub const OPTS_R11_POLYLINE_HAS_FLAG: _bindgen_ty_20 = 1;
pub const OPTS_R11_POLYLINE_HAS_START_WIDTH: _bindgen_ty_20 = 2;
pub const OPTS_R11_POLYLINE_HAS_END_WIDTH: _bindgen_ty_20 = 4;
pub const OPTS_R11_POLYLINE_HAS_EXTRUSION: _bindgen_ty_20 = 8;
pub const OPTS_R11_POLYLINE_HAS_M_VERTS: _bindgen_ty_20 = 16;
pub const OPTS_R11_POLYLINE_HAS_N_VERTS: _bindgen_ty_20 = 32;
pub const OPTS_R11_POLYLINE_HAS_M_DENSITY: _bindgen_ty_20 = 64;
pub const OPTS_R11_POLYLINE_HAS_N_DENSITY: _bindgen_ty_20 = 128;
pub const OPTS_R11_POLYLINE_HAS_CURVETYPE: _bindgen_ty_20 = 256;
pub const OPTS_R11_POLYLINE_IN_EXTRA: _bindgen_ty_20 = 32768;
pub type _bindgen_ty_20 = ::std::os::raw::c_int;
pub const OPTS_R11_SHAPE_HAS_ROTATION: _bindgen_ty_21 = 1;
pub const OPTS_R11_SHAPE_HAS_LOAD_NUM: _bindgen_ty_21 = 2;
pub const OPTS_R11_SHAPE_HAS_WIDTH_FACTOR: _bindgen_ty_21 = 4;
pub const OPTS_R11_SHAPE_HAS_OBLIQUE_ANGLE: _bindgen_ty_21 = 8;
pub type _bindgen_ty_21 = ::std::os::raw::c_int;
pub const OPTS_R11_SOLID_HAS_EXTRUSION: _bindgen_ty_22 = 1;
pub type _bindgen_ty_22 = ::std::os::raw::c_int;
pub const OPTS_R11_TEXT_HAS_ROTATION: _bindgen_ty_23 = 1;
pub const OPTS_R11_TEXT_HAS_WIDTH_FACTOR: _bindgen_ty_23 = 2;
pub const OPTS_R11_TEXT_HAS_OBLIQUE_ANGLE: _bindgen_ty_23 = 4;
pub const OPTS_R11_TEXT_HAS_STYLE: _bindgen_ty_23 = 8;
pub const OPTS_R11_TEXT_HAS_GENERATION: _bindgen_ty_23 = 16;
pub const OPTS_R11_TEXT_HAS_HORIZ_ALIGNMENT: _bindgen_ty_23 = 32;
pub const OPTS_R11_TEXT_HAS_ALIGNMENT_POINT: _bindgen_ty_23 = 64;
pub const OPTS_R11_TEXT_HAS_EXTRUSION: _bindgen_ty_23 = 128;
pub const OPTS_R11_TEXT_ALIGNED_VERT_TO: _bindgen_ty_23 = 256;
pub type _bindgen_ty_23 = ::std::os::raw::c_int;
pub const OPTS_R11_VERTEX_HAS_START_WIDTH: _bindgen_ty_24 = 1;
pub const OPTS_R11_VERTEX_HAS_END_WIDTH: _bindgen_ty_24 = 2;
pub const OPTS_R11_VERTEX_HAS_BULGE: _bindgen_ty_24 = 4;
pub const OPTS_R11_VERTEX_HAS_FLAG: _bindgen_ty_24 = 8;
pub const OPTS_R11_VERTEX_HAS_TANGENT_DIR: _bindgen_ty_24 = 16;
pub const OPTS_R11_VERTEX_HAS_INDEX1: _bindgen_ty_24 = 32;
pub const OPTS_R11_VERTEX_HAS_INDEX2: _bindgen_ty_24 = 64;
pub const OPTS_R11_VERTEX_HAS_INDEX3: _bindgen_ty_24 = 128;
pub const OPTS_R11_VERTEX_UNKNOWN_256: _bindgen_ty_24 = 256;
pub const OPTS_R11_VERTEX_HAS_INDEX4: _bindgen_ty_24 = 512;
pub const OPTS_R11_VERTEX_UNKNOWN_1024: _bindgen_ty_24 = 1024;
pub const OPTS_R11_VERTEX_UNKNOWN_2048: _bindgen_ty_24 = 2048;
pub const OPTS_R11_VERTEX_UNKNOWN_4096: _bindgen_ty_24 = 4096;
pub const OPTS_R11_VERTEX_UNKNOWN_8192: _bindgen_ty_24 = 8192;
pub const OPTS_R11_VERTEX_HAS_NOT_X_Y: _bindgen_ty_24 = 16384;
pub type _bindgen_ty_24 = ::std::os::raw::c_int;
pub const FLAG_TABLE_IS_XREF_REF: _bindgen_ty_25 = 16;
pub const FLAG_TABLE_IS_XREF_RESOLVED: _bindgen_ty_25 = 32;
pub const FLAG_TABLE_IS_XREF_DEP: _bindgen_ty_25 = 64;
pub const FLAG_TABLE_IS_REMOVED: _bindgen_ty_25 = 128;
pub type _bindgen_ty_25 = ::std::os::raw::c_int;
pub const FLAG_BLOCK_ANONYMOUS: _bindgen_ty_26 = 1;
pub const FLAG_BLOCK_HAS_ATTRIBS: _bindgen_ty_26 = 2;
pub const FLAG_BLOCK_IS_EXT_REF: _bindgen_ty_26 = 4;
pub const FLAG_BLOCK_IS_XREF_OVERLAY: _bindgen_ty_26 = 8;
pub type _bindgen_ty_26 = ::std::os::raw::c_int;
pub const FLAG_ATTDEF_INVISIBLE: _bindgen_ty_27 = 1;
pub const FLAG_ATTDEF_CONSTANT: _bindgen_ty_27 = 2;
pub const FLAG_ATTDEF_VERIFY: _bindgen_ty_27 = 4;
pub const FLAG_ATTDEF_PRESET: _bindgen_ty_27 = 8;
pub type _bindgen_ty_27 = ::std::os::raw::c_int;
pub const FLAG_ATTRIB_INVISIBLE: _bindgen_ty_28 = 1;
pub const FLAG_ATTRIB_CONSTANT: _bindgen_ty_28 = 2;
pub const FLAG_ATTRIB_VERIFY: _bindgen_ty_28 = 4;
pub const FLAG_ATTRIB_PRESET: _bindgen_ty_28 = 8;
pub type _bindgen_ty_28 = ::std::os::raw::c_int;
pub const FLAG_POLYLINE_CLOSED: _bindgen_ty_29 = 1;
pub const FLAG_POLYLINE_CURVE_FIT: _bindgen_ty_29 = 2;
pub const FLAG_POLYLINE_SPLINE_FIT: _bindgen_ty_29 = 4;
pub const FLAG_POLYLINE_3D: _bindgen_ty_29 = 8;
pub const FLAG_POLYLINE_MESH: _bindgen_ty_29 = 16;
pub const FLAG_POLYLINE_MESH_CLOSED: _bindgen_ty_29 = 32;
pub const FLAG_POLYLINE_PFACE_MESH: _bindgen_ty_29 = 64;
pub const FLAG_POLYLINE_LT_PATTERN_CONTINUES: _bindgen_ty_29 = 128;
pub type _bindgen_ty_29 = ::std::os::raw::c_int;
pub const FLAG_LAYER_FROZEN: _bindgen_ty_30 = 1;
pub const FLAG_LAYER_FROZEN_IN_NEW: _bindgen_ty_30 = 2;
pub const FLAG_LAYER_LOCKED: _bindgen_ty_30 = 4;
pub const FLAG_LAYER_PLOTFLAG: _bindgen_ty_30 = 8;
pub type _bindgen_ty_30 = ::std::os::raw::c_int;
pub const FLAG_STYLE_SHAPE: _bindgen_ty_31 = 1;
pub const FLAG_STYLE_VERTICAL_TEXT: _bindgen_ty_31 = 4;
pub type _bindgen_ty_31 = ::std::os::raw::c_int;
pub const FLAG_VIEW_PSPACE: _bindgen_ty_32 = 1;
pub type _bindgen_ty_32 = ::std::os::raw::c_int;
pub const FLAG_VX_IS_ON: _bindgen_ty_33 = 1;
pub type _bindgen_ty_33 = ::std::os::raw::c_int;
pub const FLAG_LWPOLYLINE_HAS_EXTRUSION: _bindgen_ty_34 = 1;
pub const FLAG_LWPOLYLINE_HAS_THICKNESS: _bindgen_ty_34 = 2;
pub const FLAG_LWPOLYLINE_HAS_CONSTWIDTH: _bindgen_ty_34 = 4;
pub const FLAG_LWPOLYLINE_HAS_ELEVATION: _bindgen_ty_34 = 8;
pub const FLAG_LWPOLYLINE_HAS_NUM_BULGES: _bindgen_ty_34 = 16;
pub const FLAG_LWPOLYLINE_HAS_NUM_WIDTHS: _bindgen_ty_34 = 32;
pub const FLAG_LWPOLYLINE_UNKNOWN_64: _bindgen_ty_34 = 64;
pub const FLAG_LWPOLYLINE_UNKNOWN_128: _bindgen_ty_34 = 128;
pub const FLAG_LWPOLYLINE_PLINEGEN: _bindgen_ty_34 = 256;
pub const FLAG_LWPOLYLINE_CLOSED: _bindgen_ty_34 = 512;
pub const FLAG_LWPOLYLINE_VERTEXIDCOUNT: _bindgen_ty_34 = 1024;
pub type _bindgen_ty_34 = ::std::os::raw::c_int;
pub const FLAG_VERTEX_EXTRA_VERTEX: _bindgen_ty_35 = 1;
pub const FLAG_VERTEX_CURVE_FIT: _bindgen_ty_35 = 2;
pub const FLAG_VERTEX_UNUSED_4: _bindgen_ty_35 = 4;
pub const FLAG_VERTEX_SPLINE_FIT: _bindgen_ty_35 = 8;
pub const FLAG_VERTEX_SPLINE_FRAME_CONTROL_POINT: _bindgen_ty_35 = 16;
pub const FLAG_VERTEX_3D: _bindgen_ty_35 = 32;
pub const FLAG_VERTEX_MESH: _bindgen_ty_35 = 64;
pub const FLAG_VERTEX_PFACE_MESH: _bindgen_ty_35 = 128;
pub type _bindgen_ty_35 = ::std::os::raw::c_int;
pub const TEXT_GENERATION_BACKWARDS: _bindgen_ty_36 = 2;
pub const TEXT_GENERATION_UPSIDE_DOWN: _bindgen_ty_36 = 4;
pub type _bindgen_ty_36 = ::std::os::raw::c_int;
pub const HORIZ_ALIGNMENT_LEFT: _bindgen_ty_37 = 0;
pub const HORIZ_ALIGNMENT_CENTER: _bindgen_ty_37 = 1;
pub const HORIZ_ALIGNMENT_RIGHT: _bindgen_ty_37 = 2;
pub const HORIZ_ALIGNMENT_ALIGNED: _bindgen_ty_37 = 3;
pub const HORIZ_ALIGNMENT_MIDDLE: _bindgen_ty_37 = 4;
pub const HORIZ_ALIGNMENT_FIT: _bindgen_ty_37 = 5;
pub type _bindgen_ty_37 = ::std::os::raw::c_int;
pub const VERT_ALIGNMENT_BASELINE: _bindgen_ty_38 = 0;
pub const VERT_ALIGNMENT_BOTTOM: _bindgen_ty_38 = 1;
pub const VERT_ALIGNMENT_MIDDLE: _bindgen_ty_38 = 2;
pub const VERT_ALIGNMENT_TOP: _bindgen_ty_38 = 3;
pub type _bindgen_ty_38 = ::std::os::raw::c_int;
pub const MLINE_JUSTIFICATION_TOP: _bindgen_ty_39 = 0;
pub const MLINE_JUSTIFICATION_MIDDLE: _bindgen_ty_39 = 1;
pub const MLINE_JUSTIFICATION_BOTTOM: _bindgen_ty_39 = 2;
pub type _bindgen_ty_39 = ::std::os::raw::c_int;
pub const POLYLINE_CURVETYPE_DEFAULT: _bindgen_ty_40 = 0;
pub const POLYLINE_CURVETYPE_QUADR_BSPLINE: _bindgen_ty_40 = 5;
pub const POLYLINE_CURVETYPE_CUBIC_BSPLINE: _bindgen_ty_40 = 6;
pub const POLYLINE_CURVETYPE_BEZIER_SURFACE: _bindgen_ty_40 = 8;
pub type _bindgen_ty_40 = ::std::os::raw::c_int;
pub const LEADER_PATHTYPE_STRAIGHT: _bindgen_ty_41 = 0;
pub const LEADER_PATHTYPE_SPLINE: _bindgen_ty_41 = 1;
pub type _bindgen_ty_41 = ::std::os::raw::c_int;
pub const LEADER_ANNOTTYPE_MTEXT: _bindgen_ty_42 = 0;
pub const LEADER_ANNOTTYPE_TOLERANCE: _bindgen_ty_42 = 1;
pub const LEADER_ANNOTTYPE_INSERT: _bindgen_ty_42 = 2;
pub const LEADER_ANNOTTYPE_NO_ANNOT: _bindgen_ty_42 = 3;
pub type _bindgen_ty_42 = ::std::os::raw::c_int;
pub const MLINE_FLAGS_HAS_VERTEX: _bindgen_ty_43 = 1;
pub const MLINE_FLAGS_CLOSED: _bindgen_ty_43 = 2;
pub const MLINE_FLAGS_SUPPRESS_START_CAPS: _bindgen_ty_43 = 4;
pub const MLINE_FLAGS_SUPPRESS_END_CAPS: _bindgen_ty_43 = 8;
pub type _bindgen_ty_43 = ::std::os::raw::c_int;
pub const LIGHT_TYPE_DISTANT: _bindgen_ty_44 = 1;
pub const LIGHT_TYPE_POINT: _bindgen_ty_44 = 2;
pub const LIGHT_TYPE_SPOT: _bindgen_ty_44 = 3;
pub type _bindgen_ty_44 = ::std::os::raw::c_int;
pub const LIGHT_ATTENUATION_TYPE_NONE: _bindgen_ty_45 = 0;
pub const LIGHT_ATTENUATION_TYPE_INV_LINEAR: _bindgen_ty_45 = 1;
pub const LIGHT_ATTENUATION_TYPE_INV_SQUARE: _bindgen_ty_45 = 2;
pub type _bindgen_ty_45 = ::std::os::raw::c_int;
pub const LIGHT_EXTLIGHT_SHAPE_LINEAR: _bindgen_ty_46 = 0;
pub const LIGHT_EXTLIGHT_SHAPE_RECT: _bindgen_ty_46 = 1;
pub const LIGHT_EXTLIGHT_SHAPE_DISK: _bindgen_ty_46 = 2;
pub const LIGHT_EXTLIGHT_SHAPE_CYLINDER: _bindgen_ty_46 = 3;
pub const LIGHT_EXTLIGHT_SHAPE_SPHERE: _bindgen_ty_46 = 4;
pub type _bindgen_ty_46 = ::std::os::raw::c_int;
pub const _3DFACE_INVISIBLE_EDGE1: _bindgen_ty_47 = 1;
pub const _3DFACE_INVISIBLE_EDGE2: _bindgen_ty_47 = 2;
pub const _3DFACE_INVISIBLE_EDGE3: _bindgen_ty_47 = 4;
pub const _3DFACE_INVISIBLE_EDGE4: _bindgen_ty_47 = 8;
pub type _bindgen_ty_47 = ::std::os::raw::c_int;
#[doc = "Common entity attributes"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_entity {
    #[doc = "< link to the parent"]
    pub objid: BITCODE_BL,
    pub tio: _dwg_object_entity__bindgen_ty_1,
    pub dwg: *mut _dwg_struct,
    pub num_eed: BITCODE_BL,
    pub eed: *mut Dwg_Eed,
    pub preview_exists: BITCODE_B,
    pub preview_is_proxy: BITCODE_B,
    #[doc = "< DXF 160 for bitmaps, DXF 92 for PROXY vector data.\ne.g. INSERT, MULTILEADER"]
    pub preview_size: BITCODE_BLL,
    #[doc = "< DXF 310"]
    pub preview: BITCODE_TF,
    #[doc = "< has no owner handle:\n0 has no ownerhandle, 1 is PSPACE, 2 is MSPACE\n3 has ownerhandle."]
    pub entmode: BITCODE_BB,
    pub num_reactors: BITCODE_BL,
    #[doc = "< r2004+"]
    pub is_xdic_missing: BITCODE_B,
    #[doc = "< r13-r14"]
    pub isbylayerlt: BITCODE_B,
    #[doc = "< r13-r2000"]
    pub nolinks: BITCODE_B,
    #[doc = "< r2013+ AcDs datastore"]
    pub has_ds_data: BITCODE_B,
    pub color: BITCODE_CMC,
    pub ltype_scale: BITCODE_BD,
    #[doc = "< r2000+"]
    pub ltype_flags: BITCODE_BB,
    #[doc = "< r2000+"]
    pub plotstyle_flags: BITCODE_BB,
    #[doc = "< r2007+"]
    pub material_flags: BITCODE_BB,
    #[doc = "< r2007+: 0 both, 1 casts, 2, receives,\n3 has handle. DXF 284"]
    pub shadow_flags: BITCODE_RC,
    #[doc = "< r2010+"]
    pub has_full_visualstyle: BITCODE_B,
    #[doc = "< r2010+"]
    pub has_face_visualstyle: BITCODE_B,
    #[doc = "< r2010+"]
    pub has_edge_visualstyle: BITCODE_B,
    pub invisible: BITCODE_BS,
    #[doc = "< r2000+, see dxf_cvt_lweight()"]
    pub linewt: BITCODE_RC,
    pub flag_r11: BITCODE_RC,
    pub opts_r11: BITCODE_RS,
    pub extra_r11: BITCODE_RS,
    pub color_r11: BITCODE_RCd,
    pub elevation_r11: BITCODE_RD,
    pub thickness_r11: BITCODE_RD,
    pub viewport: BITCODE_H,
    pub __iterator: BITCODE_BL,
    #[doc = "< code 5, DXF 330 mspace, pspace or owner of subentity"]
    pub ownerhandle: BITCODE_H,
    #[doc = "< r13+ code 4, DXF 102 {ACAD_XDICTIONARY, 330"]
    pub reactors: *mut BITCODE_H,
    #[doc = "< r13+ code 3, DXF 102 {ACAD_REACTORS, 360"]
    pub xdicobjhandle: BITCODE_H,
    #[doc = "< r13-r2000 code 4"]
    pub prev_entity: BITCODE_H,
    #[doc = "< r13-r2000 code 4"]
    pub next_entity: BITCODE_H,
    #[doc = "< code 5, DXF 8"]
    pub layer: BITCODE_H,
    #[doc = "< code 5, DXF 6"]
    pub ltype: BITCODE_H,
    #[doc = "< r2007+ code 5, DXF 347"]
    pub material: BITCODE_H,
    #[doc = "< r2007+ code 5 no DXF"]
    pub shadow: BITCODE_H,
    #[doc = "< r2000+ code 5, DXF 390"]
    pub plotstyle: BITCODE_H,
    #[doc = "< r2010+ code 5, DXF 348"]
    pub full_visualstyle: BITCODE_H,
    pub face_visualstyle: BITCODE_H,
    pub edge_visualstyle: BITCODE_H,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _dwg_object_entity__bindgen_ty_1 {
    pub UNUSED: *mut Dwg_Entity_UNUSED,
    pub DIMENSION_common: *mut Dwg_DIMENSION_common,
    pub _3DFACE: *mut Dwg_Entity__3DFACE,
    pub _3DSOLID: *mut Dwg_Entity__3DSOLID,
    pub ARC: *mut Dwg_Entity_ARC,
    pub ATTDEF: *mut Dwg_Entity_ATTDEF,
    pub ATTRIB: *mut Dwg_Entity_ATTRIB,
    pub BLOCK: *mut Dwg_Entity_BLOCK,
    pub BODY: *mut Dwg_Entity_BODY,
    pub CIRCLE: *mut Dwg_Entity_CIRCLE,
    pub DIMENSION_ALIGNED: *mut Dwg_Entity_DIMENSION_ALIGNED,
    pub DIMENSION_ANG2LN: *mut Dwg_Entity_DIMENSION_ANG2LN,
    pub DIMENSION_ANG3PT: *mut Dwg_Entity_DIMENSION_ANG3PT,
    pub DIMENSION_DIAMETER: *mut Dwg_Entity_DIMENSION_DIAMETER,
    pub DIMENSION_LINEAR: *mut Dwg_Entity_DIMENSION_LINEAR,
    pub DIMENSION_ORDINATE: *mut Dwg_Entity_DIMENSION_ORDINATE,
    pub DIMENSION_RADIUS: *mut Dwg_Entity_DIMENSION_RADIUS,
    pub ELLIPSE: *mut Dwg_Entity_ELLIPSE,
    pub ENDBLK: *mut Dwg_Entity_ENDBLK,
    pub INSERT: *mut Dwg_Entity_INSERT,
    pub LEADER: *mut Dwg_Entity_LEADER,
    pub LINE: *mut Dwg_Entity_LINE,
    pub LOAD: *mut Dwg_Entity_LOAD,
    pub MINSERT: *mut Dwg_Entity_MINSERT,
    pub MLINE: *mut Dwg_Entity_MLINE,
    pub MTEXT: *mut Dwg_Entity_MTEXT,
    pub OLEFRAME: *mut Dwg_Entity_OLEFRAME,
    pub POINT: *mut Dwg_Entity_POINT,
    pub POLYLINE_2D: *mut Dwg_Entity_POLYLINE_2D,
    pub POLYLINE_3D: *mut Dwg_Entity_POLYLINE_3D,
    pub POLYLINE_MESH: *mut Dwg_Entity_POLYLINE_MESH,
    pub POLYLINE_PFACE: *mut Dwg_Entity_POLYLINE_PFACE,
    pub PROXY_ENTITY: *mut Dwg_Entity_PROXY_ENTITY,
    pub RAY: *mut Dwg_Entity_RAY,
    pub REGION: *mut Dwg_Entity_REGION,
    pub SEQEND: *mut Dwg_Entity_SEQEND,
    pub SHAPE: *mut Dwg_Entity_SHAPE,
    pub SOLID: *mut Dwg_Entity_SOLID,
    pub SPLINE: *mut Dwg_Entity_SPLINE,
    pub TEXT: *mut Dwg_Entity_TEXT,
    pub TOLERANCE: *mut Dwg_Entity_TOLERANCE,
    pub TRACE: *mut Dwg_Entity_TRACE,
    pub UNKNOWN_ENT: *mut Dwg_Entity_UNKNOWN_ENT,
    pub VERTEX_2D: *mut Dwg_Entity_VERTEX_2D,
    pub VERTEX_3D: *mut Dwg_Entity_VERTEX_3D,
    pub VERTEX_MESH: *mut Dwg_Entity_VERTEX_MESH,
    pub VERTEX_PFACE: *mut Dwg_Entity_VERTEX_PFACE,
    pub VERTEX_PFACE_FACE: *mut Dwg_Entity_VERTEX_PFACE_FACE,
    pub VIEWPORT: *mut Dwg_Entity_VIEWPORT,
    pub XLINE: *mut Dwg_Entity_XLINE,
    pub _3DLINE: *mut Dwg_Entity__3DLINE,
    pub CAMERA: *mut Dwg_Entity_CAMERA,
    pub DGNUNDERLAY: *mut Dwg_Entity_DGNUNDERLAY,
    pub DWFUNDERLAY: *mut Dwg_Entity_DWFUNDERLAY,
    pub ENDREP: *mut Dwg_Entity_ENDREP,
    pub HATCH: *mut Dwg_Entity_HATCH,
    pub IMAGE: *mut Dwg_Entity_IMAGE,
    pub JUMP: *mut Dwg_Entity_JUMP,
    pub LIGHT: *mut Dwg_Entity_LIGHT,
    pub LWPOLYLINE: *mut Dwg_Entity_LWPOLYLINE,
    pub MESH: *mut Dwg_Entity_MESH,
    pub MULTILEADER: *mut Dwg_Entity_MULTILEADER,
    pub OLE2FRAME: *mut Dwg_Entity_OLE2FRAME,
    pub PDFUNDERLAY: *mut Dwg_Entity_PDFUNDERLAY,
    pub REPEAT: *mut Dwg_Entity_REPEAT,
    pub SECTIONOBJECT: *mut Dwg_Entity_SECTIONOBJECT,
    pub ARC_DIMENSION: *mut Dwg_Entity_ARC_DIMENSION,
    pub HELIX: *mut Dwg_Entity_HELIX,
    pub LARGE_RADIAL_DIMENSION: *mut Dwg_Entity_LARGE_RADIAL_DIMENSION,
    pub LAYOUTPRINTCONFIG: *mut Dwg_Entity_LAYOUTPRINTCONFIG,
    pub PLANESURFACE: *mut Dwg_Entity_PLANESURFACE,
    pub POINTCLOUD: *mut Dwg_Entity_POINTCLOUD,
    pub POINTCLOUDEX: *mut Dwg_Entity_POINTCLOUDEX,
    pub WIPEOUT: *mut Dwg_Entity_WIPEOUT,
    pub ALIGNMENTPARAMETERENTITY: *mut Dwg_Entity_ALIGNMENTPARAMETERENTITY,
    pub ARCALIGNEDTEXT: *mut Dwg_Entity_ARCALIGNEDTEXT,
    pub BASEPOINTPARAMETERENTITY: *mut Dwg_Entity_BASEPOINTPARAMETERENTITY,
    pub EXTRUDEDSURFACE: *mut Dwg_Entity_EXTRUDEDSURFACE,
    pub FLIPGRIPENTITY: *mut Dwg_Entity_FLIPGRIPENTITY,
    pub FLIPPARAMETERENTITY: *mut Dwg_Entity_FLIPPARAMETERENTITY,
    pub GEOPOSITIONMARKER: *mut Dwg_Entity_GEOPOSITIONMARKER,
    pub LINEARGRIPENTITY: *mut Dwg_Entity_LINEARGRIPENTITY,
    pub LINEARPARAMETERENTITY: *mut Dwg_Entity_LINEARPARAMETERENTITY,
    pub LOFTEDSURFACE: *mut Dwg_Entity_LOFTEDSURFACE,
    pub MPOLYGON: *mut Dwg_Entity_MPOLYGON,
    pub NAVISWORKSMODEL: *mut Dwg_Entity_NAVISWORKSMODEL,
    pub NURBSURFACE: *mut Dwg_Entity_NURBSURFACE,
    pub POINTPARAMETERENTITY: *mut Dwg_Entity_POINTPARAMETERENTITY,
    pub POLARGRIPENTITY: *mut Dwg_Entity_POLARGRIPENTITY,
    pub REVOLVEDSURFACE: *mut Dwg_Entity_REVOLVEDSURFACE,
    pub ROTATIONGRIPENTITY: *mut Dwg_Entity_ROTATIONGRIPENTITY,
    pub ROTATIONPARAMETERENTITY: *mut Dwg_Entity_ROTATIONPARAMETERENTITY,
    pub RTEXT: *mut Dwg_Entity_RTEXT,
    pub SWEPTSURFACE: *mut Dwg_Entity_SWEPTSURFACE,
    pub TABLE: *mut Dwg_Entity_TABLE,
    pub VISIBILITYGRIPENTITY: *mut Dwg_Entity_VISIBILITYGRIPENTITY,
    pub VISIBILITYPARAMETERENTITY: *mut Dwg_Entity_VISIBILITYPARAMETERENTITY,
    pub XYGRIPENTITY: *mut Dwg_Entity_XYGRIPENTITY,
    pub XYPARAMETERENTITY: *mut Dwg_Entity_XYPARAMETERENTITY,
}
#[test]
fn bindgen_test_layout__dwg_object_entity__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_entity__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_entity__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_dwg_object_entity__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_entity__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_entity__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UNUSED) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(UNUSED)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMENSION_common) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(DIMENSION_common)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._3DFACE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(_3DFACE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._3DSOLID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(_3DSOLID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ARC) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(ARC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ATTDEF) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(ATTDEF)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ATTRIB) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(ATTRIB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BLOCK) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(BLOCK)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BODY) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(BODY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CIRCLE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(CIRCLE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMENSION_ALIGNED) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(DIMENSION_ALIGNED)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMENSION_ANG2LN) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(DIMENSION_ANG2LN)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMENSION_ANG3PT) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(DIMENSION_ANG3PT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMENSION_DIAMETER) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(DIMENSION_DIAMETER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMENSION_LINEAR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(DIMENSION_LINEAR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMENSION_ORDINATE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(DIMENSION_ORDINATE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMENSION_RADIUS) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(DIMENSION_RADIUS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ELLIPSE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(ELLIPSE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ENDBLK) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(ENDBLK)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).INSERT) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(INSERT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LEADER) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(LEADER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LINE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(LINE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LOAD) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(LOAD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MINSERT) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(MINSERT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MLINE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(MLINE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MTEXT) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(MTEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OLEFRAME) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(OLEFRAME)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).POINT) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(POINT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).POLYLINE_2D) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(POLYLINE_2D)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).POLYLINE_3D) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(POLYLINE_3D)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).POLYLINE_MESH) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(POLYLINE_MESH)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).POLYLINE_PFACE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(POLYLINE_PFACE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PROXY_ENTITY) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(PROXY_ENTITY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RAY) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(RAY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).REGION) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(REGION)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SEQEND) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(SEQEND)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SHAPE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(SHAPE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SOLID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(SOLID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SPLINE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(SPLINE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TEXT) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(TEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TOLERANCE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(TOLERANCE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TRACE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(TRACE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UNKNOWN_ENT) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(UNKNOWN_ENT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VERTEX_2D) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(VERTEX_2D)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VERTEX_3D) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(VERTEX_3D)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VERTEX_MESH) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(VERTEX_MESH)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VERTEX_PFACE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(VERTEX_PFACE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VERTEX_PFACE_FACE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(VERTEX_PFACE_FACE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VIEWPORT) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(VIEWPORT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).XLINE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(XLINE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._3DLINE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(_3DLINE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CAMERA) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(CAMERA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DGNUNDERLAY) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(DGNUNDERLAY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DWFUNDERLAY) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(DWFUNDERLAY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ENDREP) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(ENDREP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HATCH) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(HATCH)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IMAGE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(IMAGE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).JUMP) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(JUMP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LIGHT) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(LIGHT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LWPOLYLINE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(LWPOLYLINE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MESH) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(MESH)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MULTILEADER) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(MULTILEADER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OLE2FRAME) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(OLE2FRAME)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PDFUNDERLAY) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(PDFUNDERLAY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).REPEAT) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(REPEAT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SECTIONOBJECT) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(SECTIONOBJECT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ARC_DIMENSION) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(ARC_DIMENSION)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HELIX) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(HELIX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LARGE_RADIAL_DIMENSION) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(LARGE_RADIAL_DIMENSION)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LAYOUTPRINTCONFIG) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(LAYOUTPRINTCONFIG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PLANESURFACE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(PLANESURFACE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).POINTCLOUD) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(POINTCLOUD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).POINTCLOUDEX) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(POINTCLOUDEX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WIPEOUT) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(WIPEOUT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ALIGNMENTPARAMETERENTITY) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(ALIGNMENTPARAMETERENTITY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ARCALIGNEDTEXT) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(ARCALIGNEDTEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BASEPOINTPARAMETERENTITY) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(BASEPOINTPARAMETERENTITY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EXTRUDEDSURFACE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(EXTRUDEDSURFACE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FLIPGRIPENTITY) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(FLIPGRIPENTITY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FLIPPARAMETERENTITY) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(FLIPPARAMETERENTITY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GEOPOSITIONMARKER) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(GEOPOSITIONMARKER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LINEARGRIPENTITY) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(LINEARGRIPENTITY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LINEARPARAMETERENTITY) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(LINEARPARAMETERENTITY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LOFTEDSURFACE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(LOFTEDSURFACE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MPOLYGON) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(MPOLYGON)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NAVISWORKSMODEL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(NAVISWORKSMODEL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NURBSURFACE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(NURBSURFACE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).POINTPARAMETERENTITY) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(POINTPARAMETERENTITY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).POLARGRIPENTITY) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(POLARGRIPENTITY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).REVOLVEDSURFACE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(REVOLVEDSURFACE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ROTATIONGRIPENTITY) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(ROTATIONGRIPENTITY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ROTATIONPARAMETERENTITY) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(ROTATIONPARAMETERENTITY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RTEXT) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(RTEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SWEPTSURFACE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(SWEPTSURFACE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TABLE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(TABLE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VISIBILITYGRIPENTITY) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(VISIBILITYGRIPENTITY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VISIBILITYPARAMETERENTITY) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(VISIBILITYPARAMETERENTITY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).XYGRIPENTITY) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(XYGRIPENTITY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).XYPARAMETERENTITY) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity__bindgen_ty_1),
            "::",
            stringify!(XYPARAMETERENTITY)
        )
    );
}
#[test]
fn bindgen_test_layout__dwg_object_entity() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_entity> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_entity>(),
        296usize,
        concat!("Size of: ", stringify!(_dwg_object_entity))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_entity>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_entity))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity),
            "::",
            stringify!(objid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tio) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity),
            "::",
            stringify!(tio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dwg) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity),
            "::",
            stringify!(dwg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_eed) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity),
            "::",
            stringify!(num_eed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eed) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity),
            "::",
            stringify!(eed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).preview_exists) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity),
            "::",
            stringify!(preview_exists)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).preview_is_proxy) as usize - ptr as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity),
            "::",
            stringify!(preview_is_proxy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).preview_size) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity),
            "::",
            stringify!(preview_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).preview) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity),
            "::",
            stringify!(preview)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entmode) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity),
            "::",
            stringify!(entmode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_reactors) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity),
            "::",
            stringify!(num_reactors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_xdic_missing) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity),
            "::",
            stringify!(is_xdic_missing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isbylayerlt) as usize - ptr as usize },
        73usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity),
            "::",
            stringify!(isbylayerlt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nolinks) as usize - ptr as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity),
            "::",
            stringify!(nolinks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_ds_data) as usize - ptr as usize },
        75usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity),
            "::",
            stringify!(has_ds_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ltype_scale) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity),
            "::",
            stringify!(ltype_scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ltype_flags) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity),
            "::",
            stringify!(ltype_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plotstyle_flags) as usize - ptr as usize },
        137usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity),
            "::",
            stringify!(plotstyle_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).material_flags) as usize - ptr as usize },
        138usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity),
            "::",
            stringify!(material_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shadow_flags) as usize - ptr as usize },
        139usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity),
            "::",
            stringify!(shadow_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_full_visualstyle) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity),
            "::",
            stringify!(has_full_visualstyle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_face_visualstyle) as usize - ptr as usize },
        141usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity),
            "::",
            stringify!(has_face_visualstyle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_edge_visualstyle) as usize - ptr as usize },
        142usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity),
            "::",
            stringify!(has_edge_visualstyle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).invisible) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity),
            "::",
            stringify!(invisible)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).linewt) as usize - ptr as usize },
        146usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity),
            "::",
            stringify!(linewt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag_r11) as usize - ptr as usize },
        147usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity),
            "::",
            stringify!(flag_r11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opts_r11) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity),
            "::",
            stringify!(opts_r11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extra_r11) as usize - ptr as usize },
        150usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity),
            "::",
            stringify!(extra_r11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color_r11) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity),
            "::",
            stringify!(color_r11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elevation_r11) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity),
            "::",
            stringify!(elevation_r11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thickness_r11) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity),
            "::",
            stringify!(thickness_r11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewport) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity),
            "::",
            stringify!(viewport)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__iterator) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity),
            "::",
            stringify!(__iterator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ownerhandle) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity),
            "::",
            stringify!(ownerhandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reactors) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity),
            "::",
            stringify!(reactors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xdicobjhandle) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity),
            "::",
            stringify!(xdicobjhandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev_entity) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity),
            "::",
            stringify!(prev_entity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next_entity) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity),
            "::",
            stringify!(next_entity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layer) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity),
            "::",
            stringify!(layer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ltype) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity),
            "::",
            stringify!(ltype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).material) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity),
            "::",
            stringify!(material)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shadow) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity),
            "::",
            stringify!(shadow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plotstyle) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity),
            "::",
            stringify!(plotstyle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).full_visualstyle) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity),
            "::",
            stringify!(full_visualstyle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).face_visualstyle) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity),
            "::",
            stringify!(face_visualstyle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_visualstyle) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_entity),
            "::",
            stringify!(edge_visualstyle)
        )
    );
}
#[doc = "Common entity attributes"]
pub type Dwg_Object_Entity = _dwg_object_entity;
#[doc = "Ordinary object attributes"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object_object {
    #[doc = "< link to the parent"]
    pub objid: BITCODE_BL,
    pub tio: _dwg_object_object__bindgen_ty_1,
    pub dwg: *mut _dwg_struct,
    pub num_eed: BITCODE_BL,
    pub eed: *mut Dwg_Eed,
    #[doc = "< code 5, DXF 330"]
    pub ownerhandle: BITCODE_H,
    pub num_reactors: BITCODE_BL,
    #[doc = "< r13+ code 4, DXF 102 {ACAD_XDICTIONARY, 330"]
    pub reactors: *mut BITCODE_H,
    #[doc = "< r13+ code 3, DXF 102 {ACAD_REACTORS, 360"]
    pub xdicobjhandle: BITCODE_H,
    #[doc = "< r2004+"]
    pub is_xdic_missing: BITCODE_B,
    #[doc = "< r2013+  AcDs datastore"]
    pub has_ds_data: BITCODE_B,
    pub handleref: *mut Dwg_Handle,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _dwg_object_object__bindgen_ty_1 {
    pub APPID: *mut Dwg_Object_APPID,
    pub APPID_CONTROL: *mut Dwg_Object_APPID_CONTROL,
    pub BLOCK_CONTROL: *mut Dwg_Object_BLOCK_CONTROL,
    pub BLOCK_HEADER: *mut Dwg_Object_BLOCK_HEADER,
    pub DICTIONARY: *mut Dwg_Object_DICTIONARY,
    pub DIMSTYLE: *mut Dwg_Object_DIMSTYLE,
    pub DIMSTYLE_CONTROL: *mut Dwg_Object_DIMSTYLE_CONTROL,
    pub DUMMY: *mut Dwg_Object_DUMMY,
    pub LAYER: *mut Dwg_Object_LAYER,
    pub LAYER_CONTROL: *mut Dwg_Object_LAYER_CONTROL,
    pub LONG_TRANSACTION: *mut Dwg_Object_LONG_TRANSACTION,
    pub LTYPE: *mut Dwg_Object_LTYPE,
    pub LTYPE_CONTROL: *mut Dwg_Object_LTYPE_CONTROL,
    pub MLINESTYLE: *mut Dwg_Object_MLINESTYLE,
    pub STYLE: *mut Dwg_Object_STYLE,
    pub STYLE_CONTROL: *mut Dwg_Object_STYLE_CONTROL,
    pub UCS: *mut Dwg_Object_UCS,
    pub UCS_CONTROL: *mut Dwg_Object_UCS_CONTROL,
    pub UNKNOWN_OBJ: *mut Dwg_Object_UNKNOWN_OBJ,
    pub VIEW: *mut Dwg_Object_VIEW,
    pub VIEW_CONTROL: *mut Dwg_Object_VIEW_CONTROL,
    pub VPORT: *mut Dwg_Object_VPORT,
    pub VPORT_CONTROL: *mut Dwg_Object_VPORT_CONTROL,
    pub VX_CONTROL: *mut Dwg_Object_VX_CONTROL,
    pub VX_TABLE_RECORD: *mut Dwg_Object_VX_TABLE_RECORD,
    pub ACSH_BOOLEAN_CLASS: *mut Dwg_Object_ACSH_BOOLEAN_CLASS,
    pub ACSH_BOX_CLASS: *mut Dwg_Object_ACSH_BOX_CLASS,
    pub ACSH_CONE_CLASS: *mut Dwg_Object_ACSH_CONE_CLASS,
    pub ACSH_CYLINDER_CLASS: *mut Dwg_Object_ACSH_CYLINDER_CLASS,
    pub ACSH_FILLET_CLASS: *mut Dwg_Object_ACSH_FILLET_CLASS,
    pub ACSH_HISTORY_CLASS: *mut Dwg_Object_ACSH_HISTORY_CLASS,
    pub ACSH_SPHERE_CLASS: *mut Dwg_Object_ACSH_SPHERE_CLASS,
    pub ACSH_TORUS_CLASS: *mut Dwg_Object_ACSH_TORUS_CLASS,
    pub ACSH_WEDGE_CLASS: *mut Dwg_Object_ACSH_WEDGE_CLASS,
    pub ASSOCGEOMDEPENDENCY: *mut Dwg_Object_ASSOCGEOMDEPENDENCY,
    pub ASSOCNETWORK: *mut Dwg_Object_ASSOCNETWORK,
    pub BLOCKALIGNMENTGRIP: *mut Dwg_Object_BLOCKALIGNMENTGRIP,
    pub BLOCKALIGNMENTPARAMETER: *mut Dwg_Object_BLOCKALIGNMENTPARAMETER,
    pub BLOCKBASEPOINTPARAMETER: *mut Dwg_Object_BLOCKBASEPOINTPARAMETER,
    pub BLOCKFLIPACTION: *mut Dwg_Object_BLOCKFLIPACTION,
    pub BLOCKFLIPGRIP: *mut Dwg_Object_BLOCKFLIPGRIP,
    pub BLOCKFLIPPARAMETER: *mut Dwg_Object_BLOCKFLIPPARAMETER,
    pub BLOCKGRIPLOCATIONCOMPONENT: *mut Dwg_Object_BLOCKGRIPLOCATIONCOMPONENT,
    pub BLOCKLINEARGRIP: *mut Dwg_Object_BLOCKLINEARGRIP,
    pub BLOCKLOOKUPGRIP: *mut Dwg_Object_BLOCKLOOKUPGRIP,
    pub BLOCKMOVEACTION: *mut Dwg_Object_BLOCKMOVEACTION,
    pub BLOCKROTATEACTION: *mut Dwg_Object_BLOCKROTATEACTION,
    pub BLOCKROTATIONGRIP: *mut Dwg_Object_BLOCKROTATIONGRIP,
    pub BLOCKSCALEACTION: *mut Dwg_Object_BLOCKSCALEACTION,
    pub BLOCKVISIBILITYGRIP: *mut Dwg_Object_BLOCKVISIBILITYGRIP,
    pub CELLSTYLEMAP: *mut Dwg_Object_CELLSTYLEMAP,
    pub DETAILVIEWSTYLE: *mut Dwg_Object_DETAILVIEWSTYLE,
    pub DICTIONARYVAR: *mut Dwg_Object_DICTIONARYVAR,
    pub DICTIONARYWDFLT: *mut Dwg_Object_DICTIONARYWDFLT,
    pub DYNAMICBLOCKPURGEPREVENTER: *mut Dwg_Object_DYNAMICBLOCKPURGEPREVENTER,
    pub FIELD: *mut Dwg_Object_FIELD,
    pub FIELDLIST: *mut Dwg_Object_FIELDLIST,
    pub GEODATA: *mut Dwg_Object_GEODATA,
    pub GROUP: *mut Dwg_Object_GROUP,
    pub IDBUFFER: *mut Dwg_Object_IDBUFFER,
    pub IMAGEDEF: *mut Dwg_Object_IMAGEDEF,
    pub IMAGEDEF_REACTOR: *mut Dwg_Object_IMAGEDEF_REACTOR,
    pub INDEX: *mut Dwg_Object_INDEX,
    pub LAYERFILTER: *mut Dwg_Object_LAYERFILTER,
    pub LAYER_INDEX: *mut Dwg_Object_LAYER_INDEX,
    pub LAYOUT: *mut Dwg_Object_LAYOUT,
    pub PLACEHOLDER: *mut Dwg_Object_PLACEHOLDER,
    pub PLOTSETTINGS: *mut Dwg_Object_PLOTSETTINGS,
    pub RASTERVARIABLES: *mut Dwg_Object_RASTERVARIABLES,
    pub RENDERENVIRONMENT: *mut Dwg_Object_RENDERENVIRONMENT,
    pub SCALE: *mut Dwg_Object_SCALE,
    pub SECTIONVIEWSTYLE: *mut Dwg_Object_SECTIONVIEWSTYLE,
    pub SECTION_MANAGER: *mut Dwg_Object_SECTION_MANAGER,
    pub SORTENTSTABLE: *mut Dwg_Object_SORTENTSTABLE,
    pub SPATIAL_FILTER: *mut Dwg_Object_SPATIAL_FILTER,
    pub SUN: *mut Dwg_Object_SUN,
    pub TABLEGEOMETRY: *mut Dwg_Object_TABLEGEOMETRY,
    pub VBA_PROJECT: *mut Dwg_Object_VBA_PROJECT,
    pub VISUALSTYLE: *mut Dwg_Object_VISUALSTYLE,
    pub WIPEOUTVARIABLES: *mut Dwg_Object_WIPEOUTVARIABLES,
    pub XRECORD: *mut Dwg_Object_XRECORD,
    pub PDFDEFINITION: *mut Dwg_Object_PDFDEFINITION,
    pub DGNDEFINITION: *mut Dwg_Object_DGNDEFINITION,
    pub DWFDEFINITION: *mut Dwg_Object_DWFDEFINITION,
    pub ACSH_BREP_CLASS: *mut Dwg_Object_ACSH_BREP_CLASS,
    pub ACSH_CHAMFER_CLASS: *mut Dwg_Object_ACSH_CHAMFER_CLASS,
    pub ACSH_PYRAMID_CLASS: *mut Dwg_Object_ACSH_PYRAMID_CLASS,
    pub ALDIMOBJECTCONTEXTDATA: *mut Dwg_Object_ALDIMOBJECTCONTEXTDATA,
    pub ASSOC2DCONSTRAINTGROUP: *mut Dwg_Object_ASSOC2DCONSTRAINTGROUP,
    pub ASSOCACTION: *mut Dwg_Object_ASSOCACTION,
    pub ASSOCACTIONPARAM: *mut Dwg_Object_ASSOCACTIONPARAM,
    pub ASSOCARRAYACTIONBODY: *mut Dwg_Object_ASSOCARRAYACTIONBODY,
    pub ASSOCASMBODYACTIONPARAM: *mut Dwg_Object_ASSOCASMBODYACTIONPARAM,
    pub ASSOCBLENDSURFACEACTIONBODY: *mut Dwg_Object_ASSOCBLENDSURFACEACTIONBODY,
    pub ASSOCCOMPOUNDACTIONPARAM: *mut Dwg_Object_ASSOCCOMPOUNDACTIONPARAM,
    pub ASSOCDEPENDENCY: *mut Dwg_Object_ASSOCDEPENDENCY,
    pub ASSOCDIMDEPENDENCYBODY: *mut Dwg_Object_ASSOCDIMDEPENDENCYBODY,
    pub ASSOCEXTENDSURFACEACTIONBODY: *mut Dwg_Object_ASSOCEXTENDSURFACEACTIONBODY,
    pub ASSOCEXTRUDEDSURFACEACTIONBODY: *mut Dwg_Object_ASSOCEXTRUDEDSURFACEACTIONBODY,
    pub ASSOCFACEACTIONPARAM: *mut Dwg_Object_ASSOCFACEACTIONPARAM,
    pub ASSOCFILLETSURFACEACTIONBODY: *mut Dwg_Object_ASSOCFILLETSURFACEACTIONBODY,
    pub ASSOCLOFTEDSURFACEACTIONBODY: *mut Dwg_Object_ASSOCLOFTEDSURFACEACTIONBODY,
    pub ASSOCNETWORKSURFACEACTIONBODY: *mut Dwg_Object_ASSOCNETWORKSURFACEACTIONBODY,
    pub ASSOCOBJECTACTIONPARAM: *mut Dwg_Object_ASSOCOBJECTACTIONPARAM,
    pub ASSOCOFFSETSURFACEACTIONBODY: *mut Dwg_Object_ASSOCOFFSETSURFACEACTIONBODY,
    pub ASSOCOSNAPPOINTREFACTIONPARAM: *mut Dwg_Object_ASSOCOSNAPPOINTREFACTIONPARAM,
    pub ASSOCPATCHSURFACEACTIONBODY: *mut Dwg_Object_ASSOCPATCHSURFACEACTIONBODY,
    pub ASSOCPATHACTIONPARAM: *mut Dwg_Object_ASSOCPATHACTIONPARAM,
    pub ASSOCPLANESURFACEACTIONBODY: *mut Dwg_Object_ASSOCPLANESURFACEACTIONBODY,
    pub ASSOCPOINTREFACTIONPARAM: *mut Dwg_Object_ASSOCPOINTREFACTIONPARAM,
    pub ASSOCREVOLVEDSURFACEACTIONBODY: *mut Dwg_Object_ASSOCREVOLVEDSURFACEACTIONBODY,
    pub ASSOCTRIMSURFACEACTIONBODY: *mut Dwg_Object_ASSOCTRIMSURFACEACTIONBODY,
    pub ASSOCVALUEDEPENDENCY: *mut Dwg_Object_ASSOCVALUEDEPENDENCY,
    pub ASSOCVARIABLE: *mut Dwg_Object_ASSOCVARIABLE,
    pub ASSOCVERTEXACTIONPARAM: *mut Dwg_Object_ASSOCVERTEXACTIONPARAM,
    pub BLKREFOBJECTCONTEXTDATA: *mut Dwg_Object_BLKREFOBJECTCONTEXTDATA,
    pub BLOCKALIGNEDCONSTRAINTPARAMETER: *mut Dwg_Object_BLOCKALIGNEDCONSTRAINTPARAMETER,
    pub BLOCKANGULARCONSTRAINTPARAMETER: *mut Dwg_Object_BLOCKANGULARCONSTRAINTPARAMETER,
    pub BLOCKARRAYACTION: *mut Dwg_Object_BLOCKARRAYACTION,
    pub BLOCKDIAMETRICCONSTRAINTPARAMETER: *mut Dwg_Object_BLOCKDIAMETRICCONSTRAINTPARAMETER,
    pub BLOCKHORIZONTALCONSTRAINTPARAMETER: *mut Dwg_Object_BLOCKHORIZONTALCONSTRAINTPARAMETER,
    pub BLOCKLINEARCONSTRAINTPARAMETER: *mut Dwg_Object_BLOCKLINEARCONSTRAINTPARAMETER,
    pub BLOCKLINEARPARAMETER: *mut Dwg_Object_BLOCKLINEARPARAMETER,
    pub BLOCKLOOKUPACTION: *mut Dwg_Object_BLOCKLOOKUPACTION,
    pub BLOCKLOOKUPPARAMETER: *mut Dwg_Object_BLOCKLOOKUPPARAMETER,
    pub BLOCKPARAMDEPENDENCYBODY: *mut Dwg_Object_BLOCKPARAMDEPENDENCYBODY,
    pub BLOCKPOINTPARAMETER: *mut Dwg_Object_BLOCKPOINTPARAMETER,
    pub BLOCKPOLARGRIP: *mut Dwg_Object_BLOCKPOLARGRIP,
    pub BLOCKPOLARPARAMETER: *mut Dwg_Object_BLOCKPOLARPARAMETER,
    pub BLOCKPOLARSTRETCHACTION: *mut Dwg_Object_BLOCKPOLARSTRETCHACTION,
    pub BLOCKRADIALCONSTRAINTPARAMETER: *mut Dwg_Object_BLOCKRADIALCONSTRAINTPARAMETER,
    pub BLOCKREPRESENTATION: *mut Dwg_Object_BLOCKREPRESENTATION,
    pub BLOCKROTATIONPARAMETER: *mut Dwg_Object_BLOCKROTATIONPARAMETER,
    pub BLOCKSTRETCHACTION: *mut Dwg_Object_BLOCKSTRETCHACTION,
    pub BLOCKUSERPARAMETER: *mut Dwg_Object_BLOCKUSERPARAMETER,
    pub BLOCKVERTICALCONSTRAINTPARAMETER: *mut Dwg_Object_BLOCKVERTICALCONSTRAINTPARAMETER,
    pub BLOCKVISIBILITYPARAMETER: *mut Dwg_Object_BLOCKVISIBILITYPARAMETER,
    pub BLOCKXYGRIP: *mut Dwg_Object_BLOCKXYGRIP,
    pub BLOCKXYPARAMETER: *mut Dwg_Object_BLOCKXYPARAMETER,
    pub DATALINK: *mut Dwg_Object_DATALINK,
    pub DBCOLOR: *mut Dwg_Object_DBCOLOR,
    pub EVALUATION_GRAPH: *mut Dwg_Object_EVALUATION_GRAPH,
    pub FCFOBJECTCONTEXTDATA: *mut Dwg_Object_FCFOBJECTCONTEXTDATA,
    pub GRADIENT_BACKGROUND: *mut Dwg_Object_GRADIENT_BACKGROUND,
    pub GROUND_PLANE_BACKGROUND: *mut Dwg_Object_GROUND_PLANE_BACKGROUND,
    pub IBL_BACKGROUND: *mut Dwg_Object_IBL_BACKGROUND,
    pub IMAGE_BACKGROUND: *mut Dwg_Object_IMAGE_BACKGROUND,
    pub LEADEROBJECTCONTEXTDATA: *mut Dwg_Object_LEADEROBJECTCONTEXTDATA,
    pub LIGHTLIST: *mut Dwg_Object_LIGHTLIST,
    pub MATERIAL: *mut Dwg_Object_MATERIAL,
    pub MENTALRAYRENDERSETTINGS: *mut Dwg_Object_MENTALRAYRENDERSETTINGS,
    pub MLEADERSTYLE: *mut Dwg_Object_MLEADERSTYLE,
    pub MTEXTOBJECTCONTEXTDATA: *mut Dwg_Object_MTEXTOBJECTCONTEXTDATA,
    pub OBJECT_PTR: *mut Dwg_Object_OBJECT_PTR,
    pub PARTIAL_VIEWING_INDEX: *mut Dwg_Object_PARTIAL_VIEWING_INDEX,
    pub POINTCLOUDCOLORMAP: *mut Dwg_Object_POINTCLOUDCOLORMAP,
    pub POINTCLOUDDEF: *mut Dwg_Object_POINTCLOUDDEF,
    pub POINTCLOUDDEFEX: *mut Dwg_Object_POINTCLOUDDEFEX,
    pub POINTCLOUDDEF_REACTOR: *mut Dwg_Object_POINTCLOUDDEF_REACTOR,
    pub POINTCLOUDDEF_REACTOR_EX: *mut Dwg_Object_POINTCLOUDDEF_REACTOR_EX,
    pub PROXY_OBJECT: *mut Dwg_Object_PROXY_OBJECT,
    pub RAPIDRTRENDERSETTINGS: *mut Dwg_Object_RAPIDRTRENDERSETTINGS,
    pub RENDERENTRY: *mut Dwg_Object_RENDERENTRY,
    pub RENDERGLOBAL: *mut Dwg_Object_RENDERGLOBAL,
    pub RENDERSETTINGS: *mut Dwg_Object_RENDERSETTINGS,
    pub SECTION_SETTINGS: *mut Dwg_Object_SECTION_SETTINGS,
    pub SKYLIGHT_BACKGROUND: *mut Dwg_Object_SKYLIGHT_BACKGROUND,
    pub SOLID_BACKGROUND: *mut Dwg_Object_SOLID_BACKGROUND,
    pub SPATIAL_INDEX: *mut Dwg_Object_SPATIAL_INDEX,
    pub TABLESTYLE: *mut Dwg_Object_TABLESTYLE,
    pub TEXTOBJECTCONTEXTDATA: *mut Dwg_Object_TEXTOBJECTCONTEXTDATA,
    pub ASSOCARRAYMODIFYPARAMETERS: *mut Dwg_Object_ASSOCARRAYMODIFYPARAMETERS,
    pub ASSOCARRAYPATHPARAMETERS: *mut Dwg_Object_ASSOCARRAYPATHPARAMETERS,
    pub ASSOCARRAYPOLARPARAMETERS: *mut Dwg_Object_ASSOCARRAYPOLARPARAMETERS,
    pub ASSOCARRAYRECTANGULARPARAMETERS: *mut Dwg_Object_ASSOCARRAYRECTANGULARPARAMETERS,
    pub ACMECOMMANDHISTORY: *mut Dwg_Object_ACMECOMMANDHISTORY,
    pub ACMESCOPE: *mut Dwg_Object_ACMESCOPE,
    pub ACMESTATEMGR: *mut Dwg_Object_ACMESTATEMGR,
    pub ACSH_EXTRUSION_CLASS: *mut Dwg_Object_ACSH_EXTRUSION_CLASS,
    pub ACSH_LOFT_CLASS: *mut Dwg_Object_ACSH_LOFT_CLASS,
    pub ACSH_REVOLVE_CLASS: *mut Dwg_Object_ACSH_REVOLVE_CLASS,
    pub ACSH_SWEEP_CLASS: *mut Dwg_Object_ACSH_SWEEP_CLASS,
    pub ANGDIMOBJECTCONTEXTDATA: *mut Dwg_Object_ANGDIMOBJECTCONTEXTDATA,
    pub ANNOTSCALEOBJECTCONTEXTDATA: *mut Dwg_Object_ANNOTSCALEOBJECTCONTEXTDATA,
    pub ASSOC3POINTANGULARDIMACTIONBODY: *mut Dwg_Object_ASSOC3POINTANGULARDIMACTIONBODY,
    pub ASSOCALIGNEDDIMACTIONBODY: *mut Dwg_Object_ASSOCALIGNEDDIMACTIONBODY,
    pub ASSOCARRAYMODIFYACTIONBODY: *mut Dwg_Object_ASSOCARRAYMODIFYACTIONBODY,
    pub ASSOCEDGEACTIONPARAM: *mut Dwg_Object_ASSOCEDGEACTIONPARAM,
    pub ASSOCEDGECHAMFERACTIONBODY: *mut Dwg_Object_ASSOCEDGECHAMFERACTIONBODY,
    pub ASSOCEDGEFILLETACTIONBODY: *mut Dwg_Object_ASSOCEDGEFILLETACTIONBODY,
    pub ASSOCMLEADERACTIONBODY: *mut Dwg_Object_ASSOCMLEADERACTIONBODY,
    pub ASSOCORDINATEDIMACTIONBODY: *mut Dwg_Object_ASSOCORDINATEDIMACTIONBODY,
    pub ASSOCPERSSUBENTMANAGER: *mut Dwg_Object_ASSOCPERSSUBENTMANAGER,
    pub ASSOCRESTOREENTITYSTATEACTIONBODY: *mut Dwg_Object_ASSOCRESTOREENTITYSTATEACTIONBODY,
    pub ASSOCROTATEDDIMACTIONBODY: *mut Dwg_Object_ASSOCROTATEDDIMACTIONBODY,
    pub ASSOCSWEPTSURFACEACTIONBODY: *mut Dwg_Object_ASSOCSWEPTSURFACEACTIONBODY,
    pub BLOCKPROPERTIESTABLE: *mut Dwg_Object_BLOCKPROPERTIESTABLE,
    pub BLOCKPROPERTIESTABLEGRIP: *mut Dwg_Object_BLOCKPROPERTIESTABLEGRIP,
    pub BREAKDATA: *mut Dwg_Object_BREAKDATA,
    pub BREAKPOINTREF: *mut Dwg_Object_BREAKPOINTREF,
    pub CONTEXTDATAMANAGER: *mut Dwg_Object_CONTEXTDATAMANAGER,
    pub CSACDOCUMENTOPTIONS: *mut Dwg_Object_CSACDOCUMENTOPTIONS,
    pub CURVEPATH: *mut Dwg_Object_CURVEPATH,
    pub DATATABLE: *mut Dwg_Object_DATATABLE,
    pub DIMASSOC: *mut Dwg_Object_DIMASSOC,
    pub DMDIMOBJECTCONTEXTDATA: *mut Dwg_Object_DMDIMOBJECTCONTEXTDATA,
    pub DYNAMICBLOCKPROXYNODE: *mut Dwg_Object_DYNAMICBLOCKPROXYNODE,
    pub GEOMAPIMAGE: *mut Dwg_Object_GEOMAPIMAGE,
    pub MLEADEROBJECTCONTEXTDATA: *mut Dwg_Object_MLEADEROBJECTCONTEXTDATA,
    pub MOTIONPATH: *mut Dwg_Object_MOTIONPATH,
    pub MTEXTATTRIBUTEOBJECTCONTEXTDATA: *mut Dwg_Object_MTEXTATTRIBUTEOBJECTCONTEXTDATA,
    pub NAVISWORKSMODELDEF: *mut Dwg_Object_NAVISWORKSMODELDEF,
    pub ORDDIMOBJECTCONTEXTDATA: *mut Dwg_Object_ORDDIMOBJECTCONTEXTDATA,
    pub PERSUBENTMGR: *mut Dwg_Object_PERSUBENTMGR,
    pub POINTPATH: *mut Dwg_Object_POINTPATH,
    pub RADIMLGOBJECTCONTEXTDATA: *mut Dwg_Object_RADIMLGOBJECTCONTEXTDATA,
    pub RADIMOBJECTCONTEXTDATA: *mut Dwg_Object_RADIMOBJECTCONTEXTDATA,
    pub SUNSTUDY: *mut Dwg_Object_SUNSTUDY,
    pub TABLECONTENT: *mut Dwg_Object_TABLECONTENT,
    pub TVDEVICEPROPERTIES: *mut Dwg_Object_TVDEVICEPROPERTIES,
}
#[test]
fn bindgen_test_layout__dwg_object_object__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_object__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_object__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_dwg_object_object__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_object__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_dwg_object_object__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).APPID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(APPID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).APPID_CONTROL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(APPID_CONTROL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BLOCK_CONTROL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(BLOCK_CONTROL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BLOCK_HEADER) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(BLOCK_HEADER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DICTIONARY) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(DICTIONARY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMSTYLE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(DIMSTYLE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMSTYLE_CONTROL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(DIMSTYLE_CONTROL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DUMMY) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(DUMMY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LAYER) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(LAYER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LAYER_CONTROL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(LAYER_CONTROL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LONG_TRANSACTION) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(LONG_TRANSACTION)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LTYPE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(LTYPE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LTYPE_CONTROL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(LTYPE_CONTROL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MLINESTYLE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(MLINESTYLE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).STYLE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(STYLE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).STYLE_CONTROL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(STYLE_CONTROL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UCS) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(UCS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UCS_CONTROL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(UCS_CONTROL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UNKNOWN_OBJ) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(UNKNOWN_OBJ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VIEW) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(VIEW)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VIEW_CONTROL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(VIEW_CONTROL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VPORT) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(VPORT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VPORT_CONTROL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(VPORT_CONTROL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VX_CONTROL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(VX_CONTROL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VX_TABLE_RECORD) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(VX_TABLE_RECORD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ACSH_BOOLEAN_CLASS) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ACSH_BOOLEAN_CLASS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ACSH_BOX_CLASS) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ACSH_BOX_CLASS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ACSH_CONE_CLASS) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ACSH_CONE_CLASS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ACSH_CYLINDER_CLASS) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ACSH_CYLINDER_CLASS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ACSH_FILLET_CLASS) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ACSH_FILLET_CLASS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ACSH_HISTORY_CLASS) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ACSH_HISTORY_CLASS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ACSH_SPHERE_CLASS) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ACSH_SPHERE_CLASS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ACSH_TORUS_CLASS) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ACSH_TORUS_CLASS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ACSH_WEDGE_CLASS) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ACSH_WEDGE_CLASS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ASSOCGEOMDEPENDENCY) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ASSOCGEOMDEPENDENCY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ASSOCNETWORK) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ASSOCNETWORK)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BLOCKALIGNMENTGRIP) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(BLOCKALIGNMENTGRIP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BLOCKALIGNMENTPARAMETER) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(BLOCKALIGNMENTPARAMETER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BLOCKBASEPOINTPARAMETER) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(BLOCKBASEPOINTPARAMETER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BLOCKFLIPACTION) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(BLOCKFLIPACTION)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BLOCKFLIPGRIP) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(BLOCKFLIPGRIP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BLOCKFLIPPARAMETER) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(BLOCKFLIPPARAMETER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BLOCKGRIPLOCATIONCOMPONENT) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(BLOCKGRIPLOCATIONCOMPONENT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BLOCKLINEARGRIP) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(BLOCKLINEARGRIP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BLOCKLOOKUPGRIP) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(BLOCKLOOKUPGRIP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BLOCKMOVEACTION) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(BLOCKMOVEACTION)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BLOCKROTATEACTION) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(BLOCKROTATEACTION)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BLOCKROTATIONGRIP) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(BLOCKROTATIONGRIP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BLOCKSCALEACTION) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(BLOCKSCALEACTION)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BLOCKVISIBILITYGRIP) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(BLOCKVISIBILITYGRIP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CELLSTYLEMAP) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(CELLSTYLEMAP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DETAILVIEWSTYLE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(DETAILVIEWSTYLE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DICTIONARYVAR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(DICTIONARYVAR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DICTIONARYWDFLT) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(DICTIONARYWDFLT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DYNAMICBLOCKPURGEPREVENTER) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(DYNAMICBLOCKPURGEPREVENTER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FIELD) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(FIELD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FIELDLIST) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(FIELDLIST)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GEODATA) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(GEODATA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GROUP) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(GROUP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IDBUFFER) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(IDBUFFER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IMAGEDEF) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(IMAGEDEF)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IMAGEDEF_REACTOR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(IMAGEDEF_REACTOR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).INDEX) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(INDEX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LAYERFILTER) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(LAYERFILTER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LAYER_INDEX) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(LAYER_INDEX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LAYOUT) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(LAYOUT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PLACEHOLDER) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(PLACEHOLDER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PLOTSETTINGS) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(PLOTSETTINGS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RASTERVARIABLES) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(RASTERVARIABLES)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RENDERENVIRONMENT) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(RENDERENVIRONMENT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SCALE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(SCALE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SECTIONVIEWSTYLE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(SECTIONVIEWSTYLE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SECTION_MANAGER) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(SECTION_MANAGER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SORTENTSTABLE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(SORTENTSTABLE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SPATIAL_FILTER) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(SPATIAL_FILTER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SUN) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(SUN)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TABLEGEOMETRY) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(TABLEGEOMETRY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VBA_PROJECT) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(VBA_PROJECT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VISUALSTYLE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(VISUALSTYLE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WIPEOUTVARIABLES) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(WIPEOUTVARIABLES)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).XRECORD) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(XRECORD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PDFDEFINITION) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(PDFDEFINITION)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DGNDEFINITION) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(DGNDEFINITION)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DWFDEFINITION) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(DWFDEFINITION)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ACSH_BREP_CLASS) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ACSH_BREP_CLASS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ACSH_CHAMFER_CLASS) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ACSH_CHAMFER_CLASS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ACSH_PYRAMID_CLASS) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ACSH_PYRAMID_CLASS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ALDIMOBJECTCONTEXTDATA) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ALDIMOBJECTCONTEXTDATA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ASSOC2DCONSTRAINTGROUP) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ASSOC2DCONSTRAINTGROUP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ASSOCACTION) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ASSOCACTION)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ASSOCACTIONPARAM) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ASSOCACTIONPARAM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ASSOCARRAYACTIONBODY) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ASSOCARRAYACTIONBODY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ASSOCASMBODYACTIONPARAM) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ASSOCASMBODYACTIONPARAM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ASSOCBLENDSURFACEACTIONBODY) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ASSOCBLENDSURFACEACTIONBODY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ASSOCCOMPOUNDACTIONPARAM) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ASSOCCOMPOUNDACTIONPARAM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ASSOCDEPENDENCY) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ASSOCDEPENDENCY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ASSOCDIMDEPENDENCYBODY) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ASSOCDIMDEPENDENCYBODY)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ASSOCEXTENDSURFACEACTIONBODY) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ASSOCEXTENDSURFACEACTIONBODY)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ASSOCEXTRUDEDSURFACEACTIONBODY) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ASSOCEXTRUDEDSURFACEACTIONBODY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ASSOCFACEACTIONPARAM) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ASSOCFACEACTIONPARAM)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ASSOCFILLETSURFACEACTIONBODY) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ASSOCFILLETSURFACEACTIONBODY)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ASSOCLOFTEDSURFACEACTIONBODY) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ASSOCLOFTEDSURFACEACTIONBODY)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ASSOCNETWORKSURFACEACTIONBODY) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ASSOCNETWORKSURFACEACTIONBODY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ASSOCOBJECTACTIONPARAM) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ASSOCOBJECTACTIONPARAM)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ASSOCOFFSETSURFACEACTIONBODY) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ASSOCOFFSETSURFACEACTIONBODY)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ASSOCOSNAPPOINTREFACTIONPARAM) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ASSOCOSNAPPOINTREFACTIONPARAM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ASSOCPATCHSURFACEACTIONBODY) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ASSOCPATCHSURFACEACTIONBODY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ASSOCPATHACTIONPARAM) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ASSOCPATHACTIONPARAM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ASSOCPLANESURFACEACTIONBODY) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ASSOCPLANESURFACEACTIONBODY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ASSOCPOINTREFACTIONPARAM) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ASSOCPOINTREFACTIONPARAM)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ASSOCREVOLVEDSURFACEACTIONBODY) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ASSOCREVOLVEDSURFACEACTIONBODY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ASSOCTRIMSURFACEACTIONBODY) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ASSOCTRIMSURFACEACTIONBODY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ASSOCVALUEDEPENDENCY) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ASSOCVALUEDEPENDENCY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ASSOCVARIABLE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ASSOCVARIABLE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ASSOCVERTEXACTIONPARAM) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ASSOCVERTEXACTIONPARAM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BLKREFOBJECTCONTEXTDATA) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(BLKREFOBJECTCONTEXTDATA)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BLOCKALIGNEDCONSTRAINTPARAMETER) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(BLOCKALIGNEDCONSTRAINTPARAMETER)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BLOCKANGULARCONSTRAINTPARAMETER) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(BLOCKANGULARCONSTRAINTPARAMETER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BLOCKARRAYACTION) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(BLOCKARRAYACTION)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BLOCKDIAMETRICCONSTRAINTPARAMETER) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(BLOCKDIAMETRICCONSTRAINTPARAMETER)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BLOCKHORIZONTALCONSTRAINTPARAMETER) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(BLOCKHORIZONTALCONSTRAINTPARAMETER)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BLOCKLINEARCONSTRAINTPARAMETER) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(BLOCKLINEARCONSTRAINTPARAMETER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BLOCKLINEARPARAMETER) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(BLOCKLINEARPARAMETER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BLOCKLOOKUPACTION) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(BLOCKLOOKUPACTION)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BLOCKLOOKUPPARAMETER) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(BLOCKLOOKUPPARAMETER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BLOCKPARAMDEPENDENCYBODY) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(BLOCKPARAMDEPENDENCYBODY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BLOCKPOINTPARAMETER) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(BLOCKPOINTPARAMETER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BLOCKPOLARGRIP) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(BLOCKPOLARGRIP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BLOCKPOLARPARAMETER) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(BLOCKPOLARPARAMETER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BLOCKPOLARSTRETCHACTION) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(BLOCKPOLARSTRETCHACTION)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BLOCKRADIALCONSTRAINTPARAMETER) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(BLOCKRADIALCONSTRAINTPARAMETER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BLOCKREPRESENTATION) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(BLOCKREPRESENTATION)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BLOCKROTATIONPARAMETER) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(BLOCKROTATIONPARAMETER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BLOCKSTRETCHACTION) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(BLOCKSTRETCHACTION)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BLOCKUSERPARAMETER) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(BLOCKUSERPARAMETER)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BLOCKVERTICALCONSTRAINTPARAMETER) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(BLOCKVERTICALCONSTRAINTPARAMETER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BLOCKVISIBILITYPARAMETER) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(BLOCKVISIBILITYPARAMETER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BLOCKXYGRIP) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(BLOCKXYGRIP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BLOCKXYPARAMETER) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(BLOCKXYPARAMETER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DATALINK) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(DATALINK)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DBCOLOR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(DBCOLOR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EVALUATION_GRAPH) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(EVALUATION_GRAPH)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FCFOBJECTCONTEXTDATA) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(FCFOBJECTCONTEXTDATA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GRADIENT_BACKGROUND) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(GRADIENT_BACKGROUND)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GROUND_PLANE_BACKGROUND) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(GROUND_PLANE_BACKGROUND)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IBL_BACKGROUND) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(IBL_BACKGROUND)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IMAGE_BACKGROUND) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(IMAGE_BACKGROUND)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LEADEROBJECTCONTEXTDATA) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(LEADEROBJECTCONTEXTDATA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LIGHTLIST) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(LIGHTLIST)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MATERIAL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(MATERIAL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MENTALRAYRENDERSETTINGS) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(MENTALRAYRENDERSETTINGS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MLEADERSTYLE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(MLEADERSTYLE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MTEXTOBJECTCONTEXTDATA) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(MTEXTOBJECTCONTEXTDATA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OBJECT_PTR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(OBJECT_PTR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PARTIAL_VIEWING_INDEX) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(PARTIAL_VIEWING_INDEX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).POINTCLOUDCOLORMAP) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(POINTCLOUDCOLORMAP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).POINTCLOUDDEF) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(POINTCLOUDDEF)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).POINTCLOUDDEFEX) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(POINTCLOUDDEFEX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).POINTCLOUDDEF_REACTOR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(POINTCLOUDDEF_REACTOR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).POINTCLOUDDEF_REACTOR_EX) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(POINTCLOUDDEF_REACTOR_EX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PROXY_OBJECT) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(PROXY_OBJECT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RAPIDRTRENDERSETTINGS) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(RAPIDRTRENDERSETTINGS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RENDERENTRY) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(RENDERENTRY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RENDERGLOBAL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(RENDERGLOBAL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RENDERSETTINGS) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(RENDERSETTINGS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SECTION_SETTINGS) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(SECTION_SETTINGS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SKYLIGHT_BACKGROUND) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(SKYLIGHT_BACKGROUND)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SOLID_BACKGROUND) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(SOLID_BACKGROUND)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SPATIAL_INDEX) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(SPATIAL_INDEX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TABLESTYLE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(TABLESTYLE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TEXTOBJECTCONTEXTDATA) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(TEXTOBJECTCONTEXTDATA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ASSOCARRAYMODIFYPARAMETERS) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ASSOCARRAYMODIFYPARAMETERS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ASSOCARRAYPATHPARAMETERS) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ASSOCARRAYPATHPARAMETERS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ASSOCARRAYPOLARPARAMETERS) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ASSOCARRAYPOLARPARAMETERS)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ASSOCARRAYRECTANGULARPARAMETERS) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ASSOCARRAYRECTANGULARPARAMETERS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ACMECOMMANDHISTORY) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ACMECOMMANDHISTORY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ACMESCOPE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ACMESCOPE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ACMESTATEMGR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ACMESTATEMGR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ACSH_EXTRUSION_CLASS) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ACSH_EXTRUSION_CLASS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ACSH_LOFT_CLASS) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ACSH_LOFT_CLASS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ACSH_REVOLVE_CLASS) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ACSH_REVOLVE_CLASS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ACSH_SWEEP_CLASS) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ACSH_SWEEP_CLASS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ANGDIMOBJECTCONTEXTDATA) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ANGDIMOBJECTCONTEXTDATA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ANNOTSCALEOBJECTCONTEXTDATA) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ANNOTSCALEOBJECTCONTEXTDATA)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ASSOC3POINTANGULARDIMACTIONBODY) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ASSOC3POINTANGULARDIMACTIONBODY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ASSOCALIGNEDDIMACTIONBODY) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ASSOCALIGNEDDIMACTIONBODY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ASSOCARRAYMODIFYACTIONBODY) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ASSOCARRAYMODIFYACTIONBODY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ASSOCEDGEACTIONPARAM) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ASSOCEDGEACTIONPARAM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ASSOCEDGECHAMFERACTIONBODY) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ASSOCEDGECHAMFERACTIONBODY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ASSOCEDGEFILLETACTIONBODY) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ASSOCEDGEFILLETACTIONBODY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ASSOCMLEADERACTIONBODY) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ASSOCMLEADERACTIONBODY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ASSOCORDINATEDIMACTIONBODY) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ASSOCORDINATEDIMACTIONBODY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ASSOCPERSSUBENTMANAGER) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ASSOCPERSSUBENTMANAGER)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ASSOCRESTOREENTITYSTATEACTIONBODY) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ASSOCRESTOREENTITYSTATEACTIONBODY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ASSOCROTATEDDIMACTIONBODY) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ASSOCROTATEDDIMACTIONBODY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ASSOCSWEPTSURFACEACTIONBODY) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ASSOCSWEPTSURFACEACTIONBODY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BLOCKPROPERTIESTABLE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(BLOCKPROPERTIESTABLE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BLOCKPROPERTIESTABLEGRIP) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(BLOCKPROPERTIESTABLEGRIP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BREAKDATA) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(BREAKDATA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BREAKPOINTREF) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(BREAKPOINTREF)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CONTEXTDATAMANAGER) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(CONTEXTDATAMANAGER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CSACDOCUMENTOPTIONS) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(CSACDOCUMENTOPTIONS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CURVEPATH) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(CURVEPATH)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DATATABLE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(DATATABLE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIMASSOC) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(DIMASSOC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DMDIMOBJECTCONTEXTDATA) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(DMDIMOBJECTCONTEXTDATA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DYNAMICBLOCKPROXYNODE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(DYNAMICBLOCKPROXYNODE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GEOMAPIMAGE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(GEOMAPIMAGE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MLEADEROBJECTCONTEXTDATA) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(MLEADEROBJECTCONTEXTDATA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MOTIONPATH) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(MOTIONPATH)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).MTEXTATTRIBUTEOBJECTCONTEXTDATA) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(MTEXTATTRIBUTEOBJECTCONTEXTDATA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NAVISWORKSMODELDEF) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(NAVISWORKSMODELDEF)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ORDDIMOBJECTCONTEXTDATA) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(ORDDIMOBJECTCONTEXTDATA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PERSUBENTMGR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(PERSUBENTMGR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).POINTPATH) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(POINTPATH)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RADIMLGOBJECTCONTEXTDATA) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(RADIMLGOBJECTCONTEXTDATA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RADIMOBJECTCONTEXTDATA) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(RADIMOBJECTCONTEXTDATA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SUNSTUDY) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(SUNSTUDY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TABLECONTENT) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(TABLECONTENT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TVDEVICEPROPERTIES) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object__bindgen_ty_1),
            "::",
            stringify!(TVDEVICEPROPERTIES)
        )
    );
}
#[test]
fn bindgen_test_layout__dwg_object_object() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object_object> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object_object>(),
        88usize,
        concat!("Size of: ", stringify!(_dwg_object_object))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object_object>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object_object))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object),
            "::",
            stringify!(objid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tio) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object),
            "::",
            stringify!(tio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dwg) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object),
            "::",
            stringify!(dwg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_eed) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object),
            "::",
            stringify!(num_eed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eed) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object),
            "::",
            stringify!(eed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ownerhandle) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object),
            "::",
            stringify!(ownerhandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_reactors) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object),
            "::",
            stringify!(num_reactors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reactors) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object),
            "::",
            stringify!(reactors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xdicobjhandle) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object),
            "::",
            stringify!(xdicobjhandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_xdic_missing) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object),
            "::",
            stringify!(is_xdic_missing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_ds_data) as usize - ptr as usize },
        73usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object),
            "::",
            stringify!(has_ds_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handleref) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object_object),
            "::",
            stringify!(handleref)
        )
    );
}
#[doc = "Ordinary object attributes"]
pub type Dwg_Object_Object = _dwg_object_object;
#[doc = "Classes"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_class {
    #[doc = "< starting with 500"]
    pub number: BITCODE_BS,
    #[doc = "<\nerase allowed = 1,\ntransform allowed = 2,\ncolor change allowed = 4,\nlayer change allowed = 8,\nLTYPE change allowed = 16,\nLTYPE.scale change allowed = 32,\nvisibility change allowed = 64,\ncloning allowed = 128,\nLineweight change allowed = 256,\nPLOTSTYLE Name change allowed = 512,\nDisables proxy warning dialog = 1024,\nis R13 format proxy = 32768"]
    pub proxyflag: BITCODE_BS,
    pub appname: *mut ::std::os::raw::c_char,
    pub cppname: *mut ::std::os::raw::c_char,
    #[doc = "< ASCII or UTF-8"]
    pub dxfname: *mut ::std::os::raw::c_char,
    #[doc = "< r2007+, always transformed to dxfname as UTF-8"]
    pub dxfname_u: BITCODE_TU,
    #[doc = "< i.e. was_proxy, not loaded class"]
    pub is_zombie: BITCODE_B,
    #[doc = "< really is_entity. 1f2 for entities, 1f3 for objects"]
    pub item_class_id: BITCODE_BS,
    #[doc = "< 91 instance count for a custom class"]
    pub num_instances: BITCODE_BL,
    pub dwg_version: BITCODE_BL,
    pub maint_version: BITCODE_BL,
    #[doc = "< def: 0L"]
    pub unknown_1: BITCODE_BL,
    #[doc = "< def: 0L"]
    pub unknown_2: BITCODE_BL,
}
#[test]
fn bindgen_test_layout__dwg_class() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_class> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_class>(),
        64usize,
        concat!("Size of: ", stringify!(_dwg_class))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_class>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_class))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).number) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_class),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).proxyflag) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_class),
            "::",
            stringify!(proxyflag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).appname) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_class),
            "::",
            stringify!(appname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cppname) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_class),
            "::",
            stringify!(cppname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dxfname) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_class),
            "::",
            stringify!(dxfname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dxfname_u) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_class),
            "::",
            stringify!(dxfname_u)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_zombie) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_class),
            "::",
            stringify!(is_zombie)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).item_class_id) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_class),
            "::",
            stringify!(item_class_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_instances) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_class),
            "::",
            stringify!(num_instances)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dwg_version) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_class),
            "::",
            stringify!(dwg_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maint_version) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_class),
            "::",
            stringify!(maint_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_1) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_class),
            "::",
            stringify!(unknown_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_2) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_class),
            "::",
            stringify!(unknown_2)
        )
    );
}
#[doc = "Classes"]
pub type Dwg_Class = _dwg_class;
#[doc = "General DWG object with link to either entity or object, and as parent the DWG"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_object {
    #[doc = "< in bytes"]
    pub size: BITCODE_RL,
    #[doc = "< byte offset in the file"]
    pub address: usize,
    #[doc = "< fixed or variable (class - 500)"]
    pub type_: BITCODE_BS,
    #[doc = "< into dwg->object[]"]
    pub index: BITCODE_RL,
    #[doc = "< into a global list"]
    pub fixedtype: DWG_OBJECT_TYPE,
    #[doc = "< our public entity/object name"]
    pub name: *mut ::std::os::raw::c_char,
    #[doc = "< the internal dxf classname, often with a ACDB prefix"]
    pub dxfname: *mut ::std::os::raw::c_char,
    pub supertype: Dwg_Object_Supertype,
    pub tio: _dwg_object__bindgen_ty_1,
    pub handle: Dwg_Handle,
    pub parent: *mut _dwg_struct,
    pub klass: *mut Dwg_Class,
    pub bitsize: BITCODE_RL,
    pub bitsize_pos: usize,
    pub hdlpos: usize,
    pub was_bitsize_set: BITCODE_B,
    #[doc = "< r2007+"]
    pub has_strings: BITCODE_B,
    #[doc = "< r2007+ in bits, unused"]
    pub stringstream_size: BITCODE_RL,
    #[doc = "< r2010+ in bits"]
    pub handlestream_size: BITCODE_UMC,
    pub common_size: usize,
    pub num_unknown_bits: BITCODE_RL,
    pub unknown_bits: BITCODE_TF,
    pub num_unknown_rest: BITCODE_RL,
    pub unknown_rest: BITCODE_TF,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _dwg_object__bindgen_ty_1 {
    pub entity: *mut Dwg_Object_Entity,
    pub object: *mut Dwg_Object_Object,
}
#[test]
fn bindgen_test_layout__dwg_object__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_dwg_object__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entity) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object__bindgen_ty_1),
            "::",
            stringify!(entity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object__bindgen_ty_1),
            "::",
            stringify!(object)
        )
    );
}
#[test]
fn bindgen_test_layout__dwg_object() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_object> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_object>(),
        184usize,
        concat!("Size of: ", stringify!(_dwg_object))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_object>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_object))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fixedtype) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object),
            "::",
            stringify!(fixedtype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dxfname) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object),
            "::",
            stringify!(dxfname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supertype) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object),
            "::",
            stringify!(supertype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tio) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object),
            "::",
            stringify!(tio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).klass) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object),
            "::",
            stringify!(klass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bitsize) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object),
            "::",
            stringify!(bitsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bitsize_pos) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object),
            "::",
            stringify!(bitsize_pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdlpos) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object),
            "::",
            stringify!(hdlpos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).was_bitsize_set) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object),
            "::",
            stringify!(was_bitsize_set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_strings) as usize - ptr as usize },
        129usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object),
            "::",
            stringify!(has_strings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stringstream_size) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object),
            "::",
            stringify!(stringstream_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handlestream_size) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object),
            "::",
            stringify!(handlestream_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).common_size) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object),
            "::",
            stringify!(common_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_unknown_bits) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object),
            "::",
            stringify!(num_unknown_bits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bits) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object),
            "::",
            stringify!(unknown_bits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_unknown_rest) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object),
            "::",
            stringify!(num_unknown_rest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_rest) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_object),
            "::",
            stringify!(unknown_rest)
        )
    );
}
#[doc = "General DWG object with link to either entity or object, and as parent the DWG"]
pub type Dwg_Object = _dwg_object;
#[doc = "Dwg_Chain similar to Bit_Chain in \"bits.h\". Used only for the Thumbnail thumbnail"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_chain {
    pub chain: *mut ::std::os::raw::c_uchar,
    pub size: usize,
    pub byte: usize,
    pub bit: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout__dwg_chain() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_chain> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_chain>(),
        32usize,
        concat!("Size of: ", stringify!(_dwg_chain))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_chain>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_chain))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chain) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_chain),
            "::",
            stringify!(chain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_chain),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byte) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_chain),
            "::",
            stringify!(byte)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bit) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_chain),
            "::",
            stringify!(bit)
        )
    );
}
#[doc = "Dwg_Chain similar to Bit_Chain in \"bits.h\". Used only for the Thumbnail thumbnail"]
pub type Dwg_Chain = _dwg_chain;
pub const DWG_SECTION_TYPE_SECTION_UNKNOWN: DWG_SECTION_TYPE = 0;
pub const DWG_SECTION_TYPE_SECTION_HEADER: DWG_SECTION_TYPE = 1;
pub const DWG_SECTION_TYPE_SECTION_AUXHEADER: DWG_SECTION_TYPE = 2;
pub const DWG_SECTION_TYPE_SECTION_CLASSES: DWG_SECTION_TYPE = 3;
pub const DWG_SECTION_TYPE_SECTION_HANDLES: DWG_SECTION_TYPE = 4;
pub const DWG_SECTION_TYPE_SECTION_TEMPLATE: DWG_SECTION_TYPE = 5;
pub const DWG_SECTION_TYPE_SECTION_OBJFREESPACE: DWG_SECTION_TYPE = 6;
pub const DWG_SECTION_TYPE_SECTION_OBJECTS: DWG_SECTION_TYPE = 7;
pub const DWG_SECTION_TYPE_SECTION_REVHISTORY: DWG_SECTION_TYPE = 8;
pub const DWG_SECTION_TYPE_SECTION_SUMMARYINFO: DWG_SECTION_TYPE = 9;
pub const DWG_SECTION_TYPE_SECTION_PREVIEW: DWG_SECTION_TYPE = 10;
pub const DWG_SECTION_TYPE_SECTION_APPINFO: DWG_SECTION_TYPE = 11;
pub const DWG_SECTION_TYPE_SECTION_APPINFOHISTORY: DWG_SECTION_TYPE = 12;
pub const DWG_SECTION_TYPE_SECTION_FILEDEPLIST: DWG_SECTION_TYPE = 13;
pub const DWG_SECTION_TYPE_SECTION_SECURITY: DWG_SECTION_TYPE = 14;
pub const DWG_SECTION_TYPE_SECTION_VBAPROJECT: DWG_SECTION_TYPE = 15;
pub const DWG_SECTION_TYPE_SECTION_SIGNATURE: DWG_SECTION_TYPE = 16;
pub const DWG_SECTION_TYPE_SECTION_ACDS: DWG_SECTION_TYPE = 17;
pub const DWG_SECTION_TYPE_SECTION_INFO: DWG_SECTION_TYPE = 18;
pub const DWG_SECTION_TYPE_SECTION_SYSTEM_MAP: DWG_SECTION_TYPE = 19;
pub type DWG_SECTION_TYPE = ::std::os::raw::c_int;
pub use self::DWG_SECTION_TYPE as Dwg_Section_Type;
pub const DWG_SECTION_TYPE_R13_SECTION_HEADER_R13: DWG_SECTION_TYPE_R13 = 0;
pub const DWG_SECTION_TYPE_R13_SECTION_CLASSES_R13: DWG_SECTION_TYPE_R13 = 1;
pub const DWG_SECTION_TYPE_R13_SECTION_HANDLES_R13: DWG_SECTION_TYPE_R13 = 2;
pub const DWG_SECTION_TYPE_R13_SECTION_OBJFREESPACE_R13: DWG_SECTION_TYPE_R13 = 3;
pub const DWG_SECTION_TYPE_R13_SECTION_TEMPLATE_R13: DWG_SECTION_TYPE_R13 = 4;
pub const DWG_SECTION_TYPE_R13_SECTION_AUXHEADER_R2000: DWG_SECTION_TYPE_R13 = 5;
pub const DWG_SECTION_TYPE_R13_SECTION_THUMBNAIL_R13: DWG_SECTION_TYPE_R13 = 6;
pub type DWG_SECTION_TYPE_R13 = ::std::os::raw::c_int;
pub use self::DWG_SECTION_TYPE_R13 as Dwg_Section_Type_r13;
pub const DWG_SECTION_TYPE_R11_SECTION_HEADER_R11: DWG_SECTION_TYPE_R11 = 0;
pub const DWG_SECTION_TYPE_R11_SECTION_BLOCK: DWG_SECTION_TYPE_R11 = 1;
pub const DWG_SECTION_TYPE_R11_SECTION_LAYER: DWG_SECTION_TYPE_R11 = 2;
pub const DWG_SECTION_TYPE_R11_SECTION_STYLE: DWG_SECTION_TYPE_R11 = 3;
pub const DWG_SECTION_TYPE_R11_SECTION_LTYPE: DWG_SECTION_TYPE_R11 = 5;
pub const DWG_SECTION_TYPE_R11_SECTION_VIEW: DWG_SECTION_TYPE_R11 = 6;
pub const DWG_SECTION_TYPE_R11_SECTION_UCS: DWG_SECTION_TYPE_R11 = 7;
pub const DWG_SECTION_TYPE_R11_SECTION_VPORT: DWG_SECTION_TYPE_R11 = 8;
pub const DWG_SECTION_TYPE_R11_SECTION_APPID: DWG_SECTION_TYPE_R11 = 9;
pub const DWG_SECTION_TYPE_R11_SECTION_DIMSTYLE: DWG_SECTION_TYPE_R11 = 10;
pub const DWG_SECTION_TYPE_R11_SECTION_VX: DWG_SECTION_TYPE_R11 = 11;
pub type DWG_SECTION_TYPE_R11 = ::std::os::raw::c_int;
pub use self::DWG_SECTION_TYPE_R11 as Dwg_Section_Type_r11;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_section {
    pub number: BITCODE_RLd,
    pub size: BITCODE_RL,
    pub address: BITCODE_RLL,
    pub objid_r11: BITCODE_RL,
    pub parent: BITCODE_RL,
    pub left: BITCODE_RL,
    pub right: BITCODE_RL,
    pub x00: BITCODE_RL,
    pub type_: Dwg_Section_Type,
    pub name: [::std::os::raw::c_char; 64usize],
    pub section_type: BITCODE_RL,
    pub decomp_data_size: BITCODE_RL,
    pub comp_data_size: BITCODE_RL,
    pub compression_type: BITCODE_RL,
    pub checksum: BITCODE_RL,
    pub flags_r11: BITCODE_RS,
}
#[test]
fn bindgen_test_layout__dwg_section() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_section> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_section>(),
        128usize,
        concat!("Size of: ", stringify!(_dwg_section))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_section>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_section))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).number) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_section),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_section),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_section),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objid_r11) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_section),
            "::",
            stringify!(objid_r11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_section),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).left) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_section),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_section),
            "::",
            stringify!(right)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x00) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_section),
            "::",
            stringify!(x00)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_section),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_section),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).section_type) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_section),
            "::",
            stringify!(section_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decomp_data_size) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_section),
            "::",
            stringify!(decomp_data_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_data_size) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_section),
            "::",
            stringify!(comp_data_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compression_type) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_section),
            "::",
            stringify!(compression_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).checksum) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_section),
            "::",
            stringify!(checksum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags_r11) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_section),
            "::",
            stringify!(flags_r11)
        )
    );
}
pub type Dwg_Section = _dwg_section;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Dwg_Section_InfoHdr {
    pub num_desc: BITCODE_RL,
    pub compressed: BITCODE_RL,
    pub max_size: BITCODE_RL,
    pub encrypted: BITCODE_RL,
    pub num_desc2: BITCODE_RL,
}
#[test]
fn bindgen_test_layout_Dwg_Section_InfoHdr() {
    const UNINIT: ::std::mem::MaybeUninit<Dwg_Section_InfoHdr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Dwg_Section_InfoHdr>(),
        20usize,
        concat!("Size of: ", stringify!(Dwg_Section_InfoHdr))
    );
    assert_eq!(
        ::std::mem::align_of::<Dwg_Section_InfoHdr>(),
        4usize,
        concat!("Alignment of ", stringify!(Dwg_Section_InfoHdr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_desc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Dwg_Section_InfoHdr),
            "::",
            stringify!(num_desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compressed) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Dwg_Section_InfoHdr),
            "::",
            stringify!(compressed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Dwg_Section_InfoHdr),
            "::",
            stringify!(max_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encrypted) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Dwg_Section_InfoHdr),
            "::",
            stringify!(encrypted)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_desc2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Dwg_Section_InfoHdr),
            "::",
            stringify!(num_desc2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Dwg_Section_Info {
    pub size: i64,
    pub num_sections: BITCODE_RL,
    pub max_decomp_size: BITCODE_RL,
    pub unknown: BITCODE_RL,
    pub compressed: BITCODE_RL,
    pub type_: BITCODE_RL,
    pub encrypted: BITCODE_RL,
    pub name: [::std::os::raw::c_char; 64usize],
    pub fixedtype: Dwg_Section_Type,
    pub sections: *mut *mut Dwg_Section,
}
#[test]
fn bindgen_test_layout_Dwg_Section_Info() {
    const UNINIT: ::std::mem::MaybeUninit<Dwg_Section_Info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Dwg_Section_Info>(),
        112usize,
        concat!("Size of: ", stringify!(Dwg_Section_Info))
    );
    assert_eq!(
        ::std::mem::align_of::<Dwg_Section_Info>(),
        8usize,
        concat!("Alignment of ", stringify!(Dwg_Section_Info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Dwg_Section_Info),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_sections) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Dwg_Section_Info),
            "::",
            stringify!(num_sections)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_decomp_size) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Dwg_Section_Info),
            "::",
            stringify!(max_decomp_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Dwg_Section_Info),
            "::",
            stringify!(unknown)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compressed) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Dwg_Section_Info),
            "::",
            stringify!(compressed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Dwg_Section_Info),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encrypted) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Dwg_Section_Info),
            "::",
            stringify!(encrypted)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Dwg_Section_Info),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fixedtype) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Dwg_Section_Info),
            "::",
            stringify!(fixedtype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sections) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Dwg_Section_Info),
            "::",
            stringify!(sections)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_SummaryInfo_Property {
    pub tag: BITCODE_TV,
    pub value: BITCODE_TV,
}
#[test]
fn bindgen_test_layout__dwg_SummaryInfo_Property() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_SummaryInfo_Property> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_SummaryInfo_Property>(),
        16usize,
        concat!("Size of: ", stringify!(_dwg_SummaryInfo_Property))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_SummaryInfo_Property>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_SummaryInfo_Property))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_SummaryInfo_Property),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_SummaryInfo_Property),
            "::",
            stringify!(value)
        )
    );
}
pub type Dwg_SummaryInfo_Property = _dwg_SummaryInfo_Property;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_FileDepList_Files {
    pub filename: BITCODE_TV,
    pub filepath: BITCODE_TV,
    pub fingerprint: BITCODE_TV,
    pub version: BITCODE_TV,
    pub feature_index: BITCODE_RL,
    pub timestamp: BITCODE_RL,
    pub filesize: BITCODE_RL,
    pub affects_graphics: BITCODE_RS,
    pub refcount: BITCODE_RL,
}
#[test]
fn bindgen_test_layout__dwg_FileDepList_Files() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_FileDepList_Files> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_FileDepList_Files>(),
        56usize,
        concat!("Size of: ", stringify!(_dwg_FileDepList_Files))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_FileDepList_Files>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_FileDepList_Files))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filename) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_FileDepList_Files),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filepath) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_FileDepList_Files),
            "::",
            stringify!(filepath)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fingerprint) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_FileDepList_Files),
            "::",
            stringify!(fingerprint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_FileDepList_Files),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).feature_index) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_FileDepList_Files),
            "::",
            stringify!(feature_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_FileDepList_Files),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filesize) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_FileDepList_Files),
            "::",
            stringify!(filesize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).affects_graphics) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_FileDepList_Files),
            "::",
            stringify!(affects_graphics)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refcount) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_FileDepList_Files),
            "::",
            stringify!(refcount)
        )
    );
}
pub type Dwg_FileDepList_Files = _dwg_FileDepList_Files;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_AcDs_SegmentIndex {
    pub offset: BITCODE_RLL,
    pub size: BITCODE_RL,
}
#[test]
fn bindgen_test_layout__dwg_AcDs_SegmentIndex() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_AcDs_SegmentIndex> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_AcDs_SegmentIndex>(),
        16usize,
        concat!("Size of: ", stringify!(_dwg_AcDs_SegmentIndex))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_AcDs_SegmentIndex>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_AcDs_SegmentIndex))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_SegmentIndex),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_SegmentIndex),
            "::",
            stringify!(size)
        )
    );
}
pub type Dwg_AcDs_SegmentIndex = _dwg_AcDs_SegmentIndex;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_AcDs_DataIndex_Entry {
    pub segidx: BITCODE_RL,
    pub offset: BITCODE_RL,
    pub schidx: BITCODE_RL,
}
#[test]
fn bindgen_test_layout__dwg_AcDs_DataIndex_Entry() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_AcDs_DataIndex_Entry> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_AcDs_DataIndex_Entry>(),
        12usize,
        concat!("Size of: ", stringify!(_dwg_AcDs_DataIndex_Entry))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_AcDs_DataIndex_Entry>(),
        4usize,
        concat!("Alignment of ", stringify!(_dwg_AcDs_DataIndex_Entry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).segidx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_DataIndex_Entry),
            "::",
            stringify!(segidx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_DataIndex_Entry),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).schidx) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_DataIndex_Entry),
            "::",
            stringify!(schidx)
        )
    );
}
pub type Dwg_AcDs_DataIndex_Entry = _dwg_AcDs_DataIndex_Entry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_AcDs_DataIndex {
    pub num_entries: BITCODE_RL,
    pub di_unknown: BITCODE_RL,
    pub entries: *mut Dwg_AcDs_DataIndex_Entry,
}
#[test]
fn bindgen_test_layout__dwg_AcDs_DataIndex() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_AcDs_DataIndex> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_AcDs_DataIndex>(),
        16usize,
        concat!("Size of: ", stringify!(_dwg_AcDs_DataIndex))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_AcDs_DataIndex>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_AcDs_DataIndex))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_entries) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_DataIndex),
            "::",
            stringify!(num_entries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_unknown) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_DataIndex),
            "::",
            stringify!(di_unknown)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entries) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_DataIndex),
            "::",
            stringify!(entries)
        )
    );
}
pub type Dwg_AcDs_DataIndex = _dwg_AcDs_DataIndex;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_AcDs_Data_RecordHdr {
    pub entry_size: BITCODE_RL,
    pub unknown: BITCODE_RL,
    pub handle: BITCODE_RLL,
    pub offset: BITCODE_RL,
}
#[test]
fn bindgen_test_layout__dwg_AcDs_Data_RecordHdr() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_AcDs_Data_RecordHdr> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_AcDs_Data_RecordHdr>(),
        24usize,
        concat!("Size of: ", stringify!(_dwg_AcDs_Data_RecordHdr))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_AcDs_Data_RecordHdr>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_AcDs_Data_RecordHdr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entry_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_Data_RecordHdr),
            "::",
            stringify!(entry_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_Data_RecordHdr),
            "::",
            stringify!(unknown)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_Data_RecordHdr),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_Data_RecordHdr),
            "::",
            stringify!(offset)
        )
    );
}
pub type Dwg_AcDs_Data_RecordHdr = _dwg_AcDs_Data_RecordHdr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_AcDs_Data_Record {
    pub data_size: BITCODE_RL,
    pub blob: *mut BITCODE_RC,
}
#[test]
fn bindgen_test_layout__dwg_AcDs_Data_Record() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_AcDs_Data_Record> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_AcDs_Data_Record>(),
        16usize,
        concat!("Size of: ", stringify!(_dwg_AcDs_Data_Record))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_AcDs_Data_Record>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_AcDs_Data_Record))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_Data_Record),
            "::",
            stringify!(data_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blob) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_Data_Record),
            "::",
            stringify!(blob)
        )
    );
}
pub type Dwg_AcDs_Data_Record = _dwg_AcDs_Data_Record;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_AcDs_Data {
    pub record_hdrs: *mut Dwg_AcDs_Data_RecordHdr,
    pub records: *mut Dwg_AcDs_Data_Record,
}
#[test]
fn bindgen_test_layout__dwg_AcDs_Data() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_AcDs_Data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_AcDs_Data>(),
        16usize,
        concat!("Size of: ", stringify!(_dwg_AcDs_Data))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_AcDs_Data>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_AcDs_Data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).record_hdrs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_Data),
            "::",
            stringify!(record_hdrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).records) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_Data),
            "::",
            stringify!(records)
        )
    );
}
pub type Dwg_AcDs_Data = _dwg_AcDs_Data;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_AcDs_DataBlobRef_Page {
    pub segidx: BITCODE_RL,
    pub size: BITCODE_RL,
}
#[test]
fn bindgen_test_layout__dwg_AcDs_DataBlobRef_Page() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_AcDs_DataBlobRef_Page> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_AcDs_DataBlobRef_Page>(),
        8usize,
        concat!("Size of: ", stringify!(_dwg_AcDs_DataBlobRef_Page))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_AcDs_DataBlobRef_Page>(),
        4usize,
        concat!("Alignment of ", stringify!(_dwg_AcDs_DataBlobRef_Page))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).segidx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_DataBlobRef_Page),
            "::",
            stringify!(segidx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_DataBlobRef_Page),
            "::",
            stringify!(size)
        )
    );
}
pub type Dwg_AcDs_DataBlobRef_Page = _dwg_AcDs_DataBlobRef_Page;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_AcDs_DataBlobRef {
    pub total_data_size: BITCODE_RLL,
    pub num_pages: BITCODE_RL,
    pub record_size: BITCODE_RL,
    pub page_size: BITCODE_RL,
    pub unknown_1: BITCODE_RL,
    pub unknown_2: BITCODE_RL,
    pub pages: *mut Dwg_AcDs_DataBlobRef_Page,
}
#[test]
fn bindgen_test_layout__dwg_AcDs_DataBlobRef() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_AcDs_DataBlobRef> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_AcDs_DataBlobRef>(),
        40usize,
        concat!("Size of: ", stringify!(_dwg_AcDs_DataBlobRef))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_AcDs_DataBlobRef>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_AcDs_DataBlobRef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_data_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_DataBlobRef),
            "::",
            stringify!(total_data_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_pages) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_DataBlobRef),
            "::",
            stringify!(num_pages)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).record_size) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_DataBlobRef),
            "::",
            stringify!(record_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).page_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_DataBlobRef),
            "::",
            stringify!(page_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_1) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_DataBlobRef),
            "::",
            stringify!(unknown_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_2) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_DataBlobRef),
            "::",
            stringify!(unknown_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pages) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_DataBlobRef),
            "::",
            stringify!(pages)
        )
    );
}
pub type Dwg_AcDs_DataBlobRef = _dwg_AcDs_DataBlobRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_AcDs_DataBlob {
    pub data_size: BITCODE_RLL,
    pub page_count: BITCODE_RL,
    pub record_size: BITCODE_RL,
    pub page_size: BITCODE_RL,
    pub unknown_1: BITCODE_RL,
    pub unknown_2: BITCODE_RL,
    pub ref_: *mut Dwg_AcDs_DataBlobRef,
}
#[test]
fn bindgen_test_layout__dwg_AcDs_DataBlob() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_AcDs_DataBlob> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_AcDs_DataBlob>(),
        40usize,
        concat!("Size of: ", stringify!(_dwg_AcDs_DataBlob))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_AcDs_DataBlob>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_AcDs_DataBlob))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_DataBlob),
            "::",
            stringify!(data_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).page_count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_DataBlob),
            "::",
            stringify!(page_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).record_size) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_DataBlob),
            "::",
            stringify!(record_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).page_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_DataBlob),
            "::",
            stringify!(page_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_1) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_DataBlob),
            "::",
            stringify!(unknown_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_2) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_DataBlob),
            "::",
            stringify!(unknown_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_DataBlob),
            "::",
            stringify!(ref_)
        )
    );
}
pub type Dwg_AcDs_DataBlob = _dwg_AcDs_DataBlob;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_AcDs_DataBlob01 {
    pub total_data_size: BITCODE_RLL,
    pub page_start_offset: BITCODE_RLL,
    pub page_index: i32,
    pub page_count: i32,
    pub page_data_size: BITCODE_RLL,
    pub page_data: *mut BITCODE_RC,
}
#[test]
fn bindgen_test_layout__dwg_AcDs_DataBlob01() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_AcDs_DataBlob01> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_AcDs_DataBlob01>(),
        40usize,
        concat!("Size of: ", stringify!(_dwg_AcDs_DataBlob01))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_AcDs_DataBlob01>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_AcDs_DataBlob01))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_data_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_DataBlob01),
            "::",
            stringify!(total_data_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).page_start_offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_DataBlob01),
            "::",
            stringify!(page_start_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).page_index) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_DataBlob01),
            "::",
            stringify!(page_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).page_count) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_DataBlob01),
            "::",
            stringify!(page_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).page_data_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_DataBlob01),
            "::",
            stringify!(page_data_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).page_data) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_DataBlob01),
            "::",
            stringify!(page_data)
        )
    );
}
pub type Dwg_AcDs_DataBlob01 = _dwg_AcDs_DataBlob01;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_AcDs_SchemaIndex_Prop {
    pub index: BITCODE_RL,
    pub segidx: BITCODE_RL,
    pub offset: BITCODE_RL,
}
#[test]
fn bindgen_test_layout__dwg_AcDs_SchemaIndex_Prop() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_AcDs_SchemaIndex_Prop> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_AcDs_SchemaIndex_Prop>(),
        12usize,
        concat!("Size of: ", stringify!(_dwg_AcDs_SchemaIndex_Prop))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_AcDs_SchemaIndex_Prop>(),
        4usize,
        concat!("Alignment of ", stringify!(_dwg_AcDs_SchemaIndex_Prop))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_SchemaIndex_Prop),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).segidx) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_SchemaIndex_Prop),
            "::",
            stringify!(segidx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_SchemaIndex_Prop),
            "::",
            stringify!(offset)
        )
    );
}
pub type Dwg_AcDs_SchemaIndex_Prop = _dwg_AcDs_SchemaIndex_Prop;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_AcDs_SchemaIndex {
    pub num_props: BITCODE_RL,
    pub si_unknown_1: BITCODE_RL,
    pub props: *mut Dwg_AcDs_SchemaIndex_Prop,
    pub si_tag: BITCODE_RLL,
    pub num_prop_entries: BITCODE_RL,
    pub si_unknown_2: BITCODE_RL,
    pub prop_entries: *mut Dwg_AcDs_SchemaIndex_Prop,
}
#[test]
fn bindgen_test_layout__dwg_AcDs_SchemaIndex() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_AcDs_SchemaIndex> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_AcDs_SchemaIndex>(),
        40usize,
        concat!("Size of: ", stringify!(_dwg_AcDs_SchemaIndex))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_AcDs_SchemaIndex>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_AcDs_SchemaIndex))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_props) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_SchemaIndex),
            "::",
            stringify!(num_props)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_unknown_1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_SchemaIndex),
            "::",
            stringify!(si_unknown_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).props) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_SchemaIndex),
            "::",
            stringify!(props)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_tag) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_SchemaIndex),
            "::",
            stringify!(si_tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_prop_entries) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_SchemaIndex),
            "::",
            stringify!(num_prop_entries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_unknown_2) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_SchemaIndex),
            "::",
            stringify!(si_unknown_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop_entries) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_SchemaIndex),
            "::",
            stringify!(prop_entries)
        )
    );
}
pub type Dwg_AcDs_SchemaIndex = _dwg_AcDs_SchemaIndex;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_AcDs_Schema_Prop {
    pub flags: BITCODE_RL,
    pub namidx: BITCODE_RL,
    pub type_: BITCODE_RL,
    pub type_size: BITCODE_RL,
    pub unknown_1: BITCODE_RL,
    pub unknown_2: BITCODE_RL,
    pub num_values: BITCODE_RS,
    pub values: *mut BITCODE_RC,
}
#[test]
fn bindgen_test_layout__dwg_AcDs_Schema_Prop() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_AcDs_Schema_Prop> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_AcDs_Schema_Prop>(),
        40usize,
        concat!("Size of: ", stringify!(_dwg_AcDs_Schema_Prop))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_AcDs_Schema_Prop>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_AcDs_Schema_Prop))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_Schema_Prop),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).namidx) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_Schema_Prop),
            "::",
            stringify!(namidx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_Schema_Prop),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_size) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_Schema_Prop),
            "::",
            stringify!(type_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_Schema_Prop),
            "::",
            stringify!(unknown_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_2) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_Schema_Prop),
            "::",
            stringify!(unknown_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_values) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_Schema_Prop),
            "::",
            stringify!(num_values)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).values) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_Schema_Prop),
            "::",
            stringify!(values)
        )
    );
}
pub type Dwg_AcDs_Schema_Prop = _dwg_AcDs_Schema_Prop;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_AcDs_Schema {
    pub num_index: BITCODE_RS,
    pub index: *mut BITCODE_RLL,
    pub num_props: BITCODE_RS,
    pub props: *mut Dwg_AcDs_Schema_Prop,
}
#[test]
fn bindgen_test_layout__dwg_AcDs_Schema() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_AcDs_Schema> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_AcDs_Schema>(),
        32usize,
        concat!("Size of: ", stringify!(_dwg_AcDs_Schema))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_AcDs_Schema>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_AcDs_Schema))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_Schema),
            "::",
            stringify!(num_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_Schema),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_props) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_Schema),
            "::",
            stringify!(num_props)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).props) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_Schema),
            "::",
            stringify!(props)
        )
    );
}
pub type Dwg_AcDs_Schema = _dwg_AcDs_Schema;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_AcDs_SchemaData_UProp {
    pub size: BITCODE_RL,
    pub flags: BITCODE_RL,
}
#[test]
fn bindgen_test_layout__dwg_AcDs_SchemaData_UProp() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_AcDs_SchemaData_UProp> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_AcDs_SchemaData_UProp>(),
        8usize,
        concat!("Size of: ", stringify!(_dwg_AcDs_SchemaData_UProp))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_AcDs_SchemaData_UProp>(),
        4usize,
        concat!("Alignment of ", stringify!(_dwg_AcDs_SchemaData_UProp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_SchemaData_UProp),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_SchemaData_UProp),
            "::",
            stringify!(flags)
        )
    );
}
pub type Dwg_AcDs_SchemaData_UProp = _dwg_AcDs_SchemaData_UProp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_AcDs_SchemaData {
    pub num_uprops: BITCODE_RL,
    pub uprops: *mut Dwg_AcDs_SchemaData_UProp,
    pub num_schemas: BITCODE_RL,
    pub schemas: *mut Dwg_AcDs_Schema,
    pub num_propnames: BITCODE_RL,
    pub propnames: *mut BITCODE_TV,
}
#[test]
fn bindgen_test_layout__dwg_AcDs_SchemaData() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_AcDs_SchemaData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_AcDs_SchemaData>(),
        48usize,
        concat!("Size of: ", stringify!(_dwg_AcDs_SchemaData))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_AcDs_SchemaData>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_AcDs_SchemaData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_uprops) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_SchemaData),
            "::",
            stringify!(num_uprops)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uprops) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_SchemaData),
            "::",
            stringify!(uprops)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_schemas) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_SchemaData),
            "::",
            stringify!(num_schemas)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).schemas) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_SchemaData),
            "::",
            stringify!(schemas)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_propnames) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_SchemaData),
            "::",
            stringify!(num_propnames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).propnames) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_SchemaData),
            "::",
            stringify!(propnames)
        )
    );
}
pub type Dwg_AcDs_SchemaData = _dwg_AcDs_SchemaData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_AcDs_Search_IdIdx {
    pub handle: BITCODE_RLL,
    pub num_ididx: BITCODE_RL,
    pub ididx: *mut BITCODE_RLL,
}
#[test]
fn bindgen_test_layout__dwg_AcDs_Search_IdIdx() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_AcDs_Search_IdIdx> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_AcDs_Search_IdIdx>(),
        24usize,
        concat!("Size of: ", stringify!(_dwg_AcDs_Search_IdIdx))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_AcDs_Search_IdIdx>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_AcDs_Search_IdIdx))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_Search_IdIdx),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_ididx) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_Search_IdIdx),
            "::",
            stringify!(num_ididx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ididx) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_Search_IdIdx),
            "::",
            stringify!(ididx)
        )
    );
}
pub type Dwg_AcDs_Search_IdIdx = _dwg_AcDs_Search_IdIdx;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_AcDs_Search_IdIdxs {
    pub num_ididx: BITCODE_RL,
    pub ididx: *mut Dwg_AcDs_Search_IdIdx,
}
#[test]
fn bindgen_test_layout__dwg_AcDs_Search_IdIdxs() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_AcDs_Search_IdIdxs> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_AcDs_Search_IdIdxs>(),
        16usize,
        concat!("Size of: ", stringify!(_dwg_AcDs_Search_IdIdxs))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_AcDs_Search_IdIdxs>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_AcDs_Search_IdIdxs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_ididx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_Search_IdIdxs),
            "::",
            stringify!(num_ididx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ididx) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_Search_IdIdxs),
            "::",
            stringify!(ididx)
        )
    );
}
pub type Dwg_AcDs_Search_IdIdxs = _dwg_AcDs_Search_IdIdxs;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_AcDs_Search_Data {
    pub schema_namidx: BITCODE_RL,
    pub num_sortedidx: BITCODE_RL,
    pub sortedidx: *mut BITCODE_RLLd,
    pub num_ididxs: BITCODE_RL,
    pub unknown: BITCODE_RL,
    pub ididxs: *mut Dwg_AcDs_Search_IdIdxs,
}
#[test]
fn bindgen_test_layout__dwg_AcDs_Search_Data() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_AcDs_Search_Data> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_AcDs_Search_Data>(),
        32usize,
        concat!("Size of: ", stringify!(_dwg_AcDs_Search_Data))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_AcDs_Search_Data>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_AcDs_Search_Data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).schema_namidx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_Search_Data),
            "::",
            stringify!(schema_namidx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_sortedidx) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_Search_Data),
            "::",
            stringify!(num_sortedidx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sortedidx) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_Search_Data),
            "::",
            stringify!(sortedidx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_ididxs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_Search_Data),
            "::",
            stringify!(num_ididxs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_Search_Data),
            "::",
            stringify!(unknown)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ididxs) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_Search_Data),
            "::",
            stringify!(ididxs)
        )
    );
}
pub type Dwg_AcDs_Search_Data = _dwg_AcDs_Search_Data;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_AcDs_Search {
    pub num_search: BITCODE_RL,
    pub search: *mut Dwg_AcDs_Search_Data,
}
#[test]
fn bindgen_test_layout__dwg_AcDs_Search() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_AcDs_Search> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_AcDs_Search>(),
        16usize,
        concat!("Size of: ", stringify!(_dwg_AcDs_Search))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_AcDs_Search>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_AcDs_Search))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_search) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_Search),
            "::",
            stringify!(num_search)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).search) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_Search),
            "::",
            stringify!(search)
        )
    );
}
pub type Dwg_AcDs_Search = _dwg_AcDs_Search;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_AcDs_Segment {
    pub signature: BITCODE_RS,
    pub name: [BITCODE_RC; 7usize],
    pub type_: BITCODE_RCd,
    pub segment_idx: BITCODE_RL,
    pub is_blob01: BITCODE_RL,
    pub segsize: BITCODE_RL,
    pub unknown_2: BITCODE_RL,
    pub ds_version: BITCODE_RL,
    pub unknown_3: BITCODE_RL,
    pub data_algn_offset: BITCODE_RL,
    pub objdata_algn_offset: BITCODE_RL,
    pub padding: [BITCODE_RC; 9usize],
}
#[test]
fn bindgen_test_layout__dwg_AcDs_Segment() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_AcDs_Segment> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_AcDs_Segment>(),
        56usize,
        concat!("Size of: ", stringify!(_dwg_AcDs_Segment))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_AcDs_Segment>(),
        4usize,
        concat!("Alignment of ", stringify!(_dwg_AcDs_Segment))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signature) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_Segment),
            "::",
            stringify!(signature)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_Segment),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_Segment),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).segment_idx) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_Segment),
            "::",
            stringify!(segment_idx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_blob01) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_Segment),
            "::",
            stringify!(is_blob01)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).segsize) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_Segment),
            "::",
            stringify!(segsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_2) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_Segment),
            "::",
            stringify!(unknown_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ds_version) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_Segment),
            "::",
            stringify!(ds_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_3) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_Segment),
            "::",
            stringify!(unknown_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_algn_offset) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_Segment),
            "::",
            stringify!(data_algn_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objdata_algn_offset) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_Segment),
            "::",
            stringify!(objdata_algn_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs_Segment),
            "::",
            stringify!(padding)
        )
    );
}
pub type Dwg_AcDs_Segment = _dwg_AcDs_Segment;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_AcDs {
    pub file_signature: BITCODE_RL,
    pub file_header_size: BITCODE_RL,
    pub unknown_1: BITCODE_RL,
    pub version: BITCODE_RL,
    pub unknown_2: BITCODE_RL,
    pub ds_version: BITCODE_RL,
    pub segidx_offset: BITCODE_RL,
    pub segidx_unknown: BITCODE_RL,
    pub num_segidx: BITCODE_RL,
    pub schidx_segidx: BITCODE_RL,
    pub datidx_segidx: BITCODE_RL,
    pub search_segidx: BITCODE_RL,
    pub prvsav_segidx: BITCODE_RL,
    pub file_size: BITCODE_RL,
    pub total_segments: BITCODE_BL,
    pub segidx: *mut Dwg_AcDs_SegmentIndex,
    pub datidx: Dwg_AcDs_DataIndex,
    pub data: *mut Dwg_AcDs_Data,
    pub blob01: Dwg_AcDs_DataBlob,
    pub schidx: Dwg_AcDs_SchemaIndex,
    pub schdat: Dwg_AcDs_SchemaData,
    pub search: Dwg_AcDs_Search,
    pub segments: *mut Dwg_AcDs_Segment,
}
#[test]
fn bindgen_test_layout__dwg_AcDs() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_AcDs> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_AcDs>(),
        248usize,
        concat!("Size of: ", stringify!(_dwg_AcDs))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_AcDs>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_AcDs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file_signature) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs),
            "::",
            stringify!(file_signature)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file_header_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs),
            "::",
            stringify!(file_header_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs),
            "::",
            stringify!(unknown_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs),
            "::",
            stringify!(unknown_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ds_version) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs),
            "::",
            stringify!(ds_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).segidx_offset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs),
            "::",
            stringify!(segidx_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).segidx_unknown) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs),
            "::",
            stringify!(segidx_unknown)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_segidx) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs),
            "::",
            stringify!(num_segidx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).schidx_segidx) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs),
            "::",
            stringify!(schidx_segidx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datidx_segidx) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs),
            "::",
            stringify!(datidx_segidx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).search_segidx) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs),
            "::",
            stringify!(search_segidx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prvsav_segidx) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs),
            "::",
            stringify!(prvsav_segidx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file_size) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs),
            "::",
            stringify!(file_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_segments) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs),
            "::",
            stringify!(total_segments)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).segidx) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs),
            "::",
            stringify!(segidx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datidx) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs),
            "::",
            stringify!(datidx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blob01) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs),
            "::",
            stringify!(blob01)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).schidx) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs),
            "::",
            stringify!(schidx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).schdat) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs),
            "::",
            stringify!(schdat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).search) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs),
            "::",
            stringify!(search)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).segments) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_AcDs),
            "::",
            stringify!(segments)
        )
    );
}
pub type Dwg_AcDs = _dwg_AcDs;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_header {
    pub version: Dwg_Version_Type,
    pub from_version: Dwg_Version_Type,
    pub is_maint: BITCODE_RC,
    pub zero_one_or_three: BITCODE_RC,
    pub numentity_sections: BITCODE_RS,
    pub numheader_vars: BITCODE_RS,
    pub thumbnail_address: BITCODE_RL,
    pub dwg_version: BITCODE_RC,
    pub maint_version: BITCODE_RC,
    pub entities_start: BITCODE_RL,
    pub entities_end: BITCODE_RL,
    pub blocks_start: BITCODE_RL,
    pub blocks_size: BITCODE_RL,
    pub extras_start: BITCODE_RL,
    pub extras_size: BITCODE_RL,
    pub codepage: BITCODE_RS,
    pub unknown_0: BITCODE_RC,
    pub app_dwg_version: BITCODE_RC,
    pub app_maint_version: BITCODE_RC,
    pub security_type: BITCODE_RL,
    pub rl_1c_address: BITCODE_RL,
    pub summaryinfo_address: BITCODE_RL,
    pub vbaproj_address: BITCODE_RL,
    pub r2004_header_address: BITCODE_RL,
    pub sections: BITCODE_RL,
    pub num_sections: BITCODE_RL,
    pub section: *mut Dwg_Section,
    pub section_infohdr: Dwg_Section_InfoHdr,
    pub section_info: *mut Dwg_Section_Info,
}
#[test]
fn bindgen_test_layout__dwg_header() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_header> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_header>(),
        128usize,
        concat!("Size of: ", stringify!(_dwg_header))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_header>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_header))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).from_version) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header),
            "::",
            stringify!(from_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_maint) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header),
            "::",
            stringify!(is_maint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zero_one_or_three) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header),
            "::",
            stringify!(zero_one_or_three)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numentity_sections) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header),
            "::",
            stringify!(numentity_sections)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numheader_vars) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header),
            "::",
            stringify!(numheader_vars)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thumbnail_address) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header),
            "::",
            stringify!(thumbnail_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dwg_version) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header),
            "::",
            stringify!(dwg_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maint_version) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header),
            "::",
            stringify!(maint_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entities_start) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header),
            "::",
            stringify!(entities_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entities_end) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header),
            "::",
            stringify!(entities_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blocks_start) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header),
            "::",
            stringify!(blocks_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blocks_size) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header),
            "::",
            stringify!(blocks_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extras_start) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header),
            "::",
            stringify!(extras_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extras_size) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header),
            "::",
            stringify!(extras_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).codepage) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header),
            "::",
            stringify!(codepage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_0) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header),
            "::",
            stringify!(unknown_0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).app_dwg_version) as usize - ptr as usize },
        51usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header),
            "::",
            stringify!(app_dwg_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).app_maint_version) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header),
            "::",
            stringify!(app_maint_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).security_type) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header),
            "::",
            stringify!(security_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rl_1c_address) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header),
            "::",
            stringify!(rl_1c_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).summaryinfo_address) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header),
            "::",
            stringify!(summaryinfo_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vbaproj_address) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header),
            "::",
            stringify!(vbaproj_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r2004_header_address) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header),
            "::",
            stringify!(r2004_header_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sections) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header),
            "::",
            stringify!(sections)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_sections) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header),
            "::",
            stringify!(num_sections)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).section) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header),
            "::",
            stringify!(section)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).section_infohdr) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header),
            "::",
            stringify!(section_infohdr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).section_info) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_header),
            "::",
            stringify!(section_info)
        )
    );
}
pub type Dwg_Header = _dwg_header;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct r2007_file_header {
    pub header_size: i64,
    pub file_size: i64,
    pub pages_map_crc_compressed: i64,
    pub pages_map_correction: i64,
    pub pages_map_crc_seed: i64,
    pub pages_map2_offset: i64,
    pub pages_map2_id: i64,
    pub pages_map_offset: i64,
    pub pages_map_id: i64,
    pub header2_offset: i64,
    pub pages_map_size_comp: i64,
    pub pages_map_size_uncomp: i64,
    pub pages_amount: i64,
    pub pages_maxid: i64,
    pub unknown1: i64,
    pub unknown2: i64,
    pub pages_map_crc_uncomp: i64,
    pub unknown3: i64,
    pub unknown4: i64,
    pub unknown5: i64,
    pub num_sections: i64,
    pub sections_map_crc_uncomp: i64,
    pub sections_map_size_comp: i64,
    pub sections_map2_id: i64,
    pub sections_map_id: i64,
    pub sections_map_size_uncomp: i64,
    pub sections_map_crc_comp: i64,
    pub sections_map_correction: i64,
    pub sections_map_crc_seed: i64,
    pub stream_version: i64,
    pub crc_seed: i64,
    pub crc_seed_encoded: i64,
    pub random_seed: i64,
    pub header_crc: i64,
}
#[test]
fn bindgen_test_layout_r2007_file_header() {
    const UNINIT: ::std::mem::MaybeUninit<r2007_file_header> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<r2007_file_header>(),
        272usize,
        concat!("Size of: ", stringify!(r2007_file_header))
    );
    assert_eq!(
        ::std::mem::align_of::<r2007_file_header>(),
        1usize,
        concat!("Alignment of ", stringify!(r2007_file_header))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r2007_file_header),
            "::",
            stringify!(header_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r2007_file_header),
            "::",
            stringify!(file_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pages_map_crc_compressed) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r2007_file_header),
            "::",
            stringify!(pages_map_crc_compressed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pages_map_correction) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r2007_file_header),
            "::",
            stringify!(pages_map_correction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pages_map_crc_seed) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r2007_file_header),
            "::",
            stringify!(pages_map_crc_seed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pages_map2_offset) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r2007_file_header),
            "::",
            stringify!(pages_map2_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pages_map2_id) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r2007_file_header),
            "::",
            stringify!(pages_map2_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pages_map_offset) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r2007_file_header),
            "::",
            stringify!(pages_map_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pages_map_id) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r2007_file_header),
            "::",
            stringify!(pages_map_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header2_offset) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r2007_file_header),
            "::",
            stringify!(header2_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pages_map_size_comp) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(r2007_file_header),
            "::",
            stringify!(pages_map_size_comp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pages_map_size_uncomp) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(r2007_file_header),
            "::",
            stringify!(pages_map_size_uncomp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pages_amount) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(r2007_file_header),
            "::",
            stringify!(pages_amount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pages_maxid) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(r2007_file_header),
            "::",
            stringify!(pages_maxid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown1) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(r2007_file_header),
            "::",
            stringify!(unknown1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown2) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(r2007_file_header),
            "::",
            stringify!(unknown2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pages_map_crc_uncomp) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(r2007_file_header),
            "::",
            stringify!(pages_map_crc_uncomp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown3) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(r2007_file_header),
            "::",
            stringify!(unknown3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown4) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(r2007_file_header),
            "::",
            stringify!(unknown4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown5) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(r2007_file_header),
            "::",
            stringify!(unknown5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_sections) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(r2007_file_header),
            "::",
            stringify!(num_sections)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sections_map_crc_uncomp) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(r2007_file_header),
            "::",
            stringify!(sections_map_crc_uncomp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sections_map_size_comp) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(r2007_file_header),
            "::",
            stringify!(sections_map_size_comp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sections_map2_id) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(r2007_file_header),
            "::",
            stringify!(sections_map2_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sections_map_id) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(r2007_file_header),
            "::",
            stringify!(sections_map_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sections_map_size_uncomp) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(r2007_file_header),
            "::",
            stringify!(sections_map_size_uncomp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sections_map_crc_comp) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(r2007_file_header),
            "::",
            stringify!(sections_map_crc_comp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sections_map_correction) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(r2007_file_header),
            "::",
            stringify!(sections_map_correction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sections_map_crc_seed) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(r2007_file_header),
            "::",
            stringify!(sections_map_crc_seed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream_version) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(r2007_file_header),
            "::",
            stringify!(stream_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).crc_seed) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(r2007_file_header),
            "::",
            stringify!(crc_seed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).crc_seed_encoded) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(r2007_file_header),
            "::",
            stringify!(crc_seed_encoded)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).random_seed) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(r2007_file_header),
            "::",
            stringify!(random_seed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header_crc) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(r2007_file_header),
            "::",
            stringify!(header_crc)
        )
    );
}
pub type Dwg_R2007_Header = r2007_file_header;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_R2004_Header {
    pub file_ID_string: [BITCODE_RC; 12usize],
    pub header_address: BITCODE_RLx,
    pub header_size: BITCODE_RL,
    pub x04: BITCODE_RL,
    pub root_tree_node_gap: BITCODE_RLd,
    pub lowermost_left_tree_node_gap: BITCODE_RLd,
    pub lowermost_right_tree_node_gap: BITCODE_RLd,
    pub unknown_long: BITCODE_RL,
    pub last_section_id: BITCODE_RL,
    pub last_section_address: BITCODE_RLL,
    pub secondheader_address: BITCODE_RLL,
    pub numgaps: BITCODE_RL,
    pub numsections: BITCODE_RL,
    pub x20: BITCODE_RL,
    pub x80: BITCODE_RL,
    pub x40: BITCODE_RL,
    pub section_map_id: BITCODE_RL,
    pub section_map_address: BITCODE_RLL,
    pub section_info_id: BITCODE_RLd,
    pub section_array_size: BITCODE_RLd,
    pub gap_array_size: BITCODE_RL,
    pub crc32: BITCODE_RLx,
    pub padding: [BITCODE_RC; 12usize],
    pub section_type: BITCODE_RL,
    pub decomp_data_size: BITCODE_RL,
    pub comp_data_size: BITCODE_RL,
    pub compression_type: BITCODE_RL,
    pub checksum: BITCODE_RLx,
}
#[test]
fn bindgen_test_layout__dwg_R2004_Header() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_R2004_Header> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_R2004_Header>(),
        140usize,
        concat!("Size of: ", stringify!(_dwg_R2004_Header))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_R2004_Header>(),
        1usize,
        concat!("Alignment of ", stringify!(_dwg_R2004_Header))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file_ID_string) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_R2004_Header),
            "::",
            stringify!(file_ID_string)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header_address) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_R2004_Header),
            "::",
            stringify!(header_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_R2004_Header),
            "::",
            stringify!(header_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x04) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_R2004_Header),
            "::",
            stringify!(x04)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).root_tree_node_gap) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_R2004_Header),
            "::",
            stringify!(root_tree_node_gap)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).lowermost_left_tree_node_gap) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_R2004_Header),
            "::",
            stringify!(lowermost_left_tree_node_gap)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).lowermost_right_tree_node_gap) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_R2004_Header),
            "::",
            stringify!(lowermost_right_tree_node_gap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_long) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_R2004_Header),
            "::",
            stringify!(unknown_long)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_section_id) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_R2004_Header),
            "::",
            stringify!(last_section_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_section_address) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_R2004_Header),
            "::",
            stringify!(last_section_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).secondheader_address) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_R2004_Header),
            "::",
            stringify!(secondheader_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numgaps) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_R2004_Header),
            "::",
            stringify!(numgaps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numsections) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_R2004_Header),
            "::",
            stringify!(numsections)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x20) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_R2004_Header),
            "::",
            stringify!(x20)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x80) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_R2004_Header),
            "::",
            stringify!(x80)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x40) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_R2004_Header),
            "::",
            stringify!(x40)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).section_map_id) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_R2004_Header),
            "::",
            stringify!(section_map_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).section_map_address) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_R2004_Header),
            "::",
            stringify!(section_map_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).section_info_id) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_R2004_Header),
            "::",
            stringify!(section_info_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).section_array_size) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_R2004_Header),
            "::",
            stringify!(section_array_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gap_array_size) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_R2004_Header),
            "::",
            stringify!(gap_array_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).crc32) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_R2004_Header),
            "::",
            stringify!(crc32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_R2004_Header),
            "::",
            stringify!(padding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).section_type) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_R2004_Header),
            "::",
            stringify!(section_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decomp_data_size) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_R2004_Header),
            "::",
            stringify!(decomp_data_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_data_size) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_R2004_Header),
            "::",
            stringify!(comp_data_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compression_type) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_R2004_Header),
            "::",
            stringify!(compression_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).checksum) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_R2004_Header),
            "::",
            stringify!(checksum)
        )
    );
}
pub type Dwg_R2004_Header = _dwg_R2004_Header;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_auxheader {
    pub aux_intro: [BITCODE_RC; 3usize],
    pub dwg_version: BITCODE_RS,
    pub maint_version: BITCODE_RL,
    pub numsaves: BITCODE_RL,
    pub minus_1: BITCODE_RL,
    pub numsaves_1: BITCODE_RS,
    pub numsaves_2: BITCODE_RS,
    pub zero: BITCODE_RL,
    pub dwg_version_1: BITCODE_RS,
    pub maint_version_1: BITCODE_RL,
    pub dwg_version_2: BITCODE_RS,
    pub maint_version_2: BITCODE_RL,
    pub unknown_6rs: [BITCODE_RS; 6usize],
    pub unknown_5rl: [BITCODE_RL; 5usize],
    pub TDCREATE: BITCODE_TIMERLL,
    pub TDUPDATE: BITCODE_TIMERLL,
    pub HANDSEED: BITCODE_RL,
    pub plot_stamp: BITCODE_RL,
    pub zero_1: BITCODE_RS,
    pub numsaves_3: BITCODE_RS,
    pub zero_2: BITCODE_RL,
    pub zero_3: BITCODE_RL,
    pub zero_4: BITCODE_RL,
    pub numsaves_4: BITCODE_RL,
    pub zero_5: BITCODE_RL,
    pub zero_6: BITCODE_RL,
    pub zero_7: BITCODE_RL,
    pub zero_8: BITCODE_RL,
    pub zero_18: [BITCODE_RS; 3usize],
    pub num_auxheader_variables: BITCODE_RS,
    pub auxheader_size: BITCODE_RS,
    pub entities_start: BITCODE_RL,
    pub entities_end: BITCODE_RL,
    pub blocks_start: BITCODE_RL,
    pub extras_start: BITCODE_RL,
    pub auxheader_address: BITCODE_RLx,
    pub num_aux_tables: BITCODE_RS,
    pub R11_HANDLING: BITCODE_BS,
    pub R11_HANDSEED: BITCODE_H,
}
#[test]
fn bindgen_test_layout__dwg_auxheader() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_auxheader> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_auxheader>(),
        200usize,
        concat!("Size of: ", stringify!(_dwg_auxheader))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_auxheader>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_auxheader))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aux_intro) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_auxheader),
            "::",
            stringify!(aux_intro)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dwg_version) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_auxheader),
            "::",
            stringify!(dwg_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maint_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_auxheader),
            "::",
            stringify!(maint_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numsaves) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_auxheader),
            "::",
            stringify!(numsaves)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minus_1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_auxheader),
            "::",
            stringify!(minus_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numsaves_1) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_auxheader),
            "::",
            stringify!(numsaves_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numsaves_2) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_auxheader),
            "::",
            stringify!(numsaves_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zero) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_auxheader),
            "::",
            stringify!(zero)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dwg_version_1) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_auxheader),
            "::",
            stringify!(dwg_version_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maint_version_1) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_auxheader),
            "::",
            stringify!(maint_version_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dwg_version_2) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_auxheader),
            "::",
            stringify!(dwg_version_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maint_version_2) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_auxheader),
            "::",
            stringify!(maint_version_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_6rs) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_auxheader),
            "::",
            stringify!(unknown_6rs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_5rl) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_auxheader),
            "::",
            stringify!(unknown_5rl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TDCREATE) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_auxheader),
            "::",
            stringify!(TDCREATE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TDUPDATE) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_auxheader),
            "::",
            stringify!(TDUPDATE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HANDSEED) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_auxheader),
            "::",
            stringify!(HANDSEED)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plot_stamp) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_auxheader),
            "::",
            stringify!(plot_stamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zero_1) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_auxheader),
            "::",
            stringify!(zero_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numsaves_3) as usize - ptr as usize },
        122usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_auxheader),
            "::",
            stringify!(numsaves_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zero_2) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_auxheader),
            "::",
            stringify!(zero_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zero_3) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_auxheader),
            "::",
            stringify!(zero_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zero_4) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_auxheader),
            "::",
            stringify!(zero_4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numsaves_4) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_auxheader),
            "::",
            stringify!(numsaves_4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zero_5) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_auxheader),
            "::",
            stringify!(zero_5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zero_6) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_auxheader),
            "::",
            stringify!(zero_6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zero_7) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_auxheader),
            "::",
            stringify!(zero_7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zero_8) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_auxheader),
            "::",
            stringify!(zero_8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zero_18) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_auxheader),
            "::",
            stringify!(zero_18)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_auxheader_variables) as usize - ptr as usize },
        162usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_auxheader),
            "::",
            stringify!(num_auxheader_variables)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).auxheader_size) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_auxheader),
            "::",
            stringify!(auxheader_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entities_start) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_auxheader),
            "::",
            stringify!(entities_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entities_end) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_auxheader),
            "::",
            stringify!(entities_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blocks_start) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_auxheader),
            "::",
            stringify!(blocks_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extras_start) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_auxheader),
            "::",
            stringify!(extras_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).auxheader_address) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_auxheader),
            "::",
            stringify!(auxheader_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_aux_tables) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_auxheader),
            "::",
            stringify!(num_aux_tables)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).R11_HANDLING) as usize - ptr as usize },
        190usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_auxheader),
            "::",
            stringify!(R11_HANDLING)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).R11_HANDSEED) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_auxheader),
            "::",
            stringify!(R11_HANDSEED)
        )
    );
}
pub type Dwg_AuxHeader = _dwg_auxheader;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_summaryinfo {
    pub TITLE: BITCODE_TV,
    pub SUBJECT: BITCODE_TV,
    pub AUTHOR: BITCODE_TV,
    pub KEYWORDS: BITCODE_TV,
    pub COMMENTS: BITCODE_TV,
    pub LASTSAVEDBY: BITCODE_TV,
    pub REVISIONNUMBER: BITCODE_TV,
    pub HYPERLINKBASE: BITCODE_TV,
    pub TDINDWG: BITCODE_TIMERLL,
    pub TDCREATE: BITCODE_TIMERLL,
    pub TDUPDATE: BITCODE_TIMERLL,
    pub num_props: BITCODE_RS,
    pub props: *mut Dwg_SummaryInfo_Property,
    pub unknown1: BITCODE_RL,
    pub unknown2: BITCODE_RL,
}
#[test]
fn bindgen_test_layout__dwg_summaryinfo() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_summaryinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_summaryinfo>(),
        136usize,
        concat!("Size of: ", stringify!(_dwg_summaryinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_summaryinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_summaryinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TITLE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_summaryinfo),
            "::",
            stringify!(TITLE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SUBJECT) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_summaryinfo),
            "::",
            stringify!(SUBJECT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AUTHOR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_summaryinfo),
            "::",
            stringify!(AUTHOR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).KEYWORDS) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_summaryinfo),
            "::",
            stringify!(KEYWORDS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).COMMENTS) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_summaryinfo),
            "::",
            stringify!(COMMENTS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LASTSAVEDBY) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_summaryinfo),
            "::",
            stringify!(LASTSAVEDBY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).REVISIONNUMBER) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_summaryinfo),
            "::",
            stringify!(REVISIONNUMBER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HYPERLINKBASE) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_summaryinfo),
            "::",
            stringify!(HYPERLINKBASE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TDINDWG) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_summaryinfo),
            "::",
            stringify!(TDINDWG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TDCREATE) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_summaryinfo),
            "::",
            stringify!(TDCREATE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TDUPDATE) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_summaryinfo),
            "::",
            stringify!(TDUPDATE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_props) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_summaryinfo),
            "::",
            stringify!(num_props)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).props) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_summaryinfo),
            "::",
            stringify!(props)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown1) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_summaryinfo),
            "::",
            stringify!(unknown1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown2) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_summaryinfo),
            "::",
            stringify!(unknown2)
        )
    );
}
pub type Dwg_SummaryInfo = _dwg_summaryinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_appinfo {
    pub class_version: BITCODE_RL,
    pub num_strings: BITCODE_RL,
    pub appinfo_name: BITCODE_TV,
    pub version_checksum: [BITCODE_RC; 16usize],
    pub comment_checksum: [BITCODE_RC; 16usize],
    pub product_checksum: [BITCODE_RC; 16usize],
    pub version: BITCODE_TV,
    pub comment: BITCODE_TV,
    pub product_info: BITCODE_TV,
}
#[test]
fn bindgen_test_layout__dwg_appinfo() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_appinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_appinfo>(),
        88usize,
        concat!("Size of: ", stringify!(_dwg_appinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_appinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_appinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_appinfo),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_strings) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_appinfo),
            "::",
            stringify!(num_strings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).appinfo_name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_appinfo),
            "::",
            stringify!(appinfo_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version_checksum) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_appinfo),
            "::",
            stringify!(version_checksum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comment_checksum) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_appinfo),
            "::",
            stringify!(comment_checksum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).product_checksum) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_appinfo),
            "::",
            stringify!(product_checksum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_appinfo),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comment) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_appinfo),
            "::",
            stringify!(comment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).product_info) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_appinfo),
            "::",
            stringify!(product_info)
        )
    );
}
pub type Dwg_AppInfo = _dwg_appinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_filedeplist {
    pub num_features: BITCODE_RL,
    pub features: *mut BITCODE_TV,
    pub num_files: BITCODE_RL,
    pub files: *mut Dwg_FileDepList_Files,
}
#[test]
fn bindgen_test_layout__dwg_filedeplist() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_filedeplist> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_filedeplist>(),
        32usize,
        concat!("Size of: ", stringify!(_dwg_filedeplist))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_filedeplist>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_filedeplist))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_features) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_filedeplist),
            "::",
            stringify!(num_features)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).features) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_filedeplist),
            "::",
            stringify!(features)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_files) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_filedeplist),
            "::",
            stringify!(num_files)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).files) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_filedeplist),
            "::",
            stringify!(files)
        )
    );
}
pub type Dwg_FileDepList = _dwg_filedeplist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_security {
    pub unknown_1: BITCODE_RL,
    pub unknown_2: BITCODE_RL,
    pub unknown_3: BITCODE_RL,
    pub crypto_id: BITCODE_RL,
    pub crypto_name: BITCODE_TV,
    pub algo_id: BITCODE_RL,
    pub key_len: BITCODE_RL,
    pub encr_size: BITCODE_RL,
    pub encr_buffer: BITCODE_TF,
}
#[test]
fn bindgen_test_layout__dwg_security() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_security> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_security>(),
        48usize,
        concat!("Size of: ", stringify!(_dwg_security))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_security>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_security))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_security),
            "::",
            stringify!(unknown_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_security),
            "::",
            stringify!(unknown_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_3) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_security),
            "::",
            stringify!(unknown_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).crypto_id) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_security),
            "::",
            stringify!(crypto_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).crypto_name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_security),
            "::",
            stringify!(crypto_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).algo_id) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_security),
            "::",
            stringify!(algo_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key_len) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_security),
            "::",
            stringify!(key_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encr_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_security),
            "::",
            stringify!(encr_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encr_buffer) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_security),
            "::",
            stringify!(encr_buffer)
        )
    );
}
pub type Dwg_Security = _dwg_security;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_vbaproject {
    pub size: BITCODE_RL,
    pub unknown_bits: BITCODE_TF,
}
#[test]
fn bindgen_test_layout__dwg_vbaproject() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_vbaproject> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_vbaproject>(),
        16usize,
        concat!("Size of: ", stringify!(_dwg_vbaproject))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_vbaproject>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_vbaproject))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_vbaproject),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bits) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_vbaproject),
            "::",
            stringify!(unknown_bits)
        )
    );
}
pub type Dwg_VBAProject = _dwg_vbaproject;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_appinfohistory {
    pub size: BITCODE_RL,
    pub unknown_bits: BITCODE_TF,
}
#[test]
fn bindgen_test_layout__dwg_appinfohistory() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_appinfohistory> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_appinfohistory>(),
        16usize,
        concat!("Size of: ", stringify!(_dwg_appinfohistory))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_appinfohistory>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_appinfohistory))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_appinfohistory),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_bits) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_appinfohistory),
            "::",
            stringify!(unknown_bits)
        )
    );
}
pub type Dwg_AppInfoHistory = _dwg_appinfohistory;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_revhistory {
    pub class_version: BITCODE_RL,
    pub class_minor: BITCODE_RL,
    pub num_histories: BITCODE_RL,
    pub histories: *mut BITCODE_RL,
}
#[test]
fn bindgen_test_layout__dwg_revhistory() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_revhistory> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_revhistory>(),
        24usize,
        concat!("Size of: ", stringify!(_dwg_revhistory))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_revhistory>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_revhistory))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_revhistory),
            "::",
            stringify!(class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_minor) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_revhistory),
            "::",
            stringify!(class_minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_histories) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_revhistory),
            "::",
            stringify!(num_histories)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).histories) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_revhistory),
            "::",
            stringify!(histories)
        )
    );
}
pub type Dwg_RevHistory = _dwg_revhistory;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_objfreespace {
    pub zero: BITCODE_RLL,
    pub numhandles: BITCODE_RLL,
    pub TDUPDATE: BITCODE_TIMERLL,
    pub objects_address: BITCODE_RL,
    pub numnums: BITCODE_RC,
    pub max32: BITCODE_RLL,
    pub max64: BITCODE_RLL,
    pub maxtbl: BITCODE_RLL,
    pub maxrl: BITCODE_RLL,
    pub max32_hi: BITCODE_RLL,
    pub max64_hi: BITCODE_RLL,
    pub maxtbl_hi: BITCODE_RLL,
    pub maxrl_hi: BITCODE_RLL,
}
#[test]
fn bindgen_test_layout__dwg_objfreespace() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_objfreespace> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_objfreespace>(),
        104usize,
        concat!("Size of: ", stringify!(_dwg_objfreespace))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_objfreespace>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_objfreespace))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zero) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_objfreespace),
            "::",
            stringify!(zero)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numhandles) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_objfreespace),
            "::",
            stringify!(numhandles)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TDUPDATE) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_objfreespace),
            "::",
            stringify!(TDUPDATE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objects_address) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_objfreespace),
            "::",
            stringify!(objects_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numnums) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_objfreespace),
            "::",
            stringify!(numnums)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max32) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_objfreespace),
            "::",
            stringify!(max32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max64) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_objfreespace),
            "::",
            stringify!(max64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxtbl) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_objfreespace),
            "::",
            stringify!(maxtbl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxrl) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_objfreespace),
            "::",
            stringify!(maxrl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max32_hi) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_objfreespace),
            "::",
            stringify!(max32_hi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max64_hi) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_objfreespace),
            "::",
            stringify!(max64_hi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxtbl_hi) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_objfreespace),
            "::",
            stringify!(maxtbl_hi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxrl_hi) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_objfreespace),
            "::",
            stringify!(maxrl_hi)
        )
    );
}
pub type Dwg_ObjFreeSpace = _dwg_objfreespace;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_template {
    pub description: BITCODE_TV,
    pub MEASUREMENT: BITCODE_RS,
}
#[test]
fn bindgen_test_layout__dwg_template() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_template> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_template>(),
        16usize,
        concat!("Size of: ", stringify!(_dwg_template))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_template>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_template))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).description) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_template),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MEASUREMENT) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_template),
            "::",
            stringify!(MEASUREMENT)
        )
    );
}
pub type Dwg_Template = _dwg_template;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_secondheader_sections {
    pub nr: BITCODE_RCd,
    pub address: BITCODE_BL,
    pub size: BITCODE_BL,
}
#[test]
fn bindgen_test_layout__dwg_secondheader_sections() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_secondheader_sections> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_secondheader_sections>(),
        12usize,
        concat!("Size of: ", stringify!(_dwg_secondheader_sections))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_secondheader_sections>(),
        4usize,
        concat!("Alignment of ", stringify!(_dwg_secondheader_sections))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_secondheader_sections),
            "::",
            stringify!(nr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_secondheader_sections),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_secondheader_sections),
            "::",
            stringify!(size)
        )
    );
}
pub type Dwg_SecondHeader_Sections = _dwg_secondheader_sections;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_secondheader_handles {
    pub num_hdl: BITCODE_RCd,
    pub nr: BITCODE_RCd,
    pub hdl: [BITCODE_RC; 8usize],
    pub name: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__dwg_secondheader_handles() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_secondheader_handles> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_secondheader_handles>(),
        24usize,
        concat!("Size of: ", stringify!(_dwg_secondheader_handles))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_secondheader_handles>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_secondheader_handles))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_hdl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_secondheader_handles),
            "::",
            stringify!(num_hdl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nr) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_secondheader_handles),
            "::",
            stringify!(nr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdl) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_secondheader_handles),
            "::",
            stringify!(hdl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_secondheader_handles),
            "::",
            stringify!(name)
        )
    );
}
pub type Dwg_SecondHeader_Handles = _dwg_secondheader_handles;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_secondheader {
    pub size: BITCODE_RL,
    pub address: BITCODE_RL,
    pub version: [BITCODE_RC; 11usize],
    pub is_maint: BITCODE_RC,
    pub zero_one_or_three: BITCODE_RC,
    pub dwg_version: BITCODE_BS,
    pub codepage: BITCODE_RS,
    pub num_sections: BITCODE_RC,
    pub sections: [Dwg_SecondHeader_Sections; 7usize],
    pub num_handles: BITCODE_BS,
    pub handles: [Dwg_SecondHeader_Handles; 14usize],
    pub crc: BITCODE_RS,
    #[doc = "< r14-r2000"]
    pub junk_r14: BITCODE_RLL,
}
#[test]
fn bindgen_test_layout__dwg_secondheader() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_secondheader> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_secondheader>(),
        472usize,
        concat!("Size of: ", stringify!(_dwg_secondheader))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_secondheader>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_secondheader))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_secondheader),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_secondheader),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_secondheader),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_maint) as usize - ptr as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_secondheader),
            "::",
            stringify!(is_maint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zero_one_or_three) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_secondheader),
            "::",
            stringify!(zero_one_or_three)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dwg_version) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_secondheader),
            "::",
            stringify!(dwg_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).codepage) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_secondheader),
            "::",
            stringify!(codepage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_sections) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_secondheader),
            "::",
            stringify!(num_sections)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sections) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_secondheader),
            "::",
            stringify!(sections)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_handles) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_secondheader),
            "::",
            stringify!(num_handles)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handles) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_secondheader),
            "::",
            stringify!(handles)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).crc) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_secondheader),
            "::",
            stringify!(crc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).junk_r14) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_secondheader),
            "::",
            stringify!(junk_r14)
        )
    );
}
pub type Dwg_SecondHeader = _dwg_secondheader;
#[doc = "Main DWG struct"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dwg_struct {
    pub header: Dwg_Header,
    #[doc = "< number of classes"]
    pub num_classes: BITCODE_BS,
    #[doc = "< array of classes"]
    pub dwg_class: *mut Dwg_Class,
    #[doc = "< number of objects"]
    pub num_objects: BITCODE_BL,
    #[doc = "< room for objects"]
    pub num_alloced_objects: BITCODE_BL,
    #[doc = "< list of all objects and entities"]
    pub object: *mut Dwg_Object,
    #[doc = "< number of entities in object"]
    pub num_entities: BITCODE_BL,
    #[doc = "< number of object_ref's (resolved handles)"]
    pub num_object_refs: BITCODE_BL,
    #[doc = "< how many we have written currently"]
    pub cur_index: BITCODE_BL,
    #[doc = "< array of most handles"]
    pub object_ref: *mut *mut Dwg_Object_Ref,
    #[doc = "< map of all handles"]
    pub object_map: *mut _inthash,
    pub dirty_refs: ::std::os::raw::c_int,
    pub opts: ::std::os::raw::c_uint,
    pub header_vars: Dwg_Header_Variables,
    pub thumbnail: Dwg_Chain,
    pub __bindgen_anon_1: _dwg_struct__bindgen_ty_1,
    pub mspace_block: *mut Dwg_Object,
    pub pspace_block: *mut Dwg_Object,
    pub block_control: Dwg_Object_BLOCK_CONTROL,
    pub auxheader: Dwg_AuxHeader,
    pub secondheader: Dwg_SecondHeader,
    pub summaryinfo: Dwg_SummaryInfo,
    pub appinfo: Dwg_AppInfo,
    pub filedeplist: Dwg_FileDepList,
    pub security: Dwg_Security,
    pub vbaproject: Dwg_VBAProject,
    pub appinfohistory: Dwg_AppInfoHistory,
    pub revhistory: Dwg_RevHistory,
    pub objfreespace: Dwg_ObjFreeSpace,
    pub Template: Dwg_Template,
    pub acds: Dwg_AcDs,
    pub layout_type: ::std::os::raw::c_uint,
    pub num_acis_sab_hdl: ::std::os::raw::c_uint,
    pub acis_sab_hdl: *mut BITCODE_H,
    pub next_hdl: BITCODE_RLL,
    pub prev_entity_index: BITCODE_BL,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _dwg_struct__bindgen_ty_1 {
    pub r2004_header: Dwg_R2004_Header,
    pub r2007_file_header: Dwg_R2007_Header,
}
#[test]
fn bindgen_test_layout__dwg_struct__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_struct__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_struct__bindgen_ty_1>(),
        272usize,
        concat!("Size of: ", stringify!(_dwg_struct__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_struct__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(_dwg_struct__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r2004_header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_struct__bindgen_ty_1),
            "::",
            stringify!(r2004_header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r2007_file_header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_struct__bindgen_ty_1),
            "::",
            stringify!(r2007_file_header)
        )
    );
}
#[test]
fn bindgen_test_layout__dwg_struct() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_struct> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_struct>(),
        5288usize,
        concat!("Size of: ", stringify!(_dwg_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_struct))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_struct),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_classes) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_struct),
            "::",
            stringify!(num_classes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dwg_class) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_struct),
            "::",
            stringify!(dwg_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_objects) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_struct),
            "::",
            stringify!(num_objects)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_alloced_objects) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_struct),
            "::",
            stringify!(num_alloced_objects)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_struct),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_entities) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_struct),
            "::",
            stringify!(num_entities)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_object_refs) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_struct),
            "::",
            stringify!(num_object_refs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cur_index) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_struct),
            "::",
            stringify!(cur_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object_ref) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_struct),
            "::",
            stringify!(object_ref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object_map) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_struct),
            "::",
            stringify!(object_map)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dirty_refs) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_struct),
            "::",
            stringify!(dirty_refs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opts) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_struct),
            "::",
            stringify!(opts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header_vars) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_struct),
            "::",
            stringify!(header_vars)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thumbnail) as usize - ptr as usize },
        3488usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_struct),
            "::",
            stringify!(thumbnail)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mspace_block) as usize - ptr as usize },
        3792usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_struct),
            "::",
            stringify!(mspace_block)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pspace_block) as usize - ptr as usize },
        3800usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_struct),
            "::",
            stringify!(pspace_block)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block_control) as usize - ptr as usize },
        3808usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_struct),
            "::",
            stringify!(block_control)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).auxheader) as usize - ptr as usize },
        3856usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_struct),
            "::",
            stringify!(auxheader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).secondheader) as usize - ptr as usize },
        4056usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_struct),
            "::",
            stringify!(secondheader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).summaryinfo) as usize - ptr as usize },
        4528usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_struct),
            "::",
            stringify!(summaryinfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).appinfo) as usize - ptr as usize },
        4664usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_struct),
            "::",
            stringify!(appinfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filedeplist) as usize - ptr as usize },
        4752usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_struct),
            "::",
            stringify!(filedeplist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).security) as usize - ptr as usize },
        4784usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_struct),
            "::",
            stringify!(security)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vbaproject) as usize - ptr as usize },
        4832usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_struct),
            "::",
            stringify!(vbaproject)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).appinfohistory) as usize - ptr as usize },
        4848usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_struct),
            "::",
            stringify!(appinfohistory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revhistory) as usize - ptr as usize },
        4864usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_struct),
            "::",
            stringify!(revhistory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objfreespace) as usize - ptr as usize },
        4888usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_struct),
            "::",
            stringify!(objfreespace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Template) as usize - ptr as usize },
        4992usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_struct),
            "::",
            stringify!(Template)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acds) as usize - ptr as usize },
        5008usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_struct),
            "::",
            stringify!(acds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layout_type) as usize - ptr as usize },
        5256usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_struct),
            "::",
            stringify!(layout_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_acis_sab_hdl) as usize - ptr as usize },
        5260usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_struct),
            "::",
            stringify!(num_acis_sab_hdl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acis_sab_hdl) as usize - ptr as usize },
        5264usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_struct),
            "::",
            stringify!(acis_sab_hdl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next_hdl) as usize - ptr as usize },
        5272usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_struct),
            "::",
            stringify!(next_hdl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev_entity_index) as usize - ptr as usize },
        5280usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_struct),
            "::",
            stringify!(prev_entity_index)
        )
    );
}
#[doc = "Main DWG struct"]
pub type Dwg_Data = _dwg_struct;
pub const RESBUF_VALUE_TYPE_DWG_VT_INVALID: RESBUF_VALUE_TYPE = 0;
pub const RESBUF_VALUE_TYPE_DWG_VT_STRING: RESBUF_VALUE_TYPE = 1;
pub const RESBUF_VALUE_TYPE_DWG_VT_POINT3D: RESBUF_VALUE_TYPE = 2;
pub const RESBUF_VALUE_TYPE_DWG_VT_REAL: RESBUF_VALUE_TYPE = 3;
pub const RESBUF_VALUE_TYPE_DWG_VT_INT16: RESBUF_VALUE_TYPE = 4;
pub const RESBUF_VALUE_TYPE_DWG_VT_INT32: RESBUF_VALUE_TYPE = 5;
pub const RESBUF_VALUE_TYPE_DWG_VT_INT8: RESBUF_VALUE_TYPE = 6;
pub const RESBUF_VALUE_TYPE_DWG_VT_BINARY: RESBUF_VALUE_TYPE = 7;
pub const RESBUF_VALUE_TYPE_DWG_VT_HANDLE: RESBUF_VALUE_TYPE = 8;
pub const RESBUF_VALUE_TYPE_DWG_VT_OBJECTID: RESBUF_VALUE_TYPE = 9;
pub const RESBUF_VALUE_TYPE_DWG_VT_BOOL: RESBUF_VALUE_TYPE = 10;
pub const RESBUF_VALUE_TYPE_DWG_VT_INT64: RESBUF_VALUE_TYPE = 11;
pub type RESBUF_VALUE_TYPE = ::std::os::raw::c_int;
pub use self::RESBUF_VALUE_TYPE as Dwg_Resbuf_Value_Type;
extern "C" {
    pub fn dwg_read_file(
        filename: *const ::std::os::raw::c_char,
        dwg: *mut Dwg_Data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dxf_read_file(
        filename: *const ::std::os::raw::c_char,
        dwg: *mut Dwg_Data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_write_file(
        filename: *const ::std::os::raw::c_char,
        dwg: *const Dwg_Data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_bmp(
        dwg: *const Dwg_Data,
        size: *mut BITCODE_RL,
        typep: *mut BITCODE_RC,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    #[doc = " Converts the internal enum RC into 100th mm lineweight, with\n  -1 BYLAYER, -2 BYBLOCK, -3 BYLWDEFAULT."]
    pub fn dxf_cvt_lweight(value: BITCODE_BSd) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Converts the 100th mm lineweight, with -1 BYLAYER, -2 BYBLOCK, -3 BYLWDEFAULT,\ninto the internal enum RC."]
    pub fn dxf_revcvt_lweight(lw: ::std::os::raw::c_int) -> BITCODE_BSd;
}
extern "C" {
    pub fn dwg_ctrl_table(dwg: *mut Dwg_Data, table: *const ::std::os::raw::c_char) -> BITCODE_H;
}
extern "C" {
    pub fn dwg_find_tablehandle(
        dwg: *mut Dwg_Data,
        name: *const ::std::os::raw::c_char,
        table: *const ::std::os::raw::c_char,
    ) -> BITCODE_H;
}
extern "C" {
    pub fn dwg_find_tablehandle_index(
        dwg: *mut Dwg_Data,
        index: ::std::os::raw::c_int,
        table: *const ::std::os::raw::c_char,
    ) -> BITCODE_H;
}
extern "C" {
    pub fn dwg_handle_name(
        dwg: *mut Dwg_Data,
        table: *const ::std::os::raw::c_char,
        handle: BITCODE_H,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Not checking the header_vars entry, only searching the objects\n  Returning a hardowner or hardpointer (DICTIONARY) ref (code 3 or 5)\n  to it, as stored in header_vars. table must contain the \"_CONTROL\" suffix.\n  table is ascii."]
    pub fn dwg_find_table_control(
        dwg: *mut Dwg_Data,
        table: *const ::std::os::raw::c_char,
    ) -> BITCODE_H;
}
extern "C" {
    #[doc = " Search for a dictionary ref.\n  Returning a hardpointer ref (5) to it, as stored in header_vars.\n  Name is ascii."]
    pub fn dwg_find_dictionary(
        dwg: *mut Dwg_Data,
        name: *const ::std::os::raw::c_char,
    ) -> BITCODE_H;
}
extern "C" {
    #[doc = " Search for a named dictionary entry in the given dict.\n  Search is case-sensitive. name is ASCII."]
    pub fn dwg_find_dicthandle(
        dwg: *mut Dwg_Data,
        dict: BITCODE_H,
        name: *const ::std::os::raw::c_char,
    ) -> BITCODE_H;
}
extern "C" {
    #[doc = " Search all dictionary entries in the given dict.\n  Check for the matching name of the handle object. (Control lists).\n  Search is case-insensitive"]
    pub fn dwg_find_dicthandle_objname(
        dwg: *mut Dwg_Data,
        dict: BITCODE_H,
        name: *const ::std::os::raw::c_char,
    ) -> BITCODE_H;
}
extern "C" {
    pub fn dwg_find_table_extname(
        dwg: *mut Dwg_Data,
        obj: *mut Dwg_Object,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dwg_variable_dict(
        dwg: *mut Dwg_Data,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dwg_model_x_min(arg1: *const Dwg_Data) -> f64;
}
extern "C" {
    pub fn dwg_model_x_max(arg1: *const Dwg_Data) -> f64;
}
extern "C" {
    pub fn dwg_model_y_min(arg1: *const Dwg_Data) -> f64;
}
extern "C" {
    pub fn dwg_model_y_max(arg1: *const Dwg_Data) -> f64;
}
extern "C" {
    pub fn dwg_model_z_min(arg1: *const Dwg_Data) -> f64;
}
extern "C" {
    pub fn dwg_model_z_max(arg1: *const Dwg_Data) -> f64;
}
extern "C" {
    pub fn dwg_page_x_min(arg1: *const Dwg_Data) -> f64;
}
extern "C" {
    pub fn dwg_page_x_max(arg1: *const Dwg_Data) -> f64;
}
extern "C" {
    pub fn dwg_page_y_min(arg1: *const Dwg_Data) -> f64;
}
extern "C" {
    pub fn dwg_page_y_max(arg1: *const Dwg_Data) -> f64;
}
extern "C" {
    pub fn dwg_block_control(dwg: *mut Dwg_Data) -> *mut Dwg_Object_BLOCK_CONTROL;
}
extern "C" {
    pub fn dwg_model_space_ref(dwg: *mut Dwg_Data) -> *mut Dwg_Object_Ref;
}
extern "C" {
    pub fn dwg_paper_space_ref(dwg: *mut Dwg_Data) -> *mut Dwg_Object_Ref;
}
extern "C" {
    pub fn dwg_model_space_object(dwg: *mut Dwg_Data) -> *mut Dwg_Object;
}
extern "C" {
    pub fn dwg_paper_space_object(dwg: *mut Dwg_Data) -> *mut Dwg_Object;
}
extern "C" {
    pub fn dwg_get_layer_count(dwg: *const Dwg_Data) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn dwg_get_layers(dwg: *const Dwg_Data) -> *mut *mut Dwg_Object_LAYER;
}
extern "C" {
    pub fn dwg_get_num_objects(dwg: *const Dwg_Data) -> BITCODE_BL;
}
extern "C" {
    pub fn dwg_get_object_num_objects(dwg: *const Dwg_Data) -> BITCODE_BL;
}
extern "C" {
    pub fn dwg_class_is_entity(klass: *const Dwg_Class) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_obj_is_control(obj: *const Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_obj_is_table(obj: *const Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_obj_is_subentity(obj: *const Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_obj_has_subentity(obj: *const Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_obj_is_3dsolid(obj: *const Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_obj_is_acsh(obj: *const Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_get_num_entities(arg1: *const Dwg_Data) -> BITCODE_BL;
}
extern "C" {
    pub fn dwg_get_entities(arg1: *const Dwg_Data) -> *mut *mut Dwg_Object_Entity;
}
extern "C" {
    pub fn dwg_get_entity_layer(arg1: *const Dwg_Object_Entity) -> *mut Dwg_Object_LAYER;
}
extern "C" {
    pub fn dwg_next_object(obj: *const Dwg_Object) -> *mut Dwg_Object;
}
extern "C" {
    pub fn dwg_next_entity(obj: *const Dwg_Object) -> *mut Dwg_Object;
}
extern "C" {
    pub fn dwg_next_handle(dwg: *const Dwg_Data) -> BITCODE_RLL;
}
extern "C" {
    pub fn dwg_next_handseed(dwg: *mut Dwg_Data) -> BITCODE_RLL;
}
extern "C" {
    pub fn dwg_ref_object(dwg: *mut Dwg_Data, ref_: *mut Dwg_Object_Ref) -> *mut Dwg_Object;
}
extern "C" {
    pub fn dwg_ref_object_relative(
        dwg: *mut Dwg_Data,
        ref_: *mut Dwg_Object_Ref,
        obj: *const Dwg_Object,
    ) -> *mut Dwg_Object;
}
extern "C" {
    pub fn dwg_ref_object_silent(dwg: *mut Dwg_Data, ref_: *mut Dwg_Object_Ref) -> *mut Dwg_Object;
}
extern "C" {
    pub fn get_first_owned_entity(hdr: *const Dwg_Object) -> *mut Dwg_Object;
}
extern "C" {
    pub fn get_next_owned_entity(
        hdr: *const Dwg_Object,
        current: *const Dwg_Object,
    ) -> *mut Dwg_Object;
}
extern "C" {
    pub fn get_first_owned_subentity(owner: *const Dwg_Object) -> *mut Dwg_Object;
}
extern "C" {
    pub fn get_next_owned_subentity(
        owner: *const Dwg_Object,
        current: *const Dwg_Object,
    ) -> *mut Dwg_Object;
}
extern "C" {
    pub fn get_first_owned_block(hdr: *const Dwg_Object) -> *mut Dwg_Object;
}
extern "C" {
    pub fn get_last_owned_block(hdr: *const Dwg_Object) -> *mut Dwg_Object;
}
extern "C" {
    pub fn get_next_owned_block(
        hdr: *const Dwg_Object,
        current: *const Dwg_Object,
    ) -> *mut Dwg_Object;
}
extern "C" {
    pub fn get_next_owned_block_entity(
        hdr: *const Dwg_Object,
        current: *const Dwg_Object,
    ) -> *mut Dwg_Object;
}
extern "C" {
    pub fn dwg_get_first_object(dwg: *const Dwg_Data, type_: Dwg_Object_Type) -> *mut Dwg_Object;
}
extern "C" {
    pub fn dwg_get_next_object(
        dwg: *const Dwg_Data,
        type_: Dwg_Object_Type,
        index: BITCODE_RL,
    ) -> *mut Dwg_Object;
}
extern "C" {
    pub fn dwg_resolve_handle(dwg: *const Dwg_Data, absref: BITCODE_RLL) -> *mut Dwg_Object;
}
extern "C" {
    pub fn dwg_resolve_handle_silent(dwg: *const Dwg_Data, absref: BITCODE_RLL) -> *mut Dwg_Object;
}
extern "C" {
    pub fn dwg_resolve_handleref(
        ref_: *mut Dwg_Object_Ref,
        obj: *const Dwg_Object,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_resolve_jump(obj: *const Dwg_Object) -> *mut Dwg_Object;
}
extern "C" {
    pub fn dwg_section_type(name: *const ::std::os::raw::c_char) -> Dwg_Section_Type;
}
extern "C" {
    pub fn dwg_section_wtype(wname: *const dwg_wchar_t) -> Dwg_Section_Type;
}
extern "C" {
    pub fn dwg_section_name(
        dwg: *const Dwg_Data,
        sec_id: ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn dwg_resbuf_value_type(gc: ::std::os::raw::c_short) -> RESBUF_VALUE_TYPE;
}
extern "C" {
    #[doc = " Free the whole DWG. all tables, sections, objects, ..."]
    pub fn dwg_free(dwg: *mut Dwg_Data);
}
extern "C" {
    #[doc = " Free the object (all three structs and its fields)"]
    pub fn dwg_free_object(obj: *mut Dwg_Object);
}
extern "C" {
    #[doc = " Add the empty ref to the DWG (freshly malloc'ed), or NULL."]
    pub fn dwg_new_ref(dwg: *mut Dwg_Data) -> *mut Dwg_Object_Ref;
}
extern "C" {
    #[doc = " For encode:\n  May need obj to shorten the code to a relative offset, but not in header_vars.\n  There obj is NULL."]
    pub fn dwg_add_handle(
        hdl: *mut Dwg_Handle,
        code: BITCODE_RC,
        value: BITCODE_RLL,
        obj: *const Dwg_Object,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Returns an existing ref with the same ownership (hard/soft, owner/pointer)\nor creates it. With obj non-NULL it may return a relative offset, otherwise\nalways absolute."]
    pub fn dwg_add_handleref(
        dwg: *mut Dwg_Data,
        code: BITCODE_RC,
        value: BITCODE_RLL,
        obj: *const Dwg_Object,
    ) -> *mut Dwg_Object_Ref;
}
extern "C" {
    #[doc = " Return a link to the global ref or a new one. Or a NULLHDL."]
    pub fn dwg_dup_handleref(
        dwg: *mut Dwg_Data,
        ref_: *const Dwg_Object_Ref,
    ) -> *mut Dwg_Object_Ref;
}
extern "C" {
    #[doc = " Creates a non-global, free'able handle ref. Never relative"]
    pub fn dwg_add_handleref_free(code: BITCODE_RC, absref: BITCODE_RLL) -> *mut Dwg_Object_Ref;
}
extern "C" {
    pub fn dwg_version_type(version: Dwg_Version_Type) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn dwg_version_as(version: *const ::std::os::raw::c_char) -> Dwg_Version_Type;
}
extern "C" {
    pub fn dwg_version_hdr_type(hdr: *const ::std::os::raw::c_char) -> Dwg_Version_Type;
}
extern "C" {
    pub fn dwg_supports_eed(dwg: *const Dwg_Data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_supports_obj(dwg: *const Dwg_Data, obj: *const Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_errstrings(error: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dwg_encrypt_SAT1(
        blocksize: BITCODE_BL,
        acis_data: *mut BITCODE_RC,
        acis_data_offset: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dwg_convert_SAB_to_SAT1(_obj: *mut Dwg_Entity__3DSOLID) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rgbpalette {
    pub r: ::std::os::raw::c_uchar,
    pub g: ::std::os::raw::c_uchar,
    pub b: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_rgbpalette() {
    const UNINIT: ::std::mem::MaybeUninit<rgbpalette> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rgbpalette>(),
        3usize,
        concat!("Size of: ", stringify!(rgbpalette))
    );
    assert_eq!(
        ::std::mem::align_of::<rgbpalette>(),
        1usize,
        concat!("Alignment of ", stringify!(rgbpalette))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rgbpalette),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(rgbpalette),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rgbpalette),
            "::",
            stringify!(b)
        )
    );
}
pub type Dwg_RGB_Palette = rgbpalette;
extern "C" {
    pub fn dwg_rgb_palette() -> *const Dwg_RGB_Palette;
}
extern "C" {
    pub fn dwg_rgb_palette_index(index: BITCODE_BS) -> BITCODE_BL;
}
extern "C" {
    pub fn dwg_find_color_index(rgb: BITCODE_BL) -> BITCODE_BS;
}
extern "C" {
    #[doc = " Add the empty object to the DWG.\nReturns DWG_ERR_OUTOFMEM, -1 for realloced or 0 if not.\nobjects are allocated in bulk, and all old obj pointers may become invalid.\nThe new object is at &dwg->object[dwg->num_objects - 1]."]
    pub fn dwg_add_object(dwg: *mut Dwg_Data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_object_name(
        name: *const ::std::os::raw::c_char,
        dxfnamep: *mut *const ::std::os::raw::c_char,
        typep: *mut Dwg_Object_Type,
        is_entp: *mut ::std::os::raw::c_int,
        stabilityp: *mut Dwg_Class_Stability,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Initialize the empty entity or object with its three structs.\nAll fields are zero'd, some are initialized with default values, as\ndefined in dwg.spec. obj->fixedtype is set, obj->type only for static types.\nUse dwg_encode_get_class for the variable types.\nReturns 0 or DWG_ERR_OUTOFMEM."]
    pub fn dwg_setup__3DFACE(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup__3DSOLID(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ARC(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ATTDEF(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ATTRIB(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_BLOCK(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_BODY(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_CIRCLE(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_DIMENSION_ALIGNED(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_DIMENSION_ANG2LN(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_DIMENSION_ANG3PT(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_DIMENSION_DIAMETER(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_DIMENSION_LINEAR(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_DIMENSION_ORDINATE(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_DIMENSION_RADIUS(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ELLIPSE(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ENDBLK(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_INSERT(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_LEADER(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_LINE(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_LOAD(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_MINSERT(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_MLINE(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_MTEXT(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_OLEFRAME(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_POINT(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_POLYLINE_2D(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_POLYLINE_3D(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_POLYLINE_MESH(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_POLYLINE_PFACE(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_PROXY_ENTITY(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_RAY(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_REGION(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_SEQEND(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_SHAPE(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_SOLID(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_SPLINE(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_TEXT(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_TOLERANCE(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_TRACE(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_UNKNOWN_ENT(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_VERTEX_2D(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_VERTEX_3D(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_VERTEX_MESH(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_VERTEX_PFACE(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_VERTEX_PFACE_FACE(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_VIEWPORT(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_XLINE(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_APPID(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_APPID_CONTROL(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_BLOCK_CONTROL(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_BLOCK_HEADER(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_DICTIONARY(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_DIMSTYLE(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_DIMSTYLE_CONTROL(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_DUMMY(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_LAYER(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_LAYER_CONTROL(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_LONG_TRANSACTION(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_LTYPE(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_LTYPE_CONTROL(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_MLINESTYLE(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_STYLE(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_STYLE_CONTROL(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_UCS(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_UCS_CONTROL(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_UNKNOWN_OBJ(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_VIEW(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_VIEW_CONTROL(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_VPORT(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_VPORT_CONTROL(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_VX_CONTROL(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_VX_TABLE_RECORD(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup__3DLINE(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_CAMERA(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_DGNUNDERLAY(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_DWFUNDERLAY(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ENDREP(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_HATCH(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_IMAGE(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_JUMP(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_LIGHT(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_LWPOLYLINE(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_MESH(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_MULTILEADER(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_OLE2FRAME(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_PDFUNDERLAY(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_REPEAT(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_SECTIONOBJECT(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ACSH_BOOLEAN_CLASS(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ACSH_BOX_CLASS(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ACSH_CONE_CLASS(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ACSH_CYLINDER_CLASS(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ACSH_FILLET_CLASS(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ACSH_HISTORY_CLASS(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ACSH_SPHERE_CLASS(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ACSH_TORUS_CLASS(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ACSH_WEDGE_CLASS(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ASSOCGEOMDEPENDENCY(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ASSOCNETWORK(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_BLOCKALIGNMENTGRIP(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_BLOCKALIGNMENTPARAMETER(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_BLOCKBASEPOINTPARAMETER(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_BLOCKFLIPACTION(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_BLOCKFLIPGRIP(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_BLOCKFLIPPARAMETER(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_BLOCKGRIPLOCATIONCOMPONENT(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_BLOCKLINEARGRIP(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_BLOCKLOOKUPGRIP(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_BLOCKMOVEACTION(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_BLOCKROTATEACTION(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_BLOCKROTATIONGRIP(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_BLOCKSCALEACTION(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_BLOCKVISIBILITYGRIP(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_CELLSTYLEMAP(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_DETAILVIEWSTYLE(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_DICTIONARYVAR(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_DICTIONARYWDFLT(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_DYNAMICBLOCKPURGEPREVENTER(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_FIELD(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_FIELDLIST(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_GEODATA(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_GROUP(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_IDBUFFER(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_IMAGEDEF(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_IMAGEDEF_REACTOR(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_INDEX(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_LAYERFILTER(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_LAYER_INDEX(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_LAYOUT(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_PLACEHOLDER(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_PLOTSETTINGS(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_RASTERVARIABLES(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_RENDERENVIRONMENT(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_SCALE(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_SECTIONVIEWSTYLE(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_SECTION_MANAGER(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_SORTENTSTABLE(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_SPATIAL_FILTER(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_SUN(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_TABLEGEOMETRY(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_VBA_PROJECT(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_VISUALSTYLE(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_WIPEOUTVARIABLES(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_XRECORD(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_PDFDEFINITION(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_DGNDEFINITION(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_DWFDEFINITION(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ARC_DIMENSION(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_HELIX(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_LARGE_RADIAL_DIMENSION(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_LAYOUTPRINTCONFIG(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_PLANESURFACE(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_POINTCLOUD(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_POINTCLOUDEX(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_WIPEOUT(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ACSH_BREP_CLASS(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ACSH_CHAMFER_CLASS(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ACSH_PYRAMID_CLASS(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ALDIMOBJECTCONTEXTDATA(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ASSOC2DCONSTRAINTGROUP(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ASSOCACTION(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ASSOCACTIONPARAM(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ASSOCARRAYACTIONBODY(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ASSOCASMBODYACTIONPARAM(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ASSOCBLENDSURFACEACTIONBODY(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ASSOCCOMPOUNDACTIONPARAM(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ASSOCDEPENDENCY(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ASSOCDIMDEPENDENCYBODY(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ASSOCEXTENDSURFACEACTIONBODY(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ASSOCEXTRUDEDSURFACEACTIONBODY(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ASSOCFACEACTIONPARAM(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ASSOCFILLETSURFACEACTIONBODY(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ASSOCLOFTEDSURFACEACTIONBODY(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ASSOCNETWORKSURFACEACTIONBODY(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ASSOCOBJECTACTIONPARAM(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ASSOCOFFSETSURFACEACTIONBODY(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ASSOCOSNAPPOINTREFACTIONPARAM(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ASSOCPATCHSURFACEACTIONBODY(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ASSOCPATHACTIONPARAM(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ASSOCPLANESURFACEACTIONBODY(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ASSOCPOINTREFACTIONPARAM(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ASSOCREVOLVEDSURFACEACTIONBODY(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ASSOCTRIMSURFACEACTIONBODY(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ASSOCVALUEDEPENDENCY(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ASSOCVARIABLE(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ASSOCVERTEXACTIONPARAM(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_BLKREFOBJECTCONTEXTDATA(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_BLOCKALIGNEDCONSTRAINTPARAMETER(obj: *mut Dwg_Object)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_BLOCKANGULARCONSTRAINTPARAMETER(obj: *mut Dwg_Object)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_BLOCKARRAYACTION(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_BLOCKDIAMETRICCONSTRAINTPARAMETER(
        obj: *mut Dwg_Object,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_BLOCKHORIZONTALCONSTRAINTPARAMETER(
        obj: *mut Dwg_Object,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_BLOCKLINEARCONSTRAINTPARAMETER(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_BLOCKLINEARPARAMETER(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_BLOCKLOOKUPACTION(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_BLOCKLOOKUPPARAMETER(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_BLOCKPARAMDEPENDENCYBODY(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_BLOCKPOINTPARAMETER(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_BLOCKPOLARGRIP(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_BLOCKPOLARPARAMETER(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_BLOCKPOLARSTRETCHACTION(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_BLOCKRADIALCONSTRAINTPARAMETER(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_BLOCKREPRESENTATION(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_BLOCKROTATIONPARAMETER(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_BLOCKSTRETCHACTION(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_BLOCKUSERPARAMETER(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_BLOCKVERTICALCONSTRAINTPARAMETER(
        obj: *mut Dwg_Object,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_BLOCKVISIBILITYPARAMETER(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_BLOCKXYGRIP(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_BLOCKXYPARAMETER(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_DATALINK(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_DBCOLOR(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_EVALUATION_GRAPH(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_FCFOBJECTCONTEXTDATA(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_GRADIENT_BACKGROUND(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_GROUND_PLANE_BACKGROUND(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_IBL_BACKGROUND(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_IMAGE_BACKGROUND(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_LEADEROBJECTCONTEXTDATA(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_LIGHTLIST(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_MATERIAL(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_MENTALRAYRENDERSETTINGS(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_MLEADERSTYLE(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_MTEXTOBJECTCONTEXTDATA(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_OBJECT_PTR(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_PARTIAL_VIEWING_INDEX(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_POINTCLOUDCOLORMAP(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_POINTCLOUDDEF(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_POINTCLOUDDEFEX(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_POINTCLOUDDEF_REACTOR(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_POINTCLOUDDEF_REACTOR_EX(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_PROXY_OBJECT(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_RAPIDRTRENDERSETTINGS(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_RENDERENTRY(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_RENDERGLOBAL(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_RENDERSETTINGS(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_SECTION_SETTINGS(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_SKYLIGHT_BACKGROUND(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_SOLID_BACKGROUND(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_SPATIAL_INDEX(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_TABLESTYLE(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_TEXTOBJECTCONTEXTDATA(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ASSOCARRAYMODIFYPARAMETERS(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ASSOCARRAYPATHPARAMETERS(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ASSOCARRAYPOLARPARAMETERS(obj: *mut Dwg_Object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_setup_ASSOCARRAYRECTANGULARPARAMETERS(obj: *mut Dwg_Object)
        -> ::std::os::raw::c_int;
}
#[doc = " dynapi"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dwg_field_name_type_offset {
    pub name: *const ::std::os::raw::c_char,
    pub type_: *const ::std::os::raw::c_char,
    pub size: ::std::os::raw::c_ushort,
    pub offset: ::std::os::raw::c_ushort,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub dxf: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_dwg_field_name_type_offset() {
    const UNINIT: ::std::mem::MaybeUninit<dwg_field_name_type_offset> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dwg_field_name_type_offset>(),
        24usize,
        concat!("Size of: ", stringify!(dwg_field_name_type_offset))
    );
    assert_eq!(
        ::std::mem::align_of::<dwg_field_name_type_offset>(),
        8usize,
        concat!("Alignment of ", stringify!(dwg_field_name_type_offset))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dwg_field_name_type_offset),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dwg_field_name_type_offset),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dwg_field_name_type_offset),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(dwg_field_name_type_offset),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dxf) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(dwg_field_name_type_offset),
            "::",
            stringify!(dxf)
        )
    );
}
impl dwg_field_name_type_offset {
    #[inline]
    pub fn is_indirect(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_is_indirect(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_malloc(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_is_malloc(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_string(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_is_string(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        is_indirect: ::std::os::raw::c_ushort,
        is_malloc: ::std::os::raw::c_ushort,
        is_string: ::std::os::raw::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let is_indirect: u16 = unsafe { ::std::mem::transmute(is_indirect) };
            is_indirect as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let is_malloc: u16 = unsafe { ::std::mem::transmute(is_malloc) };
            is_malloc as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let is_string: u16 = unsafe { ::std::mem::transmute(is_string) };
            is_string as u64
        });
        __bindgen_bitfield_unit
    }
}
#[doc = " dynapi"]
pub type Dwg_DYNAPI_field = dwg_field_name_type_offset;
extern "C" {
    #[doc = " Check if the name is a valid ENTITY name, not an OBJECT."]
    pub fn is_dwg_entity(name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    #[doc = " Check if the name is a valid OBJECT name, not an ENTITY."]
    pub fn is_dwg_object(name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    #[doc = " Returns the HEADER.fieldname value in out.\nThe optional Dwg_DYNAPI_field *fp is filled with the field types from\ndynapi.c"]
    pub fn dwg_dynapi_header_value(
        dwg: *const Dwg_Data,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
        fp: *mut Dwg_DYNAPI_field,
    ) -> bool;
}
extern "C" {
    #[doc = " Returns the ENTITY|OBJECT.fieldname value in out.\nentity is the Dwg_Entity_ENTITY or Dwg_Object_OBJECT struct with the\nspecific fields. The optional Dwg_DYNAPI_field *fp is filled with the\nfield types from dynapi.c."]
    pub fn dwg_dynapi_entity_value(
        entity: *mut ::std::os::raw::c_void,
        dxfname: *const ::std::os::raw::c_char,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
        fp: *mut Dwg_DYNAPI_field,
    ) -> bool;
}
extern "C" {
    #[doc = " Returns the common ENTITY|OBJECT.fieldname value in out.\n_obj is the Dwg_Entity_ENTITY or Dwg_Object_OBJECT struct with the\nspecific fields. The optional Dwg_DYNAPI_field *fp is filled with the\nfield types from dynapi.c"]
    pub fn dwg_dynapi_common_value(
        _obj: *mut ::std::os::raw::c_void,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
        fp: *mut Dwg_DYNAPI_field,
    ) -> bool;
}
extern "C" {
    #[doc = " Returns the common OBJECT.subclass.fieldname value in out.\nptr points to the subclass field. The optional Dwg_DYNAPI_field *fp is\nfilled with the field types from dynapi.c"]
    pub fn dwg_dynapi_subclass_value(
        ptr: *const ::std::os::raw::c_void,
        subclass: *const ::std::os::raw::c_char,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
        fp: *mut Dwg_DYNAPI_field,
    ) -> bool;
}
extern "C" {
    pub fn dwg_dynapi_header_utf8text(
        dwg: *const Dwg_Data,
        fieldname: *const ::std::os::raw::c_char,
        textp: *mut *mut ::std::os::raw::c_char,
        isnewp: *mut ::std::os::raw::c_int,
        fp: *mut Dwg_DYNAPI_field,
    ) -> bool;
}
extern "C" {
    #[doc = " Returns the ENTITY|OBJECT.fieldname text value in textp as utf-8.\nentity is the Dwg_Entity_ENTITY or Dwg_Object_OBJECT struct with the\nspecific fields. The optional Dwg_DYNAPI_field *fp is filled with the\nfield types from dynapi.c With DWG's since r2007+ creates a fresh UTF-8\nconversion from the UTF-16 wchar value (which needs to be free'd), with\nolder DWG's or with TV, TF or TFF returns the unconverted text value. Only\nvalid for text fields. isnew is set to 1 if textp is freshly malloced\n(r2007+), otherwise 0"]
    pub fn dwg_dynapi_entity_utf8text(
        entity: *mut ::std::os::raw::c_void,
        name: *const ::std::os::raw::c_char,
        fieldname: *const ::std::os::raw::c_char,
        textp: *mut *mut ::std::os::raw::c_char,
        isnewp: *mut ::std::os::raw::c_int,
        fp: *mut Dwg_DYNAPI_field,
    ) -> bool;
}
extern "C" {
    pub fn dwg_dynapi_common_utf8text(
        _obj: *mut ::std::os::raw::c_void,
        fieldname: *const ::std::os::raw::c_char,
        textp: *mut *mut ::std::os::raw::c_char,
        isnewp: *mut ::std::os::raw::c_int,
        fp: *mut Dwg_DYNAPI_field,
    ) -> bool;
}
extern "C" {
    #[doc = " Sets the HEADER.fieldname to a value.\nA malloc'ed struct or string is passed by ptr, not by the content.\nA non-malloc'ed struct is set by content.\nIf is_utf8 is set, the given value is a UTF-8 string, and will be\nconverted to TV or TU."]
    pub fn dwg_dynapi_header_set_value(
        dwg: *mut Dwg_Data,
        fieldname: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_void,
        is_utf8: bool,
    ) -> bool;
}
extern "C" {
    #[doc = " Sets the ENTITY.fieldname to a value.\nA malloc'ed struct is passed by ptr, not by the content.\nA non-malloc'ed struct is set by content.\nArrays or strings must be malloced before. We just set the new pointer,\nthe old value will be freed.\nIf is_utf8 is set, the given value is a UTF-8 string, and will be\nconverted to TV or TU."]
    pub fn dwg_dynapi_entity_set_value(
        entity: *mut ::std::os::raw::c_void,
        dxfname: *const ::std::os::raw::c_char,
        fieldname: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_void,
        is_utf8: bool,
    ) -> bool;
}
extern "C" {
    #[doc = " Sets the common ENTITY or OBJECT.fieldname to a value.\nA malloc'ed struct is passed by ptr, not by the content.\nA non-malloc'ed struct is set by content.\nArrays or strings must be malloced before. We just set the new pointer,\nthe old value will be freed.\nIf is_utf8 is set, the given value is a UTF-8 string, and will be\nconverted to TV or TU."]
    pub fn dwg_dynapi_common_set_value(
        _obj: *mut ::std::os::raw::c_void,
        fieldname: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_void,
        is_utf8: bool,
    ) -> bool;
}
extern "C" {
    #[doc = " Checks if the handle hdl points an object or entity with a name field,\nand returns it if so. Converted to UTF8 for r2007+ wide-strings. Sets\nalloced if the returned string is freshly malloc'd."]
    pub fn dwg_dynapi_handle_name(
        dwg: *const Dwg_Data,
        hdl: *mut Dwg_Object_Ref,
        alloced: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Return the field for custom type checks."]
    pub fn dwg_dynapi_header_field(
        fieldname: *const ::std::os::raw::c_char,
    ) -> *const Dwg_DYNAPI_field;
}
extern "C" {
    pub fn dwg_dynapi_entity_field(
        name: *const ::std::os::raw::c_char,
        fieldname: *const ::std::os::raw::c_char,
    ) -> *const Dwg_DYNAPI_field;
}
extern "C" {
    pub fn dwg_dynapi_subclass_field(
        name: *const ::std::os::raw::c_char,
        fieldname: *const ::std::os::raw::c_char,
    ) -> *const Dwg_DYNAPI_field;
}
extern "C" {
    pub fn dwg_dynapi_common_entity_field(
        fieldname: *const ::std::os::raw::c_char,
    ) -> *const Dwg_DYNAPI_field;
}
extern "C" {
    pub fn dwg_dynapi_common_object_field(
        fieldname: *const ::std::os::raw::c_char,
    ) -> *const Dwg_DYNAPI_field;
}
extern "C" {
    #[doc = " Find the fields for this entity or object."]
    pub fn dwg_dynapi_entity_fields(name: *const ::std::os::raw::c_char)
        -> *const Dwg_DYNAPI_field;
}
extern "C" {
    pub fn dwg_dynapi_common_entity_fields() -> *const Dwg_DYNAPI_field;
}
extern "C" {
    pub fn dwg_dynapi_common_object_fields() -> *const Dwg_DYNAPI_field;
}
extern "C" {
    #[doc = " Find the fields for this subclass. See dwg.h"]
    pub fn dwg_dynapi_subclass_fields(
        name: *const ::std::os::raw::c_char,
    ) -> *const Dwg_DYNAPI_field;
}
extern "C" {
    #[doc = " The sum of the size of all fields, by entity or subclass name"]
    pub fn dwg_dynapi_fields_size(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dwg_point_3d {
    pub x: f64,
    pub y: f64,
    pub z: f64,
}
#[test]
fn bindgen_test_layout_dwg_point_3d() {
    const UNINIT: ::std::mem::MaybeUninit<dwg_point_3d> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dwg_point_3d>(),
        24usize,
        concat!("Size of: ", stringify!(dwg_point_3d))
    );
    assert_eq!(
        ::std::mem::align_of::<dwg_point_3d>(),
        8usize,
        concat!("Alignment of ", stringify!(dwg_point_3d))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dwg_point_3d),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dwg_point_3d),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dwg_point_3d),
            "::",
            stringify!(z)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dwg_point_2d {
    pub x: f64,
    pub y: f64,
}
#[test]
fn bindgen_test_layout_dwg_point_2d() {
    const UNINIT: ::std::mem::MaybeUninit<dwg_point_2d> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dwg_point_2d>(),
        16usize,
        concat!("Size of: ", stringify!(dwg_point_2d))
    );
    assert_eq!(
        ::std::mem::align_of::<dwg_point_2d>(),
        8usize,
        concat!("Alignment of ", stringify!(dwg_point_2d))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dwg_point_2d),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dwg_point_2d),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_LWPLINE_widths {
    pub start: f64,
    pub end: f64,
}
#[test]
fn bindgen_test_layout__dwg_LWPLINE_widths() {
    const UNINIT: ::std::mem::MaybeUninit<_dwg_LWPLINE_widths> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dwg_LWPLINE_widths>(),
        16usize,
        concat!("Size of: ", stringify!(_dwg_LWPLINE_widths))
    );
    assert_eq!(
        ::std::mem::align_of::<_dwg_LWPLINE_widths>(),
        8usize,
        concat!("Alignment of ", stringify!(_dwg_LWPLINE_widths))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LWPLINE_widths),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dwg_LWPLINE_widths),
            "::",
            stringify!(end)
        )
    );
}
pub type dwg_lwpline_widths = _dwg_LWPLINE_widths;
pub type dwg_face = [BITCODE_BSd; 4usize];
pub type dwg_object = _dwg_object;
#[doc = "object references: obj is resolved by handleref (e.g. via\ndwg_resolve_handleref) when reading a DWG to the respective \\ref\nDwg_Object, and absolute_ref is resolved to the global\n_dwg_struct::object_ref index. It is the same as the hex number in the\nDXF handles.\n\nUsed as \\ref Dwg_Object_Ref"]
pub type dwg_object_ref = _dwg_object_ref;
#[doc = "handles resolve absolute or relative indices to objects.\n\ncode 2-5: represents the type of the relation: hard/soft, owner/id.\n\ncode TYPEDOBJHANDLE:\n2 Soft owner,\n3 Hard owner,\n4 Soft pointer,\n5 Hard pointer\n\ncode > 6: the handle is stored as an offset from some other handle.\n\ncode OFFSETOBJHANDLE for soft owners or pointers:\n6 ref + 1,\n8 ref - 1,\na ref + offset,\nc ref - offset\n\nSee \\ref Dwg_Handle"]
pub type dwg_handle = _dwg_handle;
#[doc = "Common entity attributes"]
pub type dwg_obj_ent = _dwg_object_entity;
#[doc = "Ordinary object attributes"]
pub type dwg_obj_obj = _dwg_object_object;
#[doc = "Classes"]
pub type dwg_class = _dwg_class;
#[doc = "Main DWG struct"]
pub type dwg_data = _dwg_struct;
pub type dwg_entity_eed_data = _dwg_entity_eed_data;
#[doc = "Extended entity data"]
pub type dwg_entity_eed = _dwg_entity_eed;
#[doc = "STYLE_CONTROL (52) object, table header"]
pub type dwg_tbl_generic = _dwg_object_STYLE_CONTROL;
#[doc = "Unknown Class object, a blob"]
pub type dwg_obj_generic = _dwg_object_UNKNOWN_OBJ;
#[doc = "Unknown Class object, a blob"]
pub type dwg_obj_unknown = _dwg_object_UNKNOWN_OBJ;
#[doc = "Unknown Class entity, a blob"]
pub type dwg_ent_unknown = _dwg_entity_UNKNOWN_ENT;
#[doc = "Struct for:  POINT (27/2)"]
pub type dwg_ent_generic = _dwg_entity_POINT;
#[doc = "(ACAD_)PROXY_ENTITY (498, 0x1f2) object"]
pub type dwg_ent_proxy = _dwg_entity_PROXY_ENTITY;
#[doc = "(ACAD_)PROXY OBJECT (499, 0x1f3) object"]
pub type dwg_obj_proxy = _dwg_object_PROXY_OBJECT;
pub type dwg_ent_dim = _dwg_DIMENSION_common;
pub type dwg_ent_3dsolid = _dwg_entity_3DSOLID;
#[doc = "Struct for:  3D FACE (28/22)"]
pub type dwg_ent_3dface = _dwg_entity_3DFACE;
#[doc = "MLINE (47) entity"]
pub type dwg_mline_line = _dwg_MLINE_line;
pub type dwg_mline_vertex = _dwg_MLINE_vertex;
#[doc = "spline - SPLINE (36) entity"]
pub type dwg_spline_control_point = _dwg_SPLINE_control_point;
pub type dwg_3dsolid_wire = _dwg_3DSOLID_wire;
pub type dwg_3dsolid_silhouette = _dwg_3DSOLID_silhouette;
#[doc = "ray - RAY (40) entity"]
pub type dwg_ent_xline = _dwg_entity_RAY;
#[doc = "VERTEX_3D (11) entity"]
pub type dwg_ent_vertex_mesh = _dwg_entity_VERTEX_3D;
#[doc = "VERTEX_3D (11) entity"]
pub type dwg_ent_vertex_pface = _dwg_entity_VERTEX_3D;
pub type dwg_ent_region = _dwg_entity_3DSOLID;
pub type dwg_ent_body = _dwg_entity_3DSOLID;
extern "C" {
    pub fn dwg_get_VERTEX_MESH(
        ent_vertex_mesh: *const dwg_ent_vertex_mesh,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_VERTEX_MESH(
        ent_vertex_mesh: *const dwg_ent_vertex_mesh,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_VERTEX_PFACE(
        ent_vertex_pface: *const dwg_ent_vertex_pface,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_VERTEX_PFACE(
        ent_vertex_pface: *const dwg_ent_vertex_pface,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_REGION(
        ent_region: *const dwg_ent_region,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_REGION(
        ent_region: *const dwg_ent_region,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_BODY(
        ent_body: *const dwg_ent_body,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_BODY(
        ent_body: *const dwg_ent_body,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_3DSOLID(
        ent_3dsolid: *const dwg_ent_3dsolid,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_3DSOLID(
        ent_3dsolid: *const dwg_ent_3dsolid,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_XLINE(
        ent_xline: *const dwg_ent_xline,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_XLINE(
        ent_xline: *const dwg_ent_xline,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
pub type dwg_ent_underlay = _dwg_abstractentity_UNDERLAY;
#[doc = "Abstract class UNDERLAYDEFINITION (varies)\nParent of {PDF,DGN,DWF}DEFINITION"]
pub type dwg_obj_underlaydefinition = _dwg_abstractobject_UNDERLAYDEFINITION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity__3DFACE {
    _unused: [u8; 0],
}
pub type dwg_ent__3dface = _dwg_entity__3DFACE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity__3DSOLID {
    _unused: [u8; 0],
}
pub type dwg_ent__3dsolid = _dwg_entity__3DSOLID;
#[doc = "ARC (17/8) entity"]
pub type dwg_ent_arc = _dwg_entity_ARC;
#[doc = " \\ref Dwg_Entity_ATTDEF\nATTDEF (3/15) entity"]
pub type dwg_ent_attdef = _dwg_entity_ATTDEF;
#[doc = " \\ref Dwg_Entity_ATTRIB\nATTRIB (2/16) entity"]
pub type dwg_ent_attrib = _dwg_entity_ATTRIB;
#[doc = "BLOCK (4/12) entity"]
pub type dwg_ent_block = _dwg_entity_BLOCK;
#[doc = "CIRCLE (18/3) entity"]
pub type dwg_ent_circle = _dwg_entity_CIRCLE;
#[doc = "aligned dimension - DIMENSION_ALIGNED (22) entity"]
pub type dwg_ent_dim_aligned = _dwg_entity_DIMENSION_ALIGNED;
#[doc = "angular 2 line dimension - DIMENSION_ANG2LN (24) entity"]
pub type dwg_ent_dim_ang2ln = _dwg_entity_DIMENSION_ANG2LN;
#[doc = "angular 3pt dimension - DIMENSION_ANG3PT (23) entity"]
pub type dwg_ent_dim_ang3pt = _dwg_entity_DIMENSION_ANG3PT;
#[doc = "diameter dimension - DIMENSION_DIAMETER (26) entity"]
pub type dwg_ent_dim_diameter = _dwg_entity_DIMENSION_DIAMETER;
#[doc = "linear dimension - DIMENSION_LINEAR (21/23) entity"]
pub type dwg_ent_dim_linear = _dwg_entity_DIMENSION_LINEAR;
#[doc = "ordinate dimension - DIMENSION_ORDINATE (20) entity"]
pub type dwg_ent_dim_ordinate = _dwg_entity_DIMENSION_ORDINATE;
#[doc = "radius dimension - DIMENSION_RADIUS (25) entity"]
pub type dwg_ent_dim_radius = _dwg_entity_DIMENSION_RADIUS;
#[doc = "ELLIPSE (35) entity"]
pub type dwg_ent_ellipse = _dwg_entity_ELLIPSE;
#[doc = "ENDBLK (5/13) entity"]
pub type dwg_ent_endblk = _dwg_entity_ENDBLK;
#[doc = "INSERT (7/14) entity"]
pub type dwg_ent_insert = _dwg_entity_INSERT;
#[doc = "LEADER (45) entity"]
pub type dwg_ent_leader = _dwg_entity_LEADER;
#[doc = "LINE (19/1) entity"]
pub type dwg_ent_line = _dwg_entity_LINE;
#[doc = "LOAD (none/10) entity"]
pub type dwg_ent_load = _dwg_entity_LOAD;
#[doc = "MINSERT (8) entity"]
pub type dwg_ent_minsert = _dwg_entity_MINSERT;
pub type dwg_ent_mline = _dwg_entity_MLINE;
#[doc = "MTEXT (44) entity"]
pub type dwg_ent_mtext = _dwg_entity_MTEXT;
#[doc = "OLEFRAME (43) entity\n(replaced by OLE2FRAME (74) later)"]
pub type dwg_ent_oleframe = _dwg_entity_OLEFRAME;
#[doc = "Struct for:  POINT (27/2)"]
pub type dwg_ent_point = _dwg_entity_POINT;
#[doc = "2D POLYLINE (15/19) entity"]
pub type dwg_ent_polyline_2d = _dwg_entity_POLYLINE_2D;
#[doc = "3D POLYLINE (16/19) entity"]
pub type dwg_ent_polyline_3d = _dwg_entity_POLYLINE_3D;
#[doc = "Struct for:  POLYLINE (MESH) (30)"]
pub type dwg_ent_polyline_mesh = _dwg_entity_POLYLINE_MESH;
#[doc = "Struct for:  POLYLINE (PFACE) (29)"]
pub type dwg_ent_polyline_pface = _dwg_entity_POLYLINE_PFACE;
#[doc = "(ACAD_)PROXY_ENTITY (498, 0x1f2) object"]
pub type dwg_ent_proxy_entity = _dwg_entity_PROXY_ENTITY;
#[doc = "ray - RAY (40) entity"]
pub type dwg_ent_ray = _dwg_entity_RAY;
#[doc = "SEQEND (6/17) entity"]
pub type dwg_ent_seqend = _dwg_entity_SEQEND;
#[doc = "Struct for:  SHAPE (33/4)"]
pub type dwg_ent_shape = _dwg_entity_SHAPE;
#[doc = "Struct for:  SOLID (31/11)"]
pub type dwg_ent_solid = _dwg_entity_SOLID;
pub type dwg_ent_spline = _dwg_entity_SPLINE;
#[doc = " \\ref Dwg_Entity_TEXT\nTEXT (1/7) entity"]
pub type dwg_ent_text = _dwg_entity_TEXT;
#[doc = "TOLERANCE (46) entity"]
pub type dwg_ent_tolerance = _dwg_entity_TOLERANCE;
#[doc = "Struct for:  TRACE (32/9)"]
pub type dwg_ent_trace = _dwg_entity_TRACE;
#[doc = "Unknown Class entity, a blob"]
pub type dwg_ent_unknown_ent = _dwg_entity_UNKNOWN_ENT;
#[doc = "VERTEX_2D (10/20) entity"]
pub type dwg_ent_vertex_2d = _dwg_entity_VERTEX_2D;
#[doc = "VERTEX_3D (11) entity"]
pub type dwg_ent_vertex_3d = _dwg_entity_VERTEX_3D;
#[doc = "VERTEX_PFACE_FACE (14) entity"]
pub type dwg_ent_vert_pface_face = _dwg_entity_VERTEX_PFACE_FACE;
#[doc = "Struct for:  VIEWPORT ENTITY (34/24)"]
pub type dwg_ent_viewport = _dwg_entity_VIEWPORT;
#[doc = "3DLINE (none/21) entity"]
pub type dwg_ent__3dline = _dwg_entity_3DLINE;
#[doc = "Entity CAMERA (varies) UNKNOWN FIELDS\nnot DWG persistent. yet unsorted, and unused."]
pub type dwg_ent_camera = _dwg_entity_CAMERA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_DGNUNDERLAY {
    _unused: [u8; 0],
}
pub type dwg_ent_dgnunderlay = _dwg_entity_DGNUNDERLAY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_DWFUNDERLAY {
    _unused: [u8; 0],
}
pub type dwg_ent_dwfunderlay = _dwg_entity_DWFUNDERLAY;
#[doc = "ENDREP (none/6) entity"]
pub type dwg_ent_endrep = _dwg_entity_ENDREP;
pub type dwg_ent_hatch = _dwg_entity_HATCH;
#[doc = "Classes for IMAGE (varies)"]
pub type dwg_ent_image = _dwg_entity_IMAGE;
#[doc = "JUMP (none/18) entity"]
pub type dwg_ent_jump = _dwg_entity_JUMP;
#[doc = "Entity LIGHT (varies)\nUNSTABLE, now complete"]
pub type dwg_ent_light = _dwg_entity_LIGHT;
#[doc = "Class LWPOLYLINE (77 + varies)"]
pub type dwg_ent_lwpline = _dwg_entity_LWPOLYLINE;
pub type dwg_ent_mesh = _dwg_entity_MESH;
pub type dwg_ent_mleader = _dwg_entity_MULTILEADER;
#[doc = "OLE2FRAME (74 + varies) object"]
pub type dwg_ent_ole2frame = _dwg_entity_OLE2FRAME;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dwg_entity_PDFUNDERLAY {
    _unused: [u8; 0],
}
pub type dwg_ent_pdfunderlay = _dwg_entity_PDFUNDERLAY;
#[doc = "REPEAT (none/5) entity"]
pub type dwg_ent_repeat = _dwg_entity_REPEAT;
pub type dwg_ent_sectionobject = _dwg_entity_SECTIONOBJECT;
#[doc = "arc dimension - ARC_DIMENSION (varies) entity"]
pub type dwg_ent_arc_dimension = _dwg_entity_ARC_DIMENSION;
#[doc = "Entity HELIX (varies) UNSTABLE\nsubclass of SPLINE"]
pub type dwg_ent_helix = _dwg_entity_HELIX;
#[doc = "arc dimension - LARGE_RADIAL_DIMENSION (varies) entity"]
pub type dwg_ent_large_radial_dimension = _dwg_entity_LARGE_RADIAL_DIMENSION;
#[doc = "Entity PLANESURFACE (varies)"]
pub type dwg_ent_planesurface = _dwg_entity_PLANESURFACE;
pub type dwg_ent_pointcloud = _dwg_entity_POINTCLOUD;
pub type dwg_ent_pointcloudex = _dwg_entity_POINTCLOUDEX;
#[doc = "WIPEOUT (varies, 504)\nR2000+, undocumented = IMAGE layover"]
pub type dwg_ent_wipeout = _dwg_entity_WIPEOUT;
pub type dwg_ent_alignmentparameterentity = _dwg_entity_ALIGNMENTPARAMETERENTITY;
pub type dwg_ent_arcalignedtext = _dwg_entity_ARCALIGNEDTEXT;
pub type dwg_ent_basepointparameterentity = _dwg_entity_BASEPOINTPARAMETERENTITY;
#[doc = "Entity EXTRUDEDSURFACE (varies)\nin DXF encrypted."]
pub type dwg_ent_extrudedsurface = _dwg_entity_EXTRUDEDSURFACE;
pub type dwg_ent_flipgripentity = _dwg_entity_FLIPGRIPENTITY;
pub type dwg_ent_flipparameterentity = _dwg_entity_FLIPPARAMETERENTITY;
#[doc = "Entity GEOPOSITIONMARKER (varies)"]
pub type dwg_ent_geopositionmarker = _dwg_entity_GEOPOSITIONMARKER;
pub type dwg_ent_layoutprintconfig = _dwg_entity_LAYOUTPRINTCONFIG;
pub type dwg_ent_lineargripentity = _dwg_entity_LINEARGRIPENTITY;
pub type dwg_ent_linearparameterentity = _dwg_entity_LINEARPARAMETERENTITY;
#[doc = "Entity LOFTEDSURFACE (varies)"]
pub type dwg_ent_loftedsurface = _dwg_entity_LOFTEDSURFACE;
pub type dwg_ent_mpolygon = _dwg_entity_MPOLYGON;
pub type dwg_ent_navisworksmodel = _dwg_entity_NAVISWORKSMODEL;
#[doc = "Entity NURBSURFACE (varies)"]
pub type dwg_ent_nurbsurface = _dwg_entity_NURBSURFACE;
pub type dwg_ent_pointparameterentity = _dwg_entity_POINTPARAMETERENTITY;
pub type dwg_ent_polargripentity = _dwg_entity_POLARGRIPENTITY;
#[doc = "Entity REVOLVEDSURFACE (varies)"]
pub type dwg_ent_revolvedsurface = _dwg_entity_REVOLVEDSURFACE;
pub type dwg_ent_rotationgripentity = _dwg_entity_ROTATIONGRIPENTITY;
pub type dwg_ent_rotationparameterentity = _dwg_entity_ROTATIONPARAMETERENTITY;
pub type dwg_ent_rtext = _dwg_entity_RTEXT;
#[doc = "Entity SWEPTSURFACE (varies)"]
pub type dwg_ent_sweptsurface = _dwg_entity_SWEPTSURFACE;
pub type dwg_ent_table = _dwg_entity_TABLE;
pub type dwg_ent_visibilitygripentity = _dwg_entity_VISIBILITYGRIPENTITY;
pub type dwg_ent_visibilityparameterentity = _dwg_entity_VISIBILITYPARAMETERENTITY;
pub type dwg_ent_xygripentity = _dwg_entity_XYGRIPENTITY;
pub type dwg_ent_xyparameterentity = _dwg_entity_XYPARAMETERENTITY;
#[doc = "APPID (67/T8) object\nThe table entry of a registered application"]
pub type dwg_obj_appid = _dwg_object_APPID;
#[doc = "APPID_CONTROL (66) object\nThe table header of all registered applications"]
pub type dwg_obj_appid_control = _dwg_object_APPID_CONTROL;
#[doc = "BLOCK_CONTROL (48) object, table header"]
pub type dwg_obj_block_control = _dwg_object_BLOCK_CONTROL;
#[doc = "BLOCK_HEADER (49/T1) object, table entry"]
pub type dwg_obj_block_header = _dwg_object_BLOCK_HEADER;
#[doc = "DICTIONARY (42)\nThis structure is used for all the new tables.\nBeware: Keep same offsets as DICTIONARYWDFLT"]
pub type dwg_obj_dictionary = _dwg_object_DICTIONARY;
#[doc = "DIMSTYLE (69/T9) object, table entry"]
pub type dwg_obj_dimstyle = _dwg_object_DIMSTYLE;
#[doc = "DIMSTYLE_CONTROL (68) object\nThe table header of all dimension styles"]
pub type dwg_obj_dimstyle_control = _dwg_object_DIMSTYLE_CONTROL;
#[doc = "DUMMY (75) object, placeholder for unsupported types on encode."]
pub type dwg_obj_dummy = _dwg_object_DUMMY;
#[doc = "LAYER (51/T2) object, table entry"]
pub type dwg_obj_layer = _dwg_object_LAYER;
#[doc = "LAYER_CONTROL (50) object, table header"]
pub type dwg_obj_layer_control = _dwg_object_LAYER_CONTROL;
#[doc = "LONG_TRANSACTION (76) object"]
pub type dwg_obj_long_transaction = _dwg_object_LONG_TRANSACTION;
pub type dwg_obj_ltype = _dwg_object_LTYPE;
#[doc = "LTYPE_CONTROL (56) object, table header"]
pub type dwg_obj_ltype_control = _dwg_object_LTYPE_CONTROL;
pub type dwg_obj_mlinestyle = _dwg_object_MLINESTYLE;
#[doc = "STYLE (53/T3) object, table entry.\nTextStyleTableRecord. Some call it SHAPEFILE."]
pub type dwg_obj_style = _dwg_object_STYLE;
#[doc = "STYLE_CONTROL (52) object, table header"]
pub type dwg_obj_style_control = _dwg_object_STYLE_CONTROL;
pub type dwg_obj_ucs = _dwg_object_UCS;
#[doc = "UCS_CONTROL (62) object, table header"]
pub type dwg_obj_ucs_control = _dwg_object_UCS_CONTROL;
#[doc = "Unknown Class object, a blob"]
pub type dwg_obj_unknown_obj = _dwg_object_UNKNOWN_OBJ;
#[doc = "VIEW (61/T5) object, table entry"]
pub type dwg_obj_view = _dwg_object_VIEW;
#[doc = "VIEW_CONTROL (60) object, table header"]
pub type dwg_obj_view_control = _dwg_object_VIEW_CONTROL;
#[doc = "VPORT (65/T7) object, table entry"]
pub type dwg_obj_vport = _dwg_object_VPORT;
#[doc = "VPORT_CONTROL (64) object, table header"]
pub type dwg_obj_vport_control = _dwg_object_VPORT_CONTROL;
#[doc = "VX_CONTROL (70) table object (r11-r2000)\nThe table header for all viewport entities (unused in newer versions)\nCalled VXTable"]
pub type dwg_obj_vx_control = _dwg_object_VX_CONTROL;
#[doc = "VX_TABLE_RECORD (71/T10) table object (r11-r2000)\nCalled VXTableRecord / VX_TABLE_RECORD"]
pub type dwg_obj_vx_table_record = _dwg_object_VX_TABLE_RECORD;
pub type dwg_obj_acsh_boolean_class = _dwg_object_ACSH_BOOLEAN_CLASS;
pub type dwg_obj_acsh_box_class = _dwg_object_ACSH_BOX_CLASS;
pub type dwg_obj_acsh_cone_class = _dwg_object_ACSH_CONE_CLASS;
pub type dwg_obj_acsh_cylinder_class = _dwg_object_ACSH_CYLINDER_CLASS;
pub type dwg_obj_acsh_fillet_class = _dwg_object_ACSH_FILLET_CLASS;
pub type dwg_obj_acsh_history_class = _dwg_object_ACSH_HISTORY_CLASS;
pub type dwg_obj_acsh_sphere_class = _dwg_object_ACSH_SPHERE_CLASS;
pub type dwg_obj_acsh_torus_class = _dwg_object_ACSH_TORUS_CLASS;
pub type dwg_obj_acsh_wedge_class = _dwg_object_ACSH_WEDGE_CLASS;
pub type dwg_obj_blockalignmentgrip = _dwg_object_BLOCKALIGNMENTGRIP;
pub type dwg_obj_blockalignmentparameter = _dwg_object_BLOCKALIGNMENTPARAMETER;
pub type dwg_obj_blockbasepointparameter = _dwg_object_BLOCKBASEPOINTPARAMETER;
pub type dwg_obj_blockflipaction = _dwg_object_BLOCKFLIPACTION;
pub type dwg_obj_blockflipgrip = _dwg_object_BLOCKFLIPGRIP;
pub type dwg_obj_blockflipparameter = _dwg_object_BLOCKFLIPPARAMETER;
pub type dwg_obj_blockgriplocationcomponent = _dwg_object_BLOCKGRIPLOCATIONCOMPONENT;
pub type dwg_obj_blocklineargrip = _dwg_object_BLOCKLINEARGRIP;
pub type dwg_obj_blocklookupgrip = _dwg_object_BLOCKLOOKUPGRIP;
pub type dwg_obj_blockmoveaction = _dwg_object_BLOCKMOVEACTION;
pub type dwg_obj_blockrotateaction = _dwg_object_BLOCKROTATEACTION;
pub type dwg_obj_blockrotationgrip = _dwg_object_BLOCKROTATIONGRIP;
pub type dwg_obj_blockscaleaction = _dwg_object_BLOCKSCALEACTION;
pub type dwg_obj_blockvisibilitygrip = _dwg_object_BLOCKVISIBILITYGRIP;
#[doc = "Class CELLSTYLEMAP (varies)\nR2008+ TABLESTYLE extension class"]
pub type dwg_obj_cellstylemap = _dwg_object_CELLSTYLEMAP;
pub type dwg_obj_detailviewstyle = _dwg_object_DETAILVIEWSTYLE;
#[doc = "Class DICTIONARYVAR (varies)"]
pub type dwg_obj_dictionaryvar = _dwg_object_DICTIONARYVAR;
#[doc = "Class DICTIONARYWDFLT (varies)"]
pub type dwg_obj_dictionarywdflt = _dwg_object_DICTIONARYWDFLT;
pub type dwg_obj_dynamicblockpurgepreventer = _dwg_object_DYNAMICBLOCKPURGEPREVENTER;
pub type dwg_obj_field = _dwg_object_FIELD;
#[doc = " Object FIELDLIST (varies)"]
pub type dwg_obj_fieldlist = _dwg_object_FIELDLIST;
pub type dwg_obj_geodata = _dwg_object_GEODATA;
#[doc = "GROUP (72) object"]
pub type dwg_obj_group = _dwg_object_GROUP;
#[doc = "Class IDBUFFER (varies)"]
pub type dwg_obj_idbuffer = _dwg_object_IDBUFFER;
#[doc = "Class IMAGEDEF (varies)"]
pub type dwg_obj_imagedef = _dwg_object_IMAGEDEF;
#[doc = "Class IMAGEDEF_REACTOR (varies)"]
pub type dwg_obj_imagedef_reactor = _dwg_object_IMAGEDEF_REACTOR;
#[doc = "Class INDEX (varies)\nRegistered as \"AutoCAD 2000\", but not seen in the wild."]
pub type dwg_obj_index = _dwg_object_INDEX;
pub type dwg_obj_layerfilter = _dwg_object_LAYERFILTER;
pub type dwg_obj_layer_index = _dwg_object_LAYER_INDEX;
#[doc = "LAYOUT (82 + varies) object"]
pub type dwg_obj_layout = _dwg_object_LAYOUT;
#[doc = "PLACEHOLDER (80 + varies) object\nACDBPLACEHOLDER"]
pub type dwg_obj_placeholder = _dwg_object_PLACEHOLDER;
#[doc = "Object PLOTSETTINGS (varies)\nSee also LAYOUT."]
pub type dwg_obj_plotsettings = _dwg_object_PLOTSETTINGS;
#[doc = "Class RASTERVARIABLES (varies)\n(used in conjunction with IMAGE entities)"]
pub type dwg_obj_rastervariables = _dwg_object_RASTERVARIABLES;
#[doc = "Object SCALE (varies)"]
pub type dwg_obj_scale = _dwg_object_SCALE;
pub type dwg_obj_sectionviewstyle = _dwg_object_SECTIONVIEWSTYLE;
pub type dwg_obj_section_manager = _dwg_object_SECTION_MANAGER;
#[doc = "Class SORTENTSTABLE (varies)"]
pub type dwg_obj_sortentstable = _dwg_object_SORTENTSTABLE;
#[doc = "Class SPATIAL_FILTER (varies)"]
pub type dwg_obj_spatial_filter = _dwg_object_SPATIAL_FILTER;
pub type dwg_obj_tablegeometry = _dwg_object_TABLEGEOMETRY;
#[doc = "VBA_PROJECT (81 + varies) object\nHas its own optional section? section[5]?"]
pub type dwg_obj_vba_project = _dwg_object_VBA_PROJECT;
#[doc = "Unstable\nClass VISUALSTYLE (varies)\nR2007+\n\n32 types, with 3 categories: Face, Edge, Display, plus 58 props r2013+"]
pub type dwg_obj_visualstyle = _dwg_object_VISUALSTYLE;
#[doc = "Class WIPEOUTVARIABLES (varies, 505)\nR2000+, Object bitsize: 96"]
pub type dwg_obj_wipeoutvariables = _dwg_object_WIPEOUTVARIABLES;
#[doc = "XRECORD (79 + varies) object"]
pub type dwg_obj_xrecord = _dwg_object_XRECORD;
#[doc = "Abstract class UNDERLAYDEFINITION (varies)\nParent of {PDF,DGN,DWF}DEFINITION"]
pub type dwg_obj_pdfdefinition = _dwg_abstractobject_UNDERLAYDEFINITION;
#[doc = "Abstract class UNDERLAYDEFINITION (varies)\nParent of {PDF,DGN,DWF}DEFINITION"]
pub type dwg_obj_dgndefinition = _dwg_abstractobject_UNDERLAYDEFINITION;
#[doc = "Abstract class UNDERLAYDEFINITION (varies)\nParent of {PDF,DGN,DWF}DEFINITION"]
pub type dwg_obj_dwfdefinition = _dwg_abstractobject_UNDERLAYDEFINITION;
pub type dwg_obj_acsh_brep_class = _dwg_object_ACSH_BREP_CLASS;
pub type dwg_obj_acsh_chamfer_class = _dwg_object_ACSH_CHAMFER_CLASS;
pub type dwg_obj_acsh_pyramid_class = _dwg_object_ACSH_PYRAMID_CLASS;
#[doc = " for ALDIM (AlignedDimension)\n R2010+"]
pub type dwg_obj_aldimobjectcontextdata = _dwg_object_ALDIMOBJECTCONTEXTDATA;
pub type dwg_obj_assoc2dconstraintgroup = _dwg_object_ASSOC2DCONSTRAINTGROUP;
pub type dwg_obj_assocaction = _dwg_object_ASSOCACTION;
pub type dwg_obj_assocactionparam = _dwg_object_ASSOCACTIONPARAM;
pub type dwg_obj_assocarrayactionbody = _dwg_object_ASSOCARRAYACTIONBODY;
pub type dwg_obj_assocasmbodyactionparam = _dwg_object_ASSOCASMBODYACTIONPARAM;
pub type dwg_obj_assocblendsurfaceactionbody = _dwg_object_ASSOCBLENDSURFACEACTIONBODY;
pub type dwg_obj_assoccompoundactionparam = _dwg_object_ASSOCCOMPOUNDACTIONPARAM;
pub type dwg_obj_assocdependency = _dwg_object_ASSOCDEPENDENCY;
pub type dwg_obj_assocdimdependencybody = _dwg_object_ASSOCDIMDEPENDENCYBODY;
pub type dwg_obj_assocextendsurfaceactionbody = _dwg_object_ASSOCEXTENDSURFACEACTIONBODY;
pub type dwg_obj_assocextrudedsurfaceactionbody = _dwg_object_ASSOCEXTRUDEDSURFACEACTIONBODY;
pub type dwg_obj_assocfaceactionparam = _dwg_object_ASSOCFACEACTIONPARAM;
pub type dwg_obj_assocfilletsurfaceactionbody = _dwg_object_ASSOCFILLETSURFACEACTIONBODY;
pub type dwg_obj_assocgeomdependency = _dwg_object_ASSOCGEOMDEPENDENCY;
pub type dwg_obj_assocloftedsurfaceactionbody = _dwg_object_ASSOCLOFTEDSURFACEACTIONBODY;
#[doc = "Object ASSOCNETWORK (varies)\nsubclass of AcDbAssocAction\nObject1 --ReadDep--> Action1 --WriteDep1--> Object2 --ReadDep--> Action2 ...\nextdict: ACAD_ASSOCNETWORK"]
pub type dwg_obj_assocnetwork = _dwg_object_ASSOCNETWORK;
pub type dwg_obj_assocnetworksurfaceactionbody = _dwg_object_ASSOCNETWORKSURFACEACTIONBODY;
pub type dwg_obj_assocobjectactionparam = _dwg_object_ASSOCOBJECTACTIONPARAM;
pub type dwg_obj_assocoffsetsurfaceactionbody = _dwg_object_ASSOCOFFSETSURFACEACTIONBODY;
#[doc = "Object ASSOCOSNAPPOINTREFACTIONPARAM (varies)\nAction parameter that owns other AcDbAssocActionParameters,\nallowing the representation of hierarchical structures of action parameters."]
pub type dwg_obj_assocosnappointrefactionparam = _dwg_object_ASSOCOSNAPPOINTREFACTIONPARAM;
pub type dwg_obj_assocpatchsurfaceactionbody = _dwg_object_ASSOCPATCHSURFACEACTIONBODY;
pub type dwg_obj_assocpathactionparam = _dwg_object_ASSOCPATHACTIONPARAM;
pub type dwg_obj_assocplanesurfaceactionbody = _dwg_object_ASSOCPLANESURFACEACTIONBODY;
pub type dwg_obj_assocpointrefactionparam = _dwg_object_ASSOCPOINTREFACTIONPARAM;
pub type dwg_obj_assocrevolvedsurfaceactionbody = _dwg_object_ASSOCREVOLVEDSURFACEACTIONBODY;
pub type dwg_obj_assoctrimsurfaceactionbody = _dwg_object_ASSOCTRIMSURFACEACTIONBODY;
pub type dwg_obj_assocvaluedependency = _dwg_object_ASSOCVALUEDEPENDENCY;
pub type dwg_obj_assocvariable = _dwg_object_ASSOCVARIABLE;
pub type dwg_obj_assocvertexactionparam = _dwg_object_ASSOCVERTEXACTIONPARAM;
pub type dwg_obj_blkrefobjectcontextdata = _dwg_object_BLKREFOBJECTCONTEXTDATA;
pub type dwg_obj_blockalignedconstraintparameter = _dwg_object_BLOCKALIGNEDCONSTRAINTPARAMETER;
pub type dwg_obj_blockangularconstraintparameter = _dwg_object_BLOCKANGULARCONSTRAINTPARAMETER;
pub type dwg_obj_blockarrayaction = _dwg_object_BLOCKARRAYACTION;
pub type dwg_obj_blockdiametricconstraintparameter = _dwg_object_BLOCKDIAMETRICCONSTRAINTPARAMETER;
pub type dwg_obj_blockhorizontalconstraintparameter =
    _dwg_object_BLOCKHORIZONTALCONSTRAINTPARAMETER;
pub type dwg_obj_blocklinearconstraintparameter = _dwg_object_BLOCKLINEARCONSTRAINTPARAMETER;
pub type dwg_obj_blocklinearparameter = _dwg_object_BLOCKLINEARPARAMETER;
pub type dwg_obj_blocklookupaction = _dwg_object_BLOCKLOOKUPACTION;
pub type dwg_obj_blocklookupparameter = _dwg_object_BLOCKLOOKUPPARAMETER;
pub type dwg_obj_blockparamdependencybody = _dwg_object_BLOCKPARAMDEPENDENCYBODY;
pub type dwg_obj_blockpointparameter = _dwg_object_BLOCKPOINTPARAMETER;
pub type dwg_obj_blockpolargrip = _dwg_object_BLOCKPOLARGRIP;
pub type dwg_obj_blockpolarparameter = _dwg_object_BLOCKPOLARPARAMETER;
pub type dwg_obj_blockpolarstretchaction = _dwg_object_BLOCKPOLARSTRETCHACTION;
pub type dwg_obj_blockradialconstraintparameter = _dwg_object_BLOCKRADIALCONSTRAINTPARAMETER;
pub type dwg_obj_blockrepresentation = _dwg_object_BLOCKREPRESENTATION;
pub type dwg_obj_blockrotationparameter = _dwg_object_BLOCKROTATIONPARAMETER;
pub type dwg_obj_blockstretchaction = _dwg_object_BLOCKSTRETCHACTION;
pub type dwg_obj_blockuserparameter = _dwg_object_BLOCKUSERPARAMETER;
pub type dwg_obj_blockverticalconstraintparameter = _dwg_object_BLOCKVERTICALCONSTRAINTPARAMETER;
pub type dwg_obj_blockvisibilityparameter = _dwg_object_BLOCKVISIBILITYPARAMETER;
pub type dwg_obj_blockxygrip = _dwg_object_BLOCKXYGRIP;
pub type dwg_obj_blockxyparameter = _dwg_object_BLOCKXYPARAMETER;
pub type dwg_obj_datalink = _dwg_object_DATALINK;
#[doc = "Class DBCOLOR (varies)"]
pub type dwg_obj_dbcolor = _dwg_object_DBCOLOR;
pub type dwg_obj_evaluation_graph = _dwg_object_EVALUATION_GRAPH;
pub type dwg_obj_fcfobjectcontextdata = _dwg_object_FCFOBJECTCONTEXTDATA;
pub type dwg_obj_gradient_background = _dwg_object_GRADIENT_BACKGROUND;
pub type dwg_obj_ground_plane_background = _dwg_object_GROUND_PLANE_BACKGROUND;
pub type dwg_obj_ibl_background = _dwg_object_IBL_BACKGROUND;
pub type dwg_obj_image_background = _dwg_object_IMAGE_BACKGROUND;
pub type dwg_obj_leaderobjectcontextdata = _dwg_object_LEADEROBJECTCONTEXTDATA;
pub type dwg_obj_lightlist = _dwg_object_LIGHTLIST;
#[doc = "Object MATERIAL (varies)\nAcad Naming: e.g. Materials/assetlibrary_base.fbm/shaders/AdskShaders.mi\nMaterials/assetlibrary_base.fbm/Mats/SolidGlass/Generic.xml"]
pub type dwg_obj_material = _dwg_object_MATERIAL;
#[doc = "Class MENTALRAYRENDERSETTINGS (varies)\nUnstable"]
pub type dwg_obj_mentalrayrendersettings = _dwg_object_MENTALRAYRENDERSETTINGS;
#[doc = " Object MLEADERSTYLE (varies)\n R2000+"]
pub type dwg_obj_mleaderstyle = _dwg_object_MLEADERSTYLE;
#[doc = " R2010+"]
pub type dwg_obj_mtextobjectcontextdata = _dwg_object_MTEXTOBJECTCONTEXTDATA;
#[doc = "Object OBJECT_PTR (varies) UNKNOWN FIELDS\nyet unsorted, and unused."]
pub type dwg_obj_object_ptr = _dwg_object_OBJECT_PTR;
pub type dwg_obj_partial_viewing_index = _dwg_object_PARTIAL_VIEWING_INDEX;
pub type dwg_obj_pointcloudcolormap = _dwg_object_POINTCLOUDCOLORMAP;
pub type dwg_obj_pointclouddef = _dwg_object_POINTCLOUDDEF;
pub type dwg_obj_pointclouddefex = _dwg_object_POINTCLOUDDEFEX;
pub type dwg_obj_pointclouddef_reactor = _dwg_object_POINTCLOUDDEF_REACTOR;
pub type dwg_obj_pointclouddef_reactor_ex = _dwg_object_POINTCLOUDDEF_REACTOR_EX;
#[doc = "(ACAD_)PROXY OBJECT (499, 0x1f3) object"]
pub type dwg_obj_proxy_object = _dwg_object_PROXY_OBJECT;
#[doc = "Class RAPIDRTRENDERSETTINGS (varies)"]
pub type dwg_obj_rapidrtrendersettings = _dwg_object_RAPIDRTRENDERSETTINGS;
#[doc = "Class RENDERENTRY (varies)"]
pub type dwg_obj_renderentry = _dwg_object_RENDERENTRY;
#[doc = "Class RENDERENVIRONMENT (varies)"]
pub type dwg_obj_renderenvironment = _dwg_object_RENDERENVIRONMENT;
#[doc = "Class RENDERGLOBAL (varies)"]
pub type dwg_obj_renderglobal = _dwg_object_RENDERGLOBAL;
#[doc = "Class RENDERSETTINGS (varies)"]
pub type dwg_obj_rendersettings = _dwg_object_RENDERSETTINGS;
pub type dwg_obj_section_settings = _dwg_object_SECTION_SETTINGS;
pub type dwg_obj_skylight_background = _dwg_object_SKYLIGHT_BACKGROUND;
pub type dwg_obj_solid_background = _dwg_object_SOLID_BACKGROUND;
#[doc = "Class SPATIAL_INDEX (varies)\nODA only covers the AcDbFilter class, but misses the rest."]
pub type dwg_obj_spatial_index = _dwg_object_SPATIAL_INDEX;
#[doc = "Object SUN (varies), unstable\nwrongly documented by ACAD DXF as entity"]
pub type dwg_obj_sun = _dwg_object_SUN;
pub type dwg_obj_tablestyle = _dwg_object_TABLESTYLE;
#[doc = " R2010+"]
pub type dwg_obj_textobjectcontextdata = _dwg_object_TEXTOBJECTCONTEXTDATA;
pub type dwg_obj_assocarraymodifyparameters = _dwg_abstractobject_ASSOCARRAYPARAMETERS;
pub type dwg_obj_assocarraypathparameters = _dwg_abstractobject_ASSOCARRAYPARAMETERS;
pub type dwg_obj_assocarraypolarparameters = _dwg_abstractobject_ASSOCARRAYPARAMETERS;
pub type dwg_obj_assocarrayrectangularparameters = _dwg_abstractobject_ASSOCARRAYPARAMETERS;
pub type dwg_obj_acmecommandhistory = _dwg_object_ACMECOMMANDHISTORY;
pub type dwg_obj_acmescope = _dwg_object_ACMESCOPE;
pub type dwg_obj_acmestatemgr = _dwg_object_ACMESTATEMGR;
pub type dwg_obj_acsh_extrusion_class = _dwg_object_ACSH_EXTRUSION_CLASS;
pub type dwg_obj_acsh_loft_class = _dwg_object_ACSH_LOFT_CLASS;
pub type dwg_obj_acsh_revolve_class = _dwg_object_ACSH_REVOLVE_CLASS;
pub type dwg_obj_acsh_sweep_class = _dwg_object_ACSH_SWEEP_CLASS;
#[doc = " for ANGDIM (AngularDimension)\n R2010+"]
pub type dwg_obj_angdimobjectcontextdata = _dwg_object_ANGDIMOBJECTCONTEXTDATA;
pub type dwg_obj_annotscaleobjectcontextdata = _dwg_object_ANNOTSCALEOBJECTCONTEXTDATA;
pub type dwg_obj_assoc3pointangulardimactionbody = _dwg_object_ASSOC3POINTANGULARDIMACTIONBODY;
pub type dwg_obj_assocaligneddimactionbody = _dwg_object_ASSOCALIGNEDDIMACTIONBODY;
pub type dwg_obj_assocarraymodifyactionbody = _dwg_object_ASSOCARRAYMODIFYACTIONBODY;
pub type dwg_obj_assocedgeactionparam = _dwg_object_ASSOCEDGEACTIONPARAM;
pub type dwg_obj_assocedgechamferactionbody = _dwg_object_ASSOCEDGECHAMFERACTIONBODY;
pub type dwg_obj_assocedgefilletactionbody = _dwg_object_ASSOCEDGEFILLETACTIONBODY;
pub type dwg_obj_assocmleaderactionbody = _dwg_object_ASSOCMLEADERACTIONBODY;
pub type dwg_obj_assocordinatedimactionbody = _dwg_object_ASSOCORDINATEDIMACTIONBODY;
pub type dwg_obj_assocperssubentmanager = _dwg_object_ASSOCPERSSUBENTMANAGER;
pub type dwg_obj_assocrestoreentitystateactionbody = _dwg_object_ASSOCRESTOREENTITYSTATEACTIONBODY;
pub type dwg_obj_assocrotateddimactionbody = _dwg_object_ASSOCROTATEDDIMACTIONBODY;
pub type dwg_obj_assocsweptsurfaceactionbody = _dwg_object_ASSOCSWEPTSURFACEACTIONBODY;
pub type dwg_obj_blockpropertiestable = _dwg_object_BLOCKPROPERTIESTABLE;
pub type dwg_obj_blockpropertiestablegrip = _dwg_object_BLOCKPROPERTIESTABLEGRIP;
pub type dwg_obj_breakdata = _dwg_object_BREAKDATA;
pub type dwg_obj_breakpointref = _dwg_object_BREAKPOINTREF;
#[doc = " R2010+\n A special DICTIONARY"]
pub type dwg_obj_contextdatamanager = _dwg_object_CONTEXTDATAMANAGER;
pub type dwg_obj_csacdocumentoptions = _dwg_object_CSACDOCUMENTOPTIONS;
#[doc = "Class ACDBCURVEPATH (varies)"]
pub type dwg_obj_curvepath = _dwg_object_CURVEPATH;
#[doc = "Object DATATABLE (varies)\n--enable-debug only"]
pub type dwg_obj_datatable = _dwg_object_DATATABLE;
pub type dwg_obj_dimassoc = _dwg_object_DIMASSOC;
#[doc = " for DMDIM (DiametricDimension)\n R2010+"]
pub type dwg_obj_dmdimobjectcontextdata = _dwg_object_DMDIMOBJECTCONTEXTDATA;
pub type dwg_obj_dynamicblockproxynode = _dwg_object_DYNAMICBLOCKPROXYNODE;
#[doc = "Object GEOMAPIMAGE (varies), LiveMap image overlay.\nyet unsorted, and unused."]
pub type dwg_obj_geomapimage = _dwg_object_GEOMAPIMAGE;
pub type dwg_obj_mleaderobjectcontextdata = _dwg_object_MLEADEROBJECTCONTEXTDATA;
#[doc = "Class MOTIONPATH (varies)\nMaybe all the Camera paths are under ACAD_NAMEDPATH, but there's also ACAD_MOTION"]
pub type dwg_obj_motionpath = _dwg_object_MOTIONPATH;
pub type dwg_obj_mtextattributeobjectcontextdata = _dwg_object_MTEXTATTRIBUTEOBJECTCONTEXTDATA;
pub type dwg_obj_navisworksmodeldef = _dwg_object_NAVISWORKSMODELDEF;
#[doc = " for ORDDIM (OrdinateDimension)\n R2010+"]
pub type dwg_obj_orddimobjectcontextdata = _dwg_object_ORDDIMOBJECTCONTEXTDATA;
pub type dwg_obj_persubentmgr = _dwg_object_PERSUBENTMGR;
#[doc = "Class ACDBPOINTPATH (varies)"]
pub type dwg_obj_pointpath = _dwg_object_POINTPATH;
#[doc = " for RADIMLG (Large Radial Dimension)\n R2010+"]
pub type dwg_obj_radimlgobjectcontextdata = _dwg_object_RADIMLGOBJECTCONTEXTDATA;
#[doc = " for RADIM (Radial Dimension)\n R2010+"]
pub type dwg_obj_radimobjectcontextdata = _dwg_object_RADIMOBJECTCONTEXTDATA;
#[doc = "Object SUNSTUDY (varies)\n--enable-debug only"]
pub type dwg_obj_sunstudy = _dwg_object_SUNSTUDY;
pub type dwg_obj_tablecontent = _dwg_object_TABLECONTENT;
pub type dwg_obj_tvdeviceproperties = _dwg_object_TVDEVICEPROPERTIES;
extern "C" {
    pub fn dwg_get__3DFACE(
        ent__3dface: *const dwg_ent__3dface,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set__3DFACE(
        ent__3dface: *const dwg_ent__3dface,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get__3DSOLID(
        ent__3dsolid: *const dwg_ent__3dsolid,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set__3DSOLID(
        ent__3dsolid: *const dwg_ent__3dsolid,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ARC(
        ent_arc: *const dwg_ent_arc,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ARC(
        ent_arc: *const dwg_ent_arc,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ATTDEF(
        ent_attdef: *const dwg_ent_attdef,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ATTDEF(
        ent_attdef: *const dwg_ent_attdef,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ATTRIB(
        ent_attrib: *const dwg_ent_attrib,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ATTRIB(
        ent_attrib: *const dwg_ent_attrib,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_BLOCK(
        ent_block: *const dwg_ent_block,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_BLOCK(
        ent_block: *const dwg_ent_block,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_CIRCLE(
        ent_circle: *const dwg_ent_circle,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_CIRCLE(
        ent_circle: *const dwg_ent_circle,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_DIMENSION_ALIGNED(
        ent_dim_aligned: *const dwg_ent_dim_aligned,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_DIMENSION_ALIGNED(
        ent_dim_aligned: *const dwg_ent_dim_aligned,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_DIMENSION_ANG2LN(
        ent_dim_ang2ln: *const dwg_ent_dim_ang2ln,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_DIMENSION_ANG2LN(
        ent_dim_ang2ln: *const dwg_ent_dim_ang2ln,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_DIMENSION_ANG3PT(
        ent_dim_ang3pt: *const dwg_ent_dim_ang3pt,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_DIMENSION_ANG3PT(
        ent_dim_ang3pt: *const dwg_ent_dim_ang3pt,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_DIMENSION_DIAMETER(
        ent_dim_diameter: *const dwg_ent_dim_diameter,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_DIMENSION_DIAMETER(
        ent_dim_diameter: *const dwg_ent_dim_diameter,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_DIMENSION_LINEAR(
        ent_dim_linear: *const dwg_ent_dim_linear,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_DIMENSION_LINEAR(
        ent_dim_linear: *const dwg_ent_dim_linear,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_DIMENSION_ORDINATE(
        ent_dim_ordinate: *const dwg_ent_dim_ordinate,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_DIMENSION_ORDINATE(
        ent_dim_ordinate: *const dwg_ent_dim_ordinate,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_DIMENSION_RADIUS(
        ent_dim_radius: *const dwg_ent_dim_radius,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_DIMENSION_RADIUS(
        ent_dim_radius: *const dwg_ent_dim_radius,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ELLIPSE(
        ent_ellipse: *const dwg_ent_ellipse,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ELLIPSE(
        ent_ellipse: *const dwg_ent_ellipse,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ENDBLK(
        ent_endblk: *const dwg_ent_endblk,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ENDBLK(
        ent_endblk: *const dwg_ent_endblk,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_INSERT(
        ent_insert: *const dwg_ent_insert,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_INSERT(
        ent_insert: *const dwg_ent_insert,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_LEADER(
        ent_leader: *const dwg_ent_leader,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_LEADER(
        ent_leader: *const dwg_ent_leader,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_LINE(
        ent_line: *const dwg_ent_line,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_LINE(
        ent_line: *const dwg_ent_line,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_LOAD(
        ent_load: *const dwg_ent_load,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_LOAD(
        ent_load: *const dwg_ent_load,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_MINSERT(
        ent_minsert: *const dwg_ent_minsert,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_MINSERT(
        ent_minsert: *const dwg_ent_minsert,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_MLINE(
        ent_mline: *const dwg_ent_mline,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_MLINE(
        ent_mline: *const dwg_ent_mline,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_MTEXT(
        ent_mtext: *const dwg_ent_mtext,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_MTEXT(
        ent_mtext: *const dwg_ent_mtext,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_OLEFRAME(
        ent_oleframe: *const dwg_ent_oleframe,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_OLEFRAME(
        ent_oleframe: *const dwg_ent_oleframe,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_POINT(
        ent_point: *const dwg_ent_point,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_POINT(
        ent_point: *const dwg_ent_point,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_POLYLINE_2D(
        ent_polyline_2d: *const dwg_ent_polyline_2d,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_POLYLINE_2D(
        ent_polyline_2d: *const dwg_ent_polyline_2d,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_POLYLINE_3D(
        ent_polyline_3d: *const dwg_ent_polyline_3d,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_POLYLINE_3D(
        ent_polyline_3d: *const dwg_ent_polyline_3d,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_POLYLINE_MESH(
        ent_polyline_mesh: *const dwg_ent_polyline_mesh,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_POLYLINE_MESH(
        ent_polyline_mesh: *const dwg_ent_polyline_mesh,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_POLYLINE_PFACE(
        ent_polyline_pface: *const dwg_ent_polyline_pface,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_POLYLINE_PFACE(
        ent_polyline_pface: *const dwg_ent_polyline_pface,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_PROXY_ENTITY(
        ent_proxy_entity: *const dwg_ent_proxy_entity,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_PROXY_ENTITY(
        ent_proxy_entity: *const dwg_ent_proxy_entity,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_RAY(
        ent_ray: *const dwg_ent_ray,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_RAY(
        ent_ray: *const dwg_ent_ray,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_SEQEND(
        ent_seqend: *const dwg_ent_seqend,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_SEQEND(
        ent_seqend: *const dwg_ent_seqend,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_SHAPE(
        ent_shape: *const dwg_ent_shape,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_SHAPE(
        ent_shape: *const dwg_ent_shape,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_SOLID(
        ent_solid: *const dwg_ent_solid,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_SOLID(
        ent_solid: *const dwg_ent_solid,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_SPLINE(
        ent_spline: *const dwg_ent_spline,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_SPLINE(
        ent_spline: *const dwg_ent_spline,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_TEXT(
        ent_text: *const dwg_ent_text,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_TEXT(
        ent_text: *const dwg_ent_text,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_TOLERANCE(
        ent_tolerance: *const dwg_ent_tolerance,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_TOLERANCE(
        ent_tolerance: *const dwg_ent_tolerance,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_TRACE(
        ent_trace: *const dwg_ent_trace,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_TRACE(
        ent_trace: *const dwg_ent_trace,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_UNKNOWN_ENT(
        ent_unknown_ent: *const dwg_ent_unknown_ent,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_UNKNOWN_ENT(
        ent_unknown_ent: *const dwg_ent_unknown_ent,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_VERTEX_2D(
        ent_vertex_2d: *const dwg_ent_vertex_2d,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_VERTEX_2D(
        ent_vertex_2d: *const dwg_ent_vertex_2d,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_VERTEX_3D(
        ent_vertex_3d: *const dwg_ent_vertex_3d,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_VERTEX_3D(
        ent_vertex_3d: *const dwg_ent_vertex_3d,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_VERTEX_PFACE_FACE(
        ent_vert_pface_face: *const dwg_ent_vert_pface_face,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_VERTEX_PFACE_FACE(
        ent_vert_pface_face: *const dwg_ent_vert_pface_face,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_VIEWPORT(
        ent_viewport: *const dwg_ent_viewport,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_VIEWPORT(
        ent_viewport: *const dwg_ent_viewport,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get__3DLINE(
        ent__3dline: *const dwg_ent__3dline,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set__3DLINE(
        ent__3dline: *const dwg_ent__3dline,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_CAMERA(
        ent_camera: *const dwg_ent_camera,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_CAMERA(
        ent_camera: *const dwg_ent_camera,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_DGNUNDERLAY(
        ent_dgnunderlay: *const dwg_ent_dgnunderlay,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_DGNUNDERLAY(
        ent_dgnunderlay: *const dwg_ent_dgnunderlay,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_DWFUNDERLAY(
        ent_dwfunderlay: *const dwg_ent_dwfunderlay,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_DWFUNDERLAY(
        ent_dwfunderlay: *const dwg_ent_dwfunderlay,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ENDREP(
        ent_endrep: *const dwg_ent_endrep,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ENDREP(
        ent_endrep: *const dwg_ent_endrep,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_HATCH(
        ent_hatch: *const dwg_ent_hatch,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_HATCH(
        ent_hatch: *const dwg_ent_hatch,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_IMAGE(
        ent_image: *const dwg_ent_image,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_IMAGE(
        ent_image: *const dwg_ent_image,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_JUMP(
        ent_jump: *const dwg_ent_jump,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_JUMP(
        ent_jump: *const dwg_ent_jump,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_LIGHT(
        ent_light: *const dwg_ent_light,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_LIGHT(
        ent_light: *const dwg_ent_light,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_LWPOLYLINE(
        ent_lwpline: *const dwg_ent_lwpline,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_LWPOLYLINE(
        ent_lwpline: *const dwg_ent_lwpline,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_MESH(
        ent_mesh: *const dwg_ent_mesh,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_MESH(
        ent_mesh: *const dwg_ent_mesh,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_MULTILEADER(
        ent_mleader: *const dwg_ent_mleader,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_MULTILEADER(
        ent_mleader: *const dwg_ent_mleader,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_OLE2FRAME(
        ent_ole2frame: *const dwg_ent_ole2frame,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_OLE2FRAME(
        ent_ole2frame: *const dwg_ent_ole2frame,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_PDFUNDERLAY(
        ent_pdfunderlay: *const dwg_ent_pdfunderlay,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_PDFUNDERLAY(
        ent_pdfunderlay: *const dwg_ent_pdfunderlay,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_REPEAT(
        ent_repeat: *const dwg_ent_repeat,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_REPEAT(
        ent_repeat: *const dwg_ent_repeat,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_SECTIONOBJECT(
        ent_sectionobject: *const dwg_ent_sectionobject,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_SECTIONOBJECT(
        ent_sectionobject: *const dwg_ent_sectionobject,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ARC_DIMENSION(
        ent_arc_dimension: *const dwg_ent_arc_dimension,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ARC_DIMENSION(
        ent_arc_dimension: *const dwg_ent_arc_dimension,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_HELIX(
        ent_helix: *const dwg_ent_helix,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_HELIX(
        ent_helix: *const dwg_ent_helix,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_LARGE_RADIAL_DIMENSION(
        ent_large_radial_dimension: *const dwg_ent_large_radial_dimension,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_LARGE_RADIAL_DIMENSION(
        ent_large_radial_dimension: *const dwg_ent_large_radial_dimension,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_LAYOUTPRINTCONFIG(
        ent_layoutprintconfig: *const dwg_ent_layoutprintconfig,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_LAYOUTPRINTCONFIG(
        ent_layoutprintconfig: *const dwg_ent_layoutprintconfig,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_PLANESURFACE(
        ent_planesurface: *const dwg_ent_planesurface,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_PLANESURFACE(
        ent_planesurface: *const dwg_ent_planesurface,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_POINTCLOUD(
        ent_pointcloud: *const dwg_ent_pointcloud,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_POINTCLOUD(
        ent_pointcloud: *const dwg_ent_pointcloud,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_POINTCLOUDEX(
        ent_pointcloudex: *const dwg_ent_pointcloudex,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_POINTCLOUDEX(
        ent_pointcloudex: *const dwg_ent_pointcloudex,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_WIPEOUT(
        ent_wipeout: *const dwg_ent_wipeout,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_WIPEOUT(
        ent_wipeout: *const dwg_ent_wipeout,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_APPID(
        obj_appid: *const dwg_obj_appid,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_APPID(
        obj_appid: *const dwg_obj_appid,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_APPID_CONTROL(
        obj_appid_control: *const dwg_obj_appid_control,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_APPID_CONTROL(
        obj_appid_control: *const dwg_obj_appid_control,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_BLOCK_CONTROL(
        obj_block_control: *const dwg_obj_block_control,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_BLOCK_CONTROL(
        obj_block_control: *const dwg_obj_block_control,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_BLOCK_HEADER(
        obj_block_header: *const dwg_obj_block_header,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_BLOCK_HEADER(
        obj_block_header: *const dwg_obj_block_header,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_DICTIONARY(
        obj_dictionary: *const dwg_obj_dictionary,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_DICTIONARY(
        obj_dictionary: *const dwg_obj_dictionary,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_DIMSTYLE(
        obj_dimstyle: *const dwg_obj_dimstyle,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_DIMSTYLE(
        obj_dimstyle: *const dwg_obj_dimstyle,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_DIMSTYLE_CONTROL(
        obj_dimstyle_control: *const dwg_obj_dimstyle_control,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_DIMSTYLE_CONTROL(
        obj_dimstyle_control: *const dwg_obj_dimstyle_control,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_DUMMY(
        obj_dummy: *const dwg_obj_dummy,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_DUMMY(
        obj_dummy: *const dwg_obj_dummy,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_LAYER(
        obj_layer: *const dwg_obj_layer,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_LAYER(
        obj_layer: *const dwg_obj_layer,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_LAYER_CONTROL(
        obj_layer_control: *const dwg_obj_layer_control,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_LAYER_CONTROL(
        obj_layer_control: *const dwg_obj_layer_control,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_LONG_TRANSACTION(
        obj_long_transaction: *const dwg_obj_long_transaction,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_LONG_TRANSACTION(
        obj_long_transaction: *const dwg_obj_long_transaction,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_LTYPE(
        obj_ltype: *const dwg_obj_ltype,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_LTYPE(
        obj_ltype: *const dwg_obj_ltype,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_LTYPE_CONTROL(
        obj_ltype_control: *const dwg_obj_ltype_control,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_LTYPE_CONTROL(
        obj_ltype_control: *const dwg_obj_ltype_control,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_MLINESTYLE(
        obj_mlinestyle: *const dwg_obj_mlinestyle,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_MLINESTYLE(
        obj_mlinestyle: *const dwg_obj_mlinestyle,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_STYLE(
        obj_style: *const dwg_obj_style,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_STYLE(
        obj_style: *const dwg_obj_style,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_STYLE_CONTROL(
        obj_style_control: *const dwg_obj_style_control,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_STYLE_CONTROL(
        obj_style_control: *const dwg_obj_style_control,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_UCS(
        obj_ucs: *const dwg_obj_ucs,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_UCS(
        obj_ucs: *const dwg_obj_ucs,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_UCS_CONTROL(
        obj_ucs_control: *const dwg_obj_ucs_control,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_UCS_CONTROL(
        obj_ucs_control: *const dwg_obj_ucs_control,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_UNKNOWN_OBJ(
        obj_unknown_obj: *const dwg_obj_unknown_obj,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_UNKNOWN_OBJ(
        obj_unknown_obj: *const dwg_obj_unknown_obj,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_VIEW(
        obj_view: *const dwg_obj_view,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_VIEW(
        obj_view: *const dwg_obj_view,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_VIEW_CONTROL(
        obj_view_control: *const dwg_obj_view_control,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_VIEW_CONTROL(
        obj_view_control: *const dwg_obj_view_control,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_VPORT(
        obj_vport: *const dwg_obj_vport,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_VPORT(
        obj_vport: *const dwg_obj_vport,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_VPORT_CONTROL(
        obj_vport_control: *const dwg_obj_vport_control,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_VPORT_CONTROL(
        obj_vport_control: *const dwg_obj_vport_control,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_VX_CONTROL(
        obj_vx_control: *const dwg_obj_vx_control,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_VX_CONTROL(
        obj_vx_control: *const dwg_obj_vx_control,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_VX_TABLE_RECORD(
        obj_vx_table_record: *const dwg_obj_vx_table_record,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_VX_TABLE_RECORD(
        obj_vx_table_record: *const dwg_obj_vx_table_record,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ACSH_BOOLEAN_CLASS(
        obj_acsh_boolean_class: *const dwg_obj_acsh_boolean_class,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ACSH_BOOLEAN_CLASS(
        obj_acsh_boolean_class: *const dwg_obj_acsh_boolean_class,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ACSH_BOX_CLASS(
        obj_acsh_box_class: *const dwg_obj_acsh_box_class,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ACSH_BOX_CLASS(
        obj_acsh_box_class: *const dwg_obj_acsh_box_class,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ACSH_CONE_CLASS(
        obj_acsh_cone_class: *const dwg_obj_acsh_cone_class,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ACSH_CONE_CLASS(
        obj_acsh_cone_class: *const dwg_obj_acsh_cone_class,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ACSH_CYLINDER_CLASS(
        obj_acsh_cylinder_class: *const dwg_obj_acsh_cylinder_class,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ACSH_CYLINDER_CLASS(
        obj_acsh_cylinder_class: *const dwg_obj_acsh_cylinder_class,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ACSH_FILLET_CLASS(
        obj_acsh_fillet_class: *const dwg_obj_acsh_fillet_class,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ACSH_FILLET_CLASS(
        obj_acsh_fillet_class: *const dwg_obj_acsh_fillet_class,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ACSH_HISTORY_CLASS(
        obj_acsh_history_class: *const dwg_obj_acsh_history_class,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ACSH_HISTORY_CLASS(
        obj_acsh_history_class: *const dwg_obj_acsh_history_class,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ACSH_SPHERE_CLASS(
        obj_acsh_sphere_class: *const dwg_obj_acsh_sphere_class,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ACSH_SPHERE_CLASS(
        obj_acsh_sphere_class: *const dwg_obj_acsh_sphere_class,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ACSH_TORUS_CLASS(
        obj_acsh_torus_class: *const dwg_obj_acsh_torus_class,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ACSH_TORUS_CLASS(
        obj_acsh_torus_class: *const dwg_obj_acsh_torus_class,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ACSH_WEDGE_CLASS(
        obj_acsh_wedge_class: *const dwg_obj_acsh_wedge_class,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ACSH_WEDGE_CLASS(
        obj_acsh_wedge_class: *const dwg_obj_acsh_wedge_class,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_BLOCKALIGNMENTGRIP(
        obj_blockalignmentgrip: *const dwg_obj_blockalignmentgrip,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_BLOCKALIGNMENTGRIP(
        obj_blockalignmentgrip: *const dwg_obj_blockalignmentgrip,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_BLOCKALIGNMENTPARAMETER(
        obj_blockalignmentparameter: *const dwg_obj_blockalignmentparameter,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_BLOCKALIGNMENTPARAMETER(
        obj_blockalignmentparameter: *const dwg_obj_blockalignmentparameter,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_BLOCKBASEPOINTPARAMETER(
        obj_blockbasepointparameter: *const dwg_obj_blockbasepointparameter,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_BLOCKBASEPOINTPARAMETER(
        obj_blockbasepointparameter: *const dwg_obj_blockbasepointparameter,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_BLOCKFLIPACTION(
        obj_blockflipaction: *const dwg_obj_blockflipaction,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_BLOCKFLIPACTION(
        obj_blockflipaction: *const dwg_obj_blockflipaction,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_BLOCKFLIPGRIP(
        obj_blockflipgrip: *const dwg_obj_blockflipgrip,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_BLOCKFLIPGRIP(
        obj_blockflipgrip: *const dwg_obj_blockflipgrip,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_BLOCKFLIPPARAMETER(
        obj_blockflipparameter: *const dwg_obj_blockflipparameter,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_BLOCKFLIPPARAMETER(
        obj_blockflipparameter: *const dwg_obj_blockflipparameter,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_BLOCKGRIPLOCATIONCOMPONENT(
        obj_blockgriplocationcomponent: *const dwg_obj_blockgriplocationcomponent,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_BLOCKGRIPLOCATIONCOMPONENT(
        obj_blockgriplocationcomponent: *const dwg_obj_blockgriplocationcomponent,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_BLOCKLINEARGRIP(
        obj_blocklineargrip: *const dwg_obj_blocklineargrip,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_BLOCKLINEARGRIP(
        obj_blocklineargrip: *const dwg_obj_blocklineargrip,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_BLOCKLOOKUPGRIP(
        obj_blocklookupgrip: *const dwg_obj_blocklookupgrip,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_BLOCKLOOKUPGRIP(
        obj_blocklookupgrip: *const dwg_obj_blocklookupgrip,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_BLOCKMOVEACTION(
        obj_blockmoveaction: *const dwg_obj_blockmoveaction,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_BLOCKMOVEACTION(
        obj_blockmoveaction: *const dwg_obj_blockmoveaction,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_BLOCKROTATEACTION(
        obj_blockrotateaction: *const dwg_obj_blockrotateaction,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_BLOCKROTATEACTION(
        obj_blockrotateaction: *const dwg_obj_blockrotateaction,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_BLOCKROTATIONGRIP(
        obj_blockrotationgrip: *const dwg_obj_blockrotationgrip,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_BLOCKROTATIONGRIP(
        obj_blockrotationgrip: *const dwg_obj_blockrotationgrip,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_BLOCKSCALEACTION(
        obj_blockscaleaction: *const dwg_obj_blockscaleaction,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_BLOCKSCALEACTION(
        obj_blockscaleaction: *const dwg_obj_blockscaleaction,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_BLOCKVISIBILITYGRIP(
        obj_blockvisibilitygrip: *const dwg_obj_blockvisibilitygrip,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_BLOCKVISIBILITYGRIP(
        obj_blockvisibilitygrip: *const dwg_obj_blockvisibilitygrip,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_CELLSTYLEMAP(
        obj_cellstylemap: *const dwg_obj_cellstylemap,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_CELLSTYLEMAP(
        obj_cellstylemap: *const dwg_obj_cellstylemap,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_DETAILVIEWSTYLE(
        obj_detailviewstyle: *const dwg_obj_detailviewstyle,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_DETAILVIEWSTYLE(
        obj_detailviewstyle: *const dwg_obj_detailviewstyle,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_DICTIONARYVAR(
        obj_dictionaryvar: *const dwg_obj_dictionaryvar,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_DICTIONARYVAR(
        obj_dictionaryvar: *const dwg_obj_dictionaryvar,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_DICTIONARYWDFLT(
        obj_dictionarywdflt: *const dwg_obj_dictionarywdflt,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_DICTIONARYWDFLT(
        obj_dictionarywdflt: *const dwg_obj_dictionarywdflt,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_DYNAMICBLOCKPURGEPREVENTER(
        obj_dynamicblockpurgepreventer: *const dwg_obj_dynamicblockpurgepreventer,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_DYNAMICBLOCKPURGEPREVENTER(
        obj_dynamicblockpurgepreventer: *const dwg_obj_dynamicblockpurgepreventer,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_FIELD(
        obj_field: *const dwg_obj_field,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_FIELD(
        obj_field: *const dwg_obj_field,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_FIELDLIST(
        obj_fieldlist: *const dwg_obj_fieldlist,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_FIELDLIST(
        obj_fieldlist: *const dwg_obj_fieldlist,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_GEODATA(
        obj_geodata: *const dwg_obj_geodata,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_GEODATA(
        obj_geodata: *const dwg_obj_geodata,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_GROUP(
        obj_group: *const dwg_obj_group,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_GROUP(
        obj_group: *const dwg_obj_group,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_IDBUFFER(
        obj_idbuffer: *const dwg_obj_idbuffer,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_IDBUFFER(
        obj_idbuffer: *const dwg_obj_idbuffer,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_IMAGEDEF(
        obj_imagedef: *const dwg_obj_imagedef,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_IMAGEDEF(
        obj_imagedef: *const dwg_obj_imagedef,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_IMAGEDEF_REACTOR(
        obj_imagedef_reactor: *const dwg_obj_imagedef_reactor,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_IMAGEDEF_REACTOR(
        obj_imagedef_reactor: *const dwg_obj_imagedef_reactor,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_INDEX(
        obj_index: *const dwg_obj_index,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_INDEX(
        obj_index: *const dwg_obj_index,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_LAYERFILTER(
        obj_layerfilter: *const dwg_obj_layerfilter,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_LAYERFILTER(
        obj_layerfilter: *const dwg_obj_layerfilter,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_LAYER_INDEX(
        obj_layer_index: *const dwg_obj_layer_index,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_LAYER_INDEX(
        obj_layer_index: *const dwg_obj_layer_index,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_LAYOUT(
        obj_layout: *const dwg_obj_layout,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_LAYOUT(
        obj_layout: *const dwg_obj_layout,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_PLACEHOLDER(
        obj_placeholder: *const dwg_obj_placeholder,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_PLACEHOLDER(
        obj_placeholder: *const dwg_obj_placeholder,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_PLOTSETTINGS(
        obj_plotsettings: *const dwg_obj_plotsettings,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_PLOTSETTINGS(
        obj_plotsettings: *const dwg_obj_plotsettings,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_RASTERVARIABLES(
        obj_rastervariables: *const dwg_obj_rastervariables,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_RASTERVARIABLES(
        obj_rastervariables: *const dwg_obj_rastervariables,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_SCALE(
        obj_scale: *const dwg_obj_scale,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_SCALE(
        obj_scale: *const dwg_obj_scale,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_SECTIONVIEWSTYLE(
        obj_sectionviewstyle: *const dwg_obj_sectionviewstyle,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_SECTIONVIEWSTYLE(
        obj_sectionviewstyle: *const dwg_obj_sectionviewstyle,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_SECTION_MANAGER(
        obj_section_manager: *const dwg_obj_section_manager,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_SECTION_MANAGER(
        obj_section_manager: *const dwg_obj_section_manager,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_SORTENTSTABLE(
        obj_sortentstable: *const dwg_obj_sortentstable,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_SORTENTSTABLE(
        obj_sortentstable: *const dwg_obj_sortentstable,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_SPATIAL_FILTER(
        obj_spatial_filter: *const dwg_obj_spatial_filter,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_SPATIAL_FILTER(
        obj_spatial_filter: *const dwg_obj_spatial_filter,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_TABLEGEOMETRY(
        obj_tablegeometry: *const dwg_obj_tablegeometry,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_TABLEGEOMETRY(
        obj_tablegeometry: *const dwg_obj_tablegeometry,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_VBA_PROJECT(
        obj_vba_project: *const dwg_obj_vba_project,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_VBA_PROJECT(
        obj_vba_project: *const dwg_obj_vba_project,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_VISUALSTYLE(
        obj_visualstyle: *const dwg_obj_visualstyle,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_VISUALSTYLE(
        obj_visualstyle: *const dwg_obj_visualstyle,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_WIPEOUTVARIABLES(
        obj_wipeoutvariables: *const dwg_obj_wipeoutvariables,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_WIPEOUTVARIABLES(
        obj_wipeoutvariables: *const dwg_obj_wipeoutvariables,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_XRECORD(
        obj_xrecord: *const dwg_obj_xrecord,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_XRECORD(
        obj_xrecord: *const dwg_obj_xrecord,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_PDFDEFINITION(
        obj_pdfdefinition: *const dwg_obj_pdfdefinition,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_PDFDEFINITION(
        obj_pdfdefinition: *const dwg_obj_pdfdefinition,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_DGNDEFINITION(
        obj_dgndefinition: *const dwg_obj_dgndefinition,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_DGNDEFINITION(
        obj_dgndefinition: *const dwg_obj_dgndefinition,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_DWFDEFINITION(
        obj_dwfdefinition: *const dwg_obj_dwfdefinition,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_DWFDEFINITION(
        obj_dwfdefinition: *const dwg_obj_dwfdefinition,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ACSH_BREP_CLASS(
        obj_acsh_brep_class: *const dwg_obj_acsh_brep_class,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ACSH_BREP_CLASS(
        obj_acsh_brep_class: *const dwg_obj_acsh_brep_class,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ACSH_CHAMFER_CLASS(
        obj_acsh_chamfer_class: *const dwg_obj_acsh_chamfer_class,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ACSH_CHAMFER_CLASS(
        obj_acsh_chamfer_class: *const dwg_obj_acsh_chamfer_class,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ACSH_PYRAMID_CLASS(
        obj_acsh_pyramid_class: *const dwg_obj_acsh_pyramid_class,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ACSH_PYRAMID_CLASS(
        obj_acsh_pyramid_class: *const dwg_obj_acsh_pyramid_class,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ALDIMOBJECTCONTEXTDATA(
        obj_aldimobjectcontextdata: *const dwg_obj_aldimobjectcontextdata,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ALDIMOBJECTCONTEXTDATA(
        obj_aldimobjectcontextdata: *const dwg_obj_aldimobjectcontextdata,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ASSOC2DCONSTRAINTGROUP(
        obj_assoc2dconstraintgroup: *const dwg_obj_assoc2dconstraintgroup,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ASSOC2DCONSTRAINTGROUP(
        obj_assoc2dconstraintgroup: *const dwg_obj_assoc2dconstraintgroup,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ASSOCACTION(
        obj_assocaction: *const dwg_obj_assocaction,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ASSOCACTION(
        obj_assocaction: *const dwg_obj_assocaction,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ASSOCACTIONPARAM(
        obj_assocactionparam: *const dwg_obj_assocactionparam,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ASSOCACTIONPARAM(
        obj_assocactionparam: *const dwg_obj_assocactionparam,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ASSOCARRAYACTIONBODY(
        obj_assocarrayactionbody: *const dwg_obj_assocarrayactionbody,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ASSOCARRAYACTIONBODY(
        obj_assocarrayactionbody: *const dwg_obj_assocarrayactionbody,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ASSOCASMBODYACTIONPARAM(
        obj_assocasmbodyactionparam: *const dwg_obj_assocasmbodyactionparam,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ASSOCASMBODYACTIONPARAM(
        obj_assocasmbodyactionparam: *const dwg_obj_assocasmbodyactionparam,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ASSOCBLENDSURFACEACTIONBODY(
        obj_assocblendsurfaceactionbody: *const dwg_obj_assocblendsurfaceactionbody,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ASSOCBLENDSURFACEACTIONBODY(
        obj_assocblendsurfaceactionbody: *const dwg_obj_assocblendsurfaceactionbody,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ASSOCCOMPOUNDACTIONPARAM(
        obj_assoccompoundactionparam: *const dwg_obj_assoccompoundactionparam,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ASSOCCOMPOUNDACTIONPARAM(
        obj_assoccompoundactionparam: *const dwg_obj_assoccompoundactionparam,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ASSOCDEPENDENCY(
        obj_assocdependency: *const dwg_obj_assocdependency,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ASSOCDEPENDENCY(
        obj_assocdependency: *const dwg_obj_assocdependency,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ASSOCDIMDEPENDENCYBODY(
        obj_assocdimdependencybody: *const dwg_obj_assocdimdependencybody,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ASSOCDIMDEPENDENCYBODY(
        obj_assocdimdependencybody: *const dwg_obj_assocdimdependencybody,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ASSOCEXTENDSURFACEACTIONBODY(
        obj_assocextendsurfaceactionbody: *const dwg_obj_assocextendsurfaceactionbody,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ASSOCEXTENDSURFACEACTIONBODY(
        obj_assocextendsurfaceactionbody: *const dwg_obj_assocextendsurfaceactionbody,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ASSOCEXTRUDEDSURFACEACTIONBODY(
        obj_assocextrudedsurfaceactionbody: *const dwg_obj_assocextrudedsurfaceactionbody,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ASSOCEXTRUDEDSURFACEACTIONBODY(
        obj_assocextrudedsurfaceactionbody: *const dwg_obj_assocextrudedsurfaceactionbody,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ASSOCFACEACTIONPARAM(
        obj_assocfaceactionparam: *const dwg_obj_assocfaceactionparam,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ASSOCFACEACTIONPARAM(
        obj_assocfaceactionparam: *const dwg_obj_assocfaceactionparam,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ASSOCFILLETSURFACEACTIONBODY(
        obj_assocfilletsurfaceactionbody: *const dwg_obj_assocfilletsurfaceactionbody,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ASSOCFILLETSURFACEACTIONBODY(
        obj_assocfilletsurfaceactionbody: *const dwg_obj_assocfilletsurfaceactionbody,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ASSOCGEOMDEPENDENCY(
        obj_assocgeomdependency: *const dwg_obj_assocgeomdependency,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ASSOCGEOMDEPENDENCY(
        obj_assocgeomdependency: *const dwg_obj_assocgeomdependency,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ASSOCLOFTEDSURFACEACTIONBODY(
        obj_assocloftedsurfaceactionbody: *const dwg_obj_assocloftedsurfaceactionbody,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ASSOCLOFTEDSURFACEACTIONBODY(
        obj_assocloftedsurfaceactionbody: *const dwg_obj_assocloftedsurfaceactionbody,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ASSOCNETWORK(
        obj_assocnetwork: *const dwg_obj_assocnetwork,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ASSOCNETWORK(
        obj_assocnetwork: *const dwg_obj_assocnetwork,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ASSOCNETWORKSURFACEACTIONBODY(
        obj_assocnetworksurfaceactionbody: *const dwg_obj_assocnetworksurfaceactionbody,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ASSOCNETWORKSURFACEACTIONBODY(
        obj_assocnetworksurfaceactionbody: *const dwg_obj_assocnetworksurfaceactionbody,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ASSOCOBJECTACTIONPARAM(
        obj_assocobjectactionparam: *const dwg_obj_assocobjectactionparam,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ASSOCOBJECTACTIONPARAM(
        obj_assocobjectactionparam: *const dwg_obj_assocobjectactionparam,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ASSOCOFFSETSURFACEACTIONBODY(
        obj_assocoffsetsurfaceactionbody: *const dwg_obj_assocoffsetsurfaceactionbody,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ASSOCOFFSETSURFACEACTIONBODY(
        obj_assocoffsetsurfaceactionbody: *const dwg_obj_assocoffsetsurfaceactionbody,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ASSOCOSNAPPOINTREFACTIONPARAM(
        obj_assocosnappointrefactionparam: *const dwg_obj_assocosnappointrefactionparam,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ASSOCOSNAPPOINTREFACTIONPARAM(
        obj_assocosnappointrefactionparam: *const dwg_obj_assocosnappointrefactionparam,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ASSOCPATCHSURFACEACTIONBODY(
        obj_assocpatchsurfaceactionbody: *const dwg_obj_assocpatchsurfaceactionbody,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ASSOCPATCHSURFACEACTIONBODY(
        obj_assocpatchsurfaceactionbody: *const dwg_obj_assocpatchsurfaceactionbody,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ASSOCPATHACTIONPARAM(
        obj_assocpathactionparam: *const dwg_obj_assocpathactionparam,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ASSOCPATHACTIONPARAM(
        obj_assocpathactionparam: *const dwg_obj_assocpathactionparam,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ASSOCPLANESURFACEACTIONBODY(
        obj_assocplanesurfaceactionbody: *const dwg_obj_assocplanesurfaceactionbody,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ASSOCPLANESURFACEACTIONBODY(
        obj_assocplanesurfaceactionbody: *const dwg_obj_assocplanesurfaceactionbody,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ASSOCPOINTREFACTIONPARAM(
        obj_assocpointrefactionparam: *const dwg_obj_assocpointrefactionparam,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ASSOCPOINTREFACTIONPARAM(
        obj_assocpointrefactionparam: *const dwg_obj_assocpointrefactionparam,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ASSOCREVOLVEDSURFACEACTIONBODY(
        obj_assocrevolvedsurfaceactionbody: *const dwg_obj_assocrevolvedsurfaceactionbody,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ASSOCREVOLVEDSURFACEACTIONBODY(
        obj_assocrevolvedsurfaceactionbody: *const dwg_obj_assocrevolvedsurfaceactionbody,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ASSOCTRIMSURFACEACTIONBODY(
        obj_assoctrimsurfaceactionbody: *const dwg_obj_assoctrimsurfaceactionbody,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ASSOCTRIMSURFACEACTIONBODY(
        obj_assoctrimsurfaceactionbody: *const dwg_obj_assoctrimsurfaceactionbody,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ASSOCVALUEDEPENDENCY(
        obj_assocvaluedependency: *const dwg_obj_assocvaluedependency,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ASSOCVALUEDEPENDENCY(
        obj_assocvaluedependency: *const dwg_obj_assocvaluedependency,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ASSOCVARIABLE(
        obj_assocvariable: *const dwg_obj_assocvariable,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ASSOCVARIABLE(
        obj_assocvariable: *const dwg_obj_assocvariable,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ASSOCVERTEXACTIONPARAM(
        obj_assocvertexactionparam: *const dwg_obj_assocvertexactionparam,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ASSOCVERTEXACTIONPARAM(
        obj_assocvertexactionparam: *const dwg_obj_assocvertexactionparam,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_BLKREFOBJECTCONTEXTDATA(
        obj_blkrefobjectcontextdata: *const dwg_obj_blkrefobjectcontextdata,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_BLKREFOBJECTCONTEXTDATA(
        obj_blkrefobjectcontextdata: *const dwg_obj_blkrefobjectcontextdata,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_BLOCKALIGNEDCONSTRAINTPARAMETER(
        obj_blockalignedconstraintparameter: *const dwg_obj_blockalignedconstraintparameter,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_BLOCKALIGNEDCONSTRAINTPARAMETER(
        obj_blockalignedconstraintparameter: *const dwg_obj_blockalignedconstraintparameter,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_BLOCKANGULARCONSTRAINTPARAMETER(
        obj_blockangularconstraintparameter: *const dwg_obj_blockangularconstraintparameter,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_BLOCKANGULARCONSTRAINTPARAMETER(
        obj_blockangularconstraintparameter: *const dwg_obj_blockangularconstraintparameter,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_BLOCKARRAYACTION(
        obj_blockarrayaction: *const dwg_obj_blockarrayaction,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_BLOCKARRAYACTION(
        obj_blockarrayaction: *const dwg_obj_blockarrayaction,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_BLOCKDIAMETRICCONSTRAINTPARAMETER(
        obj_blockdiametricconstraintparameter: *const dwg_obj_blockdiametricconstraintparameter,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_BLOCKDIAMETRICCONSTRAINTPARAMETER(
        obj_blockdiametricconstraintparameter: *const dwg_obj_blockdiametricconstraintparameter,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_BLOCKHORIZONTALCONSTRAINTPARAMETER(
        obj_blockhorizontalconstraintparameter: *const dwg_obj_blockhorizontalconstraintparameter,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_BLOCKHORIZONTALCONSTRAINTPARAMETER(
        obj_blockhorizontalconstraintparameter: *const dwg_obj_blockhorizontalconstraintparameter,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_BLOCKLINEARCONSTRAINTPARAMETER(
        obj_blocklinearconstraintparameter: *const dwg_obj_blocklinearconstraintparameter,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_BLOCKLINEARCONSTRAINTPARAMETER(
        obj_blocklinearconstraintparameter: *const dwg_obj_blocklinearconstraintparameter,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_BLOCKLINEARPARAMETER(
        obj_blocklinearparameter: *const dwg_obj_blocklinearparameter,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_BLOCKLINEARPARAMETER(
        obj_blocklinearparameter: *const dwg_obj_blocklinearparameter,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_BLOCKLOOKUPACTION(
        obj_blocklookupaction: *const dwg_obj_blocklookupaction,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_BLOCKLOOKUPACTION(
        obj_blocklookupaction: *const dwg_obj_blocklookupaction,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_BLOCKLOOKUPPARAMETER(
        obj_blocklookupparameter: *const dwg_obj_blocklookupparameter,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_BLOCKLOOKUPPARAMETER(
        obj_blocklookupparameter: *const dwg_obj_blocklookupparameter,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_BLOCKPARAMDEPENDENCYBODY(
        obj_blockparamdependencybody: *const dwg_obj_blockparamdependencybody,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_BLOCKPARAMDEPENDENCYBODY(
        obj_blockparamdependencybody: *const dwg_obj_blockparamdependencybody,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_BLOCKPOINTPARAMETER(
        obj_blockpointparameter: *const dwg_obj_blockpointparameter,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_BLOCKPOINTPARAMETER(
        obj_blockpointparameter: *const dwg_obj_blockpointparameter,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_BLOCKPOLARGRIP(
        obj_blockpolargrip: *const dwg_obj_blockpolargrip,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_BLOCKPOLARGRIP(
        obj_blockpolargrip: *const dwg_obj_blockpolargrip,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_BLOCKPOLARPARAMETER(
        obj_blockpolarparameter: *const dwg_obj_blockpolarparameter,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_BLOCKPOLARPARAMETER(
        obj_blockpolarparameter: *const dwg_obj_blockpolarparameter,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_BLOCKPOLARSTRETCHACTION(
        obj_blockpolarstretchaction: *const dwg_obj_blockpolarstretchaction,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_BLOCKPOLARSTRETCHACTION(
        obj_blockpolarstretchaction: *const dwg_obj_blockpolarstretchaction,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_BLOCKRADIALCONSTRAINTPARAMETER(
        obj_blockradialconstraintparameter: *const dwg_obj_blockradialconstraintparameter,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_BLOCKRADIALCONSTRAINTPARAMETER(
        obj_blockradialconstraintparameter: *const dwg_obj_blockradialconstraintparameter,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_BLOCKREPRESENTATION(
        obj_blockrepresentation: *const dwg_obj_blockrepresentation,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_BLOCKREPRESENTATION(
        obj_blockrepresentation: *const dwg_obj_blockrepresentation,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_BLOCKROTATIONPARAMETER(
        obj_blockrotationparameter: *const dwg_obj_blockrotationparameter,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_BLOCKROTATIONPARAMETER(
        obj_blockrotationparameter: *const dwg_obj_blockrotationparameter,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_BLOCKSTRETCHACTION(
        obj_blockstretchaction: *const dwg_obj_blockstretchaction,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_BLOCKSTRETCHACTION(
        obj_blockstretchaction: *const dwg_obj_blockstretchaction,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_BLOCKUSERPARAMETER(
        obj_blockuserparameter: *const dwg_obj_blockuserparameter,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_BLOCKUSERPARAMETER(
        obj_blockuserparameter: *const dwg_obj_blockuserparameter,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_BLOCKVERTICALCONSTRAINTPARAMETER(
        obj_blockverticalconstraintparameter: *const dwg_obj_blockverticalconstraintparameter,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_BLOCKVERTICALCONSTRAINTPARAMETER(
        obj_blockverticalconstraintparameter: *const dwg_obj_blockverticalconstraintparameter,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_BLOCKVISIBILITYPARAMETER(
        obj_blockvisibilityparameter: *const dwg_obj_blockvisibilityparameter,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_BLOCKVISIBILITYPARAMETER(
        obj_blockvisibilityparameter: *const dwg_obj_blockvisibilityparameter,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_BLOCKXYGRIP(
        obj_blockxygrip: *const dwg_obj_blockxygrip,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_BLOCKXYGRIP(
        obj_blockxygrip: *const dwg_obj_blockxygrip,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_BLOCKXYPARAMETER(
        obj_blockxyparameter: *const dwg_obj_blockxyparameter,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_BLOCKXYPARAMETER(
        obj_blockxyparameter: *const dwg_obj_blockxyparameter,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_DATALINK(
        obj_datalink: *const dwg_obj_datalink,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_DATALINK(
        obj_datalink: *const dwg_obj_datalink,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_DBCOLOR(
        obj_dbcolor: *const dwg_obj_dbcolor,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_DBCOLOR(
        obj_dbcolor: *const dwg_obj_dbcolor,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_EVALUATION_GRAPH(
        obj_evaluation_graph: *const dwg_obj_evaluation_graph,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_EVALUATION_GRAPH(
        obj_evaluation_graph: *const dwg_obj_evaluation_graph,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_FCFOBJECTCONTEXTDATA(
        obj_fcfobjectcontextdata: *const dwg_obj_fcfobjectcontextdata,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_FCFOBJECTCONTEXTDATA(
        obj_fcfobjectcontextdata: *const dwg_obj_fcfobjectcontextdata,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_GRADIENT_BACKGROUND(
        obj_gradient_background: *const dwg_obj_gradient_background,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_GRADIENT_BACKGROUND(
        obj_gradient_background: *const dwg_obj_gradient_background,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_GROUND_PLANE_BACKGROUND(
        obj_ground_plane_background: *const dwg_obj_ground_plane_background,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_GROUND_PLANE_BACKGROUND(
        obj_ground_plane_background: *const dwg_obj_ground_plane_background,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_IBL_BACKGROUND(
        obj_ibl_background: *const dwg_obj_ibl_background,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_IBL_BACKGROUND(
        obj_ibl_background: *const dwg_obj_ibl_background,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_IMAGE_BACKGROUND(
        obj_image_background: *const dwg_obj_image_background,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_IMAGE_BACKGROUND(
        obj_image_background: *const dwg_obj_image_background,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_LEADEROBJECTCONTEXTDATA(
        obj_leaderobjectcontextdata: *const dwg_obj_leaderobjectcontextdata,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_LEADEROBJECTCONTEXTDATA(
        obj_leaderobjectcontextdata: *const dwg_obj_leaderobjectcontextdata,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_LIGHTLIST(
        obj_lightlist: *const dwg_obj_lightlist,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_LIGHTLIST(
        obj_lightlist: *const dwg_obj_lightlist,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_MATERIAL(
        obj_material: *const dwg_obj_material,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_MATERIAL(
        obj_material: *const dwg_obj_material,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_MENTALRAYRENDERSETTINGS(
        obj_mentalrayrendersettings: *const dwg_obj_mentalrayrendersettings,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_MENTALRAYRENDERSETTINGS(
        obj_mentalrayrendersettings: *const dwg_obj_mentalrayrendersettings,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_MLEADERSTYLE(
        obj_mleaderstyle: *const dwg_obj_mleaderstyle,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_MLEADERSTYLE(
        obj_mleaderstyle: *const dwg_obj_mleaderstyle,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_MTEXTOBJECTCONTEXTDATA(
        obj_mtextobjectcontextdata: *const dwg_obj_mtextobjectcontextdata,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_MTEXTOBJECTCONTEXTDATA(
        obj_mtextobjectcontextdata: *const dwg_obj_mtextobjectcontextdata,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_OBJECT_PTR(
        obj_object_ptr: *const dwg_obj_object_ptr,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_OBJECT_PTR(
        obj_object_ptr: *const dwg_obj_object_ptr,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_PARTIAL_VIEWING_INDEX(
        obj_partial_viewing_index: *const dwg_obj_partial_viewing_index,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_PARTIAL_VIEWING_INDEX(
        obj_partial_viewing_index: *const dwg_obj_partial_viewing_index,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_POINTCLOUDCOLORMAP(
        obj_pointcloudcolormap: *const dwg_obj_pointcloudcolormap,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_POINTCLOUDCOLORMAP(
        obj_pointcloudcolormap: *const dwg_obj_pointcloudcolormap,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_POINTCLOUDDEF(
        obj_pointclouddef: *const dwg_obj_pointclouddef,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_POINTCLOUDDEF(
        obj_pointclouddef: *const dwg_obj_pointclouddef,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_POINTCLOUDDEFEX(
        obj_pointclouddefex: *const dwg_obj_pointclouddefex,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_POINTCLOUDDEFEX(
        obj_pointclouddefex: *const dwg_obj_pointclouddefex,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_POINTCLOUDDEF_REACTOR(
        obj_pointclouddef_reactor: *const dwg_obj_pointclouddef_reactor,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_POINTCLOUDDEF_REACTOR(
        obj_pointclouddef_reactor: *const dwg_obj_pointclouddef_reactor,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_POINTCLOUDDEF_REACTOR_EX(
        obj_pointclouddef_reactor_ex: *const dwg_obj_pointclouddef_reactor_ex,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_POINTCLOUDDEF_REACTOR_EX(
        obj_pointclouddef_reactor_ex: *const dwg_obj_pointclouddef_reactor_ex,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_PROXY_OBJECT(
        obj_proxy_object: *const dwg_obj_proxy_object,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_PROXY_OBJECT(
        obj_proxy_object: *const dwg_obj_proxy_object,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_RAPIDRTRENDERSETTINGS(
        obj_rapidrtrendersettings: *const dwg_obj_rapidrtrendersettings,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_RAPIDRTRENDERSETTINGS(
        obj_rapidrtrendersettings: *const dwg_obj_rapidrtrendersettings,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_RENDERENTRY(
        obj_renderentry: *const dwg_obj_renderentry,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_RENDERENTRY(
        obj_renderentry: *const dwg_obj_renderentry,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_RENDERENVIRONMENT(
        obj_renderenvironment: *const dwg_obj_renderenvironment,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_RENDERENVIRONMENT(
        obj_renderenvironment: *const dwg_obj_renderenvironment,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_RENDERGLOBAL(
        obj_renderglobal: *const dwg_obj_renderglobal,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_RENDERGLOBAL(
        obj_renderglobal: *const dwg_obj_renderglobal,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_RENDERSETTINGS(
        obj_rendersettings: *const dwg_obj_rendersettings,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_RENDERSETTINGS(
        obj_rendersettings: *const dwg_obj_rendersettings,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_SECTION_SETTINGS(
        obj_section_settings: *const dwg_obj_section_settings,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_SECTION_SETTINGS(
        obj_section_settings: *const dwg_obj_section_settings,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_SKYLIGHT_BACKGROUND(
        obj_skylight_background: *const dwg_obj_skylight_background,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_SKYLIGHT_BACKGROUND(
        obj_skylight_background: *const dwg_obj_skylight_background,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_SOLID_BACKGROUND(
        obj_solid_background: *const dwg_obj_solid_background,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_SOLID_BACKGROUND(
        obj_solid_background: *const dwg_obj_solid_background,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_SPATIAL_INDEX(
        obj_spatial_index: *const dwg_obj_spatial_index,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_SPATIAL_INDEX(
        obj_spatial_index: *const dwg_obj_spatial_index,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_SUN(
        obj_sun: *const dwg_obj_sun,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_SUN(
        obj_sun: *const dwg_obj_sun,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_TABLESTYLE(
        obj_tablestyle: *const dwg_obj_tablestyle,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_TABLESTYLE(
        obj_tablestyle: *const dwg_obj_tablestyle,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_TEXTOBJECTCONTEXTDATA(
        obj_textobjectcontextdata: *const dwg_obj_textobjectcontextdata,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_TEXTOBJECTCONTEXTDATA(
        obj_textobjectcontextdata: *const dwg_obj_textobjectcontextdata,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ASSOCARRAYMODIFYPARAMETERS(
        obj_assocarraymodifyparameters: *const dwg_obj_assocarraymodifyparameters,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ASSOCARRAYMODIFYPARAMETERS(
        obj_assocarraymodifyparameters: *const dwg_obj_assocarraymodifyparameters,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ASSOCARRAYPATHPARAMETERS(
        obj_assocarraypathparameters: *const dwg_obj_assocarraypathparameters,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ASSOCARRAYPATHPARAMETERS(
        obj_assocarraypathparameters: *const dwg_obj_assocarraypathparameters,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ASSOCARRAYPOLARPARAMETERS(
        obj_assocarraypolarparameters: *const dwg_obj_assocarraypolarparameters,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ASSOCARRAYPOLARPARAMETERS(
        obj_assocarraypolarparameters: *const dwg_obj_assocarraypolarparameters,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ASSOCARRAYRECTANGULARPARAMETERS(
        obj_assocarrayrectangularparameters: *const dwg_obj_assocarrayrectangularparameters,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ASSOCARRAYRECTANGULARPARAMETERS(
        obj_assocarrayrectangularparameters: *const dwg_obj_assocarrayrectangularparameters,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    #[doc = " extract all owned entities from a block header (mspace or pspace)"]
    pub fn dwg_getall__3DFACE(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity__3DFACE;
}
extern "C" {
    pub fn dwg_getall__3DSOLID(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity__3DSOLID;
}
extern "C" {
    pub fn dwg_getall_ARC(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_ARC;
}
extern "C" {
    pub fn dwg_getall_ATTDEF(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_ATTDEF;
}
extern "C" {
    pub fn dwg_getall_ATTRIB(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_ATTRIB;
}
extern "C" {
    pub fn dwg_getall_BLOCK(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_BLOCK;
}
extern "C" {
    pub fn dwg_getall_BODY(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_BODY;
}
extern "C" {
    pub fn dwg_getall_CIRCLE(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_CIRCLE;
}
extern "C" {
    pub fn dwg_getall_DIMENSION_ALIGNED(
        hdr: *mut Dwg_Object_Ref,
    ) -> *mut *mut Dwg_Entity_DIMENSION_ALIGNED;
}
extern "C" {
    pub fn dwg_getall_DIMENSION_ANG2LN(
        hdr: *mut Dwg_Object_Ref,
    ) -> *mut *mut Dwg_Entity_DIMENSION_ANG2LN;
}
extern "C" {
    pub fn dwg_getall_DIMENSION_ANG3PT(
        hdr: *mut Dwg_Object_Ref,
    ) -> *mut *mut Dwg_Entity_DIMENSION_ANG3PT;
}
extern "C" {
    pub fn dwg_getall_DIMENSION_DIAMETER(
        hdr: *mut Dwg_Object_Ref,
    ) -> *mut *mut Dwg_Entity_DIMENSION_DIAMETER;
}
extern "C" {
    pub fn dwg_getall_DIMENSION_LINEAR(
        hdr: *mut Dwg_Object_Ref,
    ) -> *mut *mut Dwg_Entity_DIMENSION_LINEAR;
}
extern "C" {
    pub fn dwg_getall_DIMENSION_ORDINATE(
        hdr: *mut Dwg_Object_Ref,
    ) -> *mut *mut Dwg_Entity_DIMENSION_ORDINATE;
}
extern "C" {
    pub fn dwg_getall_DIMENSION_RADIUS(
        hdr: *mut Dwg_Object_Ref,
    ) -> *mut *mut Dwg_Entity_DIMENSION_RADIUS;
}
extern "C" {
    pub fn dwg_getall_ELLIPSE(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_ELLIPSE;
}
extern "C" {
    pub fn dwg_getall_ENDBLK(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_ENDBLK;
}
extern "C" {
    pub fn dwg_getall_INSERT(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_INSERT;
}
extern "C" {
    pub fn dwg_getall_LEADER(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_LEADER;
}
extern "C" {
    pub fn dwg_getall_LINE(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_LINE;
}
extern "C" {
    pub fn dwg_getall_LOAD(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_LOAD;
}
extern "C" {
    pub fn dwg_getall_MINSERT(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_MINSERT;
}
extern "C" {
    pub fn dwg_getall_MLINE(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_MLINE;
}
extern "C" {
    pub fn dwg_getall_MTEXT(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_MTEXT;
}
extern "C" {
    pub fn dwg_getall_OLEFRAME(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_OLEFRAME;
}
extern "C" {
    pub fn dwg_getall_POINT(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_POINT;
}
extern "C" {
    pub fn dwg_getall_POLYLINE_2D(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_POLYLINE_2D;
}
extern "C" {
    pub fn dwg_getall_POLYLINE_3D(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_POLYLINE_3D;
}
extern "C" {
    pub fn dwg_getall_POLYLINE_MESH(hdr: *mut Dwg_Object_Ref)
        -> *mut *mut Dwg_Entity_POLYLINE_MESH;
}
extern "C" {
    pub fn dwg_getall_POLYLINE_PFACE(
        hdr: *mut Dwg_Object_Ref,
    ) -> *mut *mut Dwg_Entity_POLYLINE_PFACE;
}
extern "C" {
    pub fn dwg_getall_PROXY_ENTITY(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_PROXY_ENTITY;
}
extern "C" {
    pub fn dwg_getall_RAY(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_RAY;
}
extern "C" {
    pub fn dwg_getall_REGION(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_REGION;
}
extern "C" {
    pub fn dwg_getall_SEQEND(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_SEQEND;
}
extern "C" {
    pub fn dwg_getall_SHAPE(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_SHAPE;
}
extern "C" {
    pub fn dwg_getall_SOLID(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_SOLID;
}
extern "C" {
    pub fn dwg_getall_SPLINE(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_SPLINE;
}
extern "C" {
    pub fn dwg_getall_TEXT(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_TEXT;
}
extern "C" {
    pub fn dwg_getall_TOLERANCE(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_TOLERANCE;
}
extern "C" {
    pub fn dwg_getall_TRACE(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_TRACE;
}
extern "C" {
    pub fn dwg_getall_UNKNOWN_ENT(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_UNKNOWN_ENT;
}
extern "C" {
    pub fn dwg_getall_VERTEX_2D(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_VERTEX_2D;
}
extern "C" {
    pub fn dwg_getall_VERTEX_3D(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_VERTEX_3D;
}
extern "C" {
    pub fn dwg_getall_VERTEX_MESH(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_VERTEX_MESH;
}
extern "C" {
    pub fn dwg_getall_VERTEX_PFACE(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_VERTEX_PFACE;
}
extern "C" {
    pub fn dwg_getall_VERTEX_PFACE_FACE(
        hdr: *mut Dwg_Object_Ref,
    ) -> *mut *mut Dwg_Entity_VERTEX_PFACE_FACE;
}
extern "C" {
    pub fn dwg_getall_VIEWPORT(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_VIEWPORT;
}
extern "C" {
    pub fn dwg_getall_XLINE(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_XLINE;
}
extern "C" {
    pub fn dwg_getall__3DLINE(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity__3DLINE;
}
extern "C" {
    pub fn dwg_getall_CAMERA(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_CAMERA;
}
extern "C" {
    pub fn dwg_getall_DGNUNDERLAY(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_DGNUNDERLAY;
}
extern "C" {
    pub fn dwg_getall_DWFUNDERLAY(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_DWFUNDERLAY;
}
extern "C" {
    pub fn dwg_getall_ENDREP(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_ENDREP;
}
extern "C" {
    pub fn dwg_getall_HATCH(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_HATCH;
}
extern "C" {
    pub fn dwg_getall_IMAGE(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_IMAGE;
}
extern "C" {
    pub fn dwg_getall_JUMP(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_JUMP;
}
extern "C" {
    pub fn dwg_getall_LIGHT(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_LIGHT;
}
extern "C" {
    pub fn dwg_getall_LWPOLYLINE(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_LWPOLYLINE;
}
extern "C" {
    pub fn dwg_getall_MESH(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_MESH;
}
extern "C" {
    pub fn dwg_getall_MULTILEADER(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_MULTILEADER;
}
extern "C" {
    pub fn dwg_getall_OLE2FRAME(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_OLE2FRAME;
}
extern "C" {
    pub fn dwg_getall_PDFUNDERLAY(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_PDFUNDERLAY;
}
extern "C" {
    pub fn dwg_getall_REPEAT(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_REPEAT;
}
extern "C" {
    pub fn dwg_getall_SECTIONOBJECT(hdr: *mut Dwg_Object_Ref)
        -> *mut *mut Dwg_Entity_SECTIONOBJECT;
}
extern "C" {
    pub fn dwg_getall_ARC_DIMENSION(hdr: *mut Dwg_Object_Ref)
        -> *mut *mut Dwg_Entity_ARC_DIMENSION;
}
extern "C" {
    pub fn dwg_getall_HELIX(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_HELIX;
}
extern "C" {
    pub fn dwg_getall_LARGE_RADIAL_DIMENSION(
        hdr: *mut Dwg_Object_Ref,
    ) -> *mut *mut Dwg_Entity_LARGE_RADIAL_DIMENSION;
}
extern "C" {
    pub fn dwg_getall_PLANESURFACE(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_PLANESURFACE;
}
extern "C" {
    pub fn dwg_getall_POINTCLOUD(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_POINTCLOUD;
}
extern "C" {
    pub fn dwg_getall_POINTCLOUDEX(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_POINTCLOUDEX;
}
extern "C" {
    pub fn dwg_getall_WIPEOUT(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_WIPEOUT;
}
extern "C" {
    pub fn dwg_getall_ALIGNMENTPARAMETERENTITY(
        hdr: *mut Dwg_Object_Ref,
    ) -> *mut *mut Dwg_Entity_ALIGNMENTPARAMETERENTITY;
}
extern "C" {
    pub fn dwg_getall_ARCALIGNEDTEXT(
        hdr: *mut Dwg_Object_Ref,
    ) -> *mut *mut Dwg_Entity_ARCALIGNEDTEXT;
}
extern "C" {
    pub fn dwg_getall_BASEPOINTPARAMETERENTITY(
        hdr: *mut Dwg_Object_Ref,
    ) -> *mut *mut Dwg_Entity_BASEPOINTPARAMETERENTITY;
}
extern "C" {
    pub fn dwg_getall_EXTRUDEDSURFACE(
        hdr: *mut Dwg_Object_Ref,
    ) -> *mut *mut Dwg_Entity_EXTRUDEDSURFACE;
}
extern "C" {
    pub fn dwg_getall_FLIPGRIPENTITY(
        hdr: *mut Dwg_Object_Ref,
    ) -> *mut *mut Dwg_Entity_FLIPGRIPENTITY;
}
extern "C" {
    pub fn dwg_getall_FLIPPARAMETERENTITY(
        hdr: *mut Dwg_Object_Ref,
    ) -> *mut *mut Dwg_Entity_FLIPPARAMETERENTITY;
}
extern "C" {
    pub fn dwg_getall_GEOPOSITIONMARKER(
        hdr: *mut Dwg_Object_Ref,
    ) -> *mut *mut Dwg_Entity_GEOPOSITIONMARKER;
}
extern "C" {
    pub fn dwg_getall_LAYOUTPRINTCONFIG(
        hdr: *mut Dwg_Object_Ref,
    ) -> *mut *mut Dwg_Entity_LAYOUTPRINTCONFIG;
}
extern "C" {
    pub fn dwg_getall_LINEARGRIPENTITY(
        hdr: *mut Dwg_Object_Ref,
    ) -> *mut *mut Dwg_Entity_LINEARGRIPENTITY;
}
extern "C" {
    pub fn dwg_getall_LINEARPARAMETERENTITY(
        hdr: *mut Dwg_Object_Ref,
    ) -> *mut *mut Dwg_Entity_LINEARPARAMETERENTITY;
}
extern "C" {
    pub fn dwg_getall_LOFTEDSURFACE(hdr: *mut Dwg_Object_Ref)
        -> *mut *mut Dwg_Entity_LOFTEDSURFACE;
}
extern "C" {
    pub fn dwg_getall_MPOLYGON(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_MPOLYGON;
}
extern "C" {
    pub fn dwg_getall_NAVISWORKSMODEL(
        hdr: *mut Dwg_Object_Ref,
    ) -> *mut *mut Dwg_Entity_NAVISWORKSMODEL;
}
extern "C" {
    pub fn dwg_getall_NURBSURFACE(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_NURBSURFACE;
}
extern "C" {
    pub fn dwg_getall_POINTPARAMETERENTITY(
        hdr: *mut Dwg_Object_Ref,
    ) -> *mut *mut Dwg_Entity_POINTPARAMETERENTITY;
}
extern "C" {
    pub fn dwg_getall_POLARGRIPENTITY(
        hdr: *mut Dwg_Object_Ref,
    ) -> *mut *mut Dwg_Entity_POLARGRIPENTITY;
}
extern "C" {
    pub fn dwg_getall_REVOLVEDSURFACE(
        hdr: *mut Dwg_Object_Ref,
    ) -> *mut *mut Dwg_Entity_REVOLVEDSURFACE;
}
extern "C" {
    pub fn dwg_getall_ROTATIONGRIPENTITY(
        hdr: *mut Dwg_Object_Ref,
    ) -> *mut *mut Dwg_Entity_ROTATIONGRIPENTITY;
}
extern "C" {
    pub fn dwg_getall_ROTATIONPARAMETERENTITY(
        hdr: *mut Dwg_Object_Ref,
    ) -> *mut *mut Dwg_Entity_ROTATIONPARAMETERENTITY;
}
extern "C" {
    pub fn dwg_getall_RTEXT(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_RTEXT;
}
extern "C" {
    pub fn dwg_getall_SWEPTSURFACE(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_SWEPTSURFACE;
}
extern "C" {
    pub fn dwg_getall_TABLE(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_TABLE;
}
extern "C" {
    pub fn dwg_getall_VISIBILITYGRIPENTITY(
        hdr: *mut Dwg_Object_Ref,
    ) -> *mut *mut Dwg_Entity_VISIBILITYGRIPENTITY;
}
extern "C" {
    pub fn dwg_getall_VISIBILITYPARAMETERENTITY(
        hdr: *mut Dwg_Object_Ref,
    ) -> *mut *mut Dwg_Entity_VISIBILITYPARAMETERENTITY;
}
extern "C" {
    pub fn dwg_getall_XYGRIPENTITY(hdr: *mut Dwg_Object_Ref) -> *mut *mut Dwg_Entity_XYGRIPENTITY;
}
extern "C" {
    pub fn dwg_getall_XYPARAMETERENTITY(
        hdr: *mut Dwg_Object_Ref,
    ) -> *mut *mut Dwg_Entity_XYPARAMETERENTITY;
}
extern "C" {
    #[doc = " \\fn Dwg_Object_OBJECT dwg_getall_OBJECT(Dwg_Data *dwg)\n Extracts all objects of this type from a dwg, and returns a malloced\n NULL-terminated array."]
    pub fn dwg_getall_APPID(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_APPID;
}
extern "C" {
    pub fn dwg_getall_APPID_CONTROL(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_APPID_CONTROL;
}
extern "C" {
    pub fn dwg_getall_BLOCK_CONTROL(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_BLOCK_CONTROL;
}
extern "C" {
    pub fn dwg_getall_BLOCK_HEADER(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_BLOCK_HEADER;
}
extern "C" {
    pub fn dwg_getall_DICTIONARY(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_DICTIONARY;
}
extern "C" {
    pub fn dwg_getall_DIMSTYLE(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_DIMSTYLE;
}
extern "C" {
    pub fn dwg_getall_DIMSTYLE_CONTROL(dwg: *mut Dwg_Data)
        -> *mut *mut Dwg_Object_DIMSTYLE_CONTROL;
}
extern "C" {
    pub fn dwg_getall_DUMMY(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_DUMMY;
}
extern "C" {
    pub fn dwg_getall_LAYER(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_LAYER;
}
extern "C" {
    pub fn dwg_getall_LAYER_CONTROL(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_LAYER_CONTROL;
}
extern "C" {
    pub fn dwg_getall_LONG_TRANSACTION(dwg: *mut Dwg_Data)
        -> *mut *mut Dwg_Object_LONG_TRANSACTION;
}
extern "C" {
    pub fn dwg_getall_LTYPE(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_LTYPE;
}
extern "C" {
    pub fn dwg_getall_LTYPE_CONTROL(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_LTYPE_CONTROL;
}
extern "C" {
    pub fn dwg_getall_MLINESTYLE(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_MLINESTYLE;
}
extern "C" {
    pub fn dwg_getall_STYLE(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_STYLE;
}
extern "C" {
    pub fn dwg_getall_STYLE_CONTROL(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_STYLE_CONTROL;
}
extern "C" {
    pub fn dwg_getall_UCS(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_UCS;
}
extern "C" {
    pub fn dwg_getall_UCS_CONTROL(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_UCS_CONTROL;
}
extern "C" {
    pub fn dwg_getall_UNKNOWN_OBJ(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_UNKNOWN_OBJ;
}
extern "C" {
    pub fn dwg_getall_VIEW(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_VIEW;
}
extern "C" {
    pub fn dwg_getall_VIEW_CONTROL(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_VIEW_CONTROL;
}
extern "C" {
    pub fn dwg_getall_VPORT(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_VPORT;
}
extern "C" {
    pub fn dwg_getall_VPORT_CONTROL(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_VPORT_CONTROL;
}
extern "C" {
    pub fn dwg_getall_VX_CONTROL(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_VX_CONTROL;
}
extern "C" {
    pub fn dwg_getall_VX_TABLE_RECORD(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_VX_TABLE_RECORD;
}
extern "C" {
    pub fn dwg_getall_ACSH_BOOLEAN_CLASS(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_ACSH_BOOLEAN_CLASS;
}
extern "C" {
    pub fn dwg_getall_ACSH_BOX_CLASS(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_ACSH_BOX_CLASS;
}
extern "C" {
    pub fn dwg_getall_ACSH_CONE_CLASS(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_ACSH_CONE_CLASS;
}
extern "C" {
    pub fn dwg_getall_ACSH_CYLINDER_CLASS(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_ACSH_CYLINDER_CLASS;
}
extern "C" {
    pub fn dwg_getall_ACSH_FILLET_CLASS(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_ACSH_FILLET_CLASS;
}
extern "C" {
    pub fn dwg_getall_ACSH_HISTORY_CLASS(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_ACSH_HISTORY_CLASS;
}
extern "C" {
    pub fn dwg_getall_ACSH_SPHERE_CLASS(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_ACSH_SPHERE_CLASS;
}
extern "C" {
    pub fn dwg_getall_ACSH_TORUS_CLASS(dwg: *mut Dwg_Data)
        -> *mut *mut Dwg_Object_ACSH_TORUS_CLASS;
}
extern "C" {
    pub fn dwg_getall_ACSH_WEDGE_CLASS(dwg: *mut Dwg_Data)
        -> *mut *mut Dwg_Object_ACSH_WEDGE_CLASS;
}
extern "C" {
    pub fn dwg_getall_BLOCKALIGNMENTGRIP(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_BLOCKALIGNMENTGRIP;
}
extern "C" {
    pub fn dwg_getall_BLOCKALIGNMENTPARAMETER(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_BLOCKALIGNMENTPARAMETER;
}
extern "C" {
    pub fn dwg_getall_BLOCKBASEPOINTPARAMETER(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_BLOCKBASEPOINTPARAMETER;
}
extern "C" {
    pub fn dwg_getall_BLOCKFLIPACTION(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_BLOCKFLIPACTION;
}
extern "C" {
    pub fn dwg_getall_BLOCKFLIPGRIP(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_BLOCKFLIPGRIP;
}
extern "C" {
    pub fn dwg_getall_BLOCKFLIPPARAMETER(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_BLOCKFLIPPARAMETER;
}
extern "C" {
    pub fn dwg_getall_BLOCKGRIPLOCATIONCOMPONENT(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_BLOCKGRIPLOCATIONCOMPONENT;
}
extern "C" {
    pub fn dwg_getall_BLOCKLINEARGRIP(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_BLOCKLINEARGRIP;
}
extern "C" {
    pub fn dwg_getall_BLOCKLOOKUPGRIP(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_BLOCKLOOKUPGRIP;
}
extern "C" {
    pub fn dwg_getall_BLOCKMOVEACTION(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_BLOCKMOVEACTION;
}
extern "C" {
    pub fn dwg_getall_BLOCKROTATEACTION(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_BLOCKROTATEACTION;
}
extern "C" {
    pub fn dwg_getall_BLOCKROTATIONGRIP(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_BLOCKROTATIONGRIP;
}
extern "C" {
    pub fn dwg_getall_BLOCKSCALEACTION(dwg: *mut Dwg_Data)
        -> *mut *mut Dwg_Object_BLOCKSCALEACTION;
}
extern "C" {
    pub fn dwg_getall_BLOCKVISIBILITYGRIP(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_BLOCKVISIBILITYGRIP;
}
extern "C" {
    pub fn dwg_getall_CELLSTYLEMAP(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_CELLSTYLEMAP;
}
extern "C" {
    pub fn dwg_getall_DETAILVIEWSTYLE(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_DETAILVIEWSTYLE;
}
extern "C" {
    pub fn dwg_getall_DICTIONARYVAR(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_DICTIONARYVAR;
}
extern "C" {
    pub fn dwg_getall_DICTIONARYWDFLT(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_DICTIONARYWDFLT;
}
extern "C" {
    pub fn dwg_getall_DYNAMICBLOCKPURGEPREVENTER(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_DYNAMICBLOCKPURGEPREVENTER;
}
extern "C" {
    pub fn dwg_getall_FIELD(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_FIELD;
}
extern "C" {
    pub fn dwg_getall_FIELDLIST(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_FIELDLIST;
}
extern "C" {
    pub fn dwg_getall_GEODATA(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_GEODATA;
}
extern "C" {
    pub fn dwg_getall_GROUP(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_GROUP;
}
extern "C" {
    pub fn dwg_getall_IDBUFFER(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_IDBUFFER;
}
extern "C" {
    pub fn dwg_getall_IMAGEDEF(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_IMAGEDEF;
}
extern "C" {
    pub fn dwg_getall_IMAGEDEF_REACTOR(dwg: *mut Dwg_Data)
        -> *mut *mut Dwg_Object_IMAGEDEF_REACTOR;
}
extern "C" {
    pub fn dwg_getall_INDEX(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_INDEX;
}
extern "C" {
    pub fn dwg_getall_LAYERFILTER(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_LAYERFILTER;
}
extern "C" {
    pub fn dwg_getall_LAYER_INDEX(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_LAYER_INDEX;
}
extern "C" {
    pub fn dwg_getall_LAYOUT(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_LAYOUT;
}
extern "C" {
    pub fn dwg_getall_PLACEHOLDER(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_PLACEHOLDER;
}
extern "C" {
    pub fn dwg_getall_PLOTSETTINGS(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_PLOTSETTINGS;
}
extern "C" {
    pub fn dwg_getall_RASTERVARIABLES(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_RASTERVARIABLES;
}
extern "C" {
    pub fn dwg_getall_SCALE(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_SCALE;
}
extern "C" {
    pub fn dwg_getall_SECTIONVIEWSTYLE(dwg: *mut Dwg_Data)
        -> *mut *mut Dwg_Object_SECTIONVIEWSTYLE;
}
extern "C" {
    pub fn dwg_getall_SECTION_MANAGER(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_SECTION_MANAGER;
}
extern "C" {
    pub fn dwg_getall_SORTENTSTABLE(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_SORTENTSTABLE;
}
extern "C" {
    pub fn dwg_getall_SPATIAL_FILTER(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_SPATIAL_FILTER;
}
extern "C" {
    pub fn dwg_getall_TABLEGEOMETRY(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_TABLEGEOMETRY;
}
extern "C" {
    pub fn dwg_getall_VBA_PROJECT(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_VBA_PROJECT;
}
extern "C" {
    pub fn dwg_getall_VISUALSTYLE(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_VISUALSTYLE;
}
extern "C" {
    pub fn dwg_getall_WIPEOUTVARIABLES(dwg: *mut Dwg_Data)
        -> *mut *mut Dwg_Object_WIPEOUTVARIABLES;
}
extern "C" {
    pub fn dwg_getall_XRECORD(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_XRECORD;
}
extern "C" {
    pub fn dwg_getall_PDFDEFINITION(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_PDFDEFINITION;
}
extern "C" {
    pub fn dwg_getall_DGNDEFINITION(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_DGNDEFINITION;
}
extern "C" {
    pub fn dwg_getall_DWFDEFINITION(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_DWFDEFINITION;
}
extern "C" {
    pub fn dwg_getall_ACSH_BREP_CLASS(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_ACSH_BREP_CLASS;
}
extern "C" {
    pub fn dwg_getall_ACSH_CHAMFER_CLASS(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_ACSH_CHAMFER_CLASS;
}
extern "C" {
    pub fn dwg_getall_ACSH_PYRAMID_CLASS(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_ACSH_PYRAMID_CLASS;
}
extern "C" {
    pub fn dwg_getall_ALDIMOBJECTCONTEXTDATA(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_ALDIMOBJECTCONTEXTDATA;
}
extern "C" {
    pub fn dwg_getall_ASSOC2DCONSTRAINTGROUP(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_ASSOC2DCONSTRAINTGROUP;
}
extern "C" {
    pub fn dwg_getall_ASSOCACTION(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_ASSOCACTION;
}
extern "C" {
    pub fn dwg_getall_ASSOCACTIONPARAM(dwg: *mut Dwg_Data)
        -> *mut *mut Dwg_Object_ASSOCACTIONPARAM;
}
extern "C" {
    pub fn dwg_getall_ASSOCARRAYACTIONBODY(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_ASSOCARRAYACTIONBODY;
}
extern "C" {
    pub fn dwg_getall_ASSOCASMBODYACTIONPARAM(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_ASSOCASMBODYACTIONPARAM;
}
extern "C" {
    pub fn dwg_getall_ASSOCBLENDSURFACEACTIONBODY(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_ASSOCBLENDSURFACEACTIONBODY;
}
extern "C" {
    pub fn dwg_getall_ASSOCCOMPOUNDACTIONPARAM(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_ASSOCCOMPOUNDACTIONPARAM;
}
extern "C" {
    pub fn dwg_getall_ASSOCDEPENDENCY(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_ASSOCDEPENDENCY;
}
extern "C" {
    pub fn dwg_getall_ASSOCDIMDEPENDENCYBODY(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_ASSOCDIMDEPENDENCYBODY;
}
extern "C" {
    pub fn dwg_getall_ASSOCEXTENDSURFACEACTIONBODY(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_ASSOCEXTENDSURFACEACTIONBODY;
}
extern "C" {
    pub fn dwg_getall_ASSOCEXTRUDEDSURFACEACTIONBODY(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_ASSOCEXTRUDEDSURFACEACTIONBODY;
}
extern "C" {
    pub fn dwg_getall_ASSOCFACEACTIONPARAM(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_ASSOCFACEACTIONPARAM;
}
extern "C" {
    pub fn dwg_getall_ASSOCFILLETSURFACEACTIONBODY(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_ASSOCFILLETSURFACEACTIONBODY;
}
extern "C" {
    pub fn dwg_getall_ASSOCGEOMDEPENDENCY(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_ASSOCGEOMDEPENDENCY;
}
extern "C" {
    pub fn dwg_getall_ASSOCLOFTEDSURFACEACTIONBODY(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_ASSOCLOFTEDSURFACEACTIONBODY;
}
extern "C" {
    pub fn dwg_getall_ASSOCNETWORK(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_ASSOCNETWORK;
}
extern "C" {
    pub fn dwg_getall_ASSOCNETWORKSURFACEACTIONBODY(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_ASSOCNETWORKSURFACEACTIONBODY;
}
extern "C" {
    pub fn dwg_getall_ASSOCOBJECTACTIONPARAM(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_ASSOCOBJECTACTIONPARAM;
}
extern "C" {
    pub fn dwg_getall_ASSOCOFFSETSURFACEACTIONBODY(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_ASSOCOFFSETSURFACEACTIONBODY;
}
extern "C" {
    pub fn dwg_getall_ASSOCOSNAPPOINTREFACTIONPARAM(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_ASSOCOSNAPPOINTREFACTIONPARAM;
}
extern "C" {
    pub fn dwg_getall_ASSOCPATCHSURFACEACTIONBODY(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_ASSOCPATCHSURFACEACTIONBODY;
}
extern "C" {
    pub fn dwg_getall_ASSOCPATHACTIONPARAM(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_ASSOCPATHACTIONPARAM;
}
extern "C" {
    pub fn dwg_getall_ASSOCPLANESURFACEACTIONBODY(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_ASSOCPLANESURFACEACTIONBODY;
}
extern "C" {
    pub fn dwg_getall_ASSOCPOINTREFACTIONPARAM(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_ASSOCPOINTREFACTIONPARAM;
}
extern "C" {
    pub fn dwg_getall_ASSOCREVOLVEDSURFACEACTIONBODY(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_ASSOCREVOLVEDSURFACEACTIONBODY;
}
extern "C" {
    pub fn dwg_getall_ASSOCTRIMSURFACEACTIONBODY(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_ASSOCTRIMSURFACEACTIONBODY;
}
extern "C" {
    pub fn dwg_getall_ASSOCVALUEDEPENDENCY(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_ASSOCVALUEDEPENDENCY;
}
extern "C" {
    pub fn dwg_getall_ASSOCVARIABLE(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_ASSOCVARIABLE;
}
extern "C" {
    pub fn dwg_getall_ASSOCVERTEXACTIONPARAM(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_ASSOCVERTEXACTIONPARAM;
}
extern "C" {
    pub fn dwg_getall_BLKREFOBJECTCONTEXTDATA(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_BLKREFOBJECTCONTEXTDATA;
}
extern "C" {
    pub fn dwg_getall_BLOCKALIGNEDCONSTRAINTPARAMETER(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_BLOCKALIGNEDCONSTRAINTPARAMETER;
}
extern "C" {
    pub fn dwg_getall_BLOCKANGULARCONSTRAINTPARAMETER(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_BLOCKANGULARCONSTRAINTPARAMETER;
}
extern "C" {
    pub fn dwg_getall_BLOCKARRAYACTION(dwg: *mut Dwg_Data)
        -> *mut *mut Dwg_Object_BLOCKARRAYACTION;
}
extern "C" {
    pub fn dwg_getall_BLOCKDIAMETRICCONSTRAINTPARAMETER(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_BLOCKDIAMETRICCONSTRAINTPARAMETER;
}
extern "C" {
    pub fn dwg_getall_BLOCKHORIZONTALCONSTRAINTPARAMETER(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_BLOCKHORIZONTALCONSTRAINTPARAMETER;
}
extern "C" {
    pub fn dwg_getall_BLOCKLINEARCONSTRAINTPARAMETER(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_BLOCKLINEARCONSTRAINTPARAMETER;
}
extern "C" {
    pub fn dwg_getall_BLOCKLINEARPARAMETER(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_BLOCKLINEARPARAMETER;
}
extern "C" {
    pub fn dwg_getall_BLOCKLOOKUPACTION(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_BLOCKLOOKUPACTION;
}
extern "C" {
    pub fn dwg_getall_BLOCKLOOKUPPARAMETER(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_BLOCKLOOKUPPARAMETER;
}
extern "C" {
    pub fn dwg_getall_BLOCKPARAMDEPENDENCYBODY(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_BLOCKPARAMDEPENDENCYBODY;
}
extern "C" {
    pub fn dwg_getall_BLOCKPOINTPARAMETER(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_BLOCKPOINTPARAMETER;
}
extern "C" {
    pub fn dwg_getall_BLOCKPOLARGRIP(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_BLOCKPOLARGRIP;
}
extern "C" {
    pub fn dwg_getall_BLOCKPOLARPARAMETER(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_BLOCKPOLARPARAMETER;
}
extern "C" {
    pub fn dwg_getall_BLOCKPOLARSTRETCHACTION(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_BLOCKPOLARSTRETCHACTION;
}
extern "C" {
    pub fn dwg_getall_BLOCKRADIALCONSTRAINTPARAMETER(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_BLOCKRADIALCONSTRAINTPARAMETER;
}
extern "C" {
    pub fn dwg_getall_BLOCKREPRESENTATION(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_BLOCKREPRESENTATION;
}
extern "C" {
    pub fn dwg_getall_BLOCKROTATIONPARAMETER(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_BLOCKROTATIONPARAMETER;
}
extern "C" {
    pub fn dwg_getall_BLOCKSTRETCHACTION(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_BLOCKSTRETCHACTION;
}
extern "C" {
    pub fn dwg_getall_BLOCKUSERPARAMETER(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_BLOCKUSERPARAMETER;
}
extern "C" {
    pub fn dwg_getall_BLOCKVERTICALCONSTRAINTPARAMETER(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_BLOCKVERTICALCONSTRAINTPARAMETER;
}
extern "C" {
    pub fn dwg_getall_BLOCKVISIBILITYPARAMETER(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_BLOCKVISIBILITYPARAMETER;
}
extern "C" {
    pub fn dwg_getall_BLOCKXYGRIP(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_BLOCKXYGRIP;
}
extern "C" {
    pub fn dwg_getall_BLOCKXYPARAMETER(dwg: *mut Dwg_Data)
        -> *mut *mut Dwg_Object_BLOCKXYPARAMETER;
}
extern "C" {
    pub fn dwg_getall_DATALINK(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_DATALINK;
}
extern "C" {
    pub fn dwg_getall_DBCOLOR(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_DBCOLOR;
}
extern "C" {
    pub fn dwg_getall_EVALUATION_GRAPH(dwg: *mut Dwg_Data)
        -> *mut *mut Dwg_Object_EVALUATION_GRAPH;
}
extern "C" {
    pub fn dwg_getall_FCFOBJECTCONTEXTDATA(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_FCFOBJECTCONTEXTDATA;
}
extern "C" {
    pub fn dwg_getall_GRADIENT_BACKGROUND(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_GRADIENT_BACKGROUND;
}
extern "C" {
    pub fn dwg_getall_GROUND_PLANE_BACKGROUND(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_GROUND_PLANE_BACKGROUND;
}
extern "C" {
    pub fn dwg_getall_IBL_BACKGROUND(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_IBL_BACKGROUND;
}
extern "C" {
    pub fn dwg_getall_IMAGE_BACKGROUND(dwg: *mut Dwg_Data)
        -> *mut *mut Dwg_Object_IMAGE_BACKGROUND;
}
extern "C" {
    pub fn dwg_getall_LEADEROBJECTCONTEXTDATA(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_LEADEROBJECTCONTEXTDATA;
}
extern "C" {
    pub fn dwg_getall_LIGHTLIST(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_LIGHTLIST;
}
extern "C" {
    pub fn dwg_getall_MATERIAL(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_MATERIAL;
}
extern "C" {
    pub fn dwg_getall_MENTALRAYRENDERSETTINGS(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_MENTALRAYRENDERSETTINGS;
}
extern "C" {
    pub fn dwg_getall_MLEADERSTYLE(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_MLEADERSTYLE;
}
extern "C" {
    pub fn dwg_getall_MTEXTOBJECTCONTEXTDATA(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_MTEXTOBJECTCONTEXTDATA;
}
extern "C" {
    pub fn dwg_getall_OBJECT_PTR(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_OBJECT_PTR;
}
extern "C" {
    pub fn dwg_getall_PARTIAL_VIEWING_INDEX(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_PARTIAL_VIEWING_INDEX;
}
extern "C" {
    pub fn dwg_getall_POINTCLOUDCOLORMAP(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_POINTCLOUDCOLORMAP;
}
extern "C" {
    pub fn dwg_getall_POINTCLOUDDEF(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_POINTCLOUDDEF;
}
extern "C" {
    pub fn dwg_getall_POINTCLOUDDEFEX(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_POINTCLOUDDEFEX;
}
extern "C" {
    pub fn dwg_getall_POINTCLOUDDEF_REACTOR(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_POINTCLOUDDEF_REACTOR;
}
extern "C" {
    pub fn dwg_getall_POINTCLOUDDEF_REACTOR_EX(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_POINTCLOUDDEF_REACTOR_EX;
}
extern "C" {
    pub fn dwg_getall_PROXY_OBJECT(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_PROXY_OBJECT;
}
extern "C" {
    pub fn dwg_getall_RAPIDRTRENDERSETTINGS(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_RAPIDRTRENDERSETTINGS;
}
extern "C" {
    pub fn dwg_getall_RENDERENTRY(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_RENDERENTRY;
}
extern "C" {
    pub fn dwg_getall_RENDERENVIRONMENT(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_RENDERENVIRONMENT;
}
extern "C" {
    pub fn dwg_getall_RENDERGLOBAL(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_RENDERGLOBAL;
}
extern "C" {
    pub fn dwg_getall_RENDERSETTINGS(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_RENDERSETTINGS;
}
extern "C" {
    pub fn dwg_getall_SECTION_SETTINGS(dwg: *mut Dwg_Data)
        -> *mut *mut Dwg_Object_SECTION_SETTINGS;
}
extern "C" {
    pub fn dwg_getall_SKYLIGHT_BACKGROUND(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_SKYLIGHT_BACKGROUND;
}
extern "C" {
    pub fn dwg_getall_SOLID_BACKGROUND(dwg: *mut Dwg_Data)
        -> *mut *mut Dwg_Object_SOLID_BACKGROUND;
}
extern "C" {
    pub fn dwg_getall_SPATIAL_INDEX(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_SPATIAL_INDEX;
}
extern "C" {
    pub fn dwg_getall_SUN(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_SUN;
}
extern "C" {
    pub fn dwg_getall_TABLESTYLE(dwg: *mut Dwg_Data) -> *mut *mut Dwg_Object_TABLESTYLE;
}
extern "C" {
    pub fn dwg_getall_TEXTOBJECTCONTEXTDATA(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_TEXTOBJECTCONTEXTDATA;
}
extern "C" {
    pub fn dwg_getall_ASSOCARRAYMODIFYPARAMETERS(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_ASSOCARRAYMODIFYPARAMETERS;
}
extern "C" {
    pub fn dwg_getall_ASSOCARRAYPATHPARAMETERS(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_ASSOCARRAYPATHPARAMETERS;
}
extern "C" {
    pub fn dwg_getall_ASSOCARRAYPOLARPARAMETERS(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_ASSOCARRAYPOLARPARAMETERS;
}
extern "C" {
    pub fn dwg_getall_ASSOCARRAYRECTANGULARPARAMETERS(
        dwg: *mut Dwg_Data,
    ) -> *mut *mut Dwg_Object_ASSOCARRAYRECTANGULARPARAMETERS;
}
extern "C" {
    #[doc = " \\fn Dwg_Entity_ENTITY *dwg_object_to_ENTITY(Dwg_Object *obj)\n cast a Dwg_Object to Entity"]
    pub fn dwg_object_to__3DFACE(obj: *mut Dwg_Object) -> *mut Dwg_Entity__3DFACE;
}
extern "C" {
    pub fn dwg_object_to__3DSOLID(obj: *mut Dwg_Object) -> *mut Dwg_Entity__3DSOLID;
}
extern "C" {
    pub fn dwg_object_to_ARC(obj: *mut Dwg_Object) -> *mut Dwg_Entity_ARC;
}
extern "C" {
    pub fn dwg_object_to_ATTDEF(obj: *mut Dwg_Object) -> *mut Dwg_Entity_ATTDEF;
}
extern "C" {
    pub fn dwg_object_to_ATTRIB(obj: *mut Dwg_Object) -> *mut Dwg_Entity_ATTRIB;
}
extern "C" {
    pub fn dwg_object_to_BLOCK(obj: *mut Dwg_Object) -> *mut Dwg_Entity_BLOCK;
}
extern "C" {
    pub fn dwg_object_to_BODY(obj: *mut Dwg_Object) -> *mut Dwg_Entity_BODY;
}
extern "C" {
    pub fn dwg_object_to_CIRCLE(obj: *mut Dwg_Object) -> *mut Dwg_Entity_CIRCLE;
}
extern "C" {
    pub fn dwg_object_to_DIMENSION_ALIGNED(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Entity_DIMENSION_ALIGNED;
}
extern "C" {
    pub fn dwg_object_to_DIMENSION_ANG2LN(obj: *mut Dwg_Object)
        -> *mut Dwg_Entity_DIMENSION_ANG2LN;
}
extern "C" {
    pub fn dwg_object_to_DIMENSION_ANG3PT(obj: *mut Dwg_Object)
        -> *mut Dwg_Entity_DIMENSION_ANG3PT;
}
extern "C" {
    pub fn dwg_object_to_DIMENSION_DIAMETER(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Entity_DIMENSION_DIAMETER;
}
extern "C" {
    pub fn dwg_object_to_DIMENSION_LINEAR(obj: *mut Dwg_Object)
        -> *mut Dwg_Entity_DIMENSION_LINEAR;
}
extern "C" {
    pub fn dwg_object_to_DIMENSION_ORDINATE(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Entity_DIMENSION_ORDINATE;
}
extern "C" {
    pub fn dwg_object_to_DIMENSION_RADIUS(obj: *mut Dwg_Object)
        -> *mut Dwg_Entity_DIMENSION_RADIUS;
}
extern "C" {
    pub fn dwg_object_to_ELLIPSE(obj: *mut Dwg_Object) -> *mut Dwg_Entity_ELLIPSE;
}
extern "C" {
    pub fn dwg_object_to_ENDBLK(obj: *mut Dwg_Object) -> *mut Dwg_Entity_ENDBLK;
}
extern "C" {
    pub fn dwg_object_to_INSERT(obj: *mut Dwg_Object) -> *mut Dwg_Entity_INSERT;
}
extern "C" {
    pub fn dwg_object_to_LEADER(obj: *mut Dwg_Object) -> *mut Dwg_Entity_LEADER;
}
extern "C" {
    pub fn dwg_object_to_LINE(obj: *mut Dwg_Object) -> *mut Dwg_Entity_LINE;
}
extern "C" {
    pub fn dwg_object_to_LOAD(obj: *mut Dwg_Object) -> *mut Dwg_Entity_LOAD;
}
extern "C" {
    pub fn dwg_object_to_MINSERT(obj: *mut Dwg_Object) -> *mut Dwg_Entity_MINSERT;
}
extern "C" {
    pub fn dwg_object_to_MLINE(obj: *mut Dwg_Object) -> *mut Dwg_Entity_MLINE;
}
extern "C" {
    pub fn dwg_object_to_MTEXT(obj: *mut Dwg_Object) -> *mut Dwg_Entity_MTEXT;
}
extern "C" {
    pub fn dwg_object_to_OLEFRAME(obj: *mut Dwg_Object) -> *mut Dwg_Entity_OLEFRAME;
}
extern "C" {
    pub fn dwg_object_to_POINT(obj: *mut Dwg_Object) -> *mut Dwg_Entity_POINT;
}
extern "C" {
    pub fn dwg_object_to_POLYLINE_2D(obj: *mut Dwg_Object) -> *mut Dwg_Entity_POLYLINE_2D;
}
extern "C" {
    pub fn dwg_object_to_POLYLINE_3D(obj: *mut Dwg_Object) -> *mut Dwg_Entity_POLYLINE_3D;
}
extern "C" {
    pub fn dwg_object_to_POLYLINE_MESH(obj: *mut Dwg_Object) -> *mut Dwg_Entity_POLYLINE_MESH;
}
extern "C" {
    pub fn dwg_object_to_POLYLINE_PFACE(obj: *mut Dwg_Object) -> *mut Dwg_Entity_POLYLINE_PFACE;
}
extern "C" {
    pub fn dwg_object_to_PROXY_ENTITY(obj: *mut Dwg_Object) -> *mut Dwg_Entity_PROXY_ENTITY;
}
extern "C" {
    pub fn dwg_object_to_RAY(obj: *mut Dwg_Object) -> *mut Dwg_Entity_RAY;
}
extern "C" {
    pub fn dwg_object_to_REGION(obj: *mut Dwg_Object) -> *mut Dwg_Entity_REGION;
}
extern "C" {
    pub fn dwg_object_to_SEQEND(obj: *mut Dwg_Object) -> *mut Dwg_Entity_SEQEND;
}
extern "C" {
    pub fn dwg_object_to_SHAPE(obj: *mut Dwg_Object) -> *mut Dwg_Entity_SHAPE;
}
extern "C" {
    pub fn dwg_object_to_SOLID(obj: *mut Dwg_Object) -> *mut Dwg_Entity_SOLID;
}
extern "C" {
    pub fn dwg_object_to_SPLINE(obj: *mut Dwg_Object) -> *mut Dwg_Entity_SPLINE;
}
extern "C" {
    pub fn dwg_object_to_TEXT(obj: *mut Dwg_Object) -> *mut Dwg_Entity_TEXT;
}
extern "C" {
    pub fn dwg_object_to_TOLERANCE(obj: *mut Dwg_Object) -> *mut Dwg_Entity_TOLERANCE;
}
extern "C" {
    pub fn dwg_object_to_TRACE(obj: *mut Dwg_Object) -> *mut Dwg_Entity_TRACE;
}
extern "C" {
    pub fn dwg_object_to_UNKNOWN_ENT(obj: *mut Dwg_Object) -> *mut Dwg_Entity_UNKNOWN_ENT;
}
extern "C" {
    pub fn dwg_object_to_VERTEX_2D(obj: *mut Dwg_Object) -> *mut Dwg_Entity_VERTEX_2D;
}
extern "C" {
    pub fn dwg_object_to_VERTEX_3D(obj: *mut Dwg_Object) -> *mut Dwg_Entity_VERTEX_3D;
}
extern "C" {
    pub fn dwg_object_to_VERTEX_MESH(obj: *mut Dwg_Object) -> *mut Dwg_Entity_VERTEX_MESH;
}
extern "C" {
    pub fn dwg_object_to_VERTEX_PFACE(obj: *mut Dwg_Object) -> *mut Dwg_Entity_VERTEX_PFACE;
}
extern "C" {
    pub fn dwg_object_to_VERTEX_PFACE_FACE(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Entity_VERTEX_PFACE_FACE;
}
extern "C" {
    pub fn dwg_object_to_VIEWPORT(obj: *mut Dwg_Object) -> *mut Dwg_Entity_VIEWPORT;
}
extern "C" {
    pub fn dwg_object_to_XLINE(obj: *mut Dwg_Object) -> *mut Dwg_Entity_XLINE;
}
extern "C" {
    pub fn dwg_object_to__3DLINE(obj: *mut Dwg_Object) -> *mut Dwg_Entity__3DLINE;
}
extern "C" {
    pub fn dwg_object_to_CAMERA(obj: *mut Dwg_Object) -> *mut Dwg_Entity_CAMERA;
}
extern "C" {
    pub fn dwg_object_to_DGNUNDERLAY(obj: *mut Dwg_Object) -> *mut Dwg_Entity_DGNUNDERLAY;
}
extern "C" {
    pub fn dwg_object_to_DWFUNDERLAY(obj: *mut Dwg_Object) -> *mut Dwg_Entity_DWFUNDERLAY;
}
extern "C" {
    pub fn dwg_object_to_ENDREP(obj: *mut Dwg_Object) -> *mut Dwg_Entity_ENDREP;
}
extern "C" {
    pub fn dwg_object_to_HATCH(obj: *mut Dwg_Object) -> *mut Dwg_Entity_HATCH;
}
extern "C" {
    pub fn dwg_object_to_IMAGE(obj: *mut Dwg_Object) -> *mut Dwg_Entity_IMAGE;
}
extern "C" {
    pub fn dwg_object_to_JUMP(obj: *mut Dwg_Object) -> *mut Dwg_Entity_JUMP;
}
extern "C" {
    pub fn dwg_object_to_LIGHT(obj: *mut Dwg_Object) -> *mut Dwg_Entity_LIGHT;
}
extern "C" {
    pub fn dwg_object_to_LWPOLYLINE(obj: *mut Dwg_Object) -> *mut Dwg_Entity_LWPOLYLINE;
}
extern "C" {
    pub fn dwg_object_to_MESH(obj: *mut Dwg_Object) -> *mut Dwg_Entity_MESH;
}
extern "C" {
    pub fn dwg_object_to_MULTILEADER(obj: *mut Dwg_Object) -> *mut Dwg_Entity_MULTILEADER;
}
extern "C" {
    pub fn dwg_object_to_OLE2FRAME(obj: *mut Dwg_Object) -> *mut Dwg_Entity_OLE2FRAME;
}
extern "C" {
    pub fn dwg_object_to_PDFUNDERLAY(obj: *mut Dwg_Object) -> *mut Dwg_Entity_PDFUNDERLAY;
}
extern "C" {
    pub fn dwg_object_to_REPEAT(obj: *mut Dwg_Object) -> *mut Dwg_Entity_REPEAT;
}
extern "C" {
    pub fn dwg_object_to_SECTIONOBJECT(obj: *mut Dwg_Object) -> *mut Dwg_Entity_SECTIONOBJECT;
}
extern "C" {
    pub fn dwg_object_to_ARC_DIMENSION(obj: *mut Dwg_Object) -> *mut Dwg_Entity_ARC_DIMENSION;
}
extern "C" {
    pub fn dwg_object_to_HELIX(obj: *mut Dwg_Object) -> *mut Dwg_Entity_HELIX;
}
extern "C" {
    pub fn dwg_object_to_LARGE_RADIAL_DIMENSION(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Entity_LARGE_RADIAL_DIMENSION;
}
extern "C" {
    pub fn dwg_object_to_LAYOUTPRINTCONFIG(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Entity_LAYOUTPRINTCONFIG;
}
extern "C" {
    pub fn dwg_object_to_PLANESURFACE(obj: *mut Dwg_Object) -> *mut Dwg_Entity_PLANESURFACE;
}
extern "C" {
    pub fn dwg_object_to_POINTCLOUD(obj: *mut Dwg_Object) -> *mut Dwg_Entity_POINTCLOUD;
}
extern "C" {
    pub fn dwg_object_to_POINTCLOUDEX(obj: *mut Dwg_Object) -> *mut Dwg_Entity_POINTCLOUDEX;
}
extern "C" {
    pub fn dwg_object_to_WIPEOUT(obj: *mut Dwg_Object) -> *mut Dwg_Entity_WIPEOUT;
}
extern "C" {
    #[doc = "     Functions created from macro to cast dwg object to object     *\n                 Usage :- dwg_object_to_OBJECT(),                  *\n            where OBJECT can be LAYER or BLOCK_HEADER              *\n/\n/**\n \\fn Dwg_Object_OBJECT *dwg_object_to_OBJECT(Dwg_Object *obj)\n cast a Dwg_Object to Object"]
    pub fn dwg_object_to_APPID(obj: *mut Dwg_Object) -> *mut Dwg_Object_APPID;
}
extern "C" {
    pub fn dwg_object_to_APPID_CONTROL(obj: *mut Dwg_Object) -> *mut Dwg_Object_APPID_CONTROL;
}
extern "C" {
    pub fn dwg_object_to_BLOCK_CONTROL(obj: *mut Dwg_Object) -> *mut Dwg_Object_BLOCK_CONTROL;
}
extern "C" {
    pub fn dwg_object_to_BLOCK_HEADER(obj: *mut Dwg_Object) -> *mut Dwg_Object_BLOCK_HEADER;
}
extern "C" {
    pub fn dwg_object_to_DICTIONARY(obj: *mut Dwg_Object) -> *mut Dwg_Object_DICTIONARY;
}
extern "C" {
    pub fn dwg_object_to_DIMSTYLE(obj: *mut Dwg_Object) -> *mut Dwg_Object_DIMSTYLE;
}
extern "C" {
    pub fn dwg_object_to_DIMSTYLE_CONTROL(obj: *mut Dwg_Object)
        -> *mut Dwg_Object_DIMSTYLE_CONTROL;
}
extern "C" {
    pub fn dwg_object_to_DUMMY(obj: *mut Dwg_Object) -> *mut Dwg_Object_DUMMY;
}
extern "C" {
    pub fn dwg_object_to_LAYER(obj: *mut Dwg_Object) -> *mut Dwg_Object_LAYER;
}
extern "C" {
    pub fn dwg_object_to_LAYER_CONTROL(obj: *mut Dwg_Object) -> *mut Dwg_Object_LAYER_CONTROL;
}
extern "C" {
    pub fn dwg_object_to_LONG_TRANSACTION(obj: *mut Dwg_Object)
        -> *mut Dwg_Object_LONG_TRANSACTION;
}
extern "C" {
    pub fn dwg_object_to_LTYPE(obj: *mut Dwg_Object) -> *mut Dwg_Object_LTYPE;
}
extern "C" {
    pub fn dwg_object_to_LTYPE_CONTROL(obj: *mut Dwg_Object) -> *mut Dwg_Object_LTYPE_CONTROL;
}
extern "C" {
    pub fn dwg_object_to_MLINESTYLE(obj: *mut Dwg_Object) -> *mut Dwg_Object_MLINESTYLE;
}
extern "C" {
    pub fn dwg_object_to_STYLE(obj: *mut Dwg_Object) -> *mut Dwg_Object_STYLE;
}
extern "C" {
    pub fn dwg_object_to_STYLE_CONTROL(obj: *mut Dwg_Object) -> *mut Dwg_Object_STYLE_CONTROL;
}
extern "C" {
    pub fn dwg_object_to_UCS(obj: *mut Dwg_Object) -> *mut Dwg_Object_UCS;
}
extern "C" {
    pub fn dwg_object_to_UCS_CONTROL(obj: *mut Dwg_Object) -> *mut Dwg_Object_UCS_CONTROL;
}
extern "C" {
    pub fn dwg_object_to_UNKNOWN_OBJ(obj: *mut Dwg_Object) -> *mut Dwg_Object_UNKNOWN_OBJ;
}
extern "C" {
    pub fn dwg_object_to_VIEW(obj: *mut Dwg_Object) -> *mut Dwg_Object_VIEW;
}
extern "C" {
    pub fn dwg_object_to_VIEW_CONTROL(obj: *mut Dwg_Object) -> *mut Dwg_Object_VIEW_CONTROL;
}
extern "C" {
    pub fn dwg_object_to_VPORT(obj: *mut Dwg_Object) -> *mut Dwg_Object_VPORT;
}
extern "C" {
    pub fn dwg_object_to_VPORT_CONTROL(obj: *mut Dwg_Object) -> *mut Dwg_Object_VPORT_CONTROL;
}
extern "C" {
    pub fn dwg_object_to_VX_CONTROL(obj: *mut Dwg_Object) -> *mut Dwg_Object_VX_CONTROL;
}
extern "C" {
    pub fn dwg_object_to_VX_TABLE_RECORD(obj: *mut Dwg_Object) -> *mut Dwg_Object_VX_TABLE_RECORD;
}
extern "C" {
    pub fn dwg_object_to_ACSH_BOOLEAN_CLASS(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_ACSH_BOOLEAN_CLASS;
}
extern "C" {
    pub fn dwg_object_to_ACSH_BOX_CLASS(obj: *mut Dwg_Object) -> *mut Dwg_Object_ACSH_BOX_CLASS;
}
extern "C" {
    pub fn dwg_object_to_ACSH_CONE_CLASS(obj: *mut Dwg_Object) -> *mut Dwg_Object_ACSH_CONE_CLASS;
}
extern "C" {
    pub fn dwg_object_to_ACSH_CYLINDER_CLASS(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_ACSH_CYLINDER_CLASS;
}
extern "C" {
    pub fn dwg_object_to_ACSH_FILLET_CLASS(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_ACSH_FILLET_CLASS;
}
extern "C" {
    pub fn dwg_object_to_ACSH_HISTORY_CLASS(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_ACSH_HISTORY_CLASS;
}
extern "C" {
    pub fn dwg_object_to_ACSH_SPHERE_CLASS(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_ACSH_SPHERE_CLASS;
}
extern "C" {
    pub fn dwg_object_to_ACSH_TORUS_CLASS(obj: *mut Dwg_Object)
        -> *mut Dwg_Object_ACSH_TORUS_CLASS;
}
extern "C" {
    pub fn dwg_object_to_ACSH_WEDGE_CLASS(obj: *mut Dwg_Object)
        -> *mut Dwg_Object_ACSH_WEDGE_CLASS;
}
extern "C" {
    pub fn dwg_object_to_BLOCKALIGNMENTGRIP(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_BLOCKALIGNMENTGRIP;
}
extern "C" {
    pub fn dwg_object_to_BLOCKALIGNMENTPARAMETER(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_BLOCKALIGNMENTPARAMETER;
}
extern "C" {
    pub fn dwg_object_to_BLOCKBASEPOINTPARAMETER(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_BLOCKBASEPOINTPARAMETER;
}
extern "C" {
    pub fn dwg_object_to_BLOCKFLIPACTION(obj: *mut Dwg_Object) -> *mut Dwg_Object_BLOCKFLIPACTION;
}
extern "C" {
    pub fn dwg_object_to_BLOCKFLIPGRIP(obj: *mut Dwg_Object) -> *mut Dwg_Object_BLOCKFLIPGRIP;
}
extern "C" {
    pub fn dwg_object_to_BLOCKFLIPPARAMETER(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_BLOCKFLIPPARAMETER;
}
extern "C" {
    pub fn dwg_object_to_BLOCKGRIPLOCATIONCOMPONENT(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_BLOCKGRIPLOCATIONCOMPONENT;
}
extern "C" {
    pub fn dwg_object_to_BLOCKLINEARGRIP(obj: *mut Dwg_Object) -> *mut Dwg_Object_BLOCKLINEARGRIP;
}
extern "C" {
    pub fn dwg_object_to_BLOCKLOOKUPGRIP(obj: *mut Dwg_Object) -> *mut Dwg_Object_BLOCKLOOKUPGRIP;
}
extern "C" {
    pub fn dwg_object_to_BLOCKMOVEACTION(obj: *mut Dwg_Object) -> *mut Dwg_Object_BLOCKMOVEACTION;
}
extern "C" {
    pub fn dwg_object_to_BLOCKROTATEACTION(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_BLOCKROTATEACTION;
}
extern "C" {
    pub fn dwg_object_to_BLOCKROTATIONGRIP(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_BLOCKROTATIONGRIP;
}
extern "C" {
    pub fn dwg_object_to_BLOCKSCALEACTION(obj: *mut Dwg_Object)
        -> *mut Dwg_Object_BLOCKSCALEACTION;
}
extern "C" {
    pub fn dwg_object_to_BLOCKVISIBILITYGRIP(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_BLOCKVISIBILITYGRIP;
}
extern "C" {
    pub fn dwg_object_to_CELLSTYLEMAP(obj: *mut Dwg_Object) -> *mut Dwg_Object_CELLSTYLEMAP;
}
extern "C" {
    pub fn dwg_object_to_DETAILVIEWSTYLE(obj: *mut Dwg_Object) -> *mut Dwg_Object_DETAILVIEWSTYLE;
}
extern "C" {
    pub fn dwg_object_to_DICTIONARYVAR(obj: *mut Dwg_Object) -> *mut Dwg_Object_DICTIONARYVAR;
}
extern "C" {
    pub fn dwg_object_to_DICTIONARYWDFLT(obj: *mut Dwg_Object) -> *mut Dwg_Object_DICTIONARYWDFLT;
}
extern "C" {
    pub fn dwg_object_to_DYNAMICBLOCKPURGEPREVENTER(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_DYNAMICBLOCKPURGEPREVENTER;
}
extern "C" {
    pub fn dwg_object_to_FIELD(obj: *mut Dwg_Object) -> *mut Dwg_Object_FIELD;
}
extern "C" {
    pub fn dwg_object_to_FIELDLIST(obj: *mut Dwg_Object) -> *mut Dwg_Object_FIELDLIST;
}
extern "C" {
    pub fn dwg_object_to_GEODATA(obj: *mut Dwg_Object) -> *mut Dwg_Object_GEODATA;
}
extern "C" {
    pub fn dwg_object_to_GROUP(obj: *mut Dwg_Object) -> *mut Dwg_Object_GROUP;
}
extern "C" {
    pub fn dwg_object_to_IDBUFFER(obj: *mut Dwg_Object) -> *mut Dwg_Object_IDBUFFER;
}
extern "C" {
    pub fn dwg_object_to_IMAGEDEF(obj: *mut Dwg_Object) -> *mut Dwg_Object_IMAGEDEF;
}
extern "C" {
    pub fn dwg_object_to_IMAGEDEF_REACTOR(obj: *mut Dwg_Object)
        -> *mut Dwg_Object_IMAGEDEF_REACTOR;
}
extern "C" {
    pub fn dwg_object_to_INDEX(obj: *mut Dwg_Object) -> *mut Dwg_Object_INDEX;
}
extern "C" {
    pub fn dwg_object_to_LAYERFILTER(obj: *mut Dwg_Object) -> *mut Dwg_Object_LAYERFILTER;
}
extern "C" {
    pub fn dwg_object_to_LAYER_INDEX(obj: *mut Dwg_Object) -> *mut Dwg_Object_LAYER_INDEX;
}
extern "C" {
    pub fn dwg_object_to_LAYOUT(obj: *mut Dwg_Object) -> *mut Dwg_Object_LAYOUT;
}
extern "C" {
    pub fn dwg_object_to_PLACEHOLDER(obj: *mut Dwg_Object) -> *mut Dwg_Object_PLACEHOLDER;
}
extern "C" {
    pub fn dwg_object_to_PLOTSETTINGS(obj: *mut Dwg_Object) -> *mut Dwg_Object_PLOTSETTINGS;
}
extern "C" {
    pub fn dwg_object_to_RASTERVARIABLES(obj: *mut Dwg_Object) -> *mut Dwg_Object_RASTERVARIABLES;
}
extern "C" {
    pub fn dwg_object_to_SCALE(obj: *mut Dwg_Object) -> *mut Dwg_Object_SCALE;
}
extern "C" {
    pub fn dwg_object_to_SECTIONVIEWSTYLE(obj: *mut Dwg_Object)
        -> *mut Dwg_Object_SECTIONVIEWSTYLE;
}
extern "C" {
    pub fn dwg_object_to_SECTION_MANAGER(obj: *mut Dwg_Object) -> *mut Dwg_Object_SECTION_MANAGER;
}
extern "C" {
    pub fn dwg_object_to_SORTENTSTABLE(obj: *mut Dwg_Object) -> *mut Dwg_Object_SORTENTSTABLE;
}
extern "C" {
    pub fn dwg_object_to_SPATIAL_FILTER(obj: *mut Dwg_Object) -> *mut Dwg_Object_SPATIAL_FILTER;
}
extern "C" {
    pub fn dwg_object_to_TABLEGEOMETRY(obj: *mut Dwg_Object) -> *mut Dwg_Object_TABLEGEOMETRY;
}
extern "C" {
    pub fn dwg_object_to_VBA_PROJECT(obj: *mut Dwg_Object) -> *mut Dwg_Object_VBA_PROJECT;
}
extern "C" {
    pub fn dwg_object_to_VISUALSTYLE(obj: *mut Dwg_Object) -> *mut Dwg_Object_VISUALSTYLE;
}
extern "C" {
    pub fn dwg_object_to_WIPEOUTVARIABLES(obj: *mut Dwg_Object)
        -> *mut Dwg_Object_WIPEOUTVARIABLES;
}
extern "C" {
    pub fn dwg_object_to_XRECORD(obj: *mut Dwg_Object) -> *mut Dwg_Object_XRECORD;
}
extern "C" {
    pub fn dwg_object_to_PDFDEFINITION(obj: *mut Dwg_Object) -> *mut Dwg_Object_PDFDEFINITION;
}
extern "C" {
    pub fn dwg_object_to_DGNDEFINITION(obj: *mut Dwg_Object) -> *mut Dwg_Object_DGNDEFINITION;
}
extern "C" {
    pub fn dwg_object_to_DWFDEFINITION(obj: *mut Dwg_Object) -> *mut Dwg_Object_DWFDEFINITION;
}
extern "C" {
    pub fn dwg_object_to_ACSH_BREP_CLASS(obj: *mut Dwg_Object) -> *mut Dwg_Object_ACSH_BREP_CLASS;
}
extern "C" {
    pub fn dwg_object_to_ACSH_CHAMFER_CLASS(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_ACSH_CHAMFER_CLASS;
}
extern "C" {
    pub fn dwg_object_to_ACSH_PYRAMID_CLASS(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_ACSH_PYRAMID_CLASS;
}
extern "C" {
    pub fn dwg_object_to_ALDIMOBJECTCONTEXTDATA(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_ALDIMOBJECTCONTEXTDATA;
}
extern "C" {
    pub fn dwg_object_to_ASSOC2DCONSTRAINTGROUP(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_ASSOC2DCONSTRAINTGROUP;
}
extern "C" {
    pub fn dwg_object_to_ASSOCACTION(obj: *mut Dwg_Object) -> *mut Dwg_Object_ASSOCACTION;
}
extern "C" {
    pub fn dwg_object_to_ASSOCACTIONPARAM(obj: *mut Dwg_Object)
        -> *mut Dwg_Object_ASSOCACTIONPARAM;
}
extern "C" {
    pub fn dwg_object_to_ASSOCARRAYACTIONBODY(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_ASSOCARRAYACTIONBODY;
}
extern "C" {
    pub fn dwg_object_to_ASSOCASMBODYACTIONPARAM(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_ASSOCASMBODYACTIONPARAM;
}
extern "C" {
    pub fn dwg_object_to_ASSOCBLENDSURFACEACTIONBODY(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_ASSOCBLENDSURFACEACTIONBODY;
}
extern "C" {
    pub fn dwg_object_to_ASSOCCOMPOUNDACTIONPARAM(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_ASSOCCOMPOUNDACTIONPARAM;
}
extern "C" {
    pub fn dwg_object_to_ASSOCDEPENDENCY(obj: *mut Dwg_Object) -> *mut Dwg_Object_ASSOCDEPENDENCY;
}
extern "C" {
    pub fn dwg_object_to_ASSOCDIMDEPENDENCYBODY(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_ASSOCDIMDEPENDENCYBODY;
}
extern "C" {
    pub fn dwg_object_to_ASSOCEXTENDSURFACEACTIONBODY(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_ASSOCEXTENDSURFACEACTIONBODY;
}
extern "C" {
    pub fn dwg_object_to_ASSOCEXTRUDEDSURFACEACTIONBODY(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_ASSOCEXTRUDEDSURFACEACTIONBODY;
}
extern "C" {
    pub fn dwg_object_to_ASSOCFACEACTIONPARAM(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_ASSOCFACEACTIONPARAM;
}
extern "C" {
    pub fn dwg_object_to_ASSOCFILLETSURFACEACTIONBODY(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_ASSOCFILLETSURFACEACTIONBODY;
}
extern "C" {
    pub fn dwg_object_to_ASSOCGEOMDEPENDENCY(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_ASSOCGEOMDEPENDENCY;
}
extern "C" {
    pub fn dwg_object_to_ASSOCLOFTEDSURFACEACTIONBODY(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_ASSOCLOFTEDSURFACEACTIONBODY;
}
extern "C" {
    pub fn dwg_object_to_ASSOCNETWORK(obj: *mut Dwg_Object) -> *mut Dwg_Object_ASSOCNETWORK;
}
extern "C" {
    pub fn dwg_object_to_ASSOCNETWORKSURFACEACTIONBODY(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_ASSOCNETWORKSURFACEACTIONBODY;
}
extern "C" {
    pub fn dwg_object_to_ASSOCOBJECTACTIONPARAM(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_ASSOCOBJECTACTIONPARAM;
}
extern "C" {
    pub fn dwg_object_to_ASSOCOFFSETSURFACEACTIONBODY(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_ASSOCOFFSETSURFACEACTIONBODY;
}
extern "C" {
    pub fn dwg_object_to_ASSOCOSNAPPOINTREFACTIONPARAM(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_ASSOCOSNAPPOINTREFACTIONPARAM;
}
extern "C" {
    pub fn dwg_object_to_ASSOCPATCHSURFACEACTIONBODY(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_ASSOCPATCHSURFACEACTIONBODY;
}
extern "C" {
    pub fn dwg_object_to_ASSOCPATHACTIONPARAM(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_ASSOCPATHACTIONPARAM;
}
extern "C" {
    pub fn dwg_object_to_ASSOCPLANESURFACEACTIONBODY(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_ASSOCPLANESURFACEACTIONBODY;
}
extern "C" {
    pub fn dwg_object_to_ASSOCPOINTREFACTIONPARAM(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_ASSOCPOINTREFACTIONPARAM;
}
extern "C" {
    pub fn dwg_object_to_ASSOCREVOLVEDSURFACEACTIONBODY(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_ASSOCREVOLVEDSURFACEACTIONBODY;
}
extern "C" {
    pub fn dwg_object_to_ASSOCTRIMSURFACEACTIONBODY(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_ASSOCTRIMSURFACEACTIONBODY;
}
extern "C" {
    pub fn dwg_object_to_ASSOCVALUEDEPENDENCY(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_ASSOCVALUEDEPENDENCY;
}
extern "C" {
    pub fn dwg_object_to_ASSOCVARIABLE(obj: *mut Dwg_Object) -> *mut Dwg_Object_ASSOCVARIABLE;
}
extern "C" {
    pub fn dwg_object_to_ASSOCVERTEXACTIONPARAM(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_ASSOCVERTEXACTIONPARAM;
}
extern "C" {
    pub fn dwg_object_to_BLKREFOBJECTCONTEXTDATA(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_BLKREFOBJECTCONTEXTDATA;
}
extern "C" {
    pub fn dwg_object_to_BLOCKALIGNEDCONSTRAINTPARAMETER(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_BLOCKALIGNEDCONSTRAINTPARAMETER;
}
extern "C" {
    pub fn dwg_object_to_BLOCKANGULARCONSTRAINTPARAMETER(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_BLOCKANGULARCONSTRAINTPARAMETER;
}
extern "C" {
    pub fn dwg_object_to_BLOCKARRAYACTION(obj: *mut Dwg_Object)
        -> *mut Dwg_Object_BLOCKARRAYACTION;
}
extern "C" {
    pub fn dwg_object_to_BLOCKDIAMETRICCONSTRAINTPARAMETER(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_BLOCKDIAMETRICCONSTRAINTPARAMETER;
}
extern "C" {
    pub fn dwg_object_to_BLOCKHORIZONTALCONSTRAINTPARAMETER(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_BLOCKHORIZONTALCONSTRAINTPARAMETER;
}
extern "C" {
    pub fn dwg_object_to_BLOCKLINEARCONSTRAINTPARAMETER(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_BLOCKLINEARCONSTRAINTPARAMETER;
}
extern "C" {
    pub fn dwg_object_to_BLOCKLINEARPARAMETER(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_BLOCKLINEARPARAMETER;
}
extern "C" {
    pub fn dwg_object_to_BLOCKLOOKUPACTION(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_BLOCKLOOKUPACTION;
}
extern "C" {
    pub fn dwg_object_to_BLOCKLOOKUPPARAMETER(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_BLOCKLOOKUPPARAMETER;
}
extern "C" {
    pub fn dwg_object_to_BLOCKPARAMDEPENDENCYBODY(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_BLOCKPARAMDEPENDENCYBODY;
}
extern "C" {
    pub fn dwg_object_to_BLOCKPOINTPARAMETER(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_BLOCKPOINTPARAMETER;
}
extern "C" {
    pub fn dwg_object_to_BLOCKPOLARGRIP(obj: *mut Dwg_Object) -> *mut Dwg_Object_BLOCKPOLARGRIP;
}
extern "C" {
    pub fn dwg_object_to_BLOCKPOLARPARAMETER(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_BLOCKPOLARPARAMETER;
}
extern "C" {
    pub fn dwg_object_to_BLOCKPOLARSTRETCHACTION(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_BLOCKPOLARSTRETCHACTION;
}
extern "C" {
    pub fn dwg_object_to_BLOCKRADIALCONSTRAINTPARAMETER(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_BLOCKRADIALCONSTRAINTPARAMETER;
}
extern "C" {
    pub fn dwg_object_to_BLOCKREPRESENTATION(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_BLOCKREPRESENTATION;
}
extern "C" {
    pub fn dwg_object_to_BLOCKROTATIONPARAMETER(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_BLOCKROTATIONPARAMETER;
}
extern "C" {
    pub fn dwg_object_to_BLOCKSTRETCHACTION(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_BLOCKSTRETCHACTION;
}
extern "C" {
    pub fn dwg_object_to_BLOCKUSERPARAMETER(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_BLOCKUSERPARAMETER;
}
extern "C" {
    pub fn dwg_object_to_BLOCKVERTICALCONSTRAINTPARAMETER(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_BLOCKVERTICALCONSTRAINTPARAMETER;
}
extern "C" {
    pub fn dwg_object_to_BLOCKVISIBILITYPARAMETER(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_BLOCKVISIBILITYPARAMETER;
}
extern "C" {
    pub fn dwg_object_to_BLOCKXYGRIP(obj: *mut Dwg_Object) -> *mut Dwg_Object_BLOCKXYGRIP;
}
extern "C" {
    pub fn dwg_object_to_BLOCKXYPARAMETER(obj: *mut Dwg_Object)
        -> *mut Dwg_Object_BLOCKXYPARAMETER;
}
extern "C" {
    pub fn dwg_object_to_DATALINK(obj: *mut Dwg_Object) -> *mut Dwg_Object_DATALINK;
}
extern "C" {
    pub fn dwg_object_to_DBCOLOR(obj: *mut Dwg_Object) -> *mut Dwg_Object_DBCOLOR;
}
extern "C" {
    pub fn dwg_object_to_EVALUATION_GRAPH(obj: *mut Dwg_Object)
        -> *mut Dwg_Object_EVALUATION_GRAPH;
}
extern "C" {
    pub fn dwg_object_to_FCFOBJECTCONTEXTDATA(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_FCFOBJECTCONTEXTDATA;
}
extern "C" {
    pub fn dwg_object_to_GRADIENT_BACKGROUND(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_GRADIENT_BACKGROUND;
}
extern "C" {
    pub fn dwg_object_to_GROUND_PLANE_BACKGROUND(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_GROUND_PLANE_BACKGROUND;
}
extern "C" {
    pub fn dwg_object_to_IBL_BACKGROUND(obj: *mut Dwg_Object) -> *mut Dwg_Object_IBL_BACKGROUND;
}
extern "C" {
    pub fn dwg_object_to_IMAGE_BACKGROUND(obj: *mut Dwg_Object)
        -> *mut Dwg_Object_IMAGE_BACKGROUND;
}
extern "C" {
    pub fn dwg_object_to_LEADEROBJECTCONTEXTDATA(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_LEADEROBJECTCONTEXTDATA;
}
extern "C" {
    pub fn dwg_object_to_LIGHTLIST(obj: *mut Dwg_Object) -> *mut Dwg_Object_LIGHTLIST;
}
extern "C" {
    pub fn dwg_object_to_MATERIAL(obj: *mut Dwg_Object) -> *mut Dwg_Object_MATERIAL;
}
extern "C" {
    pub fn dwg_object_to_MENTALRAYRENDERSETTINGS(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_MENTALRAYRENDERSETTINGS;
}
extern "C" {
    pub fn dwg_object_to_MLEADERSTYLE(obj: *mut Dwg_Object) -> *mut Dwg_Object_MLEADERSTYLE;
}
extern "C" {
    pub fn dwg_object_to_MTEXTOBJECTCONTEXTDATA(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_MTEXTOBJECTCONTEXTDATA;
}
extern "C" {
    pub fn dwg_object_to_OBJECT_PTR(obj: *mut Dwg_Object) -> *mut Dwg_Object_OBJECT_PTR;
}
extern "C" {
    pub fn dwg_object_to_PARTIAL_VIEWING_INDEX(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_PARTIAL_VIEWING_INDEX;
}
extern "C" {
    pub fn dwg_object_to_POINTCLOUDCOLORMAP(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_POINTCLOUDCOLORMAP;
}
extern "C" {
    pub fn dwg_object_to_POINTCLOUDDEF(obj: *mut Dwg_Object) -> *mut Dwg_Object_POINTCLOUDDEF;
}
extern "C" {
    pub fn dwg_object_to_POINTCLOUDDEFEX(obj: *mut Dwg_Object) -> *mut Dwg_Object_POINTCLOUDDEFEX;
}
extern "C" {
    pub fn dwg_object_to_POINTCLOUDDEF_REACTOR(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_POINTCLOUDDEF_REACTOR;
}
extern "C" {
    pub fn dwg_object_to_POINTCLOUDDEF_REACTOR_EX(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_POINTCLOUDDEF_REACTOR_EX;
}
extern "C" {
    pub fn dwg_object_to_PROXY_OBJECT(obj: *mut Dwg_Object) -> *mut Dwg_Object_PROXY_OBJECT;
}
extern "C" {
    pub fn dwg_object_to_RAPIDRTRENDERSETTINGS(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_RAPIDRTRENDERSETTINGS;
}
extern "C" {
    pub fn dwg_object_to_RENDERENTRY(obj: *mut Dwg_Object) -> *mut Dwg_Object_RENDERENTRY;
}
extern "C" {
    pub fn dwg_object_to_RENDERENVIRONMENT(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_RENDERENVIRONMENT;
}
extern "C" {
    pub fn dwg_object_to_RENDERGLOBAL(obj: *mut Dwg_Object) -> *mut Dwg_Object_RENDERGLOBAL;
}
extern "C" {
    pub fn dwg_object_to_RENDERSETTINGS(obj: *mut Dwg_Object) -> *mut Dwg_Object_RENDERSETTINGS;
}
extern "C" {
    pub fn dwg_object_to_SECTION_SETTINGS(obj: *mut Dwg_Object)
        -> *mut Dwg_Object_SECTION_SETTINGS;
}
extern "C" {
    pub fn dwg_object_to_SKYLIGHT_BACKGROUND(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_SKYLIGHT_BACKGROUND;
}
extern "C" {
    pub fn dwg_object_to_SOLID_BACKGROUND(obj: *mut Dwg_Object)
        -> *mut Dwg_Object_SOLID_BACKGROUND;
}
extern "C" {
    pub fn dwg_object_to_SPATIAL_INDEX(obj: *mut Dwg_Object) -> *mut Dwg_Object_SPATIAL_INDEX;
}
extern "C" {
    pub fn dwg_object_to_SUN(obj: *mut Dwg_Object) -> *mut Dwg_Object_SUN;
}
extern "C" {
    pub fn dwg_object_to_TABLESTYLE(obj: *mut Dwg_Object) -> *mut Dwg_Object_TABLESTYLE;
}
extern "C" {
    pub fn dwg_object_to_TEXTOBJECTCONTEXTDATA(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_TEXTOBJECTCONTEXTDATA;
}
extern "C" {
    pub fn dwg_object_to_ASSOCARRAYMODIFYPARAMETERS(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_ASSOCARRAYMODIFYPARAMETERS;
}
extern "C" {
    pub fn dwg_object_to_ASSOCARRAYPATHPARAMETERS(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_ASSOCARRAYPATHPARAMETERS;
}
extern "C" {
    pub fn dwg_object_to_ASSOCARRAYPOLARPARAMETERS(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_ASSOCARRAYPOLARPARAMETERS;
}
extern "C" {
    pub fn dwg_object_to_ASSOCARRAYRECTANGULARPARAMETERS(
        obj: *mut Dwg_Object,
    ) -> *mut Dwg_Object_ASSOCARRAYRECTANGULARPARAMETERS;
}
extern "C" {
    pub fn dwg_object_to_DIMENSION(obj: *mut dwg_object) -> *mut dwg_ent_dim;
}
extern "C" {
    #[doc = " initialize the DWG version, needed for r2007+ unicode strings\n and pre-R13 field variants. unneeded for r13-r2004"]
    pub fn dwg_api_init_version(dwg: *mut Dwg_Data);
}
extern "C" {
    #[doc = "                FUNCTIONS START HERE ENTITY SPECIFIC               *"]
    pub fn dwg_get_HEADER(
        dwg: *const Dwg_Data,
        fieldname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_HEADER_utf8text(
        dwg: *const Dwg_Data,
        fieldname: *const ::std::os::raw::c_char,
        textp: *mut *mut ::std::os::raw::c_char,
        isnewp: *mut ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_HEADER(
        dwg: *mut Dwg_Data,
        fieldname: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_HEADER_utf8text(
        dwg: *mut Dwg_Data,
        fieldname: *const ::std::os::raw::c_char,
        utf8: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ENTITY_common(
        obj: *mut Dwg_Object_Entity,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_ENTITY_common_utf8text(
        obj: *mut Dwg_Object_Entity,
        fieldname: *const ::std::os::raw::c_char,
        textp: *mut *mut ::std::os::raw::c_char,
        isnewp: *mut ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_OBJECT_common(
        obj: *mut Dwg_Object_Object,
        fieldname: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_get_OBJECT_common_utf8text(
        obj: *mut Dwg_Object_Object,
        fieldname: *const ::std::os::raw::c_char,
        textp: *mut *mut ::std::os::raw::c_char,
        isnewp: *mut ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ENTITY_common(
        obj: *mut Dwg_Object_Entity,
        fieldname: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_ENTITY_common_utf8text(
        obj: *mut Dwg_Object_Entity,
        fieldname: *const ::std::os::raw::c_char,
        utf8: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_OBJECT_common(
        obj: *mut Dwg_Object_Object,
        fieldname: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn dwg_set_OBJECT_common_utf8text(
        obj: *mut Dwg_Object_Object,
        fieldname: *const ::std::os::raw::c_char,
        utf8: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    #[doc = "                FUNCTIONS TYPE SPECIFIC                            *"]
    pub fn dwg_ent_get_POINT2D(
        _obj: *const ::std::os::raw::c_void,
        fieldname: *const ::std::os::raw::c_char,
    ) -> *mut dwg_point_2d;
}
extern "C" {
    pub fn dwg_ent_set_POINT2D(
        _obj: *mut ::std::os::raw::c_void,
        fieldname: *const ::std::os::raw::c_char,
        point: *const dwg_point_2d,
    ) -> bool;
}
extern "C" {
    pub fn dwg_ent_get_POINT3D(
        _obj: *const ::std::os::raw::c_void,
        fieldname: *const ::std::os::raw::c_char,
    ) -> *mut dwg_point_3d;
}
extern "C" {
    pub fn dwg_ent_set_POINT3D(
        _obj: *mut ::std::os::raw::c_void,
        fieldname: *const ::std::os::raw::c_char,
        point: *const dwg_point_3d,
    ) -> bool;
}
extern "C" {
    pub fn dwg_ent_get_STRING(
        _obj: *const ::std::os::raw::c_void,
        fieldname: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dwg_ent_set_STRING(
        _obj: *mut ::std::os::raw::c_void,
        fieldname: *const ::std::os::raw::c_char,
        string: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn dwg_ent_get_UTF8(
        _obj: *const ::std::os::raw::c_void,
        fieldname: *const ::std::os::raw::c_char,
        isnewp: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dwg_ent_set_UTF8(
        _obj: *mut ::std::os::raw::c_void,
        fieldname: *const ::std::os::raw::c_char,
        string: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn dwg_ent_get_REAL(
        _obj: *const ::std::os::raw::c_void,
        fieldname: *const ::std::os::raw::c_char,
    ) -> BITCODE_BD;
}
extern "C" {
    pub fn dwg_ent_set_REAL(
        _obj: *mut ::std::os::raw::c_void,
        fieldname: *const ::std::os::raw::c_char,
        num: BITCODE_BD,
    ) -> bool;
}
extern "C" {
    pub fn dwg_ent_get_INT16(
        _obj: *const ::std::os::raw::c_void,
        fieldname: *const ::std::os::raw::c_char,
    ) -> BITCODE_BS;
}
extern "C" {
    pub fn dwg_ent_set_INT16(
        _obj: *mut ::std::os::raw::c_void,
        fieldname: *const ::std::os::raw::c_char,
        num: BITCODE_BS,
    ) -> bool;
}
extern "C" {
    pub fn dwg_ent_get_INT32(
        _obj: *const ::std::os::raw::c_void,
        fieldname: *const ::std::os::raw::c_char,
    ) -> BITCODE_BL;
}
extern "C" {
    pub fn dwg_ent_set_INT32(
        _obj: *mut ::std::os::raw::c_void,
        fieldname: *const ::std::os::raw::c_char,
        num: BITCODE_BL,
    ) -> bool;
}
extern "C" {
    pub fn dwg_ent_get_BINARY(
        _obj: *const ::std::os::raw::c_void,
        fieldname: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dwg_ent_set_BINARY(
        _obj: *mut ::std::os::raw::c_void,
        fieldname: *const ::std::os::raw::c_char,
        string: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn dwg_ent_get_HANDLE(
        _obj: *const ::std::os::raw::c_void,
        fieldname: *const ::std::os::raw::c_char,
    ) -> BITCODE_H;
}
extern "C" {
    pub fn dwg_ent_set_HANDLE(
        _obj: *mut ::std::os::raw::c_void,
        fieldname: *const ::std::os::raw::c_char,
        handle: BITCODE_H,
    ) -> bool;
}
extern "C" {
    pub fn dwg_ent_get_BOOL(
        _obj: *const ::std::os::raw::c_void,
        fieldname: *const ::std::os::raw::c_char,
    ) -> BITCODE_B;
}
extern "C" {
    pub fn dwg_ent_set_BOOL(
        _obj: *mut ::std::os::raw::c_void,
        fieldname: *const ::std::os::raw::c_char,
        num: BITCODE_B,
    ) -> bool;
}
extern "C" {
    pub fn dwg_object_polyline_2d_get_numpoints(
        obj: *const dwg_object,
        error: *mut ::std::os::raw::c_int,
    ) -> BITCODE_BL;
}
extern "C" {
    pub fn dwg_object_polyline_2d_get_points(
        obj: *const dwg_object,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut dwg_point_2d;
}
extern "C" {
    pub fn dwg_object_polyline_3d_get_numpoints(
        obj: *const dwg_object,
        error: *mut ::std::os::raw::c_int,
    ) -> BITCODE_BL;
}
extern "C" {
    pub fn dwg_object_polyline_3d_get_points(
        obj: *const dwg_object,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut dwg_point_3d;
}
extern "C" {
    pub fn dwg_ent_lwpline_get_bulges(
        lwpline: *const dwg_ent_lwpline,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut f64;
}
extern "C" {
    pub fn dwg_ent_lwpline_get_numpoints(
        lwpline: *const dwg_ent_lwpline,
        error: *mut ::std::os::raw::c_int,
    ) -> BITCODE_BL;
}
extern "C" {
    pub fn dwg_ent_lwpline_get_points(
        lwpline: *const dwg_ent_lwpline,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut dwg_point_2d;
}
extern "C" {
    pub fn dwg_ent_lwpline_set_points(
        lwpline: *mut dwg_ent_lwpline,
        num_pts2d: BITCODE_BL,
        pts2d: *const dwg_point_2d,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_ent_lwpline_get_widths(
        lwpline: *const dwg_ent_lwpline,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut dwg_lwpline_widths;
}
extern "C" {
    pub fn dwg_obj_block_header_get_name(
        hdr: *const dwg_obj_block_header,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dwg_get_block_header(
        dwg: *mut dwg_data,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut dwg_obj_block_header;
}
extern "C" {
    #[doc = "               FUNCTIONS FOR BLOCK_CONTROL OBJECT                  *"]
    pub fn dwg_obj_block_control_get_num_entries(
        ctrl: *const dwg_obj_block_control,
        error: *mut ::std::os::raw::c_int,
    ) -> BITCODE_BL;
}
extern "C" {
    pub fn dwg_obj_block_control_get_block_headers(
        ctrl: *const dwg_obj_block_control,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut *mut dwg_object_ref;
}
extern "C" {
    pub fn dwg_block_header_get_block_control(
        block_header: *const dwg_obj_block_header,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut dwg_obj_block_control;
}
extern "C" {
    pub fn dwg_obj_block_control_get_model_space(
        ctrl: *const dwg_obj_block_control,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut dwg_object_ref;
}
extern "C" {
    pub fn dwg_obj_block_control_get_paper_space(
        ctrl: *const dwg_obj_block_control,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut dwg_object_ref;
}
extern "C" {
    #[doc = "                    FUNCTIONS FOR LAYER OBJECT                     *"]
    pub fn dwg_obj_layer_get_name(
        layer: *const dwg_obj_layer,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dwg_obj_layer_set_name(
        layer: *mut dwg_obj_layer,
        name: *const ::std::os::raw::c_char,
        error: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    #[doc = " Get name of any table entry. Defaults to ByLayer.\n \\sa dwg_ent_get_layer_name which defaults to \"0\""]
    pub fn dwg_obj_table_get_name(
        obj: *const dwg_object,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dwg_ref_get_table_name(
        ref_: *const dwg_object_ref,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dwg_object_tablectrl_get_num_entries(
        obj: *const dwg_object,
        error: *mut ::std::os::raw::c_int,
    ) -> BITCODE_BL;
}
extern "C" {
    pub fn dwg_object_tablectrl_get_entry(
        obj: *const dwg_object,
        index: BITCODE_BS,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut dwg_object_ref;
}
extern "C" {
    pub fn dwg_object_tablectrl_get_entries(
        obj: *const dwg_object,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut *mut dwg_object_ref;
}
extern "C" {
    pub fn dwg_object_tablectrl_get_ownerhandle(
        obj: *const dwg_object,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut dwg_object_ref;
}
extern "C" {
    pub fn dwg_object_tablectrl_get_xdicobjhandle(
        obj: *const dwg_object,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut dwg_object_ref;
}
extern "C" {
    pub fn dwg_object_tablectrl_get_objid(
        obj: *const dwg_object,
        error: *mut ::std::os::raw::c_int,
    ) -> BITCODE_BL;
}
extern "C" {
    #[doc = "                    COMMON FUNCTIONS FOR DWG ENTITY                *"]
    pub fn dwg_ent_to_object(
        obj: *const dwg_obj_ent,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut dwg_object;
}
extern "C" {
    pub fn dwg_ent_generic_to_object(
        obj: *const ::std::os::raw::c_void,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut dwg_object;
}
extern "C" {
    pub fn dwg_ent_generic_parent(
        ent: *const ::std::os::raw::c_void,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut dwg_obj_ent;
}
extern "C" {
    pub fn dwg_ent_get_bitsize(
        ent: *const dwg_obj_ent,
        error: *mut ::std::os::raw::c_int,
    ) -> BITCODE_RL;
}
extern "C" {
    pub fn dwg_ent_get_num_eed(
        ent: *const dwg_obj_ent,
        error: *mut ::std::os::raw::c_int,
    ) -> BITCODE_BL;
}
extern "C" {
    pub fn dwg_ent_get_eed(
        ent: *const dwg_obj_ent,
        index: BITCODE_BL,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut dwg_entity_eed;
}
extern "C" {
    pub fn dwg_ent_get_eed_data(
        ent: *const dwg_obj_ent,
        index: BITCODE_BL,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut dwg_entity_eed_data;
}
extern "C" {
    pub fn dwg_ent_get_picture_exists(
        ent: *const dwg_obj_ent,
        error: *mut ::std::os::raw::c_int,
    ) -> BITCODE_B;
}
extern "C" {
    pub fn dwg_ent_get_picture_size(
        ent: *const dwg_obj_ent,
        error: *mut ::std::os::raw::c_int,
    ) -> BITCODE_BLL;
}
extern "C" {
    pub fn dwg_ent_get_picture(
        ent: *const dwg_obj_ent,
        error: *mut ::std::os::raw::c_int,
    ) -> BITCODE_TF;
}
extern "C" {
    pub fn dwg_ent_get_entmode(
        ent: *const dwg_obj_ent,
        error: *mut ::std::os::raw::c_int,
    ) -> BITCODE_BB;
}
extern "C" {
    pub fn dwg_ent_get_num_reactors(
        ent: *const dwg_obj_ent,
        error: *mut ::std::os::raw::c_int,
    ) -> BITCODE_BL;
}
extern "C" {
    pub fn dwg_ent_get_is_xdic_missing(
        ent: *const dwg_obj_ent,
        error: *mut ::std::os::raw::c_int,
    ) -> BITCODE_B;
}
extern "C" {
    pub fn dwg_ent_get_layer_name(
        ent: *const dwg_obj_ent,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dwg_ent_get_ltype_name(
        ent: *const dwg_obj_ent,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dwg_ent_get_isbylayerlt(
        ent: *const dwg_obj_ent,
        error: *mut ::std::os::raw::c_int,
    ) -> BITCODE_B;
}
extern "C" {
    pub fn dwg_ent_get_nolinks(
        ent: *const dwg_obj_ent,
        error: *mut ::std::os::raw::c_int,
    ) -> BITCODE_B;
}
extern "C" {
    pub fn dwg_ent_get_color(
        ent: *const dwg_obj_ent,
        error: *mut ::std::os::raw::c_int,
    ) -> *const Dwg_Color;
}
extern "C" {
    pub fn dwg_ent_get_linetype_scale(
        ent: *const dwg_obj_ent,
        error: *mut ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    pub fn dwg_ent_get_linetype_flags(
        ent: *const dwg_obj_ent,
        error: *mut ::std::os::raw::c_int,
    ) -> BITCODE_BB;
}
extern "C" {
    pub fn dwg_ent_get_plotstyle_flags(
        ent: *const dwg_obj_ent,
        error: *mut ::std::os::raw::c_int,
    ) -> BITCODE_BB;
}
extern "C" {
    pub fn dwg_ent_get_material_flags(
        ent: *const dwg_obj_ent,
        error: *mut ::std::os::raw::c_int,
    ) -> BITCODE_BB;
}
extern "C" {
    pub fn dwg_ent_get_shadow_flags(
        ent: *const dwg_obj_ent,
        error: *mut ::std::os::raw::c_int,
    ) -> BITCODE_RC;
}
extern "C" {
    pub fn dwg_ent_has_full_visualstyle(
        ent: *mut dwg_obj_ent,
        error: *mut ::std::os::raw::c_int,
    ) -> BITCODE_B;
}
extern "C" {
    pub fn dwg_ent_has_face_visualstyle(
        ent: *mut dwg_obj_ent,
        error: *mut ::std::os::raw::c_int,
    ) -> BITCODE_B;
}
extern "C" {
    pub fn dwg_ent_has_edge_visualstyle(
        ent: *mut dwg_obj_ent,
        error: *mut ::std::os::raw::c_int,
    ) -> BITCODE_B;
}
extern "C" {
    pub fn dwg_ent_get_invisible(
        ent: *const dwg_obj_ent,
        error: *mut ::std::os::raw::c_int,
    ) -> BITCODE_BS;
}
extern "C" {
    pub fn dwg_ent_get_linewt(
        ent: *const dwg_obj_ent,
        error: *mut ::std::os::raw::c_int,
    ) -> BITCODE_RC;
}
extern "C" {
    pub fn dwg_ent_get_ownerhandle(
        ent: *const dwg_obj_ent,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut dwg_object_ref;
}
extern "C" {
    pub fn dwg_ent_get_reactors(
        ent: *const dwg_obj_ent,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut *mut dwg_object_ref;
}
extern "C" {
    pub fn dwg_ent_get_xdicobjhandle(
        ent: *const dwg_obj_ent,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut dwg_object_ref;
}
extern "C" {
    pub fn dwg_ent_get_prev_entity(
        ent: *const dwg_obj_ent,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut dwg_object_ref;
}
extern "C" {
    pub fn dwg_ent_get_next_entity(
        ent: *const dwg_obj_ent,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut dwg_object_ref;
}
extern "C" {
    pub fn dwg_ent_get_color_handle(
        ent: *const dwg_obj_ent,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut dwg_object_ref;
}
extern "C" {
    pub fn dwg_ent_get_layer(
        ent: *const dwg_obj_ent,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut dwg_object_ref;
}
extern "C" {
    pub fn dwg_ent_get_ltype(
        ent: *const dwg_obj_ent,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut dwg_object_ref;
}
extern "C" {
    pub fn dwg_ent_get_material(
        ent: *const dwg_obj_ent,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut dwg_object_ref;
}
extern "C" {
    pub fn dwg_ent_get_plotstyle(
        ent: *const dwg_obj_ent,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut dwg_object_ref;
}
extern "C" {
    pub fn dwg_ent_get_full_visualstyle(
        ent: *const dwg_obj_ent,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut dwg_object_ref;
}
extern "C" {
    pub fn dwg_ent_get_face_visualstyle(
        ent: *const dwg_obj_ent,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut dwg_object_ref;
}
extern "C" {
    pub fn dwg_ent_get_edge_visualstyle(
        ent: *const dwg_obj_ent,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut dwg_object_ref;
}
extern "C" {
    #[doc = "                    FUNCTIONS FOR DWG OBJECT                       *"]
    pub fn dwg_obj_obj_to_object(
        obj: *const dwg_obj_obj,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut dwg_object;
}
extern "C" {
    pub fn dwg_obj_get_objid(
        obj: *const dwg_obj_obj,
        error: *mut ::std::os::raw::c_int,
    ) -> BITCODE_BL;
}
extern "C" {
    pub fn dwg_obj_get_num_eed(
        obj: *const dwg_obj_obj,
        error: *mut ::std::os::raw::c_int,
    ) -> BITCODE_BL;
}
extern "C" {
    pub fn dwg_obj_get_eed(
        obj: *const dwg_obj_obj,
        index: BITCODE_BL,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut dwg_entity_eed;
}
extern "C" {
    pub fn dwg_obj_get_eed_data(
        obj: *const dwg_obj_obj,
        index: BITCODE_BL,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut dwg_entity_eed_data;
}
extern "C" {
    pub fn dwg_obj_get_ownerhandle(
        obj: *const dwg_obj_obj,
        error: *mut ::std::os::raw::c_int,
    ) -> BITCODE_H;
}
extern "C" {
    pub fn dwg_obj_get_num_reactors(
        obj: *const dwg_obj_obj,
        error: *mut ::std::os::raw::c_int,
    ) -> BITCODE_BL;
}
extern "C" {
    pub fn dwg_obj_get_reactors(
        obj: *const dwg_obj_obj,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut BITCODE_H;
}
extern "C" {
    pub fn dwg_obj_get_xdicobjhandle(
        obj: *const dwg_obj_obj,
        error: *mut ::std::os::raw::c_int,
    ) -> BITCODE_H;
}
extern "C" {
    pub fn dwg_obj_get_is_xdic_missing(
        obj: *const dwg_obj_obj,
        error: *mut ::std::os::raw::c_int,
    ) -> BITCODE_B;
}
extern "C" {
    pub fn dwg_obj_get_has_ds_binary_data(
        obj: *const dwg_obj_obj,
        error: *mut ::std::os::raw::c_int,
    ) -> BITCODE_B;
}
extern "C" {
    pub fn dwg_obj_get_handleref(
        obj: *const dwg_obj_obj,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut Dwg_Handle;
}
extern "C" {
    pub fn dwg_obj_generic_to_object(
        obj: *const ::std::os::raw::c_void,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut dwg_object;
}
extern "C" {
    pub fn dwg_obj_generic_handlevalue(_obj: *mut ::std::os::raw::c_void) -> BITCODE_RLL;
}
extern "C" {
    pub fn dwg_obj_generic_dwg(
        obj: *const ::std::os::raw::c_void,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut Dwg_Data;
}
extern "C" {
    pub fn dwg_obj_generic_parent(
        obj: *const ::std::os::raw::c_void,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut dwg_obj_obj;
}
extern "C" {
    pub fn dwg_get_object(dwg: *mut dwg_data, index: BITCODE_BL) -> *mut dwg_object;
}
extern "C" {
    pub fn dwg_object_get_bitsize(obj: *const dwg_object) -> BITCODE_RL;
}
extern "C" {
    pub fn dwg_object_get_index(
        obj: *const dwg_object,
        error: *mut ::std::os::raw::c_int,
    ) -> BITCODE_BL;
}
extern "C" {
    pub fn dwg_object_get_handle(
        obj: *mut dwg_object,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut dwg_handle;
}
extern "C" {
    pub fn dwg_object_to_object(
        obj: *mut dwg_object,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut dwg_obj_obj;
}
extern "C" {
    pub fn dwg_object_to_entity(
        obj: *mut dwg_object,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut dwg_obj_ent;
}
extern "C" {
    pub fn dwg_object_get_type(obj: *const dwg_object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_object_get_fixedtype(obj: *const dwg_object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_object_get_dxfname(obj: *const dwg_object) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dwg_ref_get_absref(
        ref_: *const dwg_object_ref,
        error: *mut ::std::os::raw::c_int,
    ) -> BITCODE_BL;
}
extern "C" {
    pub fn dwg_ref_get_object(
        ref_: *const dwg_object_ref,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut dwg_object;
}
extern "C" {
    pub fn dwg_absref_get_object(dwg: *const dwg_data, absref: BITCODE_BL) -> *mut dwg_object;
}
extern "C" {
    pub fn dwg_get_num_classes(dwg: *const dwg_data) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn dwg_get_class(dwg: *const dwg_data, index: ::std::os::raw::c_uint) -> *mut dwg_class;
}
extern "C" {
    #[doc = "                    FUNCTIONS FOR ADDING OBJECTS                  *"]
    pub fn dwg_new_Document(
        version: Dwg_Version_Type,
        imperial: ::std::os::raw::c_int,
        loglevel: ::std::os::raw::c_int,
    ) -> *mut Dwg_Data;
}
extern "C" {
    pub fn dwg_add_Document(
        dwg: *mut Dwg_Data,
        imperial: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_add_u8_input(dwg: *mut Dwg_Data, u8str: *const ::std::os::raw::c_char)
        -> BITCODE_TV;
}
extern "C" {
    pub fn dwg_add_class(
        dwg: *mut Dwg_Data,
        dxfname: *const ::std::os::raw::c_char,
        cppname: *const ::std::os::raw::c_char,
        appname: *const ::std::os::raw::c_char,
        is_entity: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_require_class(
        dwg: *mut Dwg_Data,
        dxfname: *const ::std::os::raw::c_char,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_insert_entity(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        obj: *mut Dwg_Object,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_add_entity_defaults(
        dwg: *mut Dwg_Data,
        ent: *mut Dwg_Object_Entity,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dwg_entity_owner(_ent: *const ::std::os::raw::c_void) -> *mut Dwg_Object_BLOCK_HEADER;
}
extern "C" {
    pub fn dwg_is_valid_tag(tag: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn dwg_add_TEXT(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        text_value: *const ::std::os::raw::c_char,
        ins_pt: *const dwg_point_3d,
        height: f64,
    ) -> *mut Dwg_Entity_TEXT;
}
extern "C" {
    pub fn dwg_add_Attribute(
        insert: *mut Dwg_Entity_INSERT,
        height: f64,
        flags: ::std::os::raw::c_int,
        prompt: *const ::std::os::raw::c_char,
        ins_pt: *const dwg_point_3d,
        tag: *const ::std::os::raw::c_char,
        text_value: *const ::std::os::raw::c_char,
    ) -> *mut Dwg_Entity_ATTRIB;
}
extern "C" {
    pub fn dwg_add_BLOCK(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        name: *const ::std::os::raw::c_char,
    ) -> *mut Dwg_Entity_BLOCK;
}
extern "C" {
    pub fn dwg_add_ENDBLK(blkhdr: *mut Dwg_Object_BLOCK_HEADER) -> *mut Dwg_Entity_ENDBLK;
}
extern "C" {
    pub fn dwg_add_SEQEND(owner: *mut dwg_ent_generic) -> *mut Dwg_Entity_SEQEND;
}
extern "C" {
    pub fn dwg_add_INSERT(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        ins_pt: *const dwg_point_3d,
        name: *const ::std::os::raw::c_char,
        xscale: f64,
        yscale: f64,
        zscale: f64,
        rotation: f64,
    ) -> *mut Dwg_Entity_INSERT;
}
extern "C" {
    pub fn dwg_add_MINSERT(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        ins_pt: *const dwg_point_3d,
        name: *const ::std::os::raw::c_char,
        xscale: f64,
        yscale: f64,
        zscale: f64,
        rotation: f64,
        num_rows: ::std::os::raw::c_int,
        num_cols: ::std::os::raw::c_int,
        row_spacing: f64,
        col_spacing: f64,
    ) -> *mut Dwg_Entity_MINSERT;
}
extern "C" {
    pub fn dwg_add_POLYLINE_2D(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        num_pts: ::std::os::raw::c_int,
        pts: *const dwg_point_2d,
    ) -> *mut Dwg_Entity_POLYLINE_2D;
}
extern "C" {
    pub fn dwg_add_POLYLINE_3D(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        num_pts: ::std::os::raw::c_int,
        pts: *const dwg_point_3d,
    ) -> *mut Dwg_Entity_POLYLINE_3D;
}
extern "C" {
    pub fn dwg_add_POLYLINE_PFACE(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        numverts: ::std::os::raw::c_uint,
        numfaces: ::std::os::raw::c_uint,
        verts: *const dwg_point_3d,
        faces: *const dwg_face,
    ) -> *mut Dwg_Entity_POLYLINE_PFACE;
}
extern "C" {
    pub fn dwg_add_POLYLINE_MESH(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        num_m_verts: ::std::os::raw::c_uint,
        num_n_verts: ::std::os::raw::c_uint,
        verts: *const dwg_point_3d,
    ) -> *mut Dwg_Entity_POLYLINE_MESH;
}
extern "C" {
    pub fn dwg_add_ARC(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        center: *const dwg_point_3d,
        radius: f64,
        start_angle: f64,
        end_angle: f64,
    ) -> *mut Dwg_Entity_ARC;
}
extern "C" {
    pub fn dwg_add_ATTDEF(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        height: f64,
        mode: ::std::os::raw::c_int,
        prompt: *const ::std::os::raw::c_char,
        ins_pt: *const dwg_point_3d,
        tag: *const ::std::os::raw::c_char,
        default_value: *const ::std::os::raw::c_char,
    ) -> *mut Dwg_Entity_ATTDEF;
}
extern "C" {
    pub fn dwg_add_ATTRIB(
        insert: *mut Dwg_Entity_INSERT,
        height: f64,
        flags: ::std::os::raw::c_int,
        ins_pt: *const dwg_point_3d,
        tag: *const ::std::os::raw::c_char,
        text_value: *const ::std::os::raw::c_char,
    ) -> *mut Dwg_Entity_ATTRIB;
}
extern "C" {
    pub fn dwg_add_CIRCLE(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        center: *const dwg_point_3d,
        radius: f64,
    ) -> *mut Dwg_Entity_CIRCLE;
}
extern "C" {
    pub fn dwg_add_LINE(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        start_pt: *const dwg_point_3d,
        end_pt: *const dwg_point_3d,
    ) -> *mut Dwg_Entity_LINE;
}
extern "C" {
    pub fn dwg_add_DIMENSION_ALIGNED(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        xline1_pt: *const dwg_point_3d,
        xline2_pt: *const dwg_point_3d,
        text_pt: *const dwg_point_3d,
    ) -> *mut Dwg_Entity_DIMENSION_ALIGNED;
}
extern "C" {
    pub fn dwg_add_DIMENSION_ANG2LN(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        center_pt: *const dwg_point_3d,
        xline1end_pt: *const dwg_point_3d,
        xline2end_pt: *const dwg_point_3d,
        text_pt: *const dwg_point_3d,
    ) -> *mut Dwg_Entity_DIMENSION_ANG2LN;
}
extern "C" {
    pub fn dwg_add_DIMENSION_ANG3PT(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        center_pt: *const dwg_point_3d,
        xline1_pt: *const dwg_point_3d,
        xline2_pt: *const dwg_point_3d,
        text_pt: *const dwg_point_3d,
    ) -> *mut Dwg_Entity_DIMENSION_ANG3PT;
}
extern "C" {
    pub fn dwg_add_DIMENSION_DIAMETER(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        chord_pt: *const dwg_point_3d,
        far_chord_pt: *const dwg_point_3d,
        leader_len: f64,
    ) -> *mut Dwg_Entity_DIMENSION_DIAMETER;
}
extern "C" {
    pub fn dwg_add_DIMENSION_ORDINATE(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        def_pt: *const dwg_point_3d,
        leader_endpt: *const dwg_point_3d,
        use_x_axis: bool,
    ) -> *mut Dwg_Entity_DIMENSION_ORDINATE;
}
extern "C" {
    pub fn dwg_add_DIMENSION_RADIUS(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        center_pt: *const dwg_point_3d,
        chord_pt: *const dwg_point_3d,
        leader_len: f64,
    ) -> *mut Dwg_Entity_DIMENSION_RADIUS;
}
extern "C" {
    pub fn dwg_add_DIMENSION_LINEAR(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        xline1_pt: *const dwg_point_3d,
        xline2_pt: *const dwg_point_3d,
        def_pt: *const dwg_point_3d,
        rotation_angle: f64,
    ) -> *mut Dwg_Entity_DIMENSION_LINEAR;
}
extern "C" {
    pub fn dwg_add_POINT(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        pt: *const dwg_point_3d,
    ) -> *mut Dwg_Entity_POINT;
}
extern "C" {
    pub fn dwg_add_3DFACE(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        pt1: *const dwg_point_3d,
        pt2: *const dwg_point_3d,
        pt3: *const dwg_point_3d,
        pt4: *const dwg_point_3d,
    ) -> *mut Dwg_Entity__3DFACE;
}
extern "C" {
    pub fn dwg_add_SOLID(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        pt1: *const dwg_point_3d,
        pt2: *const dwg_point_2d,
        pt3: *const dwg_point_2d,
        pt4: *const dwg_point_2d,
    ) -> *mut Dwg_Entity_SOLID;
}
extern "C" {
    pub fn dwg_add_TRACE(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        pt1: *const dwg_point_3d,
        pt2: *const dwg_point_2d,
        pt3: *const dwg_point_2d,
        pt4: *const dwg_point_2d,
    ) -> *mut Dwg_Entity_TRACE;
}
extern "C" {
    pub fn dwg_add_SHAPE(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        name: *const ::std::os::raw::c_char,
        ins_pt: *const dwg_point_3d,
        scale: f64,
        oblique_angle: f64,
    ) -> *mut Dwg_Entity_SHAPE;
}
extern "C" {
    pub fn dwg_add_VIEWPORT(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        name: *const ::std::os::raw::c_char,
    ) -> *mut Dwg_Entity_VIEWPORT;
}
extern "C" {
    pub fn dwg_add_ELLIPSE(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        center: *const dwg_point_3d,
        major_axis: f64,
        axis_ratio: f64,
    ) -> *mut Dwg_Entity_ELLIPSE;
}
extern "C" {
    pub fn dwg_add_SPLINE(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        num_fit_pts: ::std::os::raw::c_int,
        fit_pts: *const dwg_point_3d,
        beg_tan_vec: *const dwg_point_3d,
        end_tan_vec: *const dwg_point_3d,
    ) -> *mut Dwg_Entity_SPLINE;
}
extern "C" {
    pub fn dwg_add_REGION(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        acis_data: *const ::std::os::raw::c_char,
    ) -> *mut Dwg_Entity_REGION;
}
extern "C" {
    pub fn dwg_add_3DSOLID(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        acis_data: *const ::std::os::raw::c_char,
    ) -> *mut Dwg_Entity__3DSOLID;
}
extern "C" {
    pub fn dwg_add_BODY(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        acis_data: *const ::std::os::raw::c_char,
    ) -> *mut Dwg_Entity_BODY;
}
extern "C" {
    pub fn dwg_add_RAY(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        point: *const dwg_point_3d,
        vector: *const dwg_point_3d,
    ) -> *mut Dwg_Entity_RAY;
}
extern "C" {
    pub fn dwg_add_XLINE(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        point: *const dwg_point_3d,
        vector: *const dwg_point_3d,
    ) -> *mut Dwg_Entity_XLINE;
}
extern "C" {
    pub fn dwg_add_DICTIONARY(
        dwg: *mut Dwg_Data,
        name: *const ::std::os::raw::c_char,
        text: *const ::std::os::raw::c_char,
        absolute_ref: BITCODE_RLL,
    ) -> *mut Dwg_Object_DICTIONARY;
}
extern "C" {
    pub fn dwg_add_DICTIONARY_item(
        _obj: *mut Dwg_Object_DICTIONARY,
        text: *const ::std::os::raw::c_char,
        absolute_ref: BITCODE_RLL,
    ) -> *mut Dwg_Object_DICTIONARY;
}
extern "C" {
    pub fn dwg_add_DICTIONARYWDFLT(
        dwg: *mut Dwg_Data,
        name: *const ::std::os::raw::c_char,
        text: *const ::std::os::raw::c_char,
        absolute_ref: BITCODE_RLL,
    ) -> *mut Dwg_Object_DICTIONARYWDFLT;
}
extern "C" {
    pub fn dwg_add_OLE2FRAME(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        pt1: *const dwg_point_3d,
        pt2: *const dwg_point_3d,
    ) -> *mut Dwg_Entity_OLE2FRAME;
}
extern "C" {
    pub fn dwg_add_MTEXT(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        ins_pt: *const dwg_point_3d,
        rect_width: f64,
        text_value: *const ::std::os::raw::c_char,
    ) -> *mut Dwg_Entity_MTEXT;
}
extern "C" {
    pub fn dwg_add_LEADER(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        num_points: ::std::os::raw::c_uint,
        points: *const dwg_point_3d,
        associated_annotation: *const Dwg_Entity_MTEXT,
        type_: ::std::os::raw::c_uint,
    ) -> *mut Dwg_Entity_LEADER;
}
extern "C" {
    pub fn dwg_add_TOLERANCE(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        text_value: *const ::std::os::raw::c_char,
        ins_pt: *const dwg_point_3d,
        x_direction: *const dwg_point_3d,
    ) -> *mut Dwg_Entity_TOLERANCE;
}
extern "C" {
    pub fn dwg_add_MLINE(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        num_verts: ::std::os::raw::c_uint,
        verts: *const dwg_point_3d,
    ) -> *mut Dwg_Entity_MLINE;
}
extern "C" {
    pub fn dwg_add_LWPOLYLINE(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        num_pts2d: ::std::os::raw::c_int,
        pts2d: *const dwg_point_2d,
    ) -> *mut Dwg_Entity_LWPOLYLINE;
}
extern "C" {
    pub fn dwg_add_HATCH(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        pattern_type: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        is_associative: bool,
        num_paths: ::std::os::raw::c_uint,
        pathobjs: *mut *const Dwg_Object,
    ) -> *mut Dwg_Entity_HATCH;
}
extern "C" {
    pub fn dwg_add_XRECORD(
        dict: *mut Dwg_Object_DICTIONARY,
        keyword: *const ::std::os::raw::c_char,
    ) -> *mut Dwg_Object_XRECORD;
}
extern "C" {
    pub fn dwg_add_XRECORD_bool(
        _obj: *mut Dwg_Object_XRECORD,
        dxf: ::std::os::raw::c_short,
        value: BITCODE_B,
    ) -> *mut Dwg_Object_XRECORD;
}
extern "C" {
    pub fn dwg_add_XRECORD_int8(
        _obj: *mut Dwg_Object_XRECORD,
        dxf: ::std::os::raw::c_short,
        value: BITCODE_RC,
    ) -> *mut Dwg_Object_XRECORD;
}
extern "C" {
    pub fn dwg_add_XRECORD_int16(
        _obj: *mut Dwg_Object_XRECORD,
        dxf: ::std::os::raw::c_short,
        value: BITCODE_BS,
    ) -> *mut Dwg_Object_XRECORD;
}
extern "C" {
    pub fn dwg_add_XRECORD_int32(
        _obj: *mut Dwg_Object_XRECORD,
        dxf: ::std::os::raw::c_short,
        value: BITCODE_BL,
    ) -> *mut Dwg_Object_XRECORD;
}
extern "C" {
    pub fn dwg_add_XRECORD_int64(
        _obj: *mut Dwg_Object_XRECORD,
        dxf: ::std::os::raw::c_short,
        value: BITCODE_BLL,
    ) -> *mut Dwg_Object_XRECORD;
}
extern "C" {
    pub fn dwg_add_XRECORD_real(
        _obj: *mut Dwg_Object_XRECORD,
        dxf: ::std::os::raw::c_short,
        value: BITCODE_BD,
    ) -> *mut Dwg_Object_XRECORD;
}
extern "C" {
    pub fn dwg_add_XRECORD_pointd3d(
        _obj: *mut Dwg_Object_XRECORD,
        dxf: ::std::os::raw::c_short,
        pt: *const BITCODE_3DPOINT,
    ) -> *mut Dwg_Object_XRECORD;
}
extern "C" {
    pub fn dwg_add_XRECORD_binary(
        _obj: *mut Dwg_Object_XRECORD,
        dxf: ::std::os::raw::c_short,
        size: ::std::os::raw::c_int,
        data: *const BITCODE_RC,
    ) -> *mut Dwg_Object_XRECORD;
}
extern "C" {
    pub fn dwg_add_XRECORD_string(
        _obj: *mut Dwg_Object_XRECORD,
        dxf: ::std::os::raw::c_short,
        len: BITCODE_BS,
        str_: *const ::std::os::raw::c_char,
    ) -> *mut Dwg_Object_XRECORD;
}
extern "C" {
    pub fn dwg_add_XRECORD_handle(
        _obj: *mut Dwg_Object_XRECORD,
        dxf: ::std::os::raw::c_short,
        hdl: Dwg_Handle,
    ) -> *mut Dwg_Object_XRECORD;
}
extern "C" {
    pub fn dwg_add_PLACEHOLDER(dwg: *mut Dwg_Data) -> *mut Dwg_Object_PLACEHOLDER;
}
extern "C" {
    pub fn dwg_add_VBA_PROJECT(
        dwg: *mut Dwg_Data,
        size: BITCODE_BL,
        data: *const BITCODE_RC,
    ) -> *mut Dwg_Object_VBA_PROJECT;
}
extern "C" {
    pub fn dwg_add_LAYOUT(
        vp: *mut Dwg_Object,
        name: *const ::std::os::raw::c_char,
        canonical_media_name: *const ::std::os::raw::c_char,
    ) -> *mut Dwg_Object_LAYOUT;
}
extern "C" {
    pub fn dwg_add_IMAGE(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        file_path: *const ::std::os::raw::c_char,
        ins_pt: *const dwg_point_3d,
        scale_factor: f64,
        rotation_angle: f64,
    ) -> *mut Dwg_Entity_IMAGE;
}
extern "C" {
    pub fn dwg_add_LARGE_RADIAL_DIMENSION(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        center_pt: *const dwg_point_3d,
        first_arc_pt: *const dwg_point_3d,
        ovr_center: *const dwg_point_3d,
        jog_point: *const dwg_point_3d,
        leader_len: f64,
    ) -> *mut Dwg_Entity_LARGE_RADIAL_DIMENSION;
}
extern "C" {
    pub fn dwg_add_PDFUNDERLAY(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        filename: *const ::std::os::raw::c_char,
        ins_pt: *const dwg_point_3d,
        scale_factor: f64,
        rotation_angle: f64,
    ) -> *mut Dwg_Entity_PDFUNDERLAY;
}
extern "C" {
    pub fn dwg_add_ACSH_BOX_CLASS(
        evalgraph: *mut Dwg_Object_EVALUATION_GRAPH,
        origin_pt: *const dwg_point_3d,
        normal: *const dwg_point_3d,
        length: f64,
        width: f64,
        height: f64,
    ) -> *mut Dwg_Object_ACSH_BOX_CLASS;
}
extern "C" {
    pub fn dwg_add_ACSH_CHAMFER_CLASS(
        evalgraph: *mut Dwg_Object_EVALUATION_GRAPH,
        origin_pt: *const dwg_point_3d,
        normal: *const dwg_point_3d,
        bl92: ::std::os::raw::c_int,
        base_dist: f64,
        other_dist: f64,
        num_edges: ::std::os::raw::c_int,
        edges: *const i32,
        bl95: ::std::os::raw::c_int,
    ) -> *mut Dwg_Object_ACSH_CHAMFER_CLASS;
}
extern "C" {
    pub fn dwg_add_ACSH_CONE_CLASS(
        evalgraph: *mut Dwg_Object_EVALUATION_GRAPH,
        origin_pt: *const dwg_point_3d,
        normal: *const dwg_point_3d,
        height: f64,
        major_radius: f64,
        minor_radius: f64,
        x_radius: f64,
    ) -> *mut Dwg_Object_ACSH_CONE_CLASS;
}
extern "C" {
    pub fn dwg_add_ACSH_CYLINDER_CLASS(
        evalgraph: *mut Dwg_Object_EVALUATION_GRAPH,
        origin_pt: *const dwg_point_3d,
        normal: *const dwg_point_3d,
        height: f64,
        major_radius: f64,
        minor_radius: f64,
        x_radius: f64,
    ) -> *mut Dwg_Object_ACSH_CYLINDER_CLASS;
}
extern "C" {
    pub fn dwg_add_ACSH_PYRAMID_CLASS(
        evalgraph: *mut Dwg_Object_EVALUATION_GRAPH,
        origin_pt: *const dwg_point_3d,
        normal: *const dwg_point_3d,
        height: f64,
        sides: ::std::os::raw::c_int,
        radius: f64,
        topradius: f64,
    ) -> *mut Dwg_Object_ACSH_PYRAMID_CLASS;
}
extern "C" {
    pub fn dwg_add_ACSH_SPHERE_CLASS(
        evalgraph: *mut Dwg_Object_EVALUATION_GRAPH,
        origin_pt: *const dwg_point_3d,
        normal: *const dwg_point_3d,
        radius: f64,
    ) -> *mut Dwg_Object_ACSH_SPHERE_CLASS;
}
extern "C" {
    pub fn dwg_add_ACSH_TORUS_CLASS(
        evalgraph: *mut Dwg_Object_EVALUATION_GRAPH,
        origin_pt: *const dwg_point_3d,
        normal: *const dwg_point_3d,
        major_radius: f64,
        minor_radius: f64,
    ) -> *mut Dwg_Object_ACSH_TORUS_CLASS;
}
extern "C" {
    pub fn dwg_add_ACSH_WEDGE_CLASS(
        evalgraph: *mut Dwg_Object_EVALUATION_GRAPH,
        origin_pt: *const dwg_point_3d,
        normal: *const dwg_point_3d,
        length: f64,
        width: f64,
        height: f64,
    ) -> *mut Dwg_Object_ACSH_WEDGE_CLASS;
}
extern "C" {
    pub fn dwg_add_EVALUATION_GRAPH(
        dwg: *mut Dwg_Data,
        has_graph: ::std::os::raw::c_int,
        nodeid: ::std::os::raw::c_int,
        num_evalexpr: ::std::os::raw::c_uint,
        evalexpr: *const BITCODE_H,
    ) -> *mut Dwg_Object_EVALUATION_GRAPH;
}
extern "C" {
    pub fn dwg_add_ACSH_HISTORY_CLASS(
        region: *mut Dwg_Entity__3DSOLID,
        h_nodeid: ::std::os::raw::c_int,
    ) -> *mut Dwg_Object_ACSH_HISTORY_CLASS;
}
extern "C" {
    pub fn dwg_add_BOX(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        origin_pt: *const dwg_point_3d,
        normal: *const dwg_point_3d,
        length: f64,
        width: f64,
        height: f64,
    ) -> *mut Dwg_Entity__3DSOLID;
}
extern "C" {
    pub fn dwg_add_CONE(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        origin_pt: *const dwg_point_3d,
        normal: *const dwg_point_3d,
        height: f64,
        major_radius: f64,
        minor_radius: f64,
        x_radius: f64,
    ) -> *mut Dwg_Entity__3DSOLID;
}
extern "C" {
    pub fn dwg_add_CYLINDER(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        origin_pt: *const dwg_point_3d,
        normal: *const dwg_point_3d,
        height: f64,
        major_radius: f64,
        minor_radius: f64,
        x_radius: f64,
    ) -> *mut Dwg_Entity__3DSOLID;
}
extern "C" {
    pub fn dwg_add_EXTRUDED_SOLID(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        profile: *const Dwg_Object,
        height: f64,
        taper_angle: f64,
    ) -> *mut Dwg_Entity__3DSOLID;
}
extern "C" {
    pub fn dwg_add_EXTRUDED_PATH(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        profile: *const Dwg_Object,
        height: f64,
        taper_angle: f64,
    ) -> *mut Dwg_Entity__3DSOLID;
}
extern "C" {
    pub fn dwg_add_PYRAMID(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        origin_pt: *const dwg_point_3d,
        normal: *const dwg_point_3d,
        height: f64,
        sides: ::std::os::raw::c_int,
        radius: f64,
        topradius: f64,
    ) -> *mut Dwg_Entity__3DSOLID;
}
extern "C" {
    pub fn dwg_add_REVOLVED_SOLID(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        profile: *const Dwg_Object,
        axis_pt: *const dwg_point_3d,
        axis_dir: *const dwg_point_3d,
        angle: f64,
    ) -> *mut Dwg_Entity__3DSOLID;
}
extern "C" {
    pub fn dwg_add_SPHERE(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        origin_pt: *const dwg_point_3d,
        normal: *const dwg_point_3d,
        radius: f64,
    ) -> *mut Dwg_Entity__3DSOLID;
}
extern "C" {
    pub fn dwg_add_TORUS(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        origin_pt: *const dwg_point_3d,
        normal: *const dwg_point_3d,
        torus_radius: f64,
        tube_radius: f64,
    ) -> *mut Dwg_Entity__3DSOLID;
}
extern "C" {
    pub fn dwg_add_WEDGE(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
        origin_pt: *const dwg_point_3d,
        normal: *const dwg_point_3d,
        length: f64,
        width: f64,
        height: f64,
    ) -> *mut Dwg_Entity__3DSOLID;
}
extern "C" {
    pub fn dwg_add_BLOCK_CONTROL(
        dwg: *mut Dwg_Data,
        ms: ::std::os::raw::c_uint,
        ps: ::std::os::raw::c_uint,
    ) -> *mut Dwg_Object_BLOCK_CONTROL;
}
extern "C" {
    pub fn dwg_add_BLOCK_HEADER(
        dwg: *mut Dwg_Data,
        name: *const ::std::os::raw::c_char,
    ) -> *mut Dwg_Object_BLOCK_HEADER;
}
extern "C" {
    pub fn dwg_add_UCS(
        dwg: *mut Dwg_Data,
        origin: *const dwg_point_3d,
        x_axis: *const dwg_point_3d,
        y_axis: *const dwg_point_3d,
        name: *const ::std::os::raw::c_char,
    ) -> *mut Dwg_Object_UCS;
}
extern "C" {
    pub fn dwg_add_LAYER(
        dwg: *mut Dwg_Data,
        name: *const ::std::os::raw::c_char,
    ) -> *mut Dwg_Object_LAYER;
}
extern "C" {
    pub fn dwg_add_STYLE(
        dwg: *mut Dwg_Data,
        name: *const ::std::os::raw::c_char,
    ) -> *mut Dwg_Object_STYLE;
}
extern "C" {
    pub fn dwg_add_LTYPE(
        dwg: *mut Dwg_Data,
        name: *const ::std::os::raw::c_char,
    ) -> *mut Dwg_Object_LTYPE;
}
extern "C" {
    pub fn dwg_add_VIEW(
        dwg: *mut Dwg_Data,
        name: *const ::std::os::raw::c_char,
    ) -> *mut Dwg_Object_VIEW;
}
extern "C" {
    pub fn dwg_add_DIMSTYLE(
        dwg: *mut Dwg_Data,
        name: *const ::std::os::raw::c_char,
    ) -> *mut Dwg_Object_DIMSTYLE;
}
extern "C" {
    pub fn dwg_add_VPORT(
        dwg: *mut Dwg_Data,
        name: *const ::std::os::raw::c_char,
    ) -> *mut Dwg_Object_VPORT;
}
extern "C" {
    pub fn dwg_add_VX(
        dwg: *mut Dwg_Data,
        name: *const ::std::os::raw::c_char,
    ) -> *mut Dwg_Object_VX_TABLE_RECORD;
}
extern "C" {
    pub fn dwg_add_APPID(
        dwg: *mut Dwg_Data,
        name: *const ::std::os::raw::c_char,
    ) -> *mut Dwg_Object_APPID;
}
extern "C" {
    pub fn dwg_add_GROUP(
        dwg: *mut Dwg_Data,
        name: *const ::std::os::raw::c_char,
    ) -> *mut Dwg_Object_GROUP;
}
extern "C" {
    pub fn dwg_add_MLINESTYLE(
        dwg: *mut Dwg_Data,
        name: *const ::std::os::raw::c_char,
    ) -> *mut Dwg_Object_MLINESTYLE;
}
extern "C" {
    pub fn dwg_add_PROXY_OBJECT(
        dwg: *mut Dwg_Data,
        name: *mut ::std::os::raw::c_char,
        key: *mut ::std::os::raw::c_char,
    ) -> *mut Dwg_Object_PROXY_OBJECT;
}
extern "C" {
    pub fn dwg_add_PROXY_ENTITY(
        blkhdr: *mut Dwg_Object_BLOCK_HEADER,
    ) -> *mut Dwg_Entity_PROXY_ENTITY;
}
extern "C" {
    pub fn dwg_add_LAYERFILTER(dwg: *mut Dwg_Data) -> *mut Dwg_Object_LAYERFILTER;
}
extern "C" {
    pub fn dwg_add_LAYER_INDEX(dwg: *mut Dwg_Data) -> *mut Dwg_Object_LAYER_INDEX;
}
extern "C" {
    pub fn dwg_add_SPATIAL_FILTER(insert: *mut Dwg_Entity_INSERT)
        -> *mut Dwg_Object_SPATIAL_FILTER;
}
extern "C" {
    pub fn dwg_add_SPATIAL_INDEX(dwg: *mut Dwg_Data) -> *mut Dwg_Object_SPATIAL_INDEX;
}
extern "C" {
    pub fn dwg_add_WIPEOUTVARIABLES(dwg: *mut Dwg_Data) -> *mut Dwg_Object_WIPEOUTVARIABLES;
}
extern "C" {
    pub fn dwg_geom_angle_normalize(angle: f64) -> f64;
}
extern "C" {
    pub fn dwg_geom_normalize(out: *mut dwg_point_3d, pt: dwg_point_3d) -> *mut dwg_point_3d;
}
extern "C" {
    pub fn dwg_geom_cross(
        out: *mut dwg_point_3d,
        pt1: dwg_point_3d,
        pt2: dwg_point_3d,
    ) -> *mut dwg_point_3d;
}
extern "C" {
    pub fn dwg_geom_transform_OCS(
        out: *mut dwg_point_3d,
        pt: dwg_point_3d,
        ext: dwg_point_3d,
    ) -> *mut dwg_point_3d;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
#[doc = "< map of all handles"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _inthash {
    pub _address: u8,
}
